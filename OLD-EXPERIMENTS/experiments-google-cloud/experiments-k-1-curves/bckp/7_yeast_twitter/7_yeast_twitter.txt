Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0096056461334229
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022817;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.537956368094408;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.34729005458777273;  // std dev = 1.654, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783623;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32157774507480125;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926105;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.28328795153397585;  // std dev = 2.98e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.08e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1688300034391243;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109168;  // std dev = 3.73e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16970628943741214;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14383128226176883;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420271;  // std dev = 1.32e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12401812559021207;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning 1.7571508884429932
Parameter learned model CLL:-0.086721 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.984, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.34e-08, 41, 0], 'false,false': [2.63e-09, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [1.83e-08, 45, 0], 'false,false,false': [1.49e-08, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.654, 3, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [3.33e-08, 56, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.73e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.98e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.73e-08, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 54, 0], 'false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.32e-09, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 53, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.61e-09, 10, 0]}]
{'': [0.030273437500001332, 6.344131569286608e-17], 'false': [4.603363760640893e-17, 5.046468293750712e-18], 'false,true': [nan, 4.603363760640893e-17]}
{'': [0.0302734375000005, -1.734723475976807e-17], 'false': [nan, -1.734723475976807e-17]}
{'': [0.030273437499999722, 3.928481471750554e-17], 'false': [nan, 3.928481471750554e-17], 'false,false': [7.401486830834377e-18, 1.1102230246251566e-17]}
{'': [0.0804498269896193, 3.027880976250427e-17], 'false': [nan, 3.027880976250427e-17], 'false,false': [1.9825411154020653e-17, 1.3877787807814458e-18], 'false,false,false': [nan, 1.3877787807814458e-18]}
{'': [0.030273437499999944, -5.4601132358614255e-18], 'false': [nan, -5.4601132358614255e-18], 'false,false': [nan, -5.4601132358614255e-18]}
{'': [2.865091676452017e-17, 4.704334850106595e-18], 'false': [nan, 4.704334850106595e-18], 'false,false': [nan, 4.704334850106595e-18]}
{'': [0.056932966023875126, 1.9546180011006276e-17], 'false': [nan, 1.9546180011006276e-17], 'false,false': [nan, 1.9546180011006276e-17], 'false,false,false': [nan, 1.9546180011006276e-17]}
{'': [0.03027343749999998, -3.7007434154171884e-18], 'true': [0.03027343749999998, nan], 'false': [1.02798428206033e-18, -1.32169407693471e-18]}
{'': [0.030273437499999962, 1.290957005378089e-18], 'false': [nan, 1.290957005378089e-18], 'false,false': [nan, 1.290957005378089e-18]}
{'': [0.030273437499999993, -2.64338815386942e-18], 'false': [-3.142140635731575e-18, 1.3877787807814458e-18], 'false,false': [nan, 1.3877787807814458e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 10.479172229766846
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.05280674554428788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839152;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.5809208496661581;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.43883141136869175;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4175135841583102;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.029514749651851264;  // std dev = 0.887, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3105873955218983;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926104;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.2928895192261271;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.08518475138839682;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839685;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2097577156325357;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2097577156325357;  // std dev = 5.27e-09, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.009757715632535668;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.24553038558720913;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.2073552782561973;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20975771563253573;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1719433022020188;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19779540787779748;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.23174710393221745;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1750991521830172;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14821958323393783;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16867189271362285;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.17203907995214554;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1691932920557773;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15207898293362346;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13046519428105424;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1463420149049545;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.14927363471524022;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14674087557719942;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1334879294965178;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
Inference time using transfer learning 3.724478244781494
Refined model CLL: -0.086753


******************************************
Best model found
******************************************
Results 

CLL : -0.092579 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.479172229766846 

Total Inference Time : 1.7506356239318848 

Total revision time: 14.38512659072876
Best scored revision CLL: -0.086721


Results 

CLL : -0.092579 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.405373811721802 

Total Inference Time : 1.7506356239318848 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2325778007507324
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.706792880988529;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839127;  // std dev = 2.98e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5162518414506878;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360624;  // std dev = 7.45e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4181832134864781;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3042297276314268;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926075;  // std dev = 6.84e-09, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27135996984479904;  // std dev = 1.33e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2211299715526462;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15414365966006766;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 3.73e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.07324622576333707;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16323297879798615;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.19e-09, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1421434466808051;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.36e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
Inference time using transfer learning 1.856309175491333
Parameter learned model CLL:-0.08652 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.992, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [8.16e-08, 87, 0], 'false,false': [4.93e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 109, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-08, 99, 0], 'false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [4.83e-08, 92, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.84e-09, 142, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.33e-07, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 131, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [8.43e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.96e-08, 103, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [3.73e-08, 79, 0], 'false,false': [1.05e-08, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.19e-09, 131, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 62], 'false,true': [2.36e-08, 92, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 36, 0]}]
{'': [0.015621063240110127, 3.8616453030440226e-17], 'false': [7.656710514656253e-17, 2.3790493384824782e-17], 'false,true': [nan, 7.656710514656253e-17]}
{'': [0.015621063240111931, 8.148425868808489e-18], 'false': [nan, 8.148425868808489e-18]}
{'': [0.04402366863905288, 7.401486830834377e-17], 'false': [nan, 7.401486830834377e-17], 'false,false': [5.607186993056347e-17, -5.693451408334136e-18]}
{'': [0.015621063240110466, -1.1686558153949016e-17], 'false': [nan, -1.1686558153949016e-17], 'false,false': [2.5342047301226398e-17, -1.261617073437678e-18], 'false,false,false': [nan, -1.261617073437678e-18]}
{'': [0.030273437500000236, 4.6910832026415064e-17], 'false': [nan, 4.6910832026415064e-17], 'false,false': [nan, 4.6910832026415064e-17]}
{'': [2.865091676452017e-16, 3.559493666737143e-17], 'false': [nan, 3.559493666737143e-17], 'false,false': [nan, 3.559493666737143e-17]}
{'': [1.1460366705808067e-16, 3.4492365813597093e-17], 'false': [nan, 3.4492365813597093e-17], 'false,false': [nan, 3.4492365813597093e-17], 'false,false,false': [nan, 3.4492365813597093e-17]}
{'': [0.03027343749999987, 4.9124912594033475e-18], 'true': [0.03027343749999987, nan], 'false': [1.756682000989172e-17, 3.2653618371328133e-18]}
{'': [-1.4325458382260084e-17, 2.7119951746568708e-17], 'false': [nan, 2.7119951746568708e-17], 'false,false': [nan, 2.7119951746568708e-17]}
{'': [0.0, 3.469446951953614e-18], 'false': [6.033820786006285e-18, -4.625929269271485e-18], 'false,false': [nan, -4.625929269271485e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 17.838896989822388
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.7194734122109542;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109542;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839127;  // std dev = 1.49e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.5553664367462842;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3553664367462842;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.11231637819360628;  // std dev = 6.18e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.11231637819360646;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.41751358415831;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.017513584158309746;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.4175135841583098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.45037234028581025;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.41751358415830986;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( tweets(A, I) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3207118471601494;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.012621486173183927;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return 0.3901234143419138;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.3376567297426234;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32071184716014955;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, I) )
%   | then if ( follows(A, J) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.09269127618926101;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, D), follows(F, E) )
%   | | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.25517224256948906;  // std dev = 4.47e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.25247659101714165;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2972857874156797;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.09001012252923175;  // std dev = 0.817, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.11231509971234643;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.26284597973940965;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.08518475138839679;  // std dev = 2.08e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.08518475138839685;  // std dev = 2.63e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.0851847513883969;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.20980562769254257;  // std dev = 0.000732, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.20417936362522007;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24009729003122038;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.25485646351024827;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.23441820948012573;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2152016244210623;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109169;  // std dev = 4.06e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.17662842073719892;  // std dev = 0.013, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.18749552228734673;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.20562032463049978;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.17441255043562523;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.1949835486491175;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17519290992868786;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.020848962327226106;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.1527982409062421;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.1804186653216373;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16335509797541656;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1758622615817814;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1540857152410989;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16814667626000213;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420265;  // std dev = 4.56e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.0684269778442027;  // std dev = 1.86e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.13361298055978035;  // std dev = 0.009, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.14417010487569526;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.16037957616773754;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1398545767281621;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.1498301830671734;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.17421924919240872;  // std dev = 1.114, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.13094814325387072;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1409159835338897;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
Inference time using transfer learning 3.5596976280212402
Refined model CLL: -0.085095


******************************************
Best model found
******************************************
Results 

CLL : -0.093332 

AUC ROC : 0.992773 

AUC PR : 0.363375 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.838896989822388 

Total Inference Time : 2.6421608924865723 

Total revision time: 23.125334978103638
Best scored revision CLL: -0.085095


Results 

CLL : -0.093332 

AUC ROC : 0.992773 

AUC PR : 0.363375 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.14558219909668 

Total Inference Time : 2.6421608924865723 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4551408290863037
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6903655333137714;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839158;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5545200063978435;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360617;  // std dev = 1.01e-07, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3961673447455518;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783641;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 1.97e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3237144032765578;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926064;  // std dev = 6.18e-09, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24548166229511284;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18012269448298587;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109151;  // std dev = 8.16e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1606235035992963;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333735;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return -0.07324622576333707;  // std dev = 1.49e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15755225771884437;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.67e-09, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1262320982007173;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
Inference time using transfer learning 1.8474981784820557
Parameter learned model CLL:-0.088415 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.995, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 133, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 176, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [1.01e-07, 137, 0], 'false,false,false': [2.79e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 132, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.97e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 175, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 189, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.16e-08, 150, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.705, 3, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 160, 0], 'false,false': [1.49e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 175, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 133, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 43, 0]}]
{'': [0.010525124490720615, -1.9709577291098283e-16], 'false': [-5.0085249231210067e-17, 4.9343245538895844e-17], 'false,true': [nan, -5.0085249231210067e-17]}
{'': [0.030273437499998668, -3.027880976250427e-17], 'false': [nan, -3.027880976250427e-17]}
{'': [0.010525124490718425, -7.201446646217232e-18], 'false': [nan, -7.201446646217232e-18], 'false,false': [7.455512282154335e-17, 1.61907524424502e-17]}
{'': [0.03027343750000015, -8.264993627765054e-17], 'false': [nan, -8.264993627765054e-17], 'false,false': [-4.0371746350005693e-17, 8.0953762212251e-18], 'false,false,false': [nan, 8.0953762212251e-18]}
{'': [0.010525124490720218, 3.933361572957697e-17], 'false': [nan, 3.933361572957697e-17], 'false,false': [nan, 3.933361572957697e-17]}
{'': [0.0206094182825484, 3.407033620542808e-17], 'false': [nan, 3.407033620542808e-17], 'false,false': [nan, 3.407033620542808e-17]}
{'': [0.039536613880327455, 4.4408920985006264e-17], 'false': [nan, 4.4408920985006264e-17], 'false,false': [nan, 4.4408920985006264e-17], 'false,false,false': [nan, 4.4408920985006264e-17]}
{'': [0.03027343749999996, -4.612520778635916e-17], 'true': [0.03027343749999996, nan], 'false': [-3.191891195797325e-17, 4.724353296277262e-18]}
{'': [0.010525124490719883, 3.2989484160290367e-17], 'false': [nan, 3.2989484160290367e-17], 'false,false': [nan, 3.2989484160290367e-17]}
{'': [0.02060941828254845, -5.046468293750712e-18], 'false': [-1.419082061550952e-17, -4.518349518823312e-18], 'false,false': [nan, -4.518349518823312e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 33.03981113433838
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.7278056532693119;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.6194734122109543;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.7328806895712674;  // std dev = 0.088, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839172;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, G) )
%   | | | then return 0.5624035979826857;  // std dev = 0.036, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.5749917620116461;  // std dev = 0.083, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(H, D), recursion_accounttype(D, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5545381542824226;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.30205330689083665;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4690087962694144;  // std dev = 0.965, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6159463602843244;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5545381542824227;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360657;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.4230601125606178;  // std dev = 0.034, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.442277277985551;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.4268900462864283;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4160300733151282;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.47674605487128413;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45661749341798236;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4160863335243314;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.417715032884977;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783652;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, E) )
%   | | | then return 0.2590956731911024;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3262639179354075;  // std dev = 0.037, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.020531517704744224;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18027994027345418;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(A, H) )
%   | | | then return 0.3524473931229697;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3220136243353149;  // std dev = 0.052, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.24385500739692997;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3284531803379108;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09269127618926062;  // std dev = 6.18e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.2699340771690018;  // std dev = 0.019, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.26009737486410456;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.1813661425401228;  // std dev = 1.002, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2632345754866338;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2567956312180437;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2995670668151637;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.25463978425529593;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2631698560550357;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839678;  // std dev = 5.19e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.21672388194212977;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.21975458763213382;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20399821889688016;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21080139197763634;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2799075898193851;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.22566749737817202;  // std dev = 0.075, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2069025081185817;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(I, A) )
%   | then return -0.07877675473109153;  // std dev = 6.04e-09, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.14387242314832455;  // std dev = 0.986, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.19841812747727902;  // std dev = 0.158, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.5568066379077358;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.20221279185009633;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17876192452150658;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1810477808467614;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.17498948144700938;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, K) )
%   | then return -0.07324622576333681;  // std dev = 6.32e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.12926839021286263;  // std dev = 1.410, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return -0.056178318090556484;  // std dev = 0.772, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.18051251691868694;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.15201044835350203;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1681879351928819;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.15608080038800667;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1511441903840214;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, J) )
%   | then return -0.06842697784420262;  // std dev = 5.02e-09, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.06842697784420265;  // std dev = 2.46e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.14636210995916715;  // std dev = 0.095, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.20456092372836965;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return -0.11276186287942241;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1416527690324866;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.0423928946915422;  // std dev = 0.288, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.08336074435885607;  // std dev = 0.956, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.13584515135298997;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
Inference time using transfer learning 5.970426797866821
Refined model CLL: -0.085805


******************************************
Best model found
******************************************
Results 

CLL : -0.090903 

AUC ROC : 0.993396 

AUC PR : 0.387666 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 33.03981113433838 

Total Inference Time : 4.361053705215454 

Total revision time: 40.57083010673523
Best scored revision CLL: -0.085805


Results 

CLL : -0.090903 

AUC ROC : 0.993396 

AUC PR : 0.387666 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.59107732772827 

Total Inference Time : 4.361053705215454 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7069237232208252
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456642;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6825398287126307;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5445279549880552;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return -0.11231637819360625;  // std dev = 5.27e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4246442880716172;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783616;  // std dev = 5.05e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3162852944009977;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926047;  // std dev = 9.03e-09, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23413359080826868;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2209718089995141;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 8.82e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16105562188433595;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.77e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.07324622576333707;  // std dev = 1.67e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1526468904568648;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.35e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13232555479918556;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
Inference time using transfer learning 1.8542780876159668
Parameter learned model CLL:-0.087743 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.392, 6, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 167, 0], 'false,false': [7.21e-09, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 188, 0], 'false,false,false': [5.27e-08, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 189, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.05e-08, 72, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.03e-09, 275, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 262, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.82e-08, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.969, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [9.77e-08, 172, 0], 'false,false': [1.67e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 227, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 202, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 63, 0]}]
{'': [0.044023668639057364, -2.354705577809634e-16], 'false': [-1.6753066000331702e-16, 5.3198186596622086e-17], 'false,true': [nan, -1.6753066000331702e-16]}
{'': [0.04402366863905026, -7.372231942174953e-17], 'false': [nan, -7.372231942174953e-17]}
{'': [0.030273437500000056, -9.639145640156398e-17], 'false': [nan, -9.639145640156398e-17], 'false,false': [-2.598394312952494e-17, 3.9650822308041306e-17]}
{'': [0.015621063240111959, -6.125368411725002e-17], 'false': [nan, -6.125368411725002e-17], 'false,false': [-9.281229518030409e-17, 3.5465457731081387e-17], 'false,false,false': [nan, 3.5465457731081387e-17]}
{'': [0.02306404612809181, 8.235836255401161e-17], 'false': [nan, 8.235836255401161e-17], 'false,false': [nan, 8.235836255401161e-17]}
{'': [0.037257376359593856, 3.7289933651531976e-17], 'false': [nan, 3.7289933651531976e-17], 'false,false': [nan, 3.7289933651531976e-17]}
{'': [0.00793599999999995, 3.159171208282966e-17], 'false': [nan, 3.159171208282966e-17], 'false,false': [nan, 3.159171208282966e-17], 'false,false,false': [nan, 3.159171208282966e-17]}
{'': [0.03027343749999984, 4.663950605731251e-17], 'true': [0.03027343749999984, nan], 'false': [5.551115123125783e-17, 5.9054416203465774e-18]}
{'': [0.015621063240111074, 2.836693190672206e-17], 'false': [nan, 2.836693190672206e-17], 'false,false': [nan, 2.836693190672206e-17]}
{'': [0.015621063240110889, 2.0947604238210502e-17], 'false': [-1.648846076175975e-18, -2.64338815386942e-18], 'false,false': [nan, -2.64338815386942e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 29.13498544692993
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.8581489350995128;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( tweets(A, I) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.3194734122109543;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.727586310364558;  // std dev = 0.028, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7448137062412972;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.1254446385283919;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.525063406443254;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.44425532563517317;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.5659656232444559;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5552411714841031;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5669605348542299;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.5684545946648225;  // std dev = 0.126, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.5843991490033923;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360685;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.42737684938481263;  // std dev = 0.091, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.44113762738710377;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.41592181800402483;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4193967153846669;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.43149365857729577;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.04130546244842784;  // std dev = 0.920, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.32645570891412484;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.4276285759371499;  // std dev = 0.092, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.10159632948783659;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.3243123027321994;  // std dev = 0.013, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.3330019867969388;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.06716332612879763;  // std dev = 1.671, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.37556271507863226;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.34052845714509317;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3408925541767813;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3216794844504234;  // std dev = 0.027, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.3309575231913707;  // std dev = 0.080, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.0926912761892605;  // std dev = 5.10e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.258385884150698;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2700650757147644;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return 0.19415748355199175;  // std dev = 1.374, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.26099324306388677;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), follows(A, I) )
%   | | | then return 0.25268874400131297;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2567086416548165;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2867621786232154;  // std dev = 0.199, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2590220994672274;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21436393928297884;  // std dev = 0.074, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.05723699179936627;  // std dev = 1.279, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.17116224913043357;  // std dev = 1.164, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.23252172234926713;  // std dev = 5.31e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2240462875759269;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.2086046111847188;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.21324980842082378;  // std dev = 0.060, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109147;  // std dev = 5.82e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, F) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.16434069618657077;  // std dev = 1.400, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.11853407584922937;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.17540900266670698;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.20227285480902082;  // std dev = 0.201, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.17653383545531004;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18211759812201758;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0702485982062031;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.02161249767890454;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333667;  // std dev = 8.38e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.15561596774215739;  // std dev = 0.022, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.20431528285572215;  // std dev = 0.192, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F) )
%   | | | then return -0.12517039457172827;  // std dev = 0.695, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15304215577413985;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.17424842537356505;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18197455060458942;  // std dev = 0.139, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1696904754071652;  // std dev = 0.180, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17750783894321165;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.1384892817439901;  // std dev = 0.050, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.15954369188502143;  // std dev = 0.225, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.05943412504601063;  // std dev = 0.691, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1461446533945599;  // std dev = 0.165, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.13340337056241014;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.13642573976995107;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.23613656946843906;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.04332859810691429;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06419184008202625;  // std dev = 1.61e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
Inference time using transfer learning 3.953277826309204
Refined model CLL: -0.084692


******************************************
Best model found
******************************************
Results 

CLL : -0.091065 

AUC ROC : 0.994549 

AUC PR : 0.453095 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 29.13498544692993 

Total Inference Time : 4.796577215194702 

Total revision time: 37.64242959022522
Best scored revision CLL: -0.084692


Results 

CLL : -0.091065 

AUC ROC : 0.994549 

AUC PR : 0.453095 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.66267681121826 

Total Inference Time : 4.796577215194702 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9344229698181152
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048832;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6958316351366824;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5514274731357668;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360674;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else return -0.11231637819360624;  // std dev = 5.77e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3845265664242025;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783626;  // std dev = 4.21e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3112809726918345;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.50e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2390053239090908;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21204138361395714;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 2.98e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17041120474776356;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333677;  // std dev = 1.20e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11545324818770669;  // std dev = 0.227, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420303;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1354550722834799;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.05e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
Inference time using transfer learning 1.8198740482330322
Parameter learned model CLL:-0.087061 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.404, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 242, 0], 'false,false': [8.93e-09, 90, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 343, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 223, 0], 'false,false,false': [5.77e-08, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.759, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 209, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.21e-08, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.5e-09, 310, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 330, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98e-08, 310, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.2e-07, 246, 0], 'false,false': [0.0, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.227, 9, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 307, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [1.05e-08, 220, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 84, 0]}]
{'': [0.03566529492456011, 1.0968468436055763e-16], 'false': [-1.5781682664093133e-16, 7.401486830834377e-17], 'false,true': [nan, -1.5781682664093133e-16]}
{'': [0.030091431657733054, -1.0357765827406708e-16], 'false': [nan, -1.0357765827406708e-16]}
{'': [0.018511925952295713, -8.792370262132112e-17], 'false': [nan, -8.792370262132112e-17], 'false,false': [-6.970010020068248e-17, 4.4408920985006264e-17]}
{'': [0.04640095181439563, -5.258951169277057e-17], 'false': [nan, -5.258951169277057e-17], 'false,false': [-8.711797896580176e-17, 1.8698493046318426e-17], 'false,false,false': [nan, 1.8698493046318426e-17]}
{'': [0.030091431657729987, 9.168293364646454e-17], 'false': [nan, 9.168293364646454e-17], 'false,false': [nan, 9.168293364646454e-17]}
{'': [0.03566529492455397, 3.768029659333865e-17], 'false': [nan, 3.768029659333865e-17], 'false,false': [nan, 3.768029659333865e-17]}
{'': [0.018511925952296455, 2.865091676452017e-18], 'false': [nan, 2.865091676452017e-18], 'false,false': [nan, 2.865091676452017e-18], 'false,false,false': [nan, 2.865091676452017e-18]}
{'': [0.024374999999999862, -4.037174635000569e-18], 'true': [0.024374999999999862, nan], 'false': [5.867032243954079e-17, -6.6084703846735505e-18]}
{'': [0.0515702479338845, -6.003160328592052e-17], 'false': [nan, -6.003160328592052e-17], 'false,false': [nan, -6.003160328592052e-17]}
{'': [0.018511925952296032, 4.8207052385039694e-17], 'false': [5.046468293750711e-19, -1.057355261547768e-17], 'false,false': [nan, -1.057355261547768e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 42.20639896392822
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else return 0.8581489350995121;  // std dev = 1.88e-07, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.7299724186538795;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7682003972048504;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7413433124639608;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6142102543162175;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6967461394836818;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else return -0.1254446385283921;  // std dev = 0.000, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5557508161280987;  // std dev = 0.010, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5229880149527427;  // std dev = 0.986, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.5617530480133495;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5821176109252197;  // std dev = 0.063, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.5910532985759258;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5811852392386014;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5799035947890409;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.560971291784142;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.11231637819360671;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(F, E), follows(D, F) )
%   | | | then return 0.39411546342551396;  // std dev = 1.402, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | | else return 0.09939186759695899;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.4353254048072774;  // std dev = 0.082, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.4233266233198355;  // std dev = 0.024, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4327846573800685;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.42168347503986076;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return -0.06721534261993145;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4216834750398607;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783662;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), tweets(D, F) )
%   | | | then return 0.326388723258996;  // std dev = 0.028, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.33723779190817554;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.33440915038364044;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.42459760216588105;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.19228203329670568;  // std dev = 0.875, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.34884071629887387;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.3370853594026014;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3232893314684349;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.09269127618926042;  // std dev = 9.59e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.23901083985216226;  // std dev = 0.986, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.26479875089444316;  // std dev = 0.078, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2909077760264565;  // std dev = 0.091, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2605984605692742;  // std dev = 0.051, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.2580502139117043;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.3873391078321853;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.31790368455263124;  // std dev = 0.074, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25725030907320223;  // std dev = 0.007, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( tweets(G, F), follows(G, D) )
%   | | | then return 0.21681320745804755;  // std dev = 0.051, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.2328927637386238;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.22511895083497552;  // std dev = 0.172, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.2435142975388481;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10464372540957788;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2102790158867466;  // std dev = 0.009, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2109337399324129;  // std dev = 0.000889, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18110977894903801;  // std dev = 0.034, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.1917820494273015;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.20190128610525898;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, G) )
%   | | | then return -0.07244730836394687;  // std dev = 1.639, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.10058429202165609;  // std dev = 1.665, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.17876981205814965;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.18871418197293655;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333671;  // std dev = 8.12e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), tweets(F, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.14713755768365716;  // std dev = 0.953, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.10761621562589459;  // std dev = 1.382, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else return 0.17479538723160584;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1547169366145356;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15218077002982172;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(J, A) )
%   | | | then return 0.1599793761798764;  // std dev = 0.119, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16653624673048656;  // std dev = 0.091, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06842697784420304;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.13791647506746138;  // std dev = 0.015, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.13497300816142202;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.1456688844982622;  // std dev = 0.081, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17948823659129548;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.08319320113818761;  // std dev = 1.232, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1406161277854082;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.15509775801482845;  // std dev = 0.108, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.07629129690745413;  // std dev = 0.963, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.0641918400820259;  // std dev = 7.33e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 5.437664270401001
Refined model CLL: -0.085989


******************************************
Best model found
******************************************
Results 

CLL : -0.09182 

AUC ROC : 0.994656 

AUC PR : 0.447734 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.20639896392822 

Total Inference Time : 6.991576194763184 

Total revision time: 53.361292600631714
Best scored revision CLL: -0.085989


Results 

CLL : -0.09182 

AUC ROC : 0.994656 

AUC PR : 0.447734 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.381539821624756 

Total Inference Time : 6.991576194763184 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0082778930664062
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6453993381368804;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5735748836584874;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.35708513905412403;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.34655693283301736;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926101;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2342784334712834;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.32e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19034831142910658;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19696188057601283;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16765288832835343;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07146741635842557;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
Inference time using transfer learning 2.206162691116333
Parameter learned model CLL:-0.092041 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.33e-07, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 38, 0], 'false,false,false': [9.13e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 43, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.32e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.0, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 46, 0], 'false,false': [2.63e-09, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.262, 2, 25], 'false,true': [0.0, 51, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 13, 0]}]
{'': [7.105427357601002e-16, 5.947623346206196e-17], 'false': [4.163336342344337e-17, -6.938893903907228e-18], 'false,true': [nan, 4.163336342344337e-17]}
{'': [0.06858710562414251, -2.4671622769447922e-17], 'false': [nan, -2.4671622769447922e-17]}
{'': [-1.4210854715202004e-16, 1.7763568394002505e-17], 'false': [nan, 1.7763568394002505e-17], 'false,false': [-8.764918615461762e-18, 6.938893903907228e-18]}
{'': [0.06858710562414265, 2.0185873175002847e-17], 'false': [nan, 2.0185873175002847e-17], 'false,false': [-1.290957005378089e-18, 0.0], 'false,false,false': [nan, 0.0]}
{'': [-2.486899575160351e-16, -1.6401021954689813e-17], 'false': [nan, -1.6401021954689813e-17], 'false,false': [nan, -1.6401021954689813e-17]}
{'': [0.03698224852071012, 9.570888143320315e-19], 'false': [nan, 9.570888143320315e-19], 'false,false': [nan, 9.570888143320315e-19]}
{'': [0.03698224852071009, -1.0675221390626506e-18], 'false': [nan, -1.0675221390626506e-18], 'false,false': [nan, -1.0675221390626506e-18], 'false,false,false': [nan, -1.0675221390626506e-18]}
{'': [-3.552713678800501e-17, 1.047380211910525e-18], 'false': [3.620292471603771e-18, 9.912705577010326e-19], 'true': [-3.552713678800501e-17, nan]}
{'': [-1.3322676295501878e-17, 6.938893903907229e-19], 'false': [nan, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.06858710562414266, -5.204170427930421e-18], 'false': [-3.2653618371328133e-18, 5.337610695313253e-19], 'false,false': [nan, 5.337610695313253e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 16.05304503440857
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.2194734122109545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839155;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A) )
%   | | then return 0.6338757304931878;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, F) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21751358415830996;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G), follows(E, A) )
%   | | | then return 0.46981231717904465;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4151435067202792;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, H) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(E, F) )
%   | | | then return 0.3185581196281135;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.34794007872109806;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3719924755623378;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return -0.11403365455884906;  // std dev = 0.930, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3526099803563601;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926101;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(D, A) )
%   | | | then return 0.25370752368146626;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2699236086620593;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, E) )
%   | | | then return 0.32892862087548513;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2617403979621047;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.33404281088928167;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.08518475138839682;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.08518475138839683;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, A) )
%   | | | then return 0.21579539219642946;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2025349988441159;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2552686199834494;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2084677233587319;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.26493886341732925;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.18074164733295547;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19795726493577126;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17239221900484447;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.21705688444573942;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(J, A) )
%   | | then return -0.07324622576333702;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333702;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15431989826881645;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1657129197415571;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14917185479874864;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return -0.25801303629442984;  // std dev = 0.944, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1560931204750327;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.0684269778442027;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1352398727742696;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14407706618504057;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.13121644443314845;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.16113032567278848;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18586835425931025;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(J, A) )
%   | | then return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning 11.058383464813232
Refined model CLL: -0.091259


******************************************
Best model found
******************************************
Results 

CLL : -0.086462 

AUC ROC : 0.994229 

AUC PR : 0.339574 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.05304503440857 

Total Inference Time : 2.417707920074463 

Total revision time: 20.466583013534546
Best scored revision CLL: -0.091259


Results 

CLL : -0.086462 

AUC ROC : 0.994229 

AUC PR : 0.339574 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.486830234527588 

Total Inference Time : 2.417707920074463 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.025299072265625
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6998655690736998;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839136;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5405950421994986;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3692936526820005;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3005049700219095;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 4.37e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23673636309085516;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 5.51e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21095345422639147;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109161;  // std dev = 5.27e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17566618199195352;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 3.73e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16913583555396294;  // std dev = 8.74e-09, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420267;  // std dev = 4.66e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1082161180325779;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
Inference time using transfer learning 2.2842938899993896
Parameter learned model CLL:-0.091169 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.46e-07, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [6.5e-08, 64, 0], 'false,false': [4.93e-09, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.77e-08, 72, 0], 'false,false,false': [7.45e-09, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.682, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.96e-08, 80, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.37e-09, 99, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 112, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-08, 93, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [3.73e-08, 79, 0], 'false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [8.74e-09, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.66e-09, 94, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 66, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 24, 0]}]
{'': [4.263256414560601e-16, 7.795182938857482e-17], 'false': [6.591949208711867e-17, 2.590520390792032e-17], 'false,true': [nan, 6.591949208711867e-17]}
{'': [0.01922337562475929, -7.320151810715318e-18], 'false': [nan, -7.320151810715318e-18]}
{'': [0.01922337562475915, 6.245004513516506e-17], 'false': [nan, 6.245004513516506e-17], 'false,false': [4.625929269271486e-17, 2.3129646346357427e-18]}
{'': [0.05339978640085441, 1.570012358055777e-17], 'false': [nan, 1.570012358055777e-17], 'false,false': [4.4408920985006264e-17, -5.843279076974508e-18], 'false,false,false': [nan, -5.843279076974508e-18]}
{'': [0.036982248520709825, 1.794299837778031e-17], 'false': [nan, 1.794299837778031e-17], 'false,false': [nan, 1.794299837778031e-17]}
{'': [0.03698224852071005, 3.0729387288732013e-17], 'false': [nan, 3.0729387288732013e-17], 'false,false': [nan, 3.0729387288732013e-17]}
{'': [0.019223375624759675, 2.984470496304184e-17], 'false': [nan, 2.984470496304184e-17], 'false,false': [nan, 2.984470496304184e-17], 'false,false,false': [nan, 2.984470496304184e-17]}
{'': [0.019223375624759682, 1.0884539457109378e-17], 'true': [0.019223375624759682, nan], 'false': [1.756682000989172e-17, -1.8101462358018856e-18]}
{'': [7.549516567451065e-17, 2.1850133995282337e-17], 'false': [nan, 2.1850133995282337e-17], 'false,false': [nan, 2.1850133995282337e-17]}
{'': [0.0369822485207101, -1.295260195396016e-17], 'false': [-6.7286243916676156e-18, 5.782411586589357e-19], 'false,false': [nan, 5.782411586589357e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 16.211015224456787
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5289972217347637;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5924908706163711;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.46928809944756705;  // std dev = 0.916, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5708349508588206;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.6115698283434446;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.45928015606220185;  // std dev = 0.059, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.43099835219739935;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.4245370857621961;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41450797457541155;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.23121865119798501;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4141510858340322;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.10159632948783617;  // std dev = 6.18e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.29225118162195307;  // std dev = 0.947, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.3243363221857656;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.16108139562387372;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(G, B) )
%   | | | then return 0.38449099771127737;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33633500605435285;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.31845684654837975;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, H) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.2884436930561079;  // std dev = 0.063, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.26291273459700665;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.2551617121365609;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2725902033640496;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.12664478270380206;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.27605028316399166;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2526090107880791;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839682;  // std dev = 4.84e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return -0.08518475138839682;  // std dev = 3.48e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2278283266486469;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.20976148916402027;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2598086001520941;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24730738530750923;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.08039682909138705;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23608126938605412;  // std dev = 0.000509, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21001410475330773;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, K) )
%   | then return -0.0787767547310917;  // std dev = 3.73e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(E, D), tweets(F, G) )
%   | | | then return 0.19270852735384617;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1747602955469827;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(E, B), follows(A, H) )
%   | | | then return 0.18156218868755242;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17413585241779406;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.07380691217471023;  // std dev = 0.915, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.27051974339258833;  // std dev = 1.044, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.01624902225674014;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17930150152838986;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333706;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(D, A), follows(D, E) )
%   | | | then return 0.16215635702575407;  // std dev = 0.036, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.046240052599088935;  // std dev = 0.919, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.22815413948633398;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1679837800134219;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.348946315126037;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.06842697784420271;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.14132093674024596;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.14858772307385426;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.21637848533313417;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17794912132141788;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.0065379518369870215;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14013854211746427;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14939107913968375;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, L) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return -0.06419184008202618;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
Inference time using transfer learning 6.664285182952881
Refined model CLL: -0.090258


******************************************
Best model found
******************************************
Results 

CLL : -0.085442 

AUC ROC : 0.994422 

AUC PR : 0.3449 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.211015224456787 

Total Inference Time : 2.3328700065612793 

Total revision time: 20.7846622467041
Best scored revision CLL: -0.090258


Results 

CLL : -0.085442 

AUC ROC : 0.994422 

AUC PR : 0.3449 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.804909467697144 

Total Inference Time : 2.3328700065612793 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2835290431976318
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379742;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7140123445404081;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839122;  // std dev = 6.32e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.540210373447239;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360618;  // std dev = 8.94e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.11231637819360649;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39348588211757207;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878364;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32592227094368587;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892608;  // std dev = 6.84e-09, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24428313013377326;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22485377310167068;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109153;  // std dev = 7.67e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14963056194663676;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333716;  // std dev = 3.49e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.07324622576333707;  // std dev = 9.13e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11566632694550116;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420264;  // std dev = 5.35e-09, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13771744710136638;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
Inference time using transfer learning 2.2804603576660156
Parameter learned model CLL:-0.091527 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.698, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 123, 0], 'false,false': [5.89e-09, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [6.32e-08, 143, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [8.94e-08, 115, 0], 'false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 129, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 27, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.84e-09, 126, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 140, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.67e-08, 136, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.698, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [3.49e-08, 121, 0], 'false,false': [9.13e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.219, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 139, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 120, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 36, 0]}]
{'': [0.03698224852070899, -1.3860109097231253e-16], 'false': [-3.6104813808948184e-18, 3.2653618371328135e-17], 'false,true': [nan, -3.6104813808948184e-18]}
{'': [0.012984764542937404, 2.7949670550003944e-17], 'false': [nan, 2.7949670550003944e-17]}
{'': [0.02529937594872613, 5.811905766494108e-17], 'false': [nan, 5.811905766494108e-17], 'false,false': [6.950961545479241e-17, -2.6122894697062506e-17]}
{'': [0.03698224852071048, -6.26279654916755e-17], 'false': [nan, -6.26279654916755e-17], 'false,false': [-3.4425520143415706e-17, -2.05596856412066e-18], 'false,false,false': [nan, -2.05596856412066e-18]}
{'': [0.012984764542936072, 4.5818728000403283e-17], 'false': [nan, 4.5818728000403283e-17], 'false,false': [nan, 4.5818728000403283e-17]}
{'': [0.02529937594872635, 3.489272363107635e-17], 'false': [nan, 3.489272363107635e-17], 'false,false': [nan, 3.489272363107635e-17]}
{'': [-2.7237471537470505e-16, 4.326604434200978e-17], 'false': [nan, 4.326604434200978e-17], 'false,false': [nan, 4.326604434200978e-17], 'false,false,false': [nan, 4.326604434200978e-17]}
{'': [0.03698224852071002, -1.434982140671971e-17], 'true': [0.03698224852071002, nan], 'false': [1.0092936587501423e-17, 3.2025664171879517e-18]}
{'': [0.048069219676333874, 2.955269921664086e-17], 'false': [nan, 2.955269921664086e-17], 'false,false': [nan, 2.955269921664086e-17]}
{'': [0.012984764542936312, -8.540177112501205e-18], 'false': [-1.850371707708594e-17, -4.625929269271485e-18], 'false,false': [nan, -4.625929269271485e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 22.94436502456665
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, I) )
%   | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, E), follows(E, D) )
%   | | | then return 0.7356190850614098;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4775682260387665;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7379758438173819;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.12544463852839113;  // std dev = 6.18e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.12544463852839138;  // std dev = 1.86e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.48640091950490527;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.5613975834258681;  // std dev = 0.050, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.22889937940205463;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4622852624156232;  // std dev = 0.903, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then return 0.5553664367462844;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6038128746009894;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.11231637819360621;  // std dev = 7.79e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.11231637819360643;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.39866067284210055;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.123899683251601;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return 0.43674896533881913;  // std dev = 0.071, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4167805756954867;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4160475672326634;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4140889529539028;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5025941764447096;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.43450099828597855;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10159632948783642;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3401369596968286;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.4103697265172401;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.3329050515373592;  // std dev = 0.068, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3186025162913892;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.3193761513405531;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.34106257420643676;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.014357026886383406;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.336591581911598;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926074;  // std dev = 6.72e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.22108998123762055;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.26984291690678536;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.2683871605253454;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.253886820102975;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.331145684136524;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2765633817297533;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.25968691756937173;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2783234764612011;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0851847513883968;  // std dev = 5.82e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.22493411275309952;  // std dev = 0.046, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.20763885479610278;  // std dev = 0.000571, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.10908528009784771;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2129512565256975;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.026519616354835927;  // std dev = 1.282, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.21980227930046012;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.23332202700918706;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21709317647698279;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109153;  // std dev = 6.52e-09, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.18803652280636843;  // std dev = 0.017, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2014300841800884;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.2420881366910592;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2019835050497627;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18275732144062098;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17480715961932752;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.19431725261182817;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1824583055034512;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333724;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.16353767536526215;  // std dev = 0.079, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.1943861519972284;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 4.7732235536901424E-4;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1552265280283238;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09821393292470737;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.06842697784420265;  // std dev = 4.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.04954553729035459;  // std dev = 1.646, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else return 0.14042446264409492;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.13693460950798456;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.164867692686388;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.177167425654963;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1431475524583661;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.13384742342536815;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14309955926872306;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202626;  // std dev = 1.86e-09, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
Inference time using transfer learning 6.936817646026611
Refined model CLL: -0.091344


******************************************
Best model found
******************************************
Results 

CLL : -0.086904 

AUC ROC : 0.994579 

AUC PR : 0.384175 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.94436502456665 

Total Inference Time : 3.2411184310913086 

Total revision time: 28.921015739440918
Best scored revision CLL: -0.091344


Results 

CLL : -0.086904 

AUC ROC : 0.994579 

AUC PR : 0.384175 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.94126296043396 

Total Inference Time : 3.2411184310913086 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3596580028533936
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8482479450005014;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6830058554342828;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839177;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5376588593395463;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360611;  // std dev = 8.69e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.37657028133898496;  // std dev = 2.379, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783624;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3055466284679417;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926061;  // std dev = 6.59e-09, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24021627590018185;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.35e-09, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1854171437297576;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109147;  // std dev = 8.02e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1819376299289824;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333677;  // std dev = 9.25e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14472132718269978;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.89e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14413090754205674;  // std dev = 0.099, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
Inference time using transfer learning 2.1867473125457764
Parameter learned model CLL:-0.091811 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.995, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 173, 0], 'false,false': [7.21e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 213, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [8.69e-08, 140, 0], 'false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.379, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 163, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98e-08, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 185, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 164, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.02e-08, 183, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [9.25e-08, 161, 0], 'false,false': [1.39e-08, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 214, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.099, 1, 100], 'false,true': [0.0, 167, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 50, 0]}]
{'': [0.00980296049407087, -2.360474178482315e-16], 'false': [-1.8225626531418756e-16, 5.437827059388522e-17], 'false,true': [nan, -1.8225626531418756e-16]}
{'': [0.036982248520710886, -5.629299843169808e-17], 'false': [nan, -5.629299843169808e-17]}
{'': [0.028277877274012462, -2.5522368382187506e-18], 'false': [nan, -2.5522368382187506e-18], 'false,false': [5.3925118338936174e-17, -1.1428766429964846e-17]}
{'': [0.05339978640085449, -8.018277400070575e-17], 'false': [nan, -8.018277400070575e-17], 'false,false': [-7.219855252163595e-17, 1.67580833905684e-17], 'false,false,false': [nan, 1.67580833905684e-17]}
{'': [0.036982248520710186, 4.200843876960052e-17], 'false': [nan, 4.200843876960052e-17], 'false,false': [nan, 4.200843876960052e-17]}
{'': [0.0369822485207099, 2.978647139238225e-17], 'false': [nan, 2.978647139238225e-17], 'false,false': [nan, 2.978647139238225e-17]}
{'': [0.04535147392290238, 3.5187396408884745e-17], 'false': [nan, 3.5187396408884745e-17], 'false,false': [nan, 3.5187396408884745e-17], 'false,false,false': [nan, 3.5187396408884745e-17]}
{'': [0.019223375624759804, 5.606076658998315e-17], 'true': [0.019223375624759804, nan], 'false': [5.3097622916855314e-17, 4.738756812424449e-18]}
{'': [0.028277877274012746, 3.4240523189373984e-17], 'false': [nan, 3.4240523189373984e-17], 'false,false': [nan, 3.4240523189373984e-17]}
{'': [0.009802960494069077, 0.0], 'false': [-7.312846269986062e-18, -4.440892098500626e-18], 'false,false': [nan, -4.440892098500626e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 48.17978763580322
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7152917922423687;  // std dev = 2.070, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.8581489350995116;  // std dev = 2.53e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.7418018292218527;  // std dev = 0.066, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.7194734122109543;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7237673385592042;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1254446385283915;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.5785316834885705;  // std dev = 0.092, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.4672795466019049;  // std dev = 1.321, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5645981173601413;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.6012226917156293;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5546593905375571;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5498461839290053;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360656;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.37646240185879914;  // std dev = 1.659, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.4540553321843175;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.4455506134406514;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4198537256501122;  // std dev = 0.036, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4141119819171129;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10908175924805964;  // std dev = 1.355, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.35797290289527517;  // std dev = 0.086, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.3297454572085304;  // std dev = 0.136, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(D, A), follows(E, A) )
%   | | | then return 0.21939444374475686;  // std dev = 0.924, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3378630681639469;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3208601491887665;  // std dev = 0.000663, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31779819743934956;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25708795800771705;  // std dev = 0.354, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.0926912761892607;  // std dev = 6.18e-09, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2760538674938536;  // std dev = 0.060, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.16439471267977918;  // std dev = 1.302, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(F, A), follows(D, G) )
%   | | | then return 0.03649757739490045;  // std dev = 1.112, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.29582807415566414;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2492267881961353;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2634512091399495;  // std dev = 0.103, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25246440084503474;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33199882532179814;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.17149717498269304;  // std dev = 1.668, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.07273003947334944;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2346476472620466;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20888775690680528;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2035942166053799;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20836423314301367;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.22863690683700014;  // std dev = 0.103, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2727022749598844;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109147;  // std dev = 5.27e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20475570945175825;  // std dev = 0.129, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.19261584805299847;  // std dev = 0.084, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return 0.1871797034857958;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17483297859251565;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.12272286162180862;  // std dev = 0.937, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.01720889364853877;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1719589584522051;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22217644560171115;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333663;  // std dev = 8.84e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.12381356377532848;  // std dev = 1.343, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.17741826053865703;  // std dev = 0.131, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.16253748252907832;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1711153989792842;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.025373688248520584;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.06799565783963527;  // std dev = 0.938, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.06842697784420264;  // std dev = 5.19e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.0684269778442027;  // std dev = 2.46e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1577635005838045;  // std dev = 0.117, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.14389416065089275;  // std dev = 0.083, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return -0.10236770350830407;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14440350405896124;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.0015073369025216943;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.14564936913949633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14356302465528603;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17336108696507924;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
Inference time using transfer learning 9.15930962562561
Refined model CLL: -0.090171


******************************************
Best model found
******************************************
Results 

CLL : -0.08593 

AUC ROC : 0.995178 

AUC PR : 0.391119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.17978763580322 

Total Inference Time : 5.990909814834595 

Total revision time: 57.213350772857666
Best scored revision CLL: -0.090171


Results 

CLL : -0.08593 

AUC ROC : 0.995178 

AUC PR : 0.391119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.23359799385071 

Total Inference Time : 5.990909814834595 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5860438346862793
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.647530474394984;  // std dev = 3.044, 136.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839183;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5671049029548463;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360629;  // std dev = 5.58e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.11231637819360632;  // std dev = 2.36e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3959890949773548;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783624;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3249126046323381;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.68e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20507341332075055;  // std dev = 2.898, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18764607290945307;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.58e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16307701471652064;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.22e-07, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1455323374902626;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420271;  // std dev = 2.95e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11798427940904414;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
Inference time using transfer learning 2.3370871543884277
Parameter learned model CLL:-0.092423 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 195, 0], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [3.044, 10, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 233, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [5.58e-08, 160, 0], 'false,false,false': [2.36e-08, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 169, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98e-08, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.68e-09, 249, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.898, 9, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 232, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.58e-08, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 204, 0], 'false,false': [1.18e-08, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.95e-09, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 218, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 49, 0]}]
{'': [0.007812015624035403, -1.1189649382048822e-16], 'false': [-2.3229281746003277e-16, 6.39789539614497e-17], 'false,true': [nan, -2.3229281746003277e-16]}
{'': [0.06812283737024034, -6.099079276910731e-17], 'false': [nan, -6.099079276910731e-17]}
{'': [0.007812015624032437, -5.4982473600483945e-17], 'false': [nan, -5.4982473600483945e-17], 'false,false': [1.9428902930940238e-17, 1.1102230246251566e-17]}
{'': [0.0367111473690337, -8.001607384685813e-17], 'false': [nan, -8.001607384685813e-17], 'false,false': [-8.0146277517319e-17, 1.67580833905684e-17], 'false,false,false': [nan, 1.67580833905684e-17]}
{'': [0.015380859374999514, 5.885519648615288e-17], 'false': [nan, 5.885519648615288e-17], 'false,false': [nan, 5.885519648615288e-17]}
{'': [0.0622222222222225, 3.34981085016211e-17], 'false': [nan, 3.34981085016211e-17], 'false,false': [nan, 3.34981085016211e-17]}
{'': [0.04338842975206604, 1.200241107702872e-17], 'false': [nan, 1.200241107702872e-17], 'false,false': [nan, 1.200241107702872e-17], 'false,false,false': [nan, 1.200241107702872e-17]}
{'': [0.03671114736903419, 4.386066270124075e-17], 'true': [0.03671114736903419, nan], 'false': [7.292641436263283e-17, 3.558407130208835e-18]}
{'': [0.029822485207100673, 9.063045098980869e-18], 'false': [nan, 9.063045098980869e-18], 'false,false': [nan, 9.063045098980869e-18]}
{'': [0.036711147369034386, 1.995906561123877e-17], 'false': [0.0, -4.5315225494904345e-18], 'false,false': [nan, -4.5315225494904345e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 35.765193462371826
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.7619950889456661;  // std dev = 2.126, 52.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=47 */
%   | | | else return 0.8581489350995117;  // std dev = 2.23e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( tweets(A, H) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(F, E) )
%   | | | then return 0.7371328367911906;  // std dev = 0.042, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.7257154879093535;  // std dev = 0.061, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.47422127638966605;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7232717035539236;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.7208299448334433;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.38930532166342885;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7263795819181035;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839197;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.5697071392685223;  // std dev = 0.060, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5279370852764743;  // std dev = 0.978, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.3311944462370023;  // std dev = 1.152, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5653226354385943;  // std dev = 0.094, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.6262012540363251;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5591807707461202;  // std dev = 0.077, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5783074952524178;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.11231637819360626;  // std dev = 5.74e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4123291123657962;  // std dev = 0.990, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.44108729781116107;  // std dev = 0.069, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.3473664120005705;  // std dev = 1.595, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return 0.4149087290436557;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2637906563148603;  // std dev = 1.291, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.4252490892933918;  // std dev = 0.085, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.17471227084949664;  // std dev = 0.438, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( tweets(A, K) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return -0.10159632948783623;  // std dev = 4.17e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.29873268163891664;  // std dev = 1.383, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.3680318353768709;  // std dev = 0.133, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.18315663531229348;  // std dev = 0.839, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.324396045556861;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3326908201005999;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.34006858313608407;  // std dev = 0.128, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.34999747675066956;  // std dev = 0.083, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, L) )
%   | then return -0.09269127618926054;  // std dev = 3.95e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, D), tweets(D, F) )
%   | | | then return 0.2724106560215754;  // std dev = 0.039, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.26386862820857265;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return -0.14706171720498779;  // std dev = 1.322, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.2687037474037912;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.2968697772353606;  // std dev = 0.083, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.360179648753018;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.27501008942297694;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2676996594275587;  // std dev = 0.111, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.16085561015514196;  // std dev = 1.631, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return -0.1311169101910529;  // std dev = 1.721, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.22390991972631408;  // std dev = 0.163, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.14303034551045987;  // std dev = 0.978, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), follows(A, I) )
%   | | | then return 0.22383197663856136;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21025430966460215;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2026488569977144;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25555586167846456;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109144;  // std dev = 3.95e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.15674251184402038;  // std dev = 1.403, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.2295550413406783;  // std dev = 0.140, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.257728264018426;  // std dev = 0.100, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1867367566719086;  // std dev = 0.131, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.06977148966961749;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333684;  // std dev = 6.99e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return -0.07324622576333702;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.073246225763337;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17957597676232775;  // std dev = 0.193, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.15706780967987238;  // std dev = 0.057, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return -0.12808134474989194;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1689143903475503;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.10598027206128487;  // std dev = 0.964, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 9.271126562019153E-4;  // std dev = 1.306, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14688980261590445;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1809153859317271;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420279;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A), follows(D, E) )
%   | | | then return 0.14608138336138418;  // std dev = 0.045, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.16249659688462334;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.216977771327431;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18540797227943864;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.13800194465863042;  // std dev = 0.055, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.17064289141405886;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03189259534666769;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.14117436671626996;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 1.86e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
Inference time using transfer learning 6.702730417251587
Refined model CLL: -0.091517


******************************************
Best model found
******************************************
Results 

CLL : -0.085928 

AUC ROC : 0.994959 

AUC PR : 0.376941 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.765193462371826 

Total Inference Time : 5.809437274932861 

Total revision time: 44.908913373947144
Best scored revision CLL: -0.091517


Results 

CLL : -0.085928 

AUC ROC : 0.994959 

AUC PR : 0.376941 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.929160594940186 

Total Inference Time : 5.809437274932861 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.9854016304016113
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5241164367462845;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4251324780929426;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783621;  // std dev = 3.94e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.265275621945795;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926104;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23923823646251213;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.79e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1946890891873094;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 2.47e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19371110490126323;  // std dev = 3.65e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1652344800526472;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 2.46e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.08307833661180802;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 1.32e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
Inference time using transfer learning 1.7929110527038574
Parameter learned model CLL:-0.080932 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.06e-07, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [2.98e-08, 50, 0], 'false,false,false': [1.29e-08, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [3.94e-08, 57, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.239, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.79e-09, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.47e-08, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [3.65e-08, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 54, 0], 'false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.239, 2, 31], 'false,true': [0.0, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.32e-09, 21, 0]}]
{'': [1.375244004696968e-15, 6.125368411725002e-17], 'false': [4.163336342344337e-17, -3.0839528461809902e-18], 'false,true': [nan, 4.163336342344337e-17]}
{'': [-4.584146682323227e-16, -1.959217102279688e-17], 'false': [nan, -1.959217102279688e-17]}
{'': [0.0302734375, 4.5347137625534564e-17], 'false': [nan, 4.5347137625534564e-17], 'false,false': [1.7763568394002505e-17, 7.93016446160826e-18]}
{'': [-8.59527502935605e-17, 3.9650822308041306e-17], 'false': [nan, 3.9650822308041306e-17], 'false,false': [2.7268635692547703e-17, -2.135044278125301e-18], 'false,false,false': [nan, -2.135044278125301e-18]}
{'': [0.05693296602387496, -5.163828021512356e-18], 'false': [nan, -5.163828021512356e-18], 'false,false': [nan, -5.163828021512356e-18]}
{'': [0.030273437500000076, 7.401486830834377e-18], 'false': [nan, 7.401486830834377e-18], 'false,false': [nan, 7.401486830834377e-18]}
{'': [0.03027343749999995, 1.001020759907928e-17], 'false': [nan, 1.001020759907928e-17], 'false,false': [nan, 1.001020759907928e-17], 'false,false,false': [nan, 1.001020759907928e-17]}
{'': [4.297637514678025e-17, -4.216036802374012e-18], 'true': [4.297637514678025e-17, nan], 'false': [1.02798428206033e-18, -1.1102230246251566e-18]}
{'': [-3.581364595565021e-17, 5.843279076974508e-18], 'false': [nan, 5.843279076974508e-18], 'false,false': [nan, 5.843279076974508e-18]}
{'': [0.05693296602387508, -5.714383214982423e-18], 'false': [-2.362176648138631e-18, 1.32169407693471e-18], 'false,false': [nan, 1.32169407693471e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 12.993499040603638
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.5874036882853251;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.11231637819360642;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.41751358415830986;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.10911439090833579;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.4162185620066589;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.47881414019925844;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4175135841583102;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.05537220252678184;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.319836985360266;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.36322063968710006;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926104;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.2551722425694894;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.29211632211412164;  // std dev = 0.143, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.26317697716721394;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then return 0.005172242569489449;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839679;  // std dev = 1.29e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.20912371727633872;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2281424477841431;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.26699733818932264;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.21905845955192949;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20931645645994135;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109176;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.17663190522422564;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19070967842277636;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2181848702718969;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.18399726766253383;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17677285470572404;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.15235641874404832;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19862784668724895;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.1452532389724359;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1608554341821535;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17342166882471322;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1585090225697851;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.06842697784420271;  // std dev = 1.32e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.13317025876083535;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.142776567230047;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15786670920757478;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.13842178663976545;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13312020395053945;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(I, A) )
%   | | then return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning 3.930532693862915
Refined model CLL: -0.079348


******************************************
Best model found
******************************************
Results 

CLL : -0.092069 

AUC ROC : 0.99418 

AUC PR : 0.441458 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.993499040603638 

Total Inference Time : 2.4194176197052 

Total revision time: 17.537559986114502
Best scored revision CLL: -0.079348


Results 

CLL : -0.092069 

AUC ROC : 0.99418 

AUC PR : 0.441458 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.54939341545105 

Total Inference Time : 2.4194176197052 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.281557559967041
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456665;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.1418510649004877;  // std dev = 4.56e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6974436748664753;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283913;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.556260511414312;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360624;  // std dev = 7.15e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41809020393838014;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783616;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2892622094291683;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892608;  // std dev = 6.72e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22811880784816754;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.215394041267881;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109153;  // std dev = 7.81e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1639507207078866;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 3.57e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15484950537024078;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.27e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14990265320432014;  // std dev = 8.74e-09, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 1.67e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
Inference time using transfer learning 1.9671924114227295
Parameter learned model CLL:-0.085806 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.692, 3, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [8.56e-08, 94, 0], 'false,false': [4.56e-09, 27, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 134, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [7.15e-08, 96, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [5.77e-08, 82, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.72e-09, 127, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 131, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.81e-08, 140, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [3.57e-08, 78, 0], 'false,false': [1.18e-08, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 134, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [8.74e-09, 0, 62], 'false,true': [1.67e-08, 82, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 28, 0]}]
{'': [0.044023668639052445, 7.340317518182853e-18], 'false': [7.795182938857482e-17, 2.05596856412066e-17], 'false,true': [nan, 7.795182938857482e-17]}
{'': [0.030273437499999167, 0.0], 'false': [nan, 0.0]}
{'': [0.015621063240111368, 6.927791673660977e-17], 'false': [nan, 6.927791673660977e-17], 'false,false': [5.3198186596622086e-17, -7.656710514656252e-18]}
{'': [0.015621063240110719, -1.5313421029312504e-17], 'false': [nan, -1.5313421029312504e-17], 'false,false': [4.06179155350667e-17, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.04402366863905345, 4.370956789862821e-17], 'false': [nan, 4.370956789862821e-17], 'false,false': [nan, 4.370956789862821e-17]}
{'': [0.04402366863905341, 3.559493666737143e-17], 'false': [nan, 3.559493666737143e-17], 'false,false': [nan, 3.559493666737143e-17]}
{'': [0.015621063240110733, 4.3615904538845435e-17], 'false': [nan, 4.3615904538845435e-17], 'false,false': [nan, 4.3615904538845435e-17], 'false,false,false': [nan, 4.3615904538845435e-17]}
{'': [0.03027343750000005, 1.897817136111379e-18], 'true': [0.03027343750000005, nan], 'false': [1.6368672798960642e-17, 3.558407130208835e-18]}
{'': [0.015621063240110828, 2.7341313293007585e-17], 'false': [nan, 2.7341313293007585e-17], 'false,false': [nan, 2.7341313293007585e-17]}
{'': [7.162729191130042e-17, 2.523234146875356e-18], 'false': [3.384826294588892e-18, -3.96508223080413e-18], 'false,false': [nan, -3.96508223080413e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 19.10863208770752
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7483828540191295;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5766162693538117;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7242916525123169;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839124;  // std dev = 3.33e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.40473188937497656;  // std dev = 1.306, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.5724867612591731;  // std dev = 0.063, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3758547549181776;  // std dev = 0.919, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5743146880254838;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5612773646673358;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.554174822385884;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then return -0.11231637819360624;  // std dev = 7.33e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.4545373521050561;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.42502786762986583;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4973450351101054;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4671054276938925;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.42803786463523213;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.46680171834956075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.429827721726278;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41606724479395546;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783634;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(D, F) )
%   | | | then return 0.33893837588258746;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3240513239169413;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.35694590235476187;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33870448257646224;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.34577629668027865;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20454778162852716;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.32343635869352566;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32790777473096044;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926076;  // std dev = 6.72e-09, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.2677847587289136;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2572260874648668;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.27145465711891803;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2817513159702191;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.07627765176023657;  // std dev = 0.937, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27660815291661406;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25235300870597666;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839682;  // std dev = 5.19e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return -0.08518475138839686;  // std dev = 3.48e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(D, A), follows(F, D) )
%   | | | then return 0.2238074175965568;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20958918746074923;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.24504876091579586;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2704264383259783;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.21437507580028287;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20998307837412875;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22836944521373714;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21571189433040358;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109158;  // std dev = 5.82e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.18417586839813754;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.048065280162570556;  // std dev = 0.830, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return -0.4938798064255521;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.11560463170488947;  // std dev = 0.971, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21084888309527844;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18125811463502592;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18871364448839123;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17448884841007528;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0732462257633372;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.16652087341877525;  // std dev = 0.097, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.1984001804117937;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.1594670910698149;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1475425233985923;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17064065844054432;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15446867515002544;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0423816731237997;  // std dev = 0.941, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.15197392199291423;  // std dev = 0.000391, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420264;  // std dev = 5.19e-09, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, F) )
%   | | | then return 0.1464314906718283;  // std dev = 0.087, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13670848698949176;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.18009948032377243;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15075685937442973;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return -0.10775852533573971;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1339056178855516;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
Inference time using transfer learning 4.407622575759888
Refined model CLL: -0.085256


******************************************
Best model found
******************************************
Results 

CLL : -0.093035 

AUC ROC : 0.993305 

AUC PR : 0.391077 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.10863208770752 

Total Inference Time : 3.267277956008911 

Total revision time: 25.117366790771484
Best scored revision CLL: -0.085256


Results 

CLL : -0.093035 

AUC ROC : 0.993305 

AUC PR : 0.391077 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.129200220108032 

Total Inference Time : 3.267277956008911 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.524261474609375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return -0.14185106490048766;  // std dev = 7.68e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7109772354414311;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839155;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5494479576898215;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360621;  // std dev = 9.77e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.40256602747919257;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878364;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29823795743926945;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926061;  // std dev = 6.59e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22598942994659746;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21471647135854108;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109148;  // std dev = 9.19e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1390664772662363;  // std dev = 2.178, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333699;  // std dev = 3.65e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return -0.07324622576333707;  // std dev = 1.67e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1383433238105223;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1403519377049826;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning 1.917461633682251
Parameter learned model CLL:-0.086162 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.995, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 156, 0], 'false,false': [7.68e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 176, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [9.77e-08, 147, 0], 'false,false,false': [2.36e-08, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 130, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.94e-08, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 183, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 181, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.178, 5, 93], 'true,false': [0.0, 0, 0], 'false,true': [3.65e-08, 118, 0], 'false,false': [1.67e-08, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 178, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 134, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 54, 0]}]
{'': [0.010525124490720615, -2.3657088749022025e-16], 'false': [-1.3664283380001927e-16, 6.125368411725002e-17], 'false,true': [nan, -1.3664283380001927e-16]}
{'': [0.010525124490718272, -2.0185873175002847e-17], 'false': [nan, -2.0185873175002847e-17]}
{'': [0.01052512449072073, -2.0708823257256806e-17], 'false': [nan, -2.0708823257256806e-17], 'false,false': [6.49518232093629e-17, 1.206764157201257e-17]}
{'': [0.020609418282548045, -8.881784197001253e-17], 'false': [nan, -8.881784197001253e-17], 'false,false': [-3.75767792950053e-17, 2.590520390792032e-17], 'false,false,false': [nan, 2.590520390792032e-17]}
{'': [0.030273437499999722, 4.246754739003331e-17], 'false': [nan, 4.246754739003331e-17], 'false,false': [nan, 4.246754739003331e-17]}
{'': [0.039536613880327184, 3.312267587279473e-17], 'false': [nan, 3.312267587279473e-17], 'false,false': [nan, 3.312267587279473e-17]}
{'': [0.010525124490719576, 4.394632805807911e-17], 'false': [nan, 4.394632805807911e-17], 'false,false': [nan, 4.394632805807911e-17], 'false,false,false': [nan, 4.394632805807911e-17]}
{'': [0.04841732611411918, 3.0839528461809905e-17], 'true': [0.04841732611411918, nan], 'false': [1.129040364025583e-17, 6.308085367188389e-18]}
{'': [0.0302734375, 3.2433481618263e-17], 'false': [nan, 3.2433481618263e-17], 'false,false': [nan, 3.2433481618263e-17]}
{'': [0.01052512449071974, 1.771632486103973e-18], 'false': [-1.408491896912512e-17, -3.597944987211155e-18], 'false,false': [nan, -3.597944987211155e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 39.59878492355347
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.8581489350995118;  // std dev = 2.06e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.7390927739180475;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7286699880111545;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.7359812264346162;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7521852705674382;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109547;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, J) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5668629854651487;  // std dev = 0.102, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.41720489625117935;  // std dev = 0.913, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.11205759434427916;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.5921591736337365;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.567829037758576;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5540702044370632;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( tweets(A, J) )
%   | then return -0.1123163781936062;  // std dev = 8.33e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return -0.11231637819360629;  // std dev = 5.43e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( tweets(D, E), tweets(F, E) )
%   | | | then return 0.41570295566238863;  // std dev = 0.011, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.17702560566273573;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.46437659821595384;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4216464260983858;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.44050699648483826;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.47372350474433983;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.4272087523722372;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.41885375807970265;  // std dev = 0.034, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.10159632948783652;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.33076089107952206;  // std dev = 0.142, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.4111649292385559;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.3281693891401979;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31940277096089914;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G) )
%   | | then return 0.15163266687771101;  // std dev = 0.752, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.19552053951543544;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.3203591726275661;  // std dev = 0.000577, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(I, A) )
%   | then return -0.09269127618926082;  // std dev = 5.89e-09, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.2526293806385835;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.26860894405196845;  // std dev = 0.097, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.04852058303430059;  // std dev = 1.450, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.2696232390675573;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.28568481231897963;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2527543739581867;  // std dev = 0.016, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2693399531948971;  // std dev = 0.065, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.02e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return -0.08518475138839679;  // std dev = 9.31e-10, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.20710424975757036;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22480229794330436;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.26143937920219146;  // std dev = 0.087, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21419396235559016;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.12624161231419367;  // std dev = 1.052, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.11838882924836532;  // std dev = 0.959, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22499215283595983;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2113001433543279;  // std dev = 0.054, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.07877675473109146;  // std dev = 5.27e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.18039662600096187;  // std dev = 0.054, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.20638336048080322;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23043095467194102;  // std dev = 0.126, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19246954578040015;  // std dev = 0.084, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18819227052762155;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.17543375297982391;  // std dev = 0.012, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.18155645853365024;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, K) )
%   | then return -0.07324622576333695;  // std dev = 4.75e-09, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else return -0.07324622576333706;  // std dev = 1.61e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.15126428635992079;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.051833442264617106;  // std dev = 1.151, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.22102185196313795;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.161210744941938;  // std dev = 0.113, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.1257446793392729;  // std dev = 0.728, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06038642510499494;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.15568977116940594;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(H, A) )
%   | then return -0.06842697784420264;  // std dev = 5.19e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.0684269778442027;  // std dev = 2.08e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.13456454499787865;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15359203329492588;  // std dev = 0.076, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.19858824418360474;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14049293391004428;  // std dev = 0.000904, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.10131140331232463;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15248422578603923;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13163202445953032;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14808115438622899;  // std dev = 0.079, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
Inference time using transfer learning 5.578251838684082
Refined model CLL: -0.084442


******************************************
Best model found
******************************************
Results 

CLL : -0.091024 

AUC ROC : 0.993927 

AUC PR : 0.421735 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.59878492355347 

Total Inference Time : 5.075226783752441 

Total revision time: 47.96208739280701
Best scored revision CLL: -0.084442


Results 

CLL : -0.091024 

AUC ROC : 0.993927 

AUC PR : 0.421735 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 47.973920822143555 

Total Inference Time : 5.075226783752441 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7192060947418213
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8501489350995105;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6823255350624129;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5277256356658024;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360647;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.11231637819360628;  // std dev = 3.94e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.38916067223476036;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783646;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783615;  // std dev = 5.37e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3272605831100079;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926053;  // std dev = 6.59e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23480300369244997;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20582707579370838;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 9.19e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.179219816760546;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.71e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16047538330031463;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420279;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11592316405149827;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
Inference time using transfer learning 1.7549488544464111
Parameter learned model CLL:-0.087462 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 171, 0], 'false,false': [8.93e-09, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 270, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 181, 0], 'false,false,false': [3.94e-08, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 157, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 231, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 255, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 255, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.403, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [9.71e-08, 171, 0], 'false,false': [0.0, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 258, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 184, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 71, 0]}]
{'': [0.007936000000004014, -8.474984920802722e-17], 'false': [-1.7659687877078512e-16, 7.564156871072495e-17], 'false,true': [nan, -1.7659687877078512e-16]}
{'': [0.0372573763595961, -7.894919286223336e-17], 'false': [nan, -7.894919286223336e-17]}
{'': [0.03725737635959439, -8.326672684688674e-17], 'false': [nan, -8.326672684688674e-17], 'false,false': [-1.7174720822930598e-17, 2.6344275160596936e-17]}
{'': [0.04402366863905239, -7.273874988923439e-17], 'false': [nan, -7.273874988923439e-17], 'false,false': [-7.354343602612502e-17, 3.848773152033876e-17], 'false,false,false': [nan, 3.848773152033876e-17]}
{'': [0.015621063240111453, 4.3255442517863244e-17], 'false': [nan, 4.3255442517863244e-17], 'false,false': [nan, 4.3255442517863244e-17]}
{'': [0.03725737635959367, 3.657205257588751e-17], 'false': [nan, 3.657205257588751e-17], 'false,false': [nan, 3.657205257588751e-17]}
{'': [0.023064046128092187, 3.308899994961251e-17], 'false': [nan, 3.308899994961251e-17], 'false,false': [nan, 3.308899994961251e-17], 'false,false,false': [nan, 3.308899994961251e-17]}
{'': [0.01562106324011079, 3.31684887024943e-17], 'true': [0.01562106324011079, nan], 'false': [5.518652461587035e-17, -4.758098676964957e-18]}
{'': [0.007935999999999869, -6.885104028683141e-18], 'false': [nan, -6.885104028683141e-18], 'false,false': [nan, -6.885104028683141e-18]}
{'': [0.030273437500000052, 8.707631565687502e-18], 'false': [-4.2236745502044e-18, -7.818472004402511e-18], 'false,false': [nan, -7.818472004402511e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 56.32507658004761
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F) )
%   | | then if ( follows(D, A), follows(F, A) )
%   | | | then return 0.8287371703936293;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.858148935099512;  // std dev = 1.88e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( tweets(A, G) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.7228435394883511;  // std dev = 0.020, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.6103282086783245;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), follows(G, H) )
%   | | | then return 0.7199648891055745;  // std dev = 0.008, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.12544463852839188;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5675603289439249;  // std dev = 0.163, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.5557076890219899;  // std dev = 0.030, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.5905871466765505;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360646;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( follows(A, J) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.11231637819360633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4255826843841292;  // std dev = 0.144, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.26661961064930406;  // std dev = 0.822, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, A), follows(E, A) )
%   | | | then return 0.02246335491823188;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.42010741155470227;  // std dev = 0.099, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3394650320404831;  // std dev = 0.897, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.03019705907552579;  // std dev = 1.120, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.4796812670796373;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.304504730276559;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.10159632948783658;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.2879378380582397;  // std dev = 1.388, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.0456656088557598;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3675678943780225;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31997917972953116;  // std dev = 0.000100, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.35778187691082963;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.31935461752778227;  // std dev = 0.009, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.33794760825751663;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3665131999159151;  // std dev = 0.140, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.0926912761892605;  // std dev = 7.33e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(A, D), follows(D, E) )
%   | | | then return 0.26068343325249965;  // std dev = 0.016, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2888176526975104;  // std dev = 0.102, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.29580351143242495;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2646911409133308;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.2591827252902692;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09412771339692047;  // std dev = 1.444, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2292613755821535;  // std dev = 0.993, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.28664436451817527;  // std dev = 0.126, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.22386331729236494;  // std dev = 0.147, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.21873995020362927;  // std dev = 0.087, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2810408055602909;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22434360045374246;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.21036000622071466;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.08491952175192218;  // std dev = 0.842, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.23261388862589238;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21399887020443858;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109146;  // std dev = 4.56e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(E, D) )
%   | | | then return 0.17168457626400171;  // std dev = 1.017, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return -0.024157455967401653;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.030181793282405223;  // std dev = 0.913, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.18790490521716727;  // std dev = 0.102, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.2133692325832323;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17876145591561607;  // std dev = 0.010, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.18421811849522987;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, L) )
%   | then return -0.0732462257633367;  // std dev = 7.85e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return -0.07324622576333704;  // std dev = 2.08e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(D, F) )
%   | | | then return 0.162904319557353;  // std dev = 0.125, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.025737559317827445;  // std dev = 1.291, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.12747862883569208;  // std dev = 1.417, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.1525663426157761;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B), tweets(I, H) )
%   | | | then return 0.21875219368684026;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.10473614165230037;  // std dev = 0.905, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.15584548299962875;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16236229889999892;  // std dev = 0.098, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06842697784420262;  // std dev = 5.74e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.08047462917782615;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.15642712724316857;  // std dev = 0.146, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.16998935885661487;  // std dev = 1.010, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.19069868981252214;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14056078784134593;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.14083881409511012;  // std dev = 0.034, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.1361528631226154;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
Inference time using transfer learning 4.643285274505615
Refined model CLL: -0.083909


******************************************
Best model found
******************************************
Results 

CLL : -0.09037 

AUC ROC : 0.993978 

AUC PR : 0.374169 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 56.32507658004761 

Total Inference Time : 5.956524133682251 

Total revision time: 66.01638150215149
Best scored revision CLL: -0.083909


Results 

CLL : -0.09037 

AUC ROC : 0.993978 

AUC PR : 0.374169 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 66.02821493148804 

Total Inference Time : 5.956524133682251 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8279578685760498
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7106075078424906;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839205;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5622039401135613;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.11231637819360621;  // std dev = 7.15e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39154817519727997;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783621;  // std dev = 4.83e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3183473194496692;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.50e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2582709255258443;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2048479320688489;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.07e-07, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1719990766862712;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.30e-07, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.147492651924923;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13492278238289512;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
Inference time using transfer learning 1.9295051097869873
Parameter learned model CLL:-0.0881 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 234, 0], 'false,false': [8.33e-09, 72, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 311, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 235, 0], 'false,false,false': [7.15e-08, 92, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 218, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.83e-08, 89, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.5e-09, 305, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 310, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.07e-07, 334, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 220, 0], 'false,false': [0.0, 87, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 283, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 206, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 90, 0]}]
{'': [0.018511925952302145, 4.9343245538895844e-17], 'false': [-1.8978171361113786e-16, 6.78469626159818e-17], 'false,true': [nan, -1.8978171361113786e-16]}
{'': [0.01249799711584864, -1.0281164986882478e-16], 'false': [nan, -1.0281164986882478e-16]}
{'': [-1.1842378929335002e-15, -4.889055521285093e-17], 'false': [nan, -4.889055521285093e-17], 'false,false': [-8.31486180144798e-17, 5.551115123125783e-17]}
{'': [0.030091431657728023, -5.207560766971418e-17], 'false': [nan, -5.207560766971418e-17], 'false,false': [-8.352136515528701e-17, 2.6196273614750884e-17], 'false,false,false': [nan, 2.6196273614750884e-17]}
{'': [0.012497997115846728, 9.027387216624224e-17], 'false': [nan, 9.027387216624224e-17], 'false,false': [nan, 9.027387216624224e-17]}
{'': [0.006328857154448234, 3.724619179387622e-17], 'false': [nan, 3.724619179387622e-17], 'false,false': [nan, 3.724619179387622e-17]}
{'': [0.01249799711584657, 3.45698187308432e-17], 'false': [nan, 3.45698187308432e-17], 'false,false': [nan, 3.45698187308432e-17], 'false,false,false': [nan, 3.45698187308432e-17]}
{'': [0.012497997115846891, 1.4465446574920607e-18], 'true': [0.012497997115846891, nan], 'false': [7.670631806501082e-17, -7.656710514656252e-18]}
{'': [0.012497997115846895, -3.923049556979352e-17], 'false': [nan, -3.923049556979352e-17], 'false,false': [nan, -3.923049556979352e-17]}
{'': [0.006328857154448503, 4.2758589461914814e-17], 'false': [-5.389432158374546e-19, -1.2335811384723961e-17], 'false,false': [nan, -1.2335811384723961e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 37.919835567474365
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.8581489350995118;  // std dev = 2.67e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( tweets(A, J) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.7226658968615457;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.7226658968615453;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.7650415561324835;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7217820956053344;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7580193346218546;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5102824915255714;  // std dev = 1.499, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.7239130927369786;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.12544463852839208;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5614494157517782;  // std dev = 0.154, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.5257297508288268;  // std dev = 0.853, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.5959732276589227;  // std dev = 0.218, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5596697138398257;  // std dev = 0.107, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5547962704060164;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2696521510319986;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.11231637819360622;  // std dev = 6.97e-09, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.397613253544058;  // std dev = 0.828, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.32592759789151127;  // std dev = 0.791, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.44004578640019404;  // std dev = 0.161, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4176560048093674;  // std dev = 0.012, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.4932697328176432;  // std dev = 0.087, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4314189059540174;  // std dev = 0.164, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.17556456362464948;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4152318136471966;  // std dev = 0.020, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.10159632948783663;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, D), follows(E, D) )
%   | | | then return 0.3265117782177747;  // std dev = 2.98e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.33946655468729275;  // std dev = 0.152, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.3221197592701951;  // std dev = 2.58e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3197461192647582;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2818979180403215;  // std dev = 0.965, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.024474618233744926;  // std dev = 1.080, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3438143574838394;  // std dev = 0.176, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.2975439176063585;  // std dev = 0.872, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.0926912761892604;  // std dev = 1.01e-08, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2600167590758334;  // std dev = 0.033, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.27801632652520947;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2855561610548315;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.34087060308826694;  // std dev = 0.126, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.25747653123842423;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.24548627651248434;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.16210989962891903;  // std dev = 1.258, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2380225931147282;  // std dev = 1.004, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else return -0.08518475138839678;  // std dev = 5.89e-09, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.1736698481749901;  // std dev = 1.299, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.23449555835083025;  // std dev = 0.166, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.06473892306699776;  // std dev = 0.836, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.24625233028227328;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2344861367494695;  // std dev = 9.09e-05, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.17375667055204072;  // std dev = 0.874, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2148656400080263;  // std dev = 0.096, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 3.73e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.18601489719443753;  // std dev = 0.087, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.14663112274188697;  // std dev = 0.862, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.05521534812599867;  // std dev = 1.541, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.15956038789266108;  // std dev = 1.013, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.20287550495338466;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2519500842476201;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1388076643780027;  // std dev = 0.975, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.19076254325007483;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333709;  // std dev = 4.06e-09, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.08710691278268765;  // std dev = 1.879, 51.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=47 */
%   | | | else return 0.18024320303293045;  // std dev = 0.149, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.045893374159794234;  // std dev = 0.317, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.1599063146409948;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18406109815905478;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15955447481608043;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.15812883513068363;  // std dev = 0.022, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1495896177749278;  // std dev = 0.078, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return -0.02634611365231001;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.14495650254303405;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1689322222217368;  // std dev = 0.137, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.014898586745104858;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14091024079666262;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.09100921163020073;  // std dev = 0.986, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.14455610060520468;  // std dev = 0.085, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.06419184008202582;  // std dev = 7.96e-09, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
Inference time using transfer learning 5.762685060501099
Refined model CLL: -0.084828


******************************************
Best model found
******************************************
Results 

CLL : -0.090649 

AUC ROC : 0.995396 

AUC PR : 0.497482 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.919835567474365 

Total Inference Time : 7.430494546890259 

Total revision time: 49.38383674621582
Best scored revision CLL: -0.084828


Results 

CLL : -0.090649 

AUC ROC : 0.995396 

AUC PR : 0.497482 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.39567017555237 

Total Inference Time : 7.430494546890259 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.8939456939697266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5244882536030138;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39411517254187795;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3010523903077542;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926103;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27557599028591717;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 1.32e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14999842334008687;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19907465011414072;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16922040192123247;  // std dev = 5.59e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 2.63e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14674238850918894;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning 2.3037402629852295
Parameter learned model CLL:-0.091002 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.981, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.47e-08, 42, 0], 'false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 36, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 43, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.32e-09, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.11e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-08, 44, 0], 'false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [5.59e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 49, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 9, 0]}]
{'': [0.03698224852071082, 5.551115123125783e-17], 'false': [4.7580986769649563e-17, -1.1102230246251566e-17], 'false,true': [nan, 4.7580986769649563e-17]}
{'': [-1.4210854715202004e-16, -2.4671622769447922e-17], 'false': [nan, -2.4671622769447922e-17]}
{'': [0.03698224852071007, -2.7078610356711136e-18], 'false': [nan, -2.7078610356711136e-18], 'false,false': [-1.0793834961633467e-17, 0.0]}
{'': [0.036982248520709964, 1.1102230246251566e-17], 'false': [nan, 1.1102230246251566e-17], 'false,false': [-1.290957005378089e-18, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.03698224852071001, -1.9660199394403815e-17], 'false': [nan, -1.9660199394403815e-17], 'false,false': [nan, -1.9660199394403815e-17]}
{'': [-2.6645352591003756e-17, 2.1769078914218755e-18], 'false': [nan, 2.1769078914218755e-18], 'false,false': [nan, 2.1769078914218755e-18]}
{'': [0.06858710562414261, -2.581914010756178e-18], 'false': [nan, -2.581914010756178e-18], 'false,false': [nan, -2.581914010756178e-18], 'false,false,false': [nan, -2.581914010756178e-18]}
{'': [1.7763568394002505e-17, 2.0185873175002845e-18], 'true': [1.7763568394002505e-17, nan], 'false': [3.1540426835941946e-18, 6.30808536718839e-19]}
{'': [3.1086244689504386e-17, 6.699621700324221e-18], 'false': [nan, 6.699621700324221e-18], 'false,false': [nan, 6.699621700324221e-18]}
{'': [-2.6645352591003756e-17, -3.3498108501621104e-18], 'false': [-3.398641912117826e-18, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 9.684188842773438
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.3331442145240624;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.47233663777496127;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.35821886049260826;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3717001979106544;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.33008860049326433;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return 0.16280097679282368;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.25339419761269655;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2733789238246107;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(G, F) )
%   | | | then return -0.0851847513883968;  // std dev = 2.04e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.24180468830798754;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.019543357372640548;  // std dev = 0.862, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.04249377117620359;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.24348661354824877;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.208500935999535;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.20653688743498475;  // std dev = 3.17e-07, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.04901117380429998;  // std dev = 1.242, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.17699271582842932;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21463389539237734;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.13336151971131968;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 9.13e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.1747305865364267;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1960143061502021;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.15295593672606336;  // std dev = 0.000888, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1667495946961783;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20227956510885114;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, G) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.15094669622397028;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16704849597171365;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.1341725952653173;  // std dev = 0.000797, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14491026553705164;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17164978042187;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, G) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(H, A) )
%   | | then return -0.06419184008202618;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 5.084548711776733
Refined model CLL: -0.089293


******************************************
Best model found
******************************************
Results 

CLL : -0.08658 

AUC ROC : 0.993739 

AUC PR : 0.347691 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.684188842773438 

Total Inference Time : 1.436513900756836 

Total revision time: 13.019883394241333
Best scored revision CLL: -0.089293


Results 

CLL : -0.08658 

AUC ROC : 0.993739 

AUC PR : 0.347691 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.03171682357788 

Total Inference Time : 1.436513900756836 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0946824550628662
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7075623961399956;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839136;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5293064133826827;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4166026135090386;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783615;  // std dev = 5.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29932835101144867;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926093;  // std dev = 5.43e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2547771908723351;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 5.67e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2070527419279954;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109161;  // std dev = 5.48e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15396538212652716;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 2.98e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1311641379438864;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 4.84e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13233461263189908;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.11e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
Inference time using transfer learning 2.5313234329223633
Parameter learned model CLL:-0.093946 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.387, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 83, 0], 'false,false': [2.63e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 97, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [4.47e-08, 60, 0], 'false,false,false': [1.05e-08, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.67e-08, 75, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 105, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.48e-08, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.387, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [2.98e-08, 67, 0], 'false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.84e-09, 104, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 1, 50], 'false,true': [2.11e-08, 89, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 27, 0]}]
{'': [0.03698224852071041, 7.259150545626024e-17], 'false': [7.490661370964911e-17, 5.28677630773884e-18], 'false,true': [nan, 7.490661370964911e-17]}
{'': [0.019223375624760407, -2.2891196384023846e-18], 'false': [nan, -2.2891196384023846e-18]}
{'': [0.03698224852070986, 4.7146457210109385e-17], 'false': [nan, 4.7146457210109385e-17], 'false,false': [3.3306690738754695e-17, 8.540177112501205e-18]}
{'': [0.019223375624759814, 6.467318590049456e-18], 'false': [nan, 6.467318590049456e-18], 'false,false': [4.2928623618839385e-17, -1.982541115402065e-18], 'false,false,false': [nan, -1.982541115402065e-18]}
{'': [0.03698224852071022, 2.960594732333751e-17], 'false': [nan, 2.960594732333751e-17], 'false,false': [nan, 2.960594732333751e-17]}
{'': [0.0192233756247597, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17]}
{'': [0.019223375624759682, 3.1553707015662343e-17], 'false': [nan, 3.1553707015662343e-17], 'false,false': [nan, 3.1553707015662343e-17], 'false,false,false': [nan, 3.1553707015662343e-17]}
{'': [0.036982248520710095, 5.551115123125783e-18], 'true': [0.036982248520710095, nan], 'false': [1.3256394323882466e-17, -1.8101462358018856e-18]}
{'': [0.036982248520710075, 2.4019248128909638e-17], 'false': [nan, 2.4019248128909638e-17], 'false,false': [nan, 2.4019248128909638e-17]}
{'': [0.01922337562475968, 4.785444071660158e-18], 'false': [4.989766402809692e-18, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 21.124545574188232
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839136;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.5082247230942327;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5685964996455088;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.4091098271923928;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6087618559780185;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5717863843936094;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.11231637819360625;  // std dev = 6.84e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.44043368527591636;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2906188552432868;  // std dev = 1.296, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.4142821962030187;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46030813961095074;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.4416558174616416;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4157412398406335;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.46357864765571577;  // std dev = 0.000648, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.10159632948783616;  // std dev = 6.32e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.34010467924746113;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.32106992557783137;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38774848865981004;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3184221361542918;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.35216817536908734;  // std dev = 0.000594, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15067439362288207;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.18795705185888575;  // std dev = 1.336, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.2679716426235414;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.05888824206814325;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.25361225599944714;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2765398953956408;  // std dev = 0.000521, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.30705390390649157;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.08518475138839682;  // std dev = 4.47e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.08518475138839689;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.08518475138839683;  // std dev = 2.95e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.22745463168865196;  // std dev = 0.057, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.21319311358763524;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.26480458007697694;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2357369874528008;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.010484871210148045;  // std dev = 0.815, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07877675473109175;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), follows(F, E) )
%   | | | then return 0.031001583027962715;  // std dev = 1.593, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.18893807107326901;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.19016609497477396;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17741538967864368;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.20412469599451694;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22397032370681136;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.19977523295908467;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(A, E) )
%   | | | then return 0.182902660947903;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.17549853921243413;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.15530110005402642;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17570367230477754;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.46853898175690506;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.1671084878789455;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420268;  // std dev = 2.79e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, E) )
%   | | | then return 0.15421610722524887;  // std dev = 0.055, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1329110915860598;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.17170330603153902;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.14930469144969655;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1635691271718523;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1719624931153483;  // std dev = 1.113, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(J, A) )
%   | | then return -0.06419184008202619;  // std dev = 1.61e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning 8.755106449127197
Refined model CLL: -0.092561


******************************************
Best model found
******************************************
Results 

CLL : -0.085853 

AUC ROC : 0.994436 

AUC PR : 0.384472 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.124545574188232 

Total Inference Time : 3.825211763381958 

Total revision time: 27.342631816864014
Best scored revision CLL: -0.092561


Results 

CLL : -0.085853 

AUC ROC : 0.994436 

AUC PR : 0.384472 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.35446524620056 

Total Inference Time : 3.825211763381958 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1963868141174316
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8449910403626706;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7089635089755726;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283912;  // std dev = 7.30e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5612029133948414;  // std dev = 1.83e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360617;  // std dev = 9.31e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else return -0.11231637819360647;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4086984677579547;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2759115351610717;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926068;  // std dev = 6.97e-09, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2689871428540445;  // std dev = 1.03e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 6.04e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15697051711175586;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109151;  // std dev = 8.36e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16779160719884012;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333714;  // std dev = 3.80e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15573179764901987;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420264;  // std dev = 5.51e-09, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10968046691060991;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.98e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
Inference time using transfer learning 2.3067970275878906
Parameter learned model CLL:-0.092447 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.993, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 130, 0], 'false,false': [4.93e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [7.3e-08, 139, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [1.83e-08, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [9.31e-08, 120, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [3.65e-08, 100, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.219, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.97e-09, 160, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.03e-07, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 153, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.165, 5, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.36e-08, 152, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.396, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [3.8e-08, 119, 0], 'false,false': [1.39e-08, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 148, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [2.98e-08, 109, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 28, 0]}]
{'': [0.012984764542935068, -1.4053456007913375e-16], 'false': [-3.75767792950053e-17, 2.3790493384824782e-17], 'false,true': [nan, -3.75767792950053e-17]}
{'': [0.01298476454293675, 3.833863682158814e-17], 'false': [nan, 3.833863682158814e-17]}
{'': [3.789561257387201e-16, 3.794433122136611e-17], 'false': [nan, 3.794433122136611e-17], 'false,false': [7.216449660063518e-17, -2.1912296538654406e-17]}
{'': [0.012984764542936166, -3.868959025208879e-17], 'false': [nan, -3.868959025208879e-17], 'false,false': [1.3322676295501878e-17, -1.734723475976807e-18], 'false,false,false': [nan, -1.734723475976807e-18]}
{'': [0.04806921967633362, 4.9960036108132046e-17], 'false': [nan, 4.9960036108132046e-17], 'false,false': [nan, 4.9960036108132046e-17]}
{'': [1.4210854715202004e-16, 3.773307011797918e-17], 'false': [nan, 3.773307011797918e-17], 'false,false': [nan, 3.773307011797918e-17]}
{'': [0.05859375000000009, 4.601582273117425e-17], 'false': [nan, 4.601582273117425e-17], 'false,false': [nan, 4.601582273117425e-17], 'false,false,false': [nan, 4.601582273117425e-17]}
{'': [0.025299375948726596, -1.0293458506458405e-17], 'true': [0.025299375948726596, nan], 'false': [1.2128486823636164e-17, 6.071532165918825e-18]}
{'': [0.012984764542936237, 3.00060276925718e-17], 'false': [nan, 3.00060276925718e-17], 'false,false': [nan, 3.00060276925718e-17]}
{'': [0.03698224852071007, 1.2155726546990766e-17], 'false': [8.148425868808489e-18, -3.469446951953614e-18], 'false,false': [nan, -3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 27.935290336608887
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7792015666784589;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.7326820511666451;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4773007538143264;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return 0.7331712600168553;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7194734122109544;  // std dev = 1.49e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, K) )
%   | then if ( follows(K, A) )
%   | | then return -0.12544463852839105;  // std dev = 7.45e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.5668286126141414;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.41193606816226136;  // std dev = 1.307, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.5715385174102732;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.11231637819360626;  // std dev = 6.14e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.1123163781936064;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(F, E) )
%   | | | then return 0.4260402854315979;  // std dev = 0.046, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.44398866426699113;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(E, A), follows(E, D) )
%   | | | then return 0.21551293853242737;  // std dev = 1.551, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.42881311640889436;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.029473179356124212;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2292647031913866;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783637;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.30644184952950604;  // std dev = 0.930, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.3797472880431254;  // std dev = 0.153, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.12240191427162488;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.31770793176177886;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then return 0.416464254326169;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.09269127618926087;  // std dev = 6.18e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.26707110443413684;  // std dev = 0.032, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.25763887358139664;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, H) )
%   | | | then return 0.326034539011673;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2840224065001988;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.05437661329508651;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26933159431910264;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.07547617324927014;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.0851847513883968;  // std dev = 5.35e-09, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return -0.08518475138839691;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.09771361604146094;  // std dev = 1.604, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.26096577775775515;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.21787412814066406;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2611084973189369;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.23050325856106443;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.20689721613999695;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3091291153368192;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109157;  // std dev = 5.96e-09, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.1527334485422028;  // std dev = 0.975, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.1958530569284287;  // std dev = 0.107, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.20893627794866232;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2472518922047583;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.1748626215732672;  // std dev = 0.000838, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1857605055397194;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.13110038689668468;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17532482915279002;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333706;  // std dev = 2.95e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.18107082921365475;  // std dev = 0.066, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.16388259520013299;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.2041468782243887;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.15104713162399935;  // std dev = 0.000745, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1593012302525648;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.10913699769319718;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15140671161175068;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.063977693477512;  // std dev = 1.322, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.16627486309483033;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.13329230636827177;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14562818349979662;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.16911400458778938;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22089623698845273;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.14418631031298215;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13296793917419958;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
Inference time using transfer learning 7.495893955230713
Refined model CLL: -0.091007


******************************************
Best model found
******************************************
Results 

CLL : -0.085717 

AUC ROC : 0.99591 

AUC PR : 0.457775 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.935290336608887 

Total Inference Time : 3.9838998317718506 

Total revision time: 34.54522728919983
Best scored revision CLL: -0.091007


Results 

CLL : -0.085717 

AUC ROC : 0.99591 

AUC PR : 0.457775 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.55706071853638 

Total Inference Time : 3.9838998317718506 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.329969882965088
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.784074861025437;  // std dev = 2.722, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7050518927315392;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283916;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5479721827187823;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360621;  // std dev = 9.54e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4118751820096063;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783646;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26914668053005547;  // std dev = 0.262, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926057;  // std dev = 6.59e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2562147355428394;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.170651649546899;  // std dev = 2.558, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109147;  // std dev = 8.16e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19679012415149683;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333686;  // std dev = 6.83e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else return -0.07324622576333707;  // std dev = 1.49e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1108564942320223;  // std dev = 0.247, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12229176283403459;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
Inference time using transfer learning 2.2007968425750732
Parameter learned model CLL:-0.091966 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.722, 8, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 163, 0], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 186, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [9.54e-08, 148, 0], 'false,false,false': [0.0, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 153, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.262, 8, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 210, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 191, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.558, 7, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.16e-08, 203, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.995, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [6.83e-08, 138, 0], 'false,false': [1.49e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.247, 7, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 184, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 148, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 38, 0]}]
{'': [0.06858710562414475, -2.3713501496848003e-16], 'false': [-1.5801947344358056e-16, 4.6474452193611206e-17], 'false,true': [nan, -1.5801947344358056e-16]}
{'': [0.028277877274013256, -3.1038493161563513e-17], 'false': [nan, -3.1038493161563513e-17]}
{'': [0.028277877274013256, -1.636118141552862e-17], 'false': [nan, -1.636118141552862e-17], 'false,false': [6.151235676977219e-17, 0.0]}
{'': [0.028277877274012497, -9.203921447669691e-17], 'false': [nan, -9.203921447669691e-17], 'false,false': [-6.385596481504168e-17, -6.938893903907228e-18], 'false,false,false': [nan, -6.938893903907228e-18]}
{'': [0.06858710562414243, 4.3351565723458494e-17], 'false': [nan, 4.3351565723458494e-17], 'false,false': [nan, 4.3351565723458494e-17]}
{'': [0.02827787727401261, 3.255104155969045e-17], 'false': [nan, 3.255104155969045e-17], 'false,false': [nan, 3.255104155969045e-17]}
{'': [0.06114071097912499, 3.281447363424108e-17], 'false': [nan, 3.281447363424108e-17], 'false,false': [nan, 3.281447363424108e-17], 'false,false,false': [nan, 3.281447363424108e-17]}
{'': [0.00980296049406906, 2.820566603101749e-17], 'true': [0.00980296049406906, nan], 'false': [3.37893964016352e-17, 4.724353296277262e-18]}
{'': [0.06114071097912494, 3.318601432303457e-17], 'false': [nan, 3.318601432303457e-17], 'false,false': [nan, 3.318601432303457e-17]}
{'': [0.03698224852071001, -4.178258694825858e-18], 'false': [-1.050210969240013e-17, -4.382459307730881e-18], 'false,false': [nan, -4.382459307730881e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 30.585426092147827
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( tweets(A, G) )
%   | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7927941835770488;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7311911912464265;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7311911912464264;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, J) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5053664367462841;  // std dev = 1.378, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return 0.5780362839364404;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5575413692522718;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.4553664367462843;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.560521832316032;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3886997700796176;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3053664367462846;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.11231637819360674;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.4357019548827172;  // std dev = 0.131, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.42575815784839743;  // std dev = 0.079, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.458515059909387;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.18255473407932532;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4169847443753048;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4792647031913866;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( follows(I, A) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.29501823607990324;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.33470846188826725;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.13883413828789068;  // std dev = 1.513, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.2591779594370961;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.33879006821286284;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3223770308407727;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3733858908134833;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34004851049183704;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09269127618926053;  // std dev = 6.72e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.2343453125258485;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.3089449553833521;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.025939695403002686;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.23479505838763318;  // std dev = 1.016, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return 0.26747315017451767;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2563150699697356;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.27696917470168136;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.28857766595016776;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1906773105771267;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.2216198844683216;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.24724422824482023;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21436515727154656;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.25445942545820205;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.014925242409324312;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07279265950484155;  // std dev = 1.284, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.23310164553721738;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109146;  // std dev = 5.27e-09, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(F, E) )
%   | | | then return 0.18899405690883472;  // std dev = 0.032, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.20449193132554194;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2275867152386929;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20250985759808393;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.09820546616830193;  // std dev = 0.955, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09548079932409255;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17739688769469342;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19863304562278983;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333666;  // std dev = 8.48e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, D) )
%   | | | then return 0.16562880712990513;  // std dev = 0.048, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.03346123812863515;  // std dev = 1.321, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.023157597296906342;  // std dev = 1.280, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.149606076632883;  // std dev = 0.000850, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.18957588325894673;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21711262174927778;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.17583489816513112;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16636122747714563;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06842697784420262;  // std dev = 5.82e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.07124778896521251;  // std dev = 1.885, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return -0.5079586028511562;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(D, A), follows(E, A) )
%   | | | then return 0.1607029485960251;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14645826813401325;  // std dev = 0.085, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05429042382721942;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.10680163399341402;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16465792686809666;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
Inference time using transfer learning 7.27315616607666
Refined model CLL: -0.089231


******************************************
Best model found
******************************************
Results 

CLL : -0.084261 

AUC ROC : 0.99663 

AUC PR : 0.526297 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.585426092147827 

Total Inference Time : 5.516639232635498 

Total revision time: 39.252829790115356
Best scored revision CLL: -0.089231


Results 

CLL : -0.084261 

AUC ROC : 0.99663 

AUC PR : 0.526297 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.264663219451904 

Total Inference Time : 5.516639232635498 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5287179946899414
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.699360372847024;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5409172169336304;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360647;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.1123163781936063;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41414207915447304;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 1.49e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30172098738607567;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926047;  // std dev = 6.72e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22374951417789393;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20425607792835898;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 9.19e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19361803846815323;  // std dev = 1.43e-07, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.21e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13439589392140983;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420289;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12420155363264779;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
Inference time using transfer learning 2.2170417308807373
Parameter learned model CLL:-0.093332 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 198, 0], 'false,false': [7.9e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 240, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 181, 0], 'false,false,false': [3.16e-08, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 204, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49e-08, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.72e-09, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 260, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.43e-07, 0, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 203, 0], 'false,false': [1.39e-08, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 276, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 180, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
{'': [0.015380859375004219, -1.1189649382048822e-16], 'false': [-2.377447285055891e-16, 5.947623346206196e-17], 'false,true': [nan, -2.377447285055891e-16]}
{'': [0.022714981070850224, -7.031412489292658e-17], 'false': [nan, -7.031412489292658e-17]}
{'': [0.022714981070849287, -7.9369135377458e-17], 'false': [nan, -7.9369135377458e-17], 'false,false': [-1.7174720822930598e-17, 1.850371707708594e-17]}
{'': [0.015380859374999306, -6.750155989720952e-17], 'false': [nan, -6.750155989720952e-17], 'false,false': [-8.92532235482969e-17, 4.827056628805028e-18], 'false,false,false': [nan, 4.827056628805028e-18]}
{'': [0.02982248520709976, 4.550094363217855e-17], 'false': [nan, 4.550094363217855e-17], 'false,false': [nan, 4.550094363217855e-17]}
{'': [0.043388429752066277, 3.6722761583755177e-17], 'false': [nan, 3.6722761583755177e-17], 'false,false': [nan, 3.6722761583755177e-17]}
{'': [0.02271498107084932, 3.321927160295744e-17], 'false': [nan, 3.321927160295744e-17], 'false,false': [nan, 3.321927160295744e-17], 'false,false,false': [nan, 3.321927160295744e-17]}
{'': [1.6212780677065777e-16, 3.849966940232398e-17], 'true': [1.6212780677065777e-16, nan], 'false': [7.219184199533037e-17, 4.3175339846533866e-18]}
{'': [0.029822485207100576, -2.5744302020293485e-17], 'false': [nan, -2.5744302020293485e-17], 'false,false': [nan, -2.5744302020293485e-17]}
{'': [0.022714981070849023, 9.448706592554524e-19], 'false': [-4.934324553889585e-18, -3.0278809762504268e-18], 'false,false': [nan, -3.0278809762504268e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 36.02477312088013
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8242506300147667;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.8581489350995121;  // std dev = 1.46e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.6581489350995123;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, A) )
%   | | | then return 0.6776748553184255;  // std dev = 1.379, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.7242519632395166;  // std dev = 0.016, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.5814666782925776;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22032223377523855;  // std dev = 1.412, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.7500140356323362;  // std dev = 0.058, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839186;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.5696449603000686;  // std dev = 0.043, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.3600373617393159;  // std dev = 1.268, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.1105468191134033;  // std dev = 1.376, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.609740972724339;  // std dev = 0.140, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.5729938152777523;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5924389005858586;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, I) )
%   | then return -0.1123163781936063;  // std dev = 3.95e-09, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.11231637819360628;  // std dev = 5.27e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.42820887940934993;  // std dev = 0.043, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.450891299041191;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.518462564362167;  // std dev = 0.182, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4440619583921611;  // std dev = 0.140, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.48294988456235577;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.235695402340128;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( tweets(A, I) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.10159632948783615;  // std dev = 6.32e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.31451781959313363;  // std dev = 1.008, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.3768532051680756;  // std dev = 0.200, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.3507043531961196;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.10097479358283479;  // std dev = 1.245, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.3389795190522743;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.31692489330291884;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.3384313399383896;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3615404973758212;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926051;  // std dev = 6.97e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.2651545410626047;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.21087415051276037;  // std dev = 1.361, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.0199580447201613;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22567522719783675;  // std dev = 0.981, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3229547850036007;  // std dev = 0.128, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.252597037408157;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2750740436820295;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.67e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.0851847513883968;  // std dev = 3.23e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.21678878583164063;  // std dev = 0.020, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.24522213296207596;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.2584647901343187;  // std dev = 0.168, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22274355259516743;  // std dev = 0.114, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.21696221735977544;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23053394382666237;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.11068894560843358;  // std dev = 0.328, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109147;  // std dev = 5.67e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18276505805566703;  // std dev = 0.014, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.13369257596287226;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, D), tweets(D, F) )
%   | | | then return 0.23395199806387315;  // std dev = 0.109, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17908018015192095;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.06325576790387355;  // std dev = 1.402, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.23722963712303674;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.11945301820342714;  // std dev = 0.941, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.19061477023067908;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0732462257633368;  // std dev = 7.45e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1576374816978184;  // std dev = 0.006, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.16308551359776735;  // std dev = 0.067, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19710122726982737;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17670252328164007;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.17035767960487166;  // std dev = 0.117, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.037890180900187115;  // std dev = 1.204, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15604325219347412;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17383163489579972;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420267;  // std dev = 4.17e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13931454594842252;  // std dev = 0.023, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.16242554816606675;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.07299991386895253;  // std dev = 0.940, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.1404836877235559;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(H, I), follows(A, H) )
%   | | | then return 0.10703026615978323;  // std dev = 0.893, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.17581720294679878;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.21378421368529624;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08581972402656762;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.06419184008202619;  // std dev = 3.61e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
Inference time using transfer learning 7.471885442733765
Refined model CLL: -0.091693


******************************************
Best model found
******************************************
Results 

CLL : -0.085695 

AUC ROC : 0.995865 

AUC PR : 0.487246 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.02477312088013 

Total Inference Time : 5.26427698135376 

Total revision time: 44.85167837142944
Best scored revision CLL: -0.091693


Results 

CLL : -0.085695 

AUC ROC : 0.995865 

AUC PR : 0.487246 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.86351180076599 

Total Inference Time : 5.26427698135376 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0983943939208984
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6882234122109547;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839144;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5318191875243453;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.43089720103927937;  // std dev = 5.96e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.1015963294878362;  // std dev = 4.34e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2985502275090363;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926105;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23619216356390615;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.86e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16316376612051187;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109164;  // std dev = 4.34e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1967084733316514;  // std dev = 3.33e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16746465457304538;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 2.79e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14539713425899006;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
Inference time using transfer learning 2.631171464920044
Parameter learned model CLL:-0.086503 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [2.06e-07, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.8e-08, 37, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 37, 0], 'false,false,false': [7.45e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [5.96e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [4.34e-08, 60, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.34e-08, 81, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [3.33e-08, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 39, 0], 'false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.79e-09, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 24, 0]}]
{'': [1.375244004696968e-15, 5.947623346206196e-17], 'false': [3.900783600034334e-17, 0.0], 'false,true': [nan, 3.900783600034334e-17]}
{'': [0.0302734374999995, 0.0], 'false': [nan, 0.0]}
{'': [0.03027343750000039, 1.61907524424502e-17], 'false': [nan, 1.61907524424502e-17], 'false,false': [-9.00180830777154e-18, 5.046468293750712e-18]}
{'': [1.1460366705808067e-16, 4.386066270124075e-17], 'false': [nan, 4.386066270124075e-17], 'false,false': [3.14563190310461e-17, -1.1895246692412391e-17], 'false,false,false': [nan, -1.1895246692412391e-17]}
{'': [0.030273437500000056, -4.89804275569922e-18], 'false': [nan, -4.89804275569922e-18], 'false,false': [nan, -4.89804275569922e-18]}
{'': [0.03027343749999991, 3.3140985809706165e-18], 'false': [nan, 3.3140985809706165e-18], 'false,false': [nan, 3.3140985809706165e-18]}
{'': [0.05693296602387515, 2.3300977060034148e-17], 'false': [nan, 2.3300977060034148e-17], 'false,false': [nan, 2.3300977060034148e-17], 'false,false,false': [nan, 2.3300977060034148e-17]}
{'': [3.581364595565021e-17, 0.0], 'true': [3.581364595565021e-17, nan], 'false': [2.846725704167068e-18, -1.32169407693471e-18]}
{'': [-2.1488187573390126e-17, 8.058070340021298e-18], 'false': [nan, 8.058070340021298e-18], 'false,false': [nan, 8.058070340021298e-18]}
{'': [-1.4325458382260084e-17, -2.64338815386942e-18], 'false': [-1.423362852083534e-18, 5.782411586589357e-19], 'false,false': [nan, 5.782411586589357e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 10.877960443496704
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6581489350995121;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839155;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5849393113783815;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.363252536648177;  // std dev = 0.859, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.568509936582772;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.29251358415830986;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.4509092109092439;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return 0.4648394087612221;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.4175135841583098;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4161575982084589;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1818643936890021;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.026372644333891675;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3464605030830943;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.3530374444300427;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.319838152014897;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11986412282365821;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.32100732829723155;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926104;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.3084519064512017;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32723120778916703;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2726763489265484;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.255338332034434;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2856120567733337;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2544799264932938;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0851847513883968;  // std dev = 1.29e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.2467877010696684;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25966303470746727;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2220505593551234;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.20923206291357874;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2310648545866088;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21004841001431193;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.20381702548887204;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21295324592653966;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18606222074971412;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.18081333293157625;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.19904941087077532;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17664493981110696;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.07324622576333704;  // std dev = 1.61e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.17272686297417694;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1794544919280906;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1595122166336299;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.1519981788934461;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1647344943402017;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15299167867799135;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then if ( follows(A, J) )
%   | | then return -0.0684269778442027;  // std dev = 1.86e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.14823304603330106;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13996053762091998;  // std dev = 0.000990, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.13600998398123293;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1472885232390425;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.0876237749088069;  // std dev = 0.832, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.13369046829009937;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning 3.3972907066345215
Refined model CLL: -0.08601


******************************************
Best model found
******************************************
Results 

CLL : -0.092746 

AUC ROC : 0.993414 

AUC PR : 0.387184 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.877960443496704 

Total Inference Time : 1.8753032684326172 

Total revision time: 15.09944462776184
Best scored revision CLL: -0.08601


Results 

CLL : -0.092746 

AUC ROC : 0.993414 

AUC PR : 0.387184 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 15.12912917137146 

Total Inference Time : 1.8753032684326172 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4172754287719727
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7226658968615449;  // std dev = 2.53e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839127;  // std dev = 2.11e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5272454593759933;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360624;  // std dev = 7.60e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39621847034576163;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783619;  // std dev = 5.48e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2737817562125754;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926089;  // std dev = 6.32e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23028658820938228;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.10e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23281673875097478;  // std dev = 9.88e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109154;  // std dev = 7.15e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1938334882392473;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.71e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.104719612349962;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 4.93e-09, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12012670354670497;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.69e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
Inference time using transfer learning 2.6083760261535645
Parameter learned model CLL:-0.087561 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.992, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 115, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.53e-07, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [2.11e-08, 120, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [7.6e-08, 100, 0], 'false,false,false': [1.29e-08, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [5.48e-08, 86, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.239, 4, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.32e-09, 113, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.1e-09, 100, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [9.88e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.15e-08, 127, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [0.0, 0, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.71e-08, 102, 0], 'false,false': [5.27e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.239, 4, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.93e-09, 109, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 2, 62], 'false,true': [2.69e-08, 100, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 23, 0]}]
{'': [0.015621063240110127, -5.633967587650048e-17], 'false': [3.8616453030440226e-17, 0.0], 'false,true': [nan, 5.406303424261632e-17]}
{'': [1.0314330035227261e-15, 3.7007434154171884e-18], 'false': [nan, 3.7007434154171884e-18]}
{'': [0.030273437500000167, 6.91614343209114e-17], 'false': [nan, 6.91614343209114e-17], 'false,false': [5.773159728050814e-17, 7.569702440626067e-18]}
{'': [0.030273437500000167, -8.001607384685813e-18], 'false': [nan, -8.001607384685813e-18], 'false,false': [3.4855839145208403e-17, -2.220446049250313e-18], 'false,false,false': [nan, -2.220446049250313e-18]}
{'': [0.056932966023874806, 3.929993007522678e-17], 'false': [nan, 3.929993007522678e-17], 'false,false': [nan, 3.929993007522678e-17]}
{'': [0.04402366863905313, 2.6645352591003756e-17], 'false': [nan, 2.6645352591003756e-17], 'false,false': [nan, 2.6645352591003756e-17]}
{'': [1.5758004220486094e-16, 4.0212802466737956e-17], 'false': [nan, 4.0212802466737956e-17], 'false,false': [nan, 4.0212802466737956e-17], 'false,false,false': [nan, 4.0212802466737956e-17]}
{'': [-6.446456272017038e-17, 3.416070845000482e-18], 'false': [2.1769078914218755e-17, 9.912705577010326e-19], 'true': [-6.446456272017038e-17, nan]}
{'': [0.056932966023875126, 2.4445277606425466e-17], 'false': [nan, 2.4445277606425466e-17], 'false,false': [nan, 2.4445277606425466e-17]}
{'': [0.030273437499999993, 5.415722071342227e-18], 'false': [7.216449660063518e-18, 6.033820786006285e-19], 'false,false': [nan, 6.033820786006285e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 23.076094388961792
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, I) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.7278056532693119;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.720230888670805;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.5228063086342974;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.740894422925115;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7639911963452851;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5631972062379329;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5551793817958055;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5748965348119095;  // std dev = 0.101, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6018462436909449;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.5704613486689697;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24386223390108877;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5901089116857987;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360618;  // std dev = 8.23e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.419883427626652;  // std dev = 0.027, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4361910496804562;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.42972820362927994;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.47229804053600727;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.21933080434066662;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.4142044489492409;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4666567918547978;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.10159632948783626;  // std dev = 4.75e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.32494055052823845;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2626735437925464;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.19296197244329255;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4033501247410264;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32360448790197066;  // std dev = 0.065, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.3543232628674561;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25805657926199355;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.27066174253812303;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2831900456920789;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.09733548668495422;  // std dev = 0.957, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.2572038140580304;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.11038961058981668;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.08518475138839683;  // std dev = 4.75e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.08518475138839682;  // std dev = 3.48e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21904030828607454;  // std dev = 0.072, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2908259107049755;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.22855955250313223;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20732494942054344;  // std dev = 0.015, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(H, A) )
%   | | then return 0.22432690391630367;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2564159144075554;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109177;  // std dev = 1.86e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.17795431386023658;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18227868059084412;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.20077346929261955;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18250413243202818;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.17876607007690226;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23645229161633594;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17527740748557083;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2051397178865635;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333692;  // std dev = 4.75e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.08754051751408447;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.15788911514320572;  // std dev = 0.000701, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.16677705039699423;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1562936730465912;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1910627868756779;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15171370768611347;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16834220819664825;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(J, A) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.14324428551346577;  // std dev = 0.019, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1290732117011385;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.018148143406034822;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.16332217248525735;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1332028349480592;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14608381284535116;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( tweets(A, J) )
%   | | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 5.74284815788269
Refined model CLL: -0.087696


******************************************
Best model found
******************************************
Results 

CLL : -0.0929 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.076094388961792 

Total Inference Time : 3.900527000427246 

Total revision time: 30.304195642471313
Best scored revision CLL: -0.087561


Results 

CLL : -0.0929 

AUC ROC : 0.992188 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.333880186080933 

Total Inference Time : 3.900527000427246 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6822998523712158
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8169118216974496;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048793;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7277205484717847;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839166;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5322472135844616;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360621;  // std dev = 9.77e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3899818397065899;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783645;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3079499764265598;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926064;  // std dev = 6.45e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25286989604431936;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1853503974144781;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0787767547310915;  // std dev = 8.36e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17470368748599013;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333688;  // std dev = 6.50e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return -0.07324622576333707;  // std dev = 9.13e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15906445370554698;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.67e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13781298933333186;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
Inference time using transfer learning 2.3887970447540283
Parameter learned model CLL:-0.088044 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.958, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 141, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [9.77e-08, 147, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 150, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 171, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 214, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.36e-08, 153, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [6.5e-08, 135, 0], 'false,false': [9.13e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 172, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 159, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 24, 0]}]
{'': [0.03953661388032838, -2.049642507000289e-16], 'false': [-8.188879046880587e-17, 4.603363760640893e-17], 'false,true': [nan, -6.299137728369683e-17]}
{'': [-2.750488009393936e-15, -3.700743415417188e-17], 'false': [nan, -3.700743415417188e-17]}
{'': [0.030273437499999296, -7.201446646217232e-18], 'false': [nan, -7.201446646217232e-18], 'false,false': [6.49518232093629e-17, -8.764918615461762e-18]}
{'': [0.03953661388032688, -8.740053598112935e-17], 'false': [nan, -8.740053598112935e-17], 'false,false': [-5.921189464667501e-17, -8.764918615461762e-18], 'false,false,false': [nan, -8.764918615461762e-18]}
{'': [0.03027343749999985, 4.15522067695965e-17], 'false': [nan, 4.15522067695965e-17], 'false,false': [nan, 4.15522067695965e-17]}
{'': [0.020609418282548597, 3.216533996577556e-17], 'false': [nan, 3.216533996577556e-17], 'false,false': [nan, 3.216533996577556e-17]}
{'': [0.039536613880327635, 4.5715065719859385e-17], 'false': [nan, 4.5715065719859385e-17], 'false,false': [nan, 4.5715065719859385e-17], 'false,false,false': [nan, 4.5715065719859385e-17]}
{'': [0.020609418282548645, 3.6547714475238074e-17], 'true': [0.020609418282548645, nan], 'false': [3.125072217463404e-17, 3.2025664171879517e-18]}
{'': [0.010525124490719859, 3.2273925134452227e-17], 'false': [nan, 3.2273925134452227e-17], 'false,false': [nan, 3.2273925134452227e-17]}
{'': [0.01052512449071985, -4.853433987432378e-18], 'false': [-8.3790416952842e-18, -3.469446951953614e-18], 'false,false': [nan, -3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 22.64656400680542
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(A, D) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.1254446385283911;  // std dev = 7.15e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(G, I) )
%   | | | then return -0.12544463852839122;  // std dev = 4.83e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462847;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.41250929388914176;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.1123163781936062;  // std dev = 7.60e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.11231637819360635;  // std dev = 2.63e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3740353232887447;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.11170443521163782;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4587998607383018;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41751358415830986;  // std dev = 5.16e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4526097669978939;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783655;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.334925377328251;  // std dev = 0.103, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.3220404725125638;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(D, H), follows(A, H) )
%   | | | then return 0.16691321518149654;  // std dev = 1.308, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.3237012542030813;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.1600503600764151;  // std dev = 1.228, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.334377707927837;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.09269127618926079;  // std dev = 5.89e-09, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2633497977277954;  // std dev = 0.079, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2935883771312248;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.376531697749143;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.2813592122227975;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2546044937050782;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2544743112515927;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2627944841333855;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 4.75e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return -0.08518475138839679;  // std dev = 1.86e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.21932486326784786;  // std dev = 0.074, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.28563344412005826;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.22000682124302307;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2092648059823062;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.21491590390349297;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.41526337703307276;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.2108166716711699;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22512082862209795;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109148;  // std dev = 6.04e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.1773476750148097;  // std dev = 0.012, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.19379162879566772;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.20975950000154278;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17801632783684135;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.27391430997997046;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.24222257623251078;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.09520833549716602;  // std dev = 1.346, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.18032197333791825;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.073246225763337;  // std dev = 4.56e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), follows(E, D) )
%   | | | then return 0.1533232910823236;  // std dev = 0.014, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.17064314170886247;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return -0.007812737556572377;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1601228262068727;  // std dev = 0.086, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21836582410733846;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.17175643977743446;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15784267505048974;  // std dev = 0.031, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(J, A) )
%   | then return -0.06842697784420264;  // std dev = 5.35e-09, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else return -0.06842697784420268;  // std dev = 2.63e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(F, E) )
%   | | | then return 0.13710239096798368;  // std dev = 0.055, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.16862337696606008;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.18887247388240128;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.143084039073872;  // std dev = 0.050, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.13381716584703907;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13980191097168895;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.1183883911600262;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.058537910666043566;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
Inference time using transfer learning 4.334212303161621
Refined model CLL: -0.08633


******************************************
Best model found
******************************************
Results 

CLL : -0.092041 

AUC ROC : 0.994258 

AUC PR : 0.415327 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.64656400680542 

Total Inference Time : 3.9964728355407715 

Total revision time: 30.374143362045288
Best scored revision CLL: -0.08633


Results 

CLL : -0.092041 

AUC ROC : 0.994258 

AUC PR : 0.415327 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.403827905654907 

Total Inference Time : 3.9964728355407715 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8834691047668457
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8501489350995105;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004884;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6898352249848936;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839194;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5410181383570535;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39895806639251663;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3126481015673571;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926044;  // std dev = 8.01e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24677511743939287;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1783894539568828;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 4.94e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1637609384164225;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.16e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15470532740680085;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420274;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1261691958513932;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
Inference time using transfer learning 2.627922773361206
Parameter learned model CLL:-0.088435 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 215, 0], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 262, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 205, 0], 'false,false,false': [0.0, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.969, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 212, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.01e-09, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 243, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.94e-08, 268, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.969, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 197, 0], 'false,false': [1.39e-08, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 251, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 210, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
{'': [0.007936000000004014, -4.2139852029567983e-17], 'false': [-2.354705577809634e-16, 6.39789539614497e-17], 'false,true': [nan, -2.2720843294654367e-16]}
{'': [0.030273437500002276, -8.474984920802722e-17], 'false': [nan, -8.474984920802722e-17]}
{'': [0.023064046128090536, -9.206727521281785e-17], 'false': [nan, -9.206727521281785e-17], 'false,false': [-4.982464305634849e-17, -1.0831444142684454e-17]}
{'': [0.030273437500000056, -6.696583323135864e-17], 'false': [nan, -6.696583323135864e-17], 'false,false': [-8.588517737666306e-17, -5.551115123125783e-18], 'false,false,false': [nan, -5.551115123125783e-18]}
{'': [0.023064046128092902, 6.535652522321676e-17], 'false': [nan, 6.535652522321676e-17], 'false,false': [nan, 6.535652522321676e-17]}
{'': [0.023064046128092517, 3.289549702593056e-17], 'false': [nan, 3.289549702593056e-17], 'false,false': [nan, 3.289549702593056e-17]}
{'': [0.044023668639053416, 9.113771097669196e-18], 'false': [nan, 9.113771097669196e-18], 'false,false': [nan, 9.113771097669196e-18], 'false,false,false': [nan, 9.113771097669196e-18]}
{'': [0.030273437499999934, 4.312436541932426e-17], 'true': [0.030273437499999934, nan], 'false': [6.875492842856299e-17, 4.3175339846533866e-18]}
{'': [0.015621063240110875, -4.423199301295444e-18], 'false': [nan, -4.423199301295444e-18], 'false,false': [nan, -4.423199301295444e-18]}
{'': [0.023064046128092264, 9.503854685507177e-18], 'false': [-1.0573552615477682e-18, -2.362176648138631e-18], 'false,false': [nan, -2.362176648138631e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 36.09448003768921
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(A, G) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.7512057788947993;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), recursion_accounttype(F, B) )
%   | | | then return 0.759829860144828;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5964566851286947;  // std dev = 1.595, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839186;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.5183293997092475;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.5553664367462844;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.553404199445255;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5879826267251181;  // std dev = 0.050, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.5776873145590465;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, K) )
%   | then return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.11231637819360635;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.42561287562116845;  // std dev = 0.015, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.4172819900429738;  // std dev = 0.007, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.4342822597319133;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.43570595151955854;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.09941977433696099;  // std dev = 1.143, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3550135841583098;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.4401250066797698;  // std dev = 0.042, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.3341802508249765;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.10159632948783659;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(G, E) )
%   | | | then return 0.3243910901804054;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.33241827456525797;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.40481896369939424;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3347878320951721;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.1635480924704537;  // std dev = 0.861, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3227216319738531;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.27709902334346875;  // std dev = 0.971, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.3366955258313679;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.09269127618926049;  // std dev = 5.59e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.25794949189874256;  // std dev = 0.019, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.27049876468670453;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, H), follows(H, D) )
%   | | | then return 0.04171800749626778;  // std dev = 1.223, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3071785497180571;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2517507804071881;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2627603140621225;  // std dev = 0.000800, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(L, A) )
%   | | | then return 0.2646411882425958;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.26924924492423363;  // std dev = 0.031, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.15313826299853664;  // std dev = 1.373, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.21780246646659077;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.006444055048737495;  // std dev = 1.116, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.09783072469927412;  // std dev = 1.333, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.21390591603662953;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22980597639452902;  // std dev = 0.090, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14751117918324969;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2181180796723969;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109144;  // std dev = 3.09e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, G) )
%   | | | then return 0.16326242166203808;  // std dev = 0.987, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.21436807863915175;  // std dev = 0.158, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.18540808255016003;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14077697484941773;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.1811231384657212;  // std dev = 0.000375, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.05982592859271781;  // std dev = 1.160, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.13136087082361841;  // std dev = 1.380, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333666;  // std dev = 8.33e-09, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.11599334786723266;  // std dev = 1.237, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.1727273986806176;  // std dev = 0.151, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.19760369422984814;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16852009045510885;  // std dev = 0.072, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15590100038977864;  // std dev = 0.000177, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0033349515517244;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.175178946371073;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0018190589140736717;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.14900058525555054;  // std dev = 0.023, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.13679278754547247;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.16884861431893036;  // std dev = 0.114, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14568532260611824;  // std dev = 0.000478, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), recursion_accounttype(G, B) )
%   | | | then return -0.17475302557296843;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12243987443341654;  // std dev = 0.995, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.13838719387984513;  // std dev = 0.027, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16321366325391345;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
Inference time using transfer learning 4.1705076694488525
Refined model CLL: -0.086084


******************************************
Best model found
******************************************
Results 

CLL : -0.091013 

AUC ROC : 0.994545 

AUC PR : 0.420546 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.09448003768921 

Total Inference Time : 4.943271160125732 

Total revision time: 45.4028205871582
Best scored revision CLL: -0.086084


Results 

CLL : -0.091013 

AUC ROC : 0.994545 

AUC PR : 0.420546 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.43250513076782 

Total Inference Time : 4.943271160125732 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.1732685565948486
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004885;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7056234789732008;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5279009985974416;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else return -0.11231637819360618;  // std dev = 8.56e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3966869118978321;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783658;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32732693786261535;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.77e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2581181239788562;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20403907612986583;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 2.58e-08, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17069626190744416;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333664;  // std dev = 1.22e-07, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14584921516342955;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12675028777868444;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 1.05e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
Inference time using transfer learning 2.5805468559265137
Parameter learned model CLL:-0.08766 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 220, 0], 'false,false': [8.93e-09, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 192, 0], 'false,false,false': [8.56e-08, 111, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 238, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 112, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.77e-09, 314, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 312, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.58e-08, 316, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 204, 0], 'false,false': [0.0, 93, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 311, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [1.05e-08, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 81, 0]}]
{'': [0.024375000000006076, 7.04903507698512e-17], 'false': [-2.34156128830033e-16, 7.946859544685331e-17], 'false,true': [nan, -2.34156128830033e-16]}
{'': [0.0185119259522958, -1.0366751270947834e-16], 'false': [nan, -1.0366751270947834e-16]}
{'': [0.03566529492455103, -7.767897069984594e-17], 'false': [nan, -7.767897069984594e-17], 'false,false': [-3.469446951953614e-17, 6.601326092365796e-17]}
{'': [0.03566529492455524, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [-7.463684199160717e-17, -9.912705577010326e-18], 'false,false,false': [nan, -9.912705577010326e-18]}
{'': [0.012497997115847538, 9.758648241928128e-17], 'false': [nan, 9.758648241928128e-17], 'false,false': [nan, 9.758648241928128e-17]}
{'': [0.01249799711584647, 3.700743415417188e-17], 'false': [nan, 3.700743415417188e-17], 'false,false': [nan, 3.700743415417188e-17]}
{'': [0.018511925952296053, 2.108018401187006e-18], 'false': [nan, 2.108018401187006e-18], 'false,false': [nan, 2.108018401187006e-18], 'false,false,false': [nan, 2.108018401187006e-18]}
{'': [0.018511925952296275, 2.2428747972225387e-18], 'true': [0.018511925952296275, nan], 'false': [7.292641436263283e-17, -8.356517389651716e-18]}
{'': [0.018511925952296084, -6.282934158650404e-17], 'false': [nan, -6.282934158650404e-17], 'false,false': [nan, -6.282934158650404e-17]}
{'': [0.01851192595229624, 4.002844918716551e-17], 'false': [5.212314669601674e-19, -1.02798428206033e-17], 'false,false': [nan, -1.02798428206033e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 41.33331298828125
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(G, A) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.7336100242350904;  // std dev = 0.071, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109543;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.41291324757023234;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.636140078877621;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.12544463852839205;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5553664367462838;  // std dev = 2.38e-07, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.488699770079618;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5625024035286315;  // std dev = 0.104, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.5886256283796041;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.006238031265186517;  // std dev = 1.113, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5758380177364987;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360676;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.4175135841583104;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.42760198501318414;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.41876717243021777;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.04481466059371738;  // std dev = 1.515, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.4162127764740139;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3715455725540682;  // std dev = 1.328, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.43831104187503916;  // std dev = 0.252, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.10159632948783658;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3221646623416107;  // std dev = 0.034, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.23922035483654275;  // std dev = 1.219, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.023834855614351613;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.33325255859791103;  // std dev = 0.112, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.4463580408673844;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.32279126398715047;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2516278450136183;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(K, A) )
%   | then return -0.09269127618926049;  // std dev = 7.30e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.09269127618926093;  // std dev = 2.11e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.21413736482074677;  // std dev = 0.969, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2698504899715002;  // std dev = 0.247, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.15652425389845293;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.27486226571815897;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2573175568783338;  // std dev = 0.035, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.25928459424101674;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29549506248325225;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(H, A) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.08518475138839678;  // std dev = 2.79e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(F, G) )
%   | | | then return 0.19451848263495652;  // std dev = 0.992, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.31588403762452577;  // std dev = 0.082, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.20889545472126095;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.11114185897843579;  // std dev = 1.269, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2188018688882541;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2128391426060047;  // std dev = 0.036, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.28181020390761646;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22517706974952623;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109141;  // std dev = 2.79e-09, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( follows(E, A), follows(A, F) )
%   | | | then return 0.18027932774072555;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.1236381485840397;  // std dev = 2.017, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | | else return -0.35293482536557425;  // std dev = 1.106, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.19248323304642603;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18419477172385215;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.174754931786323;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.18531596695615304;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(J, A) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.15573804364514057;  // std dev = 0.028, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.16492590691627754;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.24748396046190813;  // std dev = 0.149, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18980163508599776;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15832677551445995;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15593199824943954;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.029834019469077572;  // std dev = 1.285, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.1373546083220934;  // std dev = 0.884, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else return -0.06842697784420303;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.11257405712010317;  // std dev = 1.371, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.1503483393174452;  // std dev = 0.206, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.0692926351377682;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.15859669624754258;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.07976686297763541;  // std dev = 1.371, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return -0.5121828324560237;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.18663702446798902;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14143664142013457;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202579;  // std dev = 8.23e-09, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
Inference time using transfer learning 5.4861063957214355
Refined model CLL: -0.084734


******************************************
Best model found
******************************************
Results 

CLL : -0.090411 

AUC ROC : 0.994215 

AUC PR : 0.431612 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 41.33331298828125 

Total Inference Time : 6.813201665878296 

Total revision time: 53.29649305343628
Best scored revision CLL: -0.084734


Results 

CLL : -0.090411 

AUC ROC : 0.994215 

AUC PR : 0.431612 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 53.3261775970459 

Total Inference Time : 6.813201665878296 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.9993088245391846
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6270352491809144;  // std dev = 1.637, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283915;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5575538958638865;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41947213641790326;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783631;  // std dev = 1.83e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.35706262394847316;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926105;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2413898746709105;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 3.23e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19540807122483259;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1622269719775633;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07324622576333702;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13746057553515165;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420267;  // std dev = 2.63e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1568725739046153;  // std dev = 2.63e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202622;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning 2.9558582305908203
Parameter learned model CLL:-0.097334 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.361, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.637, 3, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [2.79e-08, 49, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [1.83e-08, 43, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.23e-09, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 48, 0], 'false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.63e-09, 0, 25], 'false,true': [0.0, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 7, 0]}]
{'': [0.06858710562414343, 5.773159728050814e-17], 'false': [4.163336342344337e-17, -1.1102230246251566e-17], 'false,true': [nan, 4.163336342344337e-17]}
{'': [0.09566326530612283, -1.850371707708594e-17], 'false': [nan, -1.850371707708594e-17]}
{'': [0.0369822485207102, 2.62416351275037e-17], 'false': [nan, 2.62416351275037e-17], 'false,false': [1.586032892321652e-17, 0.0]}
{'': [0.03698224852070993, 2.1350442781253012e-17], 'false': [nan, 2.1350442781253012e-17], 'false,false': [7.745742032268534e-18, 3.0839528461809902e-18], 'false,false,false': [nan, 3.0839528461809902e-18]}
{'': [-5.329070518200751e-17, -1.1354553660939102e-17], 'false': [nan, -1.1354553660939102e-17], 'false,false': [nan, -1.1354553660939102e-17]}
{'': [0.03698224852071, 1.0327656043024712e-17], 'false': [nan, 1.0327656043024712e-17], 'false,false': [nan, 1.0327656043024712e-17]}
{'': [0.03698224852071009, 1.0675221390626506e-18], 'false': [nan, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18], 'false,false,false': [nan, 1.0675221390626506e-18]}
{'': [0.03698224852071004, 9.912705577010326e-19], 'true': [0.03698224852071004, nan], 'false': [3.469446951953614e-18, 0.0]}
{'': [0.03698224852071003, 8.074349270001138e-18], 'false': [nan, 8.074349270001138e-18], 'false,false': [nan, 8.074349270001138e-18]}
{'': [8.881784197001253e-18, -8.410780489584519e-19], 'false': [0.0, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 17.890557289123535
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.052806745544287735;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then return 0.7505511758931249;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839155;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, F), follows(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.550241915719981;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return 0.6064752625860313;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5761847487788979;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(H, A) )
%   | then return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then return 0.29266943256620326;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4133149917492119;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.4601513063727114;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4337896459870229;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.3699406878293229;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3392343988494659;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.323264603984776;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.30465542172395016;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.05132694169836375;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3126849282899984;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926103;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.27183829977131185;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2957541023022315;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.25431708454252877;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24826089519044456;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.28944574894581643;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.22190143861035574;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2068738735822503;  // std dev = 3.63e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20961568499492192;  // std dev = 0.000623, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.22434051997233015;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23445665086172665;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109177;  // std dev = 1.05e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.06129486232680248;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1878698795752259;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return 0.17686991347862846;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23062763030943947;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16607719685705816;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.07324622576333704;  // std dev = 9.13e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.17648727192848868;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15062849510403847;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20345242618417828;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return 0.16672981026829822;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14452626789963854;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.0684269778442027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.027462685274713974;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.14101065667598744;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return 0.13409831489842405;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1649655986368639;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12698031501565;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning 9.168807983398438
Refined model CLL: -0.09621


******************************************
Best model found
******************************************
Results 

CLL : -0.086786 

AUC ROC : 0.994125 

AUC PR : 0.376874 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.890557289123535 

Total Inference Time : 2.488534927368164 

Total revision time: 22.597434759140015
Best scored revision CLL: -0.09621


Results 

CLL : -0.086786 

AUC ROC : 0.994125 

AUC PR : 0.376874 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.627119302749634 

Total Inference Time : 2.488534927368164 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2114884853363037
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6493397336422128;  // std dev = 1.925, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5774024431036925;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.34315631919308637;  // std dev = 2.132, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29581145754703814;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926103;  // std dev = 2.63e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24971615177668102;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.43e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22015736134334965;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109157;  // std dev = 6.23e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.20195427924634918;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17135153127837888;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 4.47e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10991005832956433;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning 2.7568154335021973
Parameter learned model CLL:-0.093122 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.99, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 84, 0], 'false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.925, 4, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 105, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.87e-08, 74, 0], 'false,false,false': [1.67e-08, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.132, 5, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.96e-08, 80, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 98, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.23e-08, 108, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [0.0, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 74, 0], 'false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.47e-09, 86, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 70, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 14, 0]}]
{'': [0.019223375624760057, 7.993605777301127e-17], 'false': [7.401486830834377e-17, -6.938893903907228e-18], 'false,true': [nan, 7.401486830834377e-17]}
{'': [0.06858710562414362, -8.458842092382146e-18], 'false': [nan, -8.458842092382146e-18]}
{'': [-1.1368683772161603e-15, 5.968940992608368e-17], 'false': [nan, 5.968940992608368e-17], 'false,false': [4.650934292348629e-17, 1.460819769243627e-17]}
{'': [0.08264462809917346, 1.0992307174506501e-17], 'false': [nan, 1.0992307174506501e-17], 'false,false': [4.4408920985006264e-17, -2.64338815386942e-18], 'false,false,false': [nan, -2.64338815386942e-18]}
{'': [0.05339978640085431, 7.320151810715318e-18], 'false': [nan, 7.320151810715318e-18], 'false,false': [nan, 7.320151810715318e-18]}
{'': [0.03698224852070998, 3.058777720906043e-17], 'false': [nan, 3.058777720906043e-17], 'false,false': [nan, 3.058777720906043e-17]}
{'': [0.019223375624759648, 3.5979449872111554e-17], 'false': [nan, 3.5979449872111554e-17], 'false,false': [nan, 3.5979449872111554e-17], 'false,false,false': [nan, 3.5979449872111554e-17]}
{'': [-1.4210854715202004e-16, -7.84396702180817e-18], 'false': [-5.251054846200065e-18, -7.709882115452476e-19], 'true': [-1.4210854715202004e-16, nan]}
{'': [-6.217248937900877e-17, 2.0009833583360378e-17], 'false': [nan, 2.0009833583360378e-17], 'false,false': [nan, 2.0009833583360378e-17]}
{'': [0.03698224852071005, -1.1895246692412391e-17], 'false': [-7.93016446160826e-18, 3.469446951953614e-18], 'false,false': [nan, 3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 25.734180212020874
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.6639178566553987;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.7214467722260102;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7674882971707006;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6024101448206229;  // std dev = 0.887, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.08668098809943903;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839133;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5673735254057702;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.23098599745399842;  // std dev = 1.147, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5906175509502025;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5550183339816487;  // std dev = 0.000582, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.6081258051329916;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6515152564887299;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.11231637819360621;  // std dev = 7.68e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.42846095677410917;  // std dev = 0.042, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4653813205963686;  // std dev = 0.079, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5123316071969013;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.41718424834212753;  // std dev = 0.000361, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4175700239095939;  // std dev = 6.91e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.10159632948783615;  // std dev = 6.45e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.32917001562181725;  // std dev = 0.049, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.3786997881534191;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.0043434781023384455;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.32071061760011077;  // std dev = 1.17e-05, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.012557942383892481;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return -0.092691276189261;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.21260058080516014;  // std dev = 0.978, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.05766299511726667;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(E, A), tweets(E, G) )
%   | | | then return 0.3337601267605259;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26602716275671895;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.2685406557738983;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33475742731458774;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2551724762589651;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.0851847513883968;  // std dev = 5.19e-09, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.08518475138839691;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.22743221548319287;  // std dev = 0.074, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.21206414133357274;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.26900564407717437;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2258705820096419;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20804743718408938;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.09707198893722484;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20975788070750667;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109162;  // std dev = 5.19e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.18418451577123862;  // std dev = 0.017, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.19506885802247256;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.20572863382242887;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2396771248199805;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.195517021032491;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1751867730298674;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17709661881991645;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.1586139162173887;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.018316414890927606;  // std dev = 1.258, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.5703422641385819;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.19798326640949104;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.16287513161513684;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17605656344554144;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15833380115368098;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15212236727433773;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420265;  // std dev = 4.75e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.14254155242373187;  // std dev = 0.056, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1651951398735109;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.20132006036485112;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15005956933039602;  // std dev = 0.000167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.10775575081909808;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13277834642193498;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13407925229350293;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(K, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
Inference time using transfer learning 10.43475866317749
Refined model CLL: -0.090942


******************************************
Best model found
******************************************
Results 

CLL : -0.085301 

AUC ROC : 0.995115 

AUC PR : 0.398568 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.734180212020874 

Total Inference Time : 3.92439341545105 

Total revision time: 32.37538385391235
Best scored revision CLL: -0.090942


Results 

CLL : -0.085301 

AUC ROC : 0.995115 

AUC PR : 0.398568 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.40506839752197 

Total Inference Time : 3.92439341545105 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3921782970428467
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7956489350995126;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7187552946429698;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839105;  // std dev = 8.30e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5577596695763771;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.1123163781936062;  // std dev = 9.31e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.11231637819360643;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4064019122543033;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31060744775041776;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926074;  // std dev = 6.97e-09, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22044249394599344;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.191307507584808;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109153;  // std dev = 7.74e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19766964476118953;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333725;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else return -0.07324622576333709;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12971682913802923;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420264;  // std dev = 5.43e-09, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12482988493671626;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
Inference time using transfer learning 2.8393383026123047
Parameter learned model CLL:-0.094958 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [2.165, 5, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 141, 0], 'false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.3e-08, 124, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [9.31e-08, 127, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 159, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.97e-09, 143, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.949, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 150, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.74e-08, 138, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [0.0, 0, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 139, 0], 'false,false': [7.45e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 147, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 123, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 12, 0]}]
{'': [0.05859374999999893, -1.4053456007913375e-16], 'false': [-8.188879046880587e-17, -3.2653618371328133e-18], 'false,true': [nan, -3.149568864184841e-18]}
{'': [0.012984764542938154, 5.551115123125783e-17], 'false': [nan, 5.551115123125783e-17]}
{'': [0.012984764542935722, 7.131359574234582e-17], 'false': [nan, 7.131359574234582e-17], 'false,false': [6.818692592186001e-17, 0.0]}
{'': [0.025299375948726523, -7.700968956937502e-17], 'false': [nan, -7.700968956937502e-17], 'false,false': [-6.563582661305957e-17, -7.93016446160826e-18], 'false,false,false': [nan, -7.93016446160826e-18]}
{'': [0.025299375948726985, 4.8135543725006784e-17], 'false': [nan, 4.8135543725006784e-17], 'false,false': [nan, 4.8135543725006784e-17]}
{'': [0.04806921967633399, 3.700743415417188e-17], 'false': [nan, 3.700743415417188e-17], 'false,false': [nan, 3.700743415417188e-17]}
{'': [0.03698224852071015, 4.344350965924526e-17], 'false': [nan, 4.344350965924526e-17], 'false,false': [nan, 4.344350965924526e-17], 'false,false,false': [nan, 4.344350965924526e-17]}
{'': [-1.5395092608135505e-16, -1.2255708713394585e-17], 'false': [-3.1948864017990118e-18, 3.7007434154171884e-18], 'true': [-1.5395092608135505e-16, nan]}
{'': [0.036982248520710005, 3.0210150329936235e-17], 'false': [nan, 3.0210150329936235e-17], 'false,false': [nan, 3.0210150329936235e-17]}
{'': [0.025299375948726662, -9.86864910777917e-18], 'false': [-1.805240690447409e-17, -1.734723475976807e-18], 'false,false': [nan, -1.734723475976807e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 24.221477031707764
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, I) )
%   | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(F, D) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.7279931426280416;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7620720642963899;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, J) )
%   | then if ( follows(J, A) )
%   | | then return -0.12544463852839105;  // std dev = 7.21e-09, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5040843854642328;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.5587770498613668;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2199283074351094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I) )
%   | | | then return 0.5845677324489943;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5845677324489943;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.599607925734748;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, L) )
%   | then return -0.11231637819360624;  // std dev = 7.79e-09, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4290702381651679;  // std dev = 0.036, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.08363147449121704;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(E, A), tweets(E, G) )
%   | | | then return 0.42306426823618953;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4414988642937215;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.4300353975444621;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4342443132001592;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.45535735073261874;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.44953330305897043;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3294784821395819;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.3212970124429304;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3657363468551973;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34276730077888196;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.07077744003880893;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.36378837999154096;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3240944871236626;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.21729702295234837;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.09269127618926071;  // std dev = 6.59e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2611455438375296;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.25558176552368744;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.29061945698506697;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2617693530806218;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2865298346137743;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2619100468044088;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2792429673971763;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29371811107264645;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839679;  // std dev = 5.89e-09, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1900769855412531;  // std dev = 0.991, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.007426461164656712;  // std dev = 1.477, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.22581376353483235;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.12040717871307663;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.22491241582912525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.07877675473109165;  // std dev = 4.41e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.12980454892520663;  // std dev = 1.695, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return -0.013635207896604662;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, H), tweets(D, I) )
%   | | | then return 0.18992865864279712;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2034697338806354;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.011865474600811488;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333706;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1393679323004654;  // std dev = 0.988, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.08571164908997071;  // std dev = 1.183, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.20101099389437121;  // std dev = 1.042, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.18671321471225713;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.17052097527988175;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.010046432993516752;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420265;  // std dev = 4.75e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), tweets(E, F) )
%   | | | then return 0.11990867916034063;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.2054554026561363;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13249498756203293;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.15966223047613334;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14712680742396042;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1915042408918537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning 6.476507186889648
Refined model CLL: -0.092322


******************************************
Best model found
******************************************
Results 

CLL : -0.084389 

AUC ROC : 0.996407 

AUC PR : 0.497738 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.221477031707764 

Total Inference Time : 2.9403886795043945 

Total revision time: 30.33311891555786
Best scored revision CLL: -0.092322


Results 

CLL : -0.084389 

AUC ROC : 0.996407 

AUC PR : 0.497738 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.36280345916748 

Total Inference Time : 2.9403886795043945 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6362106800079346
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995113;  // std dev = 4.13e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048816;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839163;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5262402231540504;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360658;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3769944707155215;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27946627314998035;  // std dev = 0.231, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926055;  // std dev = 6.59e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27681346663025885;  // std dev = 2.06e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17731571602317783;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109147;  // std dev = 7.88e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18563174032166693;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.07324622576333707;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13884362827793462;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10183011911330489;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning 2.9060001373291016
Parameter learned model CLL:-0.094842 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [4.13e-07, 0, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 177, 0], 'false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 196, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 191, 0], 'false,false,false': [7.45e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 171, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.231, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 208, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.06e-07, 0, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 185, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.88e-08, 189, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [0.995, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 194, 0], 'false,false': [6.45e-09, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 200, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 176, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 9, 0]}]
{'': [1.7053025658242404e-15, -2.1732025162875404e-16], 'false': [-1.9068237259098733e-16, -1.0092936587501423e-17], 'false,true': [nan, -1.45520758029964e-16]}
{'': [-1.4210854715202004e-16, -2.945489657168783e-17], 'false': [nan, -2.945489657168783e-17]}
{'': [0.028277877274014325, -3.0778460088618204e-17], 'false': [nan, -3.0778460088618204e-17], 'false,false': [-1.6275520779845225e-17, 5.046468293750712e-18]}
{'': [0.04535147392290245, -8.688701931849052e-17], 'false': [nan, -8.688701931849052e-17], 'false,false': [-7.920889415454333e-17, -2.135044278125301e-18], 'false,false,false': [nan, -2.135044278125301e-18]}
{'': [0.05339978640085471, 4.2700885562506023e-17], 'false': [nan, 4.2700885562506023e-17], 'false,false': [nan, 4.2700885562506023e-17]}
{'': [4.263256414560601e-16, 3.120626880027467e-17], 'false': [nan, 3.120626880027467e-17], 'false,false': [nan, 3.120626880027467e-17]}
{'': [0.045351473922902535, 3.289549702593056e-17], 'false': [nan, 3.289549702593056e-17], 'false,false': [nan, 3.289549702593056e-17], 'false,false,false': [nan, 3.289549702593056e-17]}
{'': [0.009802960494069191, 6.671762777090143e-17], 'true': [0.009802960494069191, nan], 'false': [6.752902933287034e-17, 2.1912296538654404e-18]}
{'': [0.02827787727401266, 3.3306690738754695e-17], 'false': [nan, 3.3306690738754695e-17], 'false,false': [nan, 3.3306690738754695e-17]}
{'': [0.045351473922902404, -4.200843876960052e-18], 'false': [-5.046468293750712e-18, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 30.72225785255432
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, K) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.693808477013741;  // std dev = 1.374, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, G), tweets(D, H) )
%   | | | then return 0.724099020112561;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7434492050828894;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.49725118998873197;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.12544463852839138;  // std dev = 2.63e-09, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(I, J) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5404389252457421;  // std dev = 0.993, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.489213931610387;  // std dev = 0.899, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.17592187839200765;  // std dev = 1.075, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4552196700413584;  // std dev = 1.256, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.5697990313232679;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6100344480140447;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5626310130152693;  // std dev = 0.071, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5740517917595906;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360644;  // std dev = 3.73e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.4080137585441552;  // std dev = 0.992, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.5055168342369588;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4931877395213877;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.460214602945727;  // std dev = 0.153, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2532229919813947;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.41462480631876797;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4315205742570591;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.2537719133535846;  // std dev = 1.642, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.3406707715989843;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.3484163858058524;  // std dev = 0.146, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3779589857082113;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.191531353528194;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.32530849424524444;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2023567700025552;  // std dev = 0.932, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.0926912761892607;  // std dev = 6.18e-09, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return -0.092691276189261;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(A, E) )
%   | | | then return 0.27875445772394525;  // std dev = 0.025, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2606911197950044;  // std dev = 0.067, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.3056375047187609;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2926004435349556;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.15492770256681204;  // std dev = 0.944, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.27822311262868826;  // std dev = 0.080, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.32403008529766447;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2672747550463966;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.08518475138839678;  // std dev = 5.43e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.22145643763579806;  // std dev = 0.072, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2458104664735437;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, D), follows(E, A) )
%   | | | then return 0.03770709007879288;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22076907083287878;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27759128616392237;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2104877121223205;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.23588244314800888;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2385494160150568;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109146;  // std dev = 4.75e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, D) )
%   | | | then return 0.15404421778798474;  // std dev = 0.981, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.189416615864849;  // std dev = 0.058, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.3154378286766698;  // std dev = 0.965, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1939814257072464;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.206713610563286;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21761836622969316;  // std dev = 0.205, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.21235447081114253;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18246865154406813;  // std dev = 0.044, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07324622576333668;  // std dev = 8.38e-09, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14041205727110206;  // std dev = 0.968, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.03881142137612137;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), follows(D, H) )
%   | | | then return -0.029108099136272835;  // std dev = 1.715, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return 0.1828868621370335;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.19921922236286946;  // std dev = 0.162, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14749953978480906;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.027889902038810088;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1662298540934348;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420262;  // std dev = 5.82e-09, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.14830406740524957;  // std dev = 0.056, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.04961621089057741;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(D, A), follows(E, A) )
%   | | | then return 0.18121638115428237;  // std dev = 0.122, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14082897312083584;  // std dev = 0.069, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.1517938932814269;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1413076621782824;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09794930667430948;  // std dev = 0.430, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
Inference time using transfer learning 7.635308027267456
Refined model CLL: -0.092297


******************************************
Best model found
******************************************
Results 

CLL : -0.084945 

AUC ROC : 0.995831 

AUC PR : 0.43727 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.72225785255432 

Total Inference Time : 4.777780532836914 

Total revision time: 39.207940340042114
Best scored revision CLL: -0.092297


Results 

CLL : -0.084945 

AUC ROC : 0.995831 

AUC PR : 0.43727 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.23762488365173 

Total Inference Time : 4.777780532836914 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9541351795196533
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.14185106490048766;  // std dev = 7.68e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7038561731469818;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5231506953486897;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360663;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4153092126443547;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3020558549936776;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926047;  // std dev = 6.84e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25275169836649447;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19027844419310982;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.77e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1733913283445936;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333661;  // std dev = 1.31e-07, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15506083560271355;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420261;  // std dev = 4.17e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1342177095776548;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202626;  // std dev = 1.05e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
Inference time using transfer learning 2.8106794357299805
Parameter learned model CLL:-0.093222 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [2.193, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 208, 0], 'false,false': [7.68e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 203, 0], 'false,false,false': [0.0, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 203, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.84e-09, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 272, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.77e-08, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.31e-07, 219, 0], 'false,false': [1.18e-08, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.17e-09, 228, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [1.05e-08, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 36, 0]}]
{'': [0.03671114736903867, -7.767339792054327e-17], 'false': [-2.391249591500337e-16, 6.055761952500853e-17], 'false,true': [nan, -2.391249591500337e-16]}
{'': [0.022714981070845925, -7.898819938044592e-17], 'false': [nan, -7.898819938044592e-17]}
{'': [0.04338842975206342, -8.210052619076788e-17], 'false': [nan, -8.210052619076788e-17], 'false,false': [-4.594026308793751e-17, -2.061842760018148e-17]}
{'': [0.022714981070849287, -7.74793940589471e-17], 'false': [nan, -7.74793940589471e-17], 'false,false': [-9.188052617587502e-17, -1.0408340855860843e-17], 'false,false,false': [nan, -1.0408340855860843e-17]}
{'': [0.03671114736903449, 4.712783451470052e-17], 'false': [nan, 4.712783451470052e-17], 'false,false': [nan, 4.712783451470052e-17]}
{'': [0.022714981070849065, 3.428629928989454e-17], 'false': [nan, 3.428629928989454e-17], 'false,false': [nan, 3.428629928989454e-17]}
{'': [0.03671114736903445, 1.3322676295501878e-17], 'false': [nan, 1.3322676295501878e-17], 'false,false': [nan, 1.3322676295501878e-17], 'false,false,false': [nan, 1.3322676295501878e-17]}
{'': [0.022714981070849006, 3.744281573245626e-17], 'true': [0.022714981070849006, nan], 'false': [7.807047753071877e-17, 3.854941057726238e-18]}
{'': [0.015380859374999934, 1.7529837230923523e-17], 'false': [nan, 1.7529837230923523e-17], 'false,false': [nan, 1.7529837230923523e-17]}
{'': [0.01538085937499998, 1.52549728574449e-17], 'false': [4.912491259403347e-19, -4.625929269271485e-18], 'false,false': [nan, -4.625929269271485e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 28.05935835838318
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995115;  // std dev = 3.58e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.6628696386260489;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.7380804263867032;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5656272583648007;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.05280674554428779;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.6018263533874249;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5657329875219783;  // std dev = 0.040, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.4830088542688388;  // std dev = 1.340, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.5826833646261859;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6226673874886068;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5821699216304297;  // std dev = 0.041, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5672376701332329;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.42526789757093025;  // std dev = 0.039, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.4390337291920852;  // std dev = 0.088, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.31731970982501606;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.06677278870441651;  // std dev = 1.514, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.47726475990032524;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.4397577653355027;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.41751358415831014;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.31701346251471285;  // std dev = 1.015, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.24880186532420495;  // std dev = 0.836, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.39286800870011496;  // std dev = 0.120, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3294832200927434;  // std dev = 0.061, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3482270191188325;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.02862648012859975;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3418386347714803;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.09269127618926051;  // std dev = 4.17e-09, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.25616860220307697;  // std dev = 1.005, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.1236039542311949;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3090490676024067;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27719973640346046;  // std dev = 0.099, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.12908444684401754;  // std dev = 1.323, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.0036410448411686724;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.26348124106486176;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2520518468830474;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( follows(E, D), follows(D, F) )
%   | | | then return 0.1668466499957809;  // std dev = 1.960, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | | | else return 0.2340201418084333;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.27941590378202086;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21978799666753368;  // std dev = 0.109, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.12026346384857765;  // std dev = 0.299, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0787767547310915;  // std dev = 7.45e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | | else return -0.07877675473109168;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07877675473109166;  // std dev = 1.32e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, D), tweets(E, F) )
%   | | | then return 0.1916340636727819;  // std dev = 0.068, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.17781207744831212;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.19697659161470976;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20818554535246866;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.10208353365656031;  // std dev = 1.363, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.3663225941162769;  // std dev = 0.753, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22649615315377591;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18341744029160115;  // std dev = 0.080, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333673;  // std dev = 7.96e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.16542644915352955;  // std dev = 0.078, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2179165153610804;  // std dev = 0.165, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.09561322161000403;  // std dev = 0.959, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1618605124099265;  // std dev = 0.094, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.06261422482472051;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.06842697784420261;  // std dev = 4.34e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | | else return -0.06842697784420262;  // std dev = 1.67e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06842697784420267;  // std dev = 2.46e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.14275206985150726;  // std dev = 0.045, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.07940381627995555;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.14652307810860088;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16418744063774135;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.2083439974172799;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15858900728898284;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return 0.15941325831607034;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13809253720699635;  // std dev = 0.064, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202626;  // std dev = 1.61e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning 6.452964782714844
Refined model CLL: -0.09216


******************************************
Best model found
******************************************
Results 

CLL : -0.086314 

AUC ROC : 0.995028 

AUC PR : 0.387899 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.05935835838318 

Total Inference Time : 5.266891717910767 

Total revision time: 37.82494783401489
Best scored revision CLL: -0.09216


Results 

CLL : -0.086314 

AUC ROC : 0.995028 

AUC PR : 0.387899 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.85463237762451 

Total Inference Time : 5.266891717910767 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0643057823181152
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.797542874493451;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7002914044636409;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5749718597729158;  // std dev = 1.49e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3716122615899415;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3129984380521938;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926103;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21678962423571935;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 3.23e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20484548819691023;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109169;  // std dev = 3.25e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16991130376582744;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17523605685580265;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442027;  // std dev = 1.86e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15133105621092827;  // std dev = 4.93e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
Inference time using transfer learning 2.8374340534210205
Parameter learned model CLL:-0.088478 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.371, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.08e-08, 39, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 65, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [1.49e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 42, 0], 'false,false,false': [1.67e-08, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 40, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.23e-09, 82, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.25e-08, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 54, 0], 'false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [4.93e-09, 0, 31], 'false,true': [0.0, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 23, 0]}]
{'': [0.05693296602387652, 6.125368411725002e-17], 'false': [4.2700885562506023e-17, 0.0], 'false,true': [nan, 4.2700885562506023e-17]}
{'': [0.03027343749999939, -1.708035422500241e-17], 'false': [nan, -1.708035422500241e-17]}
{'': [2.865091676452017e-16, 3.3306690738754695e-17], 'false': [nan, 3.3306690738754695e-17], 'false,false': [0.0, 1.5419764230904953e-17]}
{'': [0.05693296602387522, 2.1425356615573195e-17], 'false': [nan, 2.1425356615573195e-17], 'false,false': [-6.938893903907228e-18, -8.163404592832034e-18], 'false,false,false': [nan, -8.163404592832034e-18]}
{'': [0.030273437499999792, -2.3042364662031552e-17], 'false': [nan, -2.3042364662031552e-17], 'false,false': [nan, -2.3042364662031552e-17]}
{'': [0.056932966023875105, 1.0831444142684454e-17], 'false': [nan, 1.0831444142684454e-17], 'false,false': [nan, 1.0831444142684454e-17]}
{'': [0.030273437500000076, 1.5741968259610428e-17], 'false': [nan, 1.5741968259610428e-17], 'false,false': [nan, 1.5741968259610428e-17], 'false,false,false': [nan, 1.5741968259610428e-17]}
{'': [0.030273437499999944, -2.44902137784961e-18], 'true': [0.030273437499999944, nan], 'false': [1.02798428206033e-18, 9.912705577010326e-19]}
{'': [-1.7906822977825105e-17, 3.8095888099882826e-18], 'false': [nan, 3.8095888099882826e-18], 'false,false': [nan, 3.8095888099882826e-18]}
{'': [2.5069552168955147e-17, -2.921639538487254e-18], 'false': [-8.163404592832033e-19, 6.033820786006285e-19], 'false,false': [nan, 6.033820786006285e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 13.339979410171509
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(F, A) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7443356231566909;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839152;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.5960526174841312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07308962159650013;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.5923392588631842;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.602860353052613;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(G, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.43314016573974023;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.493207800817096;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.3452129797046337;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.40837598017508725;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3260790562721774;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3207118471601497;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.09269127618926104;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.26113662840207474;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29390933009996756;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839679;  // std dev = 7.45e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.22194510885453722;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0926874777893214;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.23458883112684017;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20725094354143214;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.043091048965868885;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, G) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(A, D), follows(F, D) )
%   | | | then return 0.1871793581467618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2209834255906397;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.19193294365627606;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17691888655701224;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return 0.17219501408125457;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.181009912509157;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07324622576333704;  // std dev = 9.13e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.1603504945559927;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17104945110068787;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.12363402962278136;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.10532332711070547;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), tweets(H, I) )
%   | | | then return 0.15888883050701694;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1504465266963194;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.17045842163586317;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.1399177789677163;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14820402105563538;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.18405558075087936;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.1323336450201068;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13493408250414438;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.14769006235432816;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.06419184008202619;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning 4.875874042510986
Refined model CLL: -0.086917


******************************************
Best model found
******************************************
Results 

CLL : -0.091627 

AUC ROC : 0.993348 

AUC PR : 0.355582 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.339979410171509 

Total Inference Time : 2.3248558044433594 

Total revision time: 18.043079614639282
Best scored revision CLL: -0.086917


Results 

CLL : -0.091627 

AUC ROC : 0.993348 

AUC PR : 0.355582 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.069992780685425 

Total Inference Time : 2.3248558044433594 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2976317405700684
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.1418510649004877;  // std dev = 5.27e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7226658968615449;  // std dev = 2.53e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839127;  // std dev = 2.11e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5426224435029775;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360626;  // std dev = 6.14e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4078363706664259;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31253358253921343;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926092;  // std dev = 5.74e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2634847960680239;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.10e-09, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1694588795406522;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109154;  // std dev = 7.45e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17246007531867363;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333707;  // std dev = 3.16e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14750059074521052;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.02e-09, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14419962048422696;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202626;  // std dev = 1.67e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202623;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
Inference time using transfer learning 2.6675655841827393
Parameter learned model CLL:-0.087992 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.992, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 84, 0], 'false,false': [5.27e-09, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.53e-07, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [2.11e-08, 133, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [6.14e-08, 83, 0], 'false,false,false': [0.0, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [5.27e-08, 88, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 107, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.1e-09, 108, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-08, 132, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [0.992, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [3.16e-08, 70, 0], 'false,false': [1.05e-08, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.02e-09, 118, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 62], 'false,true': [1.67e-08, 83, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 36, 0]}]
{'': [0.015621063240110127, 2.6569439905559303e-17], 'false': [7.401486830834377e-17, 3.027880976250427e-17], 'false,true': [nan, 7.401486830834377e-17]}
{'': [1.0314330035227261e-15, 3.3390166154140044e-18], 'false': [nan, 3.3390166154140044e-18]}
{'': [0.015621063240110972, 6.75787928032704e-17], 'false': [nan, 6.75787928032704e-17], 'false,false': [4.5479015466572676e-17, -1.0408340855860843e-17]}
{'': [0.015621063240110353, -2.5480528434019987e-17], 'false': [nan, -2.5480528434019987e-17], 'false,false': [3.154042683594195e-17, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.01562106324011086, 3.320293157757477e-17], 'false': [nan, 3.320293157757477e-17], 'false,false': [nan, 3.320293157757477e-17]}
{'': [-2.865091676452017e-16, 2.6727591333568582e-17], 'false': [nan, 2.6727591333568582e-17], 'false,false': [nan, 2.6727591333568582e-17]}
{'': [0.04402366863905321, 4.2053902447922596e-17], 'false': [nan, 4.2053902447922596e-17], 'false,false': [nan, 4.2053902447922596e-17], 'false,false,false': [nan, 4.2053902447922596e-17]}
{'': [0.015621063240110856, 7.065055611250995e-18], 'true': [0.015621063240110856, nan], 'false': [1.4274296030894868e-17, 2.7755575615628915e-18]}
{'': [0.015621063240110818, 2.5403408190575616e-17], 'false': [nan, 2.5403408190575616e-17], 'false,false': [nan, 2.5403408190575616e-17]}
{'': [0.0, 1.3994407873426343e-18], 'false': [3.3440452548950498e-18, -7.709882115452476e-19], 'false,false': [nan, -7.709882115452476e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 21.004095315933228
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.858148935099512;  // std dev = 1.33e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(F, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then return 0.7422198280150732;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(J, A) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.1254446385283913;  // std dev = 4.17e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5550986407418835;  // std dev = 0.005, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5874036882853251;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.040453537934238025;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5497427206538619;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.11231637819360621;  // std dev = 7.57e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.11231637819360635;  // std dev = 2.95e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.4175787125113058;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.41573821526438176;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4848101425555222;  // std dev = 0.248, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41335538682031725;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.10159632948783617;  // std dev = 6.18e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.27637750607542716;  // std dev = 0.930, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.319794078043684;  // std dev = 0.021, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.38593986632209487;  // std dev = 0.229, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.012621486173183668;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.09269127618926108;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.09269127618926103;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.2705604800649511;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.25099493156974817;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3191594078730885;  // std dev = 0.196, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.2551233211252427;  // std dev = 0.003, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.242181933697216;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3007025543309848;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.0851847513883968;  // std dev = 4.93e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.08518475138839685;  // std dev = 3.09e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.10351916570808861;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.21151963273853394;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.21120765454761609;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2081193435652785;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2534599600036471;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20991799865452826;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.22489223856834162;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109161;  // std dev = 5.43e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return -0.07877675473109179;  // std dev = 9.31e-10, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18841421340423858;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2576711081724901;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.17732022190272612;  // std dev = 0.000114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1757534375831452;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.1776579486294524;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.17652886887565916;  // std dev = 0.951, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17580945725077404;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.20384755880426872;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.073246225763337;  // std dev = 3.09e-09, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return -0.12026575672779642;  // std dev = 1.696, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.1547912086498676;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.15679076887212937;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15302223520466351;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20041511851091576;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1512297429353491;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15890130166864255;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.06842697784420267;  // std dev = 4.06e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1852975638750679;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14113635359438698;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.13405804581186853;  // std dev = 0.000254, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13723910669976666;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.1334575873906556;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13053777499278818;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1360866332758545;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1414684823491054;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
Inference time using transfer learning 5.178370714187622
Refined model CLL: -0.084968


******************************************
Best model found
******************************************
Results 

CLL : -0.090975 

AUC ROC : 0.993031 

AUC PR : 0.348617 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.004095315933228 

Total Inference Time : 3.3926920890808105 

Total revision time: 27.408334970474243
Best scored revision CLL: -0.084968


Results 

CLL : -0.090975 

AUC ROC : 0.993031 

AUC PR : 0.348617 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.435248136520386 

Total Inference Time : 3.3926920890808105 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5870726108551025
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6903655333137714;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283916;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.523921190868122;  // std dev = 0.199, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360615;  // std dev = 1.01e-07, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42428363052172063;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3036554424016053;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926062;  // std dev = 6.45e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2499115083692641;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19324727234444108;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109147;  // std dev = 8.02e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17159534540524465;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 8.09e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return -0.07324622576333707;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13610493251377964;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.82e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07923731165344368;  // std dev = 0.255, 100.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=93 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
Inference time using transfer learning 2.376136541366577
Parameter learned model CLL:-0.088406 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.995, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 145, 0], 'false,false': [4.93e-09, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 191, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.199, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [1.01e-07, 138, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 151, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 177, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 187, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.02e-08, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.09e-08, 149, 0], 'false,false': [1.05e-08, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 208, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.255, 7, 93], 'false,true': [0.0, 168, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 39, 0]}]
{'': [0.010525124490720615, -1.8376105235175005e-16], 'false': [-9.800589458760002e-17, 2.2970131543968756e-17], 'false,true': [nan, -9.800589458760002e-17]}
{'': [0.030273437499998668, -2.5575818368328213e-17], 'false': [nan, -2.5575818368328213e-17]}
{'': [0.039536613880326, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false': [7.401486830834377e-17, -8.764918615461762e-18]}
{'': [0.010525124490719294, -8.342007256852005e-17], 'false': [nan, -8.342007256852005e-17], 'false,false': [-6.029025696639923e-17, -1.1102230246251566e-17], 'false,false,false': [nan, -1.1102230246251566e-17]}
{'': [0.030273437499999778, 4.014365738757628e-17], 'false': [nan, 4.014365738757628e-17], 'false,false': [nan, 4.014365738757628e-17]}
{'': [0.020609418282548485, 3.2059916219122166e-17], 'false': [nan, 3.2059916219122166e-17], 'false,false': [nan, 3.2059916219122166e-17]}
{'': [0.030273437500000014, 3.353798720221827e-17], 'false': [nan, 3.353798720221827e-17], 'false,false': [nan, 3.353798720221827e-17], 'false,false,false': [nan, 3.353798720221827e-17]}
{'': [0.02060941828254845, 4.550094363217855e-17], 'true': [0.02060941828254845, nan], 'false': [4.396185131066056e-17, 3.2653618371328133e-18]}
{'': [0.030273437500000094, 3.469446951953614e-17], 'false': [nan, 3.469446951953614e-17], 'false,false': [nan, 3.469446951953614e-17]}
{'': [0.06509999999999995, -1.0726792508455618e-18], 'false': [-6.6084703846735505e-18, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 35.55840992927551
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.8581489350995121;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.7202264181484258;  // std dev = 0.032, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22756822603876647;  // std dev = 0.984, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.7376867433235313;  // std dev = 0.064, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, L) )
%   | then return -0.12544463852839136;  // std dev = 2.63e-09, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.5551804858144416;  // std dev = 5.96e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.5620408641502511;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5820640865000475;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), recursion_accounttype(I, B) )
%   | | | then return 0.5677514223171778;  // std dev = 0.108, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5992869047469709;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, K) )
%   | then if ( follows(L, A) )
%   | | then return -0.1123163781936062;  // std dev = 7.79e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.11231637819360633;  // std dev = 2.28e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.394126636309419;  // std dev = 0.992, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.24783805094712652;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.45544174640289226;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5200471656978686;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.42094677146283005;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4141339334116387;  // std dev = 0.014, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.43034144688661;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, J) )
%   | then return -0.10159632948783645;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(A, G), tweets(D, H) )
%   | | | then return 0.3270351571263284;  // std dev = 0.045, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.3199777560244782;  // std dev = 0.000159, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3817799454949471;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3436132724403111;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return 0.32570349812827504;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3203708004669757;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.20086088352950063;  // std dev = 1.520, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.3184272305538237;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926064;  // std dev = 6.59e-09, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2581898608750748;  // std dev = 0.004, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.25895930720066346;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.2808506414588588;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27333605321900245;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.062120530277215626;  // std dev = 1.194, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.30085582003356126;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.18164863911529183;  // std dev = 0.965, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2745139003425441;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.22083560627569285;  // std dev = 0.166, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.10313718301313628;  // std dev = 1.841, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | | else return -0.24083220704777006;  // std dev = 0.960, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.22117584434676604;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.20500352415952078;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07877675473109165;  // std dev = 4.15e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.07877675473109172;  // std dev = 3.23e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.17810912787060745;  // std dev = 0.040, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.21068307698628522;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.04880363822443751;  // std dev = 0.857, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(G, I), recursion_accounttype(G, B) )
%   | | | then return 0.251225635735736;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21801001644030535;  // std dev = 0.077, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.18542717223134111;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17360177616233174;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, L) )
%   | then return -0.07324622576333684;  // std dev = 6.32e-09, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else return -0.07324622576333706;  // std dev = 1.61e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15457674691484605;  // std dev = 0.024, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.17746854357765685;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.02912019441125316;  // std dev = 0.750, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.20700253884267372;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18481408889401857;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.15031116379505063;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420265;  // std dev = 4.66e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.06842697784420271;  // std dev = 1.32e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1338879879159032;  // std dev = 0.005, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.1408721364264549;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.1547924065796964;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.18176839577060208;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11693520894622558;  // std dev = 0.451, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16036349076335685;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.13210506278486758;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
Inference time using transfer learning 5.82023286819458
Refined model CLL: -0.087064


******************************************
Best model found
******************************************
Results 

CLL : -0.09271 

AUC ROC : 0.992631 

AUC PR : 0.321336 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.55840992927551 

Total Inference Time : 6.240071773529053 

Total revision time: 45.54006385803223
Best scored revision CLL: -0.087064


Results 

CLL : -0.09271 

AUC ROC : 0.992631 

AUC PR : 0.321336 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.56697702407837 

Total Inference Time : 6.240071773529053 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0829129219055176
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995104;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7177371741022819;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5247366039790136;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4094390522665017;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 1.97e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3052765558129284;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892605;  // std dev = 5.59e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25620830911773107;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18562466721825466;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.37e-08, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17786197305388543;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12869382467640914;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11902100626824427;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.49e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
Inference time using transfer learning 2.364454507827759
Parameter learned model CLL:-0.088613 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.969, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 223, 0], 'false,false': [7.21e-09, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 199, 0], 'false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 207, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.97e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 224, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 263, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.403, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.08e-07, 185, 0], 'false,false': [1.18e-08, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 249, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 4, 124], 'false,true': [1.49e-08, 223, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 37, 0]}]
{'': [0.030273437500004108, -5.943201321413477e-17], 'false': [-2.349889092480152e-16, 5.3097622916855314e-17], 'false,true': [nan, -2.2702318351079436e-16]}
{'': [0.007935999999999239, -7.762534968923859e-17], 'false': [nan, -7.762534968923859e-17]}
{'': [0.0372573763595934, -8.02346051409777e-17], 'false': [nan, -8.02346051409777e-17], 'false,false': [-4.2400477322367786e-17, -1.5656991372918874e-17]}
{'': [0.023064046128093166, -6.818692592186001e-17], 'false': [nan, -6.818692592186001e-17], 'false,false': [-9.01050570710272e-17, 8.267618268485208e-18], 'false,false,false': [nan, 8.267618268485208e-18]}
{'': [0.030273437499999736, 3.271192840413408e-17], 'false': [nan, 3.271192840413408e-17], 'false,false': [nan, 3.271192840413408e-17]}
{'': [0.015621063240110903, 3.321927160295744e-17], 'false': [nan, 3.321927160295744e-17], 'false,false': [nan, 3.321927160295744e-17]}
{'': [0.03725737635959377, 1.0975588836598506e-17], 'false': [nan, 1.0975588836598506e-17], 'false,false': [nan, 1.0975588836598506e-17], 'false,false,false': [nan, 1.0975588836598506e-17]}
{'': [0.01562106324011073, 5.726942298971396e-17], 'true': [0.01562106324011073, nan], 'false': [6.301265815440077e-17, 3.854941057726238e-18]}
{'': [0.03725737635959376, -2.67523620391604e-18], 'false': [nan, -2.67523620391604e-18], 'false,false': [nan, -2.67523620391604e-18]}
{'': [0.030273437499999913, 1.2810265668751807e-17], 'false': [9.957157171526067e-19, -1.50030138462859e-18], 'false,false': [nan, -1.50030138462859e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 33.799328088760376
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.8581489350995128;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(A, I) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7234654022241828;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.11947341221095428;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.6024134107423113;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.6725335205032128;  // std dev = 0.821, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.7267315758713696;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.472033103412951;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5978897785205193;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5643821320553063;  // std dev = 0.024, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5593068937716116;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.29278346507240094;  // std dev = 0.639, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5197609567018762;  // std dev = 0.839, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4175135841583102;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.43620874607598986;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4187424114255069;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.044112537713664655;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.4357442483104715;  // std dev = 3.65e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.4054655426462234;  // std dev = 0.996, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.3304180045715542;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.10159632948783659;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.25680858886575975;  // std dev = 1.676, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.3417596843952678;  // std dev = 0.335, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.0031311302984548353;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.33203775763178706;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3363325824696558;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.3461552848019585;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3577692419649299;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926054;  // std dev = 3.95e-09, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.23544246823501283;  // std dev = 1.415, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.08173414284288909;  // std dev = 1.088, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.05094398895369743;  // std dev = 0.953, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2508743693053239;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.26232918332627225;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.290041793582118;  // std dev = 0.216, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.266734408470528;  // std dev = 0.028, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.19e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.08518475138839678;  // std dev = 1.32e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.22263169156354823;  // std dev = 0.020, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.26700843637235816;  // std dev = 0.205, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, A), follows(A, G) )
%   | | | then return 0.228818157912667;  // std dev = 0.199, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2125105578030708;  // std dev = 0.027, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15224278667144334;  // std dev = 0.908, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.21825290411906684;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.06368546511198277;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.07877675473109143;  // std dev = 4.17e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.07877675473109169;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.18589617577133752;  // std dev = 0.030, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.19788800287514066;  // std dev = 0.064, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2513809771450273;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1950640700882362;  // std dev = 0.178, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.03782167585650281;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.14807324983089112;  // std dev = 0.885, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1934612268378985;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21937581167676248;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333688;  // std dev = 6.59e-09, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1616017296883862;  // std dev = 0.061, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.11154205045044795;  // std dev = 0.863, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19961503284468818;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15890805016292153;  // std dev = 0.049, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16880600737980078;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15750845948387276;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05331527344519768;  // std dev = 1.141, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.17754095682332138;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420265;  // std dev = 2.46e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.14312196255551707;  // std dev = 0.053, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.08436461576119803;  // std dev = 0.970, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(E, D), follows(D, A) )
%   | | | then return 0.18113506908165772;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1421592003426845;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.05880115466340814;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.01195334857042401;  // std dev = 0.955, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.14571979447876704;  // std dev = 0.048, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, I) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
Inference time using transfer learning 5.43171763420105
Refined model CLL: -0.084488


******************************************
Best model found
******************************************
Results 

CLL : -0.089502 

AUC ROC : 0.995255 

AUC PR : 0.485913 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 33.799328088760376 

Total Inference Time : 5.3208558559417725 

Total revision time: 43.741769552230835
Best scored revision CLL: -0.084488


Results 

CLL : -0.089502 

AUC ROC : 0.995255 

AUC PR : 0.485913 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 43.76868271827698 

Total Inference Time : 5.3208558559417725 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.302712917327881
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048766;  // std dev = 7.68e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6982657356905919;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5341833593751857;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360689;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.407482406025885;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 3.80e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32377885664184447;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892604;  // std dev = 9.86e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22540890405615877;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839676;  // std dev = 5.96e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21380331027367153;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109141;  // std dev = 3.94e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1662043430895916;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 1.11e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14180976949507015;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12301974240608005;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202611;  // std dev = 7.30e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
Inference time using transfer learning 2.4894626140594482
Parameter learned model CLL:-0.087428 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 230, 0], 'false,false': [7.68e-09, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 322, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 261, 0], 'false,false,false': [0.0, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 262, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.8e-08, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.86e-09, 324, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 286, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.94e-08, 301, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.11e-07, 268, 0], 'false,false': [0.0, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 287, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [7.3e-08, 271, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 50, 0]}]
{'': [0.018511925952302145, -1.5692198227917407e-17], 'false': [-2.0852884636437723e-16, 5.86532918669894e-17], 'false,true': [nan, -2.201137822735093e-16]}
{'': [0.024375000000001812, -1.0481608679690919e-16], 'false': [nan, -1.0481608679690919e-16]}
{'': [0.030091431657728773, -7.646569176226243e-17], 'false': [nan, -7.646569176226243e-17], 'false,false': [-1.0208947352875003e-16, -1.0831444142684454e-17]}
{'': [0.02437500000000099, -3.0436020612776874e-17], 'false': [nan, -3.0436020612776874e-17], 'false,false': [-5.932489444561905e-17, 2.4462541220554296e-17], 'false,false,false': [nan, 2.4462541220554296e-17]}
{'': [0.01249799711584729, 9.731584536837792e-17], 'false': [nan, 9.731584536837792e-17], 'false,false': [nan, 9.731584536837792e-17]}
{'': [0.041100530693665566, 3.7266227400005256e-17], 'false': [nan, 3.7266227400005256e-17], 'false,false': [nan, 3.7266227400005256e-17]}
{'': [0.012497997115847112, 5.163828021512356e-18], 'false': [nan, 5.163828021512356e-18], 'false,false': [nan, 5.163828021512356e-18], 'false,false,false': [nan, 5.163828021512356e-18]}
{'': [0.024375000000000285, 4.024977732780024e-18], 'true': [0.024375000000000285, nan], 'false': [4.556885548834598e-17, -2.64338815386942e-18]}
{'': [0.024374999999999834, -4.564680031559877e-17], 'false': [nan, -4.564680031559877e-17], 'false,false': [nan, -4.564680031559877e-17]}
{'': [0.02437499999999991, 5.67216747783569e-17], 'false': [1.966446685682934e-17, -2.220446049250313e-18], 'false,false': [nan, -2.220446049250313e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 51.17433714866638
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6476226193100386;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995116;  // std dev = 3.04e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( follows(A, I) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.6996638642573624;  // std dev = 0.987, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.7225665503854339;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.7574154201033771;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7209157925147657;  // std dev = 0.047, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6694734122109542;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.7262732050717783;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.5640919612180949;  // std dev = 0.019, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.5771531156929197;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.5583401736108787;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5549649313752446;  // std dev = 0.000544, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5878699017941184;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08694838393384574;  // std dev = 1.125, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5678554338815641;  // std dev = 0.136, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.4838869793281892;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.11231637819360657;  // std dev = 0.000, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.3735716776671924;  // std dev = 1.376, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.4199287755515933;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4616590797329677;  // std dev = 0.195, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.42367674909306124;  // std dev = 0.103, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.41692390414335945;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4278019923223037;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2918366769906087;  // std dev = 0.738, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.351659385207769;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.10159632948783663;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), tweets(D, G) )
%   | | | then return 0.32340442765279;  // std dev = 1.006, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return -0.004169665684421305;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.3271097503521208;  // std dev = 0.048, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2412902377523426;  // std dev = 1.653, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.32031270443200266;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3277297853601833;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3852192077918344;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3513367112022405;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926042;  // std dev = 9.31e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2502170953970073;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return -0.061967911975747726;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.28940589910061343;  // std dev = 1.044, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.22836456942121597;  // std dev = 0.829, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.2608971254018982;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2549002241390659;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.30570070146772343;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2745323397829504;  // std dev = 0.164, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.14370587325299794;  // std dev = 1.929, 48.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=44 */
%   | | | else return 0.22345967955581955;  // std dev = 0.148, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.037818550399912;  // std dev = 0.407, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.22765944379054526;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.03819915161541861;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.20879565881201614;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.22309418710440895;  // std dev = 0.083, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109143;  // std dev = 3.36e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(F, E) )
%   | | | then return 0.1955184402727456;  // std dev = 0.091, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2235786103455718;  // std dev = 0.200, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.17728948747651999;  // std dev = 0.000279, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.19034817570936927;  // std dev = 0.125, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.17858482052304017;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.30292380136040165;  // std dev = 0.707, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18089806023293725;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.18536834092918292;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333707;  // std dev = 4.37e-09, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.1684087401221424;  // std dev = 0.097, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.06891334896423996;  // std dev = 1.679, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | else return -0.10772339168046952;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.1814801795667737;  // std dev = 0.088, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15725507969386687;  // std dev = 0.074, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0890881514564804;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.15821566943381754;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.1515196137527801;  // std dev = 0.076, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.14073608180685432;  // std dev = 0.052, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2171580103200329;  // std dev = 0.184, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15232153650165575;  // std dev = 0.090, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.15653611552409866;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1736720999812684;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.13365525225672698;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14264014513710177;  // std dev = 0.055, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06419184008202598;  // std dev = 6.18e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
Inference time using transfer learning 5.3465046882629395
Refined model CLL: -0.084678


******************************************
Best model found
******************************************
Results 

CLL : -0.090474 

AUC ROC : 0.994309 

AUC PR : 0.393003 

Precision : 0.337838 

Recall : 0.992063 

F1 : 0.504032 

Total Learning Time : 51.17433714866638 

Total Inference Time : 7.102035045623779 

Total revision time: 63.42789840698242
Best scored revision CLL: -0.084678


Results 

CLL : -0.090474 

AUC ROC : 0.994309 

AUC PR : 0.393003 

Precision : 0.337838 

Recall : 0.992063 

F1 : 0.504032 

Total Learning Time : 63.454811573028564 

Total Inference Time : 7.102035045623779 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.9877467155456543
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6453993381368804;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839147;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5735748836584874;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3926976746666596;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.33853696076864437;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926104;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2288398179421199;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 2.79e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18646262042965922;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19408841610949612;  // std dev = 2.79e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12705405492159141;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 2.63e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11024239059013298;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
Inference time using transfer learning 2.8410894870758057
Parameter learned model CLL:-0.098167 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.33e-07, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 34, 0], 'false,false,false': [7.45e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-09, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.79e-09, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11e-08, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [2.79e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 38, 0], 'false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.61e-09, 11, 0]}]
{'': [7.105427357601002e-16, 5.551115123125783e-17], 'false': [5.3097622916855314e-17, -6.938893903907228e-18], 'false,true': [nan, 5.3097622916855314e-17]}
{'': [0.06858710562414251, -1.6653345369377347e-17], 'false': [nan, -1.6653345369377347e-17]}
{'': [-1.4210854715202004e-16, 7.401486830834377e-18], 'false': [nan, 7.401486830834377e-18], 'false,false': [-1.1428766429964846e-17, 5.046468293750712e-18]}
{'': [0.03698224852071007, 1.67580833905684e-17], 'false': [nan, 1.67580833905684e-17], 'false,false': [1.261617073437678e-18, 3.0839528461809902e-18], 'false,false,false': [nan, 3.0839528461809902e-18]}
{'': [-3.552713678800501e-17, -2.3927220358300786e-17], 'false': [nan, -2.3927220358300786e-17], 'false,false': [nan, -2.3927220358300786e-17]}
{'': [0.03698224852071004, 7.304098846218135e-18], 'false': [nan, 7.304098846218135e-18], 'false,false': [nan, 7.304098846218135e-18]}
{'': [0.036982248520710075, 7.526935760170553e-18], 'false': [nan, 7.526935760170553e-18], 'false,false': [nan, 7.526935760170553e-18], 'false,false,false': [nan, 7.526935760170553e-18]}
{'': [3.1086244689504386e-17, 3.1540426835941946e-18], 'true': [3.1086244689504386e-17, nan], 'false': [2.921639538487254e-18, 0.0]}
{'': [0.036982248520710095, 7.401486830834377e-18], 'false': [nan, 7.401486830834377e-18], 'false,false': [nan, 7.401486830834377e-18]}
{'': [0.03698224852071009, -2.7211348642773444e-18], 'false': [-2.0816681711721684e-18, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 18.91752052307129
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.7385477916484059;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1254446385283915;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( tweets(D, E), recursion_accounttype(F, B) )
%   | | | then return 0.5714705587697334;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.23066647867843626;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22046145012204874;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5989092865963347;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.2903652892253083;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.42096768145312335;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.47419231822002456;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.410676701395097;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1802479006647335;  // std dev = 0.731, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.34472357361515343;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14130785661460873;  // std dev = 0.929, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.016842336505729638;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.35197675301103915;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3907529836288341;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926101;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2842694842780471;  // std dev = 0.084, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.30540464995200745;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.307001662357685;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.11106986095674191;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2803025651529286;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08518475138839682;  // std dev = 9.13e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.23614860717655284;  // std dev = 0.074, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22198597306644943;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.278114639687094;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.09036149768036128;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2276526494125748;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.20255170320340046;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18175975064180558;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.229549673564258;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1822409006773966;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.04354998740126174;  // std dev = 0.684, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.07324622576333702;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.161752421190946;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.031760219254103404;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.16375152534542578;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.20081299064445168;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20493544992590776;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, J) )
%   | | then return -0.0684269778442027;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.14102122619530336;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17185722259504344;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1426057360457808;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.17061246740337507;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17393919096738852;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( tweets(A, J) )
%   | | then return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning 9.453994989395142
Refined model CLL: -0.096309


******************************************
Best model found
******************************************
Results 

CLL : -0.085501 

AUC ROC : 0.994391 

AUC PR : 0.420598 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.91752052307129 

Total Inference Time : 2.2136898040771484 

Total revision time: 23.30122947692871
Best scored revision CLL: -0.096309


Results 

CLL : -0.085501 

AUC ROC : 0.994391 

AUC PR : 0.420598 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.328142642974854 

Total Inference Time : 2.2136898040771484 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2996995449066162
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146066;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7111468298594117;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839124;  // std dev = 2.98e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5517291183771317;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360625;  // std dev = 6.99e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3958156752828727;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783615;  // std dev = 5.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3406864230812555;  // std dev = 3.73e-09, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926108;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23029840790038658;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2259676858789879;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109158;  // std dev = 6.14e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15043605216630512;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333707;  // std dev = 4.08e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.166918563008469;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420267;  // std dev = 4.84e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.08837438455746979;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
Inference time using transfer learning 2.85919451713562
Parameter learned model CLL:-0.094388 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.682, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 85, 0], 'false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 131, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [6.99e-08, 92, 0], 'false,false,false': [1.39e-08, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.67e-08, 74, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [3.73e-09, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 78, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 107, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.14e-08, 107, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [1.387, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [4.08e-08, 88, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.84e-09, 99, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 74, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 17, 0]}]
{'': [0.053399786400854646, 7.783006770568107e-17], 'false': [7.314410515177502e-17, -1.1564823173178714e-17], 'false,true': [nan, 7.314410515177502e-17]}
{'': [0.019223375624757687, 6.779987936642177e-18], 'false': [nan, 6.779987936642177e-18]}
{'': [0.01922337562475943, 6.433067993155112e-17], 'false': [nan, 6.433067993155112e-17], 'false,false': [5.3097622916855314e-17, 1.295260195396016e-17]}
{'': [0.036982248520709825, 3.700743415417188e-17], 'false': [nan, 3.700743415417188e-17], 'false,false': [4.350874015422911e-17, -5.551115123125783e-18], 'false,false,false': [nan, -5.551115123125783e-18]}
{'': [0.0, -1.423362852083534e-18], 'false': [nan, -1.423362852083534e-18], 'false,false': [nan, -1.423362852083534e-18]}
{'': [0.03698224852071009, 2.9052565130377925e-17], 'false': [nan, 2.9052565130377925e-17], 'false,false': [nan, 2.9052565130377925e-17]}
{'': [-1.3322676295501878e-16, 3.5278114801173196e-17], 'false': [nan, 3.5278114801173196e-17], 'false,false': [nan, 3.5278114801173196e-17], 'false,false,false': [nan, 3.5278114801173196e-17]}
{'': [0.036982248520710054, 1.5563874176988174e-17], 'true': [0.036982248520710054, nan], 'false': [1.8924256101565167e-17, -7.304098846218135e-19]}
{'': [-7.105427357601002e-17, 2.411090407014229e-17], 'false': [nan, 2.411090407014229e-17], 'false,false': [nan, 2.411090407014229e-17]}
{'': [0.05339978640085437, -1.2810265668751807e-17], 'false': [-9.00180830777154e-18, 3.2653618371328133e-18], 'false,false': [nan, 3.2653618371328133e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 21.2819344997406
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, F) )
%   | | then return 0.7551805016408266;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839133;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.4377193779227552;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5773383230298288;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462843;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5773383230298288;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5509495167280418;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.11231637819360621;  // std dev = 7.79e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.32872458797208576;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4121799905752402;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4724097247449526;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41398750784987703;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.416425523734408;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.10159632948783617;  // std dev = 6.18e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.25256029087659276;  // std dev = 0.984, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3401371415965437;  // std dev = 0.088, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.33715564271612203;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31885106705064803;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.35445231543695394;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.319330905424889;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.300995146305598;  // std dev = 0.035, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.25873405054082027;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2592988117976462;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.252915602045363;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then return 0.061729912487937286;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2544221985958199;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.08518475138839685;  // std dev = 4.27e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.08518475138839691;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839691;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.2407581463828279;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.21218245168556393;  // std dev = 0.050, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.10719044005621108;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20793853176039812;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, F) )
%   | | then return 0.25827766879521236;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20922951875447984;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.07877675473109169;  // std dev = 4.17e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20680393134621108;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.18497548518513365;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.17442074785214567;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1779051373593038;  // std dev = 0.000857, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.008966117145650676;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09062927347930334;  // std dev = 0.954, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.17560826865569606;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.17496376297323168;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15879101518640393;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.15258572777332216;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1664977059327226;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.153402316923496;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15104480789706481;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.5158067640167833;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.052726395099812945;  // std dev = 0.951, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06842697784420265;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.14720067665850572;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1317020380683602;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17040680759234983;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.146971923449785;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.44118861078835553;  // std dev = 0.851, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.1579866589256064;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( tweets(A, J) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 7.6449785232543945
Refined model CLL: -0.091523


******************************************
Best model found
******************************************
Results 

CLL : -0.085 

AUC ROC : 0.995362 

AUC PR : 0.458934 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.2819344997406 

Total Inference Time : 2.9805290699005127 

Total revision time: 27.160492658615112
Best scored revision CLL: -0.091523


Results 

CLL : -0.085 

AUC ROC : 0.995362 

AUC PR : 0.458934 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.187405824661255 

Total Inference Time : 2.9805290699005127 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4849553108215332
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379742;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 3.65e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6887087008157118;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839105;  // std dev = 8.16e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5098887494089505;  // std dev = 0.242, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360618;  // std dev = 1.01e-07, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.11231637819360646;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.44564444610931997;  // std dev = 1.93e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783669;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31388347755408347;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926071;  // std dev = 6.97e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2601680985735139;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18632610176861938;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109153;  // std dev = 7.88e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16801324827960712;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333728;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else return -0.0732462257633371;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13059617026347092;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.51e-09, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1130343570947899;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
Inference time using transfer learning 3.33204984664917
Parameter learned model CLL:-0.093352 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.698, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.65e-08, 129, 0], 'false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.16e-08, 121, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.242, 5, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [1.01e-07, 142, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.93e-07, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 140, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.97e-09, 151, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 145, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.88e-08, 142, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [1.396, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 143, 0], 'false,false': [4.56e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 157, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 134, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 8, 0]}]
{'': [0.03698224852070899, -5.633967587650048e-17], 'false': [-3.0982968129074136e-17, -2.7755575615628915e-18], 'false,true': [nan, 1.0327656043024712e-17]}
{'': [0.03698224852071127, 5.50523813863714e-17], 'false': [nan, 5.50523813863714e-17]}
{'': [0.0585937499999996, 4.101460855303126e-17], 'false': [nan, 4.101460855303126e-17], 'false,false': [7.19299424405031e-17, -5.551115123125783e-18]}
{'': [4.973799150320702e-16, -2.516505522483688e-17], 'false': [nan, -2.516505522483688e-17], 'false,false': [-2.8548592061789737e-17, -5.551115123125783e-18], 'false,false,false': [nan, -5.551115123125783e-18]}
{'': [0.025299375948726836, 4.8526304387589625e-17], 'false': [nan, 4.8526304387589625e-17], 'false,false': [nan, 4.8526304387589625e-17]}
{'': [0.01298476454293633, 3.675221047035001e-17], 'false': [nan, 3.675221047035001e-17], 'false,false': [nan, 3.675221047035001e-17]}
{'': [0.03698224852071011, 4.378344322465406e-17], 'false': [nan, 4.378344322465406e-17], 'false,false': [nan, 4.378344322465406e-17], 'false,false,false': [nan, 4.378344322465406e-17]}
{'': [0.025299375948726627, -1.2255708713394585e-17], 'true': [0.025299375948726627, nan], 'false': [-5.434658162500766e-18, 1.8924256101565167e-18]}
{'': [0.03698224852071, 3.111453062643751e-17], 'false': [nan, 3.111453062643751e-17], 'false,false': [nan, 3.111453062643751e-17]}
{'': [0.03698224852071003, -9.382166405283013e-18], 'false': [-1.408491896912512e-17, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 36.111746311187744
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.8010060779566543;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(E, F), follows(E, A) )
%   | | | then return 0.731160033845405;  // std dev = 0.019, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.7413433124639606;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(D, G), follows(A, D) )
%   | | | then return 0.7305591501320299;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(J, A) )
%   | | | then return 0.7334813724068712;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3934300456286231;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.7358758374007092;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839133;  // std dev = 3.23e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(E, D), follows(G, A) )
%   | | | then return 0.5695203254039028;  // std dev = 0.043, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.60618212248572;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(D, H), follows(D, A) )
%   | | | then return 0.5518087327355936;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42475339653808325;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.4372402865165506;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.10458612685087469;  // std dev = 0.851, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4214991727259981;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then return -0.10159632948783642;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.28439907319223295;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.32025471843679093;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(D, G) )
%   | | | then return 0.3268129349520696;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.35542363068061056;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3588278832874598;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.33364945218773173;  // std dev = 0.072, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.32250127962620284;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926079;  // std dev = 6.04e-09, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return -0.092691276189261;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2649951880775138;  // std dev = 0.022, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.2549367547203594;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.27900587034069285;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.14163328091733746;  // std dev = 1.112, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18370325870042561;  // std dev = 0.850, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.30886254439949207;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26301960997411555;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 4.66e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return -0.0851847513883968;  // std dev = 2.95e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.14833547694315857;  // std dev = 1.359, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.21554303190384916;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12368083697825245;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.24179406646365723;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23734161802682807;  // std dev = 0.119, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20808587319952962;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20816479305324065;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, L) )
%   | then return -0.07877675473109155;  // std dev = 6.11e-09, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.1892507816561395;  // std dev = 0.043, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.21080220107406789;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, A), tweets(D, H) )
%   | | | then return 0.17945200102855255;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.17230096378678747;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then return -0.11065754742906642;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18520915252253797;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.1626452245108192;  // std dev = 0.027, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06560134424371786;  // std dev = 1.316, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1597105083438444;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.153726195523303;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.19582995575636863;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16917466830849795;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15092712495071897;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.06842697784420264;  // std dev = 5.02e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return -0.06842697784420271;  // std dev = 9.31e-10, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1475607089258872;  // std dev = 0.033, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.16721614806783472;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(D, G) )
%   | | | then return 0.13493028831467768;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14539932674614306;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.07972488022292136;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11638272882758424;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.16725959220587497;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13501769257364174;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
Inference time using transfer learning 7.602138519287109
Refined model CLL: -0.092433


******************************************
Best model found
******************************************
Results 

CLL : -0.086267 

AUC ROC : 0.99543 

AUC PR : 0.427443 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.111746311187744 

Total Inference Time : 3.9707019329071045 

Total revision time: 43.49012756347656
Best scored revision CLL: -0.092433


Results 

CLL : -0.086267 

AUC ROC : 0.99543 

AUC PR : 0.427443 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 43.517040729522705 

Total Inference Time : 3.9707019329071045 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5465092658996582
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8290227215072782;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004882;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7057064041246712;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839158;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5183124975740422;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360647;  // std dev = 3.65e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4079487805165792;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783649;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31139095260327454;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926057;  // std dev = 6.59e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2547982587898428;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20706759709926456;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109148;  // std dev = 8.16e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13583400825564074;  // std dev = 2.379, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.15e-07, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.07324622576333707;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10678425267424267;  // std dev = 0.247, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11904943971173941;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning 2.9538164138793945
Parameter learned model CLL:-0.093382 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.707, 3, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 196, 0], 'false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 188, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [3.65e-08, 175, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 166, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 207, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 187, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.16e-08, 176, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [2.379, 6, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.15e-07, 191, 0], 'false,false': [3.73e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.247, 7, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 183, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 193, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 6, 0]}]
{'': [0.0282778772740145, -2.3684757858670006e-16], 'false': [-2.333734112987574e-16, -1.1895246692412391e-17], 'false,true': [nan, -1.7219785688063652e-16]}
{'': [0.019223375624760546, -2.362176648138631e-17], 'false': [nan, -2.362176648138631e-17]}
{'': [0.04535147392290308, -2.4535315461329425e-18], 'false': [nan, -2.4535315461329425e-18], 'false,false': [7.612957883143931e-18, 0.0]}
{'': [0.02827787727401336, -8.279629336187608e-17], 'false': [nan, -8.279629336187608e-17], 'false,false': [-7.35689956076911e-17, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.02827787727401248, 4.2907170033822474e-17], 'false': [nan, 4.2907170033822474e-17], 'false,false': [nan, 4.2907170033822474e-17]}
{'': [0.01922337562475949, 3.2059916219122166e-17], 'false': [nan, 3.2059916219122166e-17], 'false,false': [nan, 3.2059916219122166e-17]}
{'': [0.019223375624759734, 3.7848512203130334e-17], 'false': [nan, 3.7848512203130334e-17], 'false,false': [nan, 3.7848512203130334e-17], 'false,false,false': [nan, 3.7848512203130334e-17]}
{'': [0.053399786400854535, 6.898473162719419e-17], 'true': [0.053399786400854535, nan], 'false': [6.97522319136224e-17, 9.251858538542971e-19]}
{'': [0.06114071097912475, 3.2154000166739505e-17], 'false': [nan, 3.2154000166739505e-17], 'false,false': [nan, 3.2154000166739505e-17]}
{'': [0.036982248520710095, -1.6737030521987284e-18], 'false': [-2.8762254523967784e-18, 5.782411586589357e-19], 'false,false': [nan, 5.782411586589357e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 44.15510368347168
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, G) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.6882234122109546;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.7281866305512052;  // std dev = 0.047, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.553638410130377;  // std dev = 1.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.12544463852839108;  // std dev = 7.74e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.12544463852839122;  // std dev = 6.45e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5611215386811383;  // std dev = 0.020, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.49494773595143415;  // std dev = 0.963, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.5552367613921056;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5681693183968688;  // std dev = 0.057, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(F, H) )
%   | | | then return 0.5754148664357001;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5655368766163252;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6159463602843243;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.595852358376808;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360665;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.4260968805151919;  // std dev = 0.053, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.4641693470089856;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.09729295957554525;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(H, I), follows(H, G) )
%   | | | then return 0.3874364709732352;  // std dev = 0.974, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.09464615268969645;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4250998130410471;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4482757782683509;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3260287277161176;  // std dev = 0.036, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2707270849789703;  // std dev = 0.961, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.34099956657227626;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3817325313675524;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.047086930204634295;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.34786668226753353;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3358764338167313;  // std dev = 0.090, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2252805462853564;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.09269127618926058;  // std dev = 6.32e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.19993728226920773;  // std dev = 1.359, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.2749616323865148;  // std dev = 0.169, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return -0.4764587431093814;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14321637134895393;  // std dev = 0.950, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), tweets(H, G) )
%   | | | then return 0.2692273916817185;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2836620091302101;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28793998755240074;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return -0.08518475138839678;  // std dev = 1.61e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.17464964512859696;  // std dev = 1.333, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.23854621632321363;  // std dev = 0.174, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.05548915158291083;  // std dev = 0.772, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21937662975144018;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22767606895621473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.22582366509558915;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2327252016604825;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, L) )
%   | then return -0.07877675473109151;  // std dev = 6.45e-09, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(E, F) )
%   | | | then return 0.19079060243981977;  // std dev = 0.081, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.22396427763836932;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.20030567317788606;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18426282168292296;  // std dev = 0.069, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.21621037075762306;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333685;  // std dev = 7.15e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.07324622576333707;  // std dev = 1.61e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.14786262768816005;  // std dev = 0.984, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return -0.11126200152693785;  // std dev = 1.609, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return -0.5761070554925755;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1549296410676599;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.16703602589655536;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1546723872116306;  // std dev = 0.052, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.18434799278925468;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16746714250724645;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420262;  // std dev = 5.51e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), tweets(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1487068399668323;  // std dev = 0.108, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.1377852900634858;  // std dev = 0.054, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.003389122691947651;  // std dev = 0.834, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.17033183272692462;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2131409149841258;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.1395296594310327;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1499839404329235;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, J) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning 8.583386659622192
Refined model CLL: -0.092428


******************************************
Best model found
******************************************
Results 

CLL : -0.086251 

AUC ROC : 0.99491 

AUC PR : 0.365386 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.15510368347168 

Total Inference Time : 5.581689119338989 

Total revision time: 53.46168541908264
Best scored revision CLL: -0.092428


Results 

CLL : -0.086251 

AUC ROC : 0.99491 

AUC PR : 0.365386 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.488598585128784 

Total Inference Time : 5.581689119338989 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8917350769042969
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.678688575932759;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839186;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5403498181812609;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360664;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39868811801590376;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783626;  // std dev = 2.24e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31163022123076695;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926046;  // std dev = 7.68e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22339653161243522;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21805514198323553;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 6.14e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15874498466562498;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333663;  // std dev = 1.30e-07, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.07324622576333707;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12755498153000494;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11734486653108837;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202623;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
Inference time using transfer learning 2.798935890197754
Parameter learned model CLL:-0.092475 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.712, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 213, 0], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 241, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 206, 0], 'false,false,false': [0.0, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 214, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.24e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.68e-09, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 267, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.14e-08, 238, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 221, 0], 'false,false': [1.05e-08, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 212, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 38, 0]}]
{'': [0.022714981070853308, -1.0408340855860843e-16], 'false': [-2.376815489338363e-16, 4.6474452193611206e-17], 'false,true': [nan, -2.376815489338363e-16]}
{'': [0.0433884297520674, -7.55504464890148e-17], 'false': [nan, -7.55504464890148e-17]}
{'': [0.02982248520709961, -8.844930320665147e-17], 'false': [nan, -8.844930320665147e-17], 'false,false': [-5.1738548720395646e-17, -2.061842760018148e-17]}
{'': [0.03671114736903536, -6.610488238226123e-17], 'false': [nan, -6.610488238226123e-17], 'false,false': [-8.508251216753536e-17, 1.0408340855860843e-17], 'false,false,false': [nan, 1.0408340855860843e-17]}
{'': [0.029822485207101034, 5.955219289177085e-17], 'false': [nan, 5.955219289177085e-17], 'false,false': [nan, 5.955219289177085e-17]}
{'': [0.049861495844875085, 3.409673708586623e-17], 'false': [nan, 3.409673708586623e-17], 'false,false': [nan, 3.409673708586623e-17]}
{'': [0.015380859374999986, 1.586032892321652e-17], 'false': [nan, 1.586032892321652e-17], 'false,false': [nan, 1.586032892321652e-17], 'false,false,false': [nan, 1.586032892321652e-17]}
{'': [0.03671114736903441, 3.744281573245626e-17], 'true': [0.03671114736903441, nan], 'false': [7.635923065295194e-17, 3.2653618371328133e-18]}
{'': [0.04338842975206607, -1.543167138475121e-17], 'false': [nan, -1.543167138475121e-17], 'false,false': [nan, -1.543167138475121e-17]}
{'': [0.03671114736903433, 3.552713678800501e-18], 'false': [-5.236901059552625e-19, -1.460819769243627e-18], 'false,false': [nan, -1.460819769243627e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 31.708991289138794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995104;  // std dev = 7.25e-07, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( follows(D, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.7194734122109545;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(E, D), follows(E, A) )
%   | | | then return 0.41947341221095485;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.5194734122109548;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5944734122109548;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else return -0.12544463852839188;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.5297254111052586;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.5649203981045218;  // std dev = 0.178, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.09541300117008535;  // std dev = 1.003, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.49403931200279144;  // std dev = 0.975, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(F, A) )
%   | | then return 0.5825798462299847;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6040520610480193;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5859815224154472;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.1123163781936067;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.11231637819360636;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.3755324276946696;  // std dev = 1.692, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.20945282880815386;  // std dev = 1.155, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.49430422253927037;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return 0.48936591747024594;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.435027110384883;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.4308867284224487;  // std dev = 0.115, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.4468862006386214;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return -0.10159632948783626;  // std dev = 3.73e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3093944133347809;  // std dev = 0.986, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.33065399992207356;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3428598975279621;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.3245503902177504;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.3983976338947903;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.35058591365832553;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.33001072862229425;  // std dev = 0.106, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3407259271680239;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926049;  // std dev = 5.74e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.27052601961688816;  // std dev = 0.047, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.26462684633194017;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return 0.1378789919238033;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.26153400462531173;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.30469425884401236;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26670571740081667;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2616402942991437;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.26879808676554756;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.16525857186221232;  // std dev = 1.697, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.21894951899953874;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return 0.23198904449977506;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2139364088847317;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(H, I), tweets(A, I) )
%   | | | then return 0.24902585229210383;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22230970042094958;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.21783591997260135;  // std dev = 0.081, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2118820685458112;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109144;  // std dev = 3.09e-09, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16759642217874887;  // std dev = 0.992, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.18735874306392802;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.19480209952735533;  // std dev = 0.049, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17721276831143357;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.12157961320928996;  // std dev = 1.392, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.18628445023931162;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.10423007763492548;  // std dev = 0.974, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.18123950975006414;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333692;  // std dev = 6.04e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1665955815953488;  // std dev = 0.049, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.20344855900038347;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.16825992353818445;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15704282023066257;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16172685173834253;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1545118237606246;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07036933314068952;  // std dev = 0.785, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15450789048926572;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.14538979844332334;  // std dev = 0.034, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.03554908889253746;  // std dev = 1.623, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14766447523316836;  // std dev = 0.076, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.13335546676485113;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.14908410631440983;  // std dev = 1.123, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.038524647230367505;  // std dev = 0.952, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.14757147878225857;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
Inference time using transfer learning 6.573870897293091
Refined model CLL: -0.091508


******************************************
Best model found
******************************************
Results 

CLL : -0.085385 

AUC ROC : 0.996089 

AUC PR : 0.474124 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.708991289138794 

Total Inference Time : 5.184312582015991 

Total revision time: 41.2608745098114
Best scored revision CLL: -0.091508


Results 

CLL : -0.085385 

AUC ROC : 0.996089 

AUC PR : 0.474124 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.287787675857544 

Total Inference Time : 5.184312582015991 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0503098964691162
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022817;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839155;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.569206368094408;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360633;  // std dev = 2.36e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42785882500798583;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3277341078433463;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926107;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22870827927629028;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.86e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21842068416119878;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0787767547310917;  // std dev = 2.89e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.09518948502960535;  // std dev = 1.654, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13834449767661317;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 3.09e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1509911536109655;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning 1.9801180362701416
Parameter learned model CLL:-0.087318 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.984, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [2.36e-08, 47, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [2.36e-08, 49, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.89e-08, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.654, 3, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-08, 44, 0], 'false,false': [3.73e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.09e-09, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 9, 0]}]
{'': [0.030273437500001332, 6.29126380620922e-17], 'false': [5.196788625904988e-17, -1.2810265668751807e-17], 'false,true': [nan, 5.196788625904988e-17]}
{'': [0.0302734375000005, -2.5620531337503614e-17], 'false': [nan, -2.5620531337503614e-17]}
{'': [-2.2920733411616134e-16, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [1.1810883240693155e-17, -1.5419764230904951e-18]}
{'': [-2.5785825088068154e-16, 3.2653618371328135e-17], 'false': [nan, 3.2653618371328135e-17], 'false,false': [1.1328806373726087e-17, -1.0225738384705389e-17], 'false,false,false': [nan, -1.0225738384705389e-17]}
{'': [-1.4325458382260084e-17, -8.28524645242654e-18], 'false': [nan, -8.28524645242654e-18], 'false,false': [nan, -8.28524645242654e-18]}
{'': [0.030273437500000007, 3.3140985809706165e-18], 'false': [nan, 3.3140985809706165e-18], 'false,false': [nan, 3.3140985809706165e-18]}
{'': [-4.297637514678025e-17, 1.3010426069826053e-17], 'false': [nan, 1.3010426069826053e-17], 'false,false': [nan, 1.3010426069826053e-17], 'false,false,false': [nan, 1.3010426069826053e-17]}
{'': [0.0804498269896194, 9.912705577010326e-19], 'true': [0.0804498269896194, nan], 'false': [3.1540426835941946e-18, 1.1564823173178713e-18]}
{'': [0.030273437500000017, 9.540979117872439e-18], 'false': [nan, 9.540979117872439e-18], 'false,false': [nan, 9.540979117872439e-18]}
{'': [-7.162729191130042e-18, -1.9364355080671335e-18], 'false': [-8.163404592832033e-19, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 12.172929048538208
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.5738388778495251;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3886997700796178;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2128039018200445;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4147101707428876;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4175135841583099;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.458515059909387;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.4105084972739359;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.33019797525307915;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3208340564558643;  // std dev = 0.000547, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.32095626575157893;  // std dev = 0.000669, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3263059001140761;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926103;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.3159661808692985;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26169707816287124;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.25525564598577305;  // std dev = 0.000477, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.25533903804293595;  // std dev = 0.000584, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.4032915617985621;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.25792021033662366;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.08518475138839679;  // std dev = 3.48e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.24022166727160277;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2083431116579711;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20981663838661097;  // std dev = 0.000416, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.12317881281331274;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2093617446255862;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2525224347145099;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2137504295957523;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.18789631703220663;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17716016211791935;  // std dev = 0.000354, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21313506869447166;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.17272717636594018;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1792161065052011;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.1799839342871068;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15396253630475953;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.04718372256047909;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.1859429201108534;  // std dev = 0.080, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.14896359899215247;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15508651514049984;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.13904822708408027;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15329592123482483;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.16513877363586094;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.1304664071754885;  // std dev = 0.000557, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13237210370394156;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14381256402421;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, H) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning 4.785397291183472
Refined model CLL: -0.086675


******************************************
Best model found
******************************************
Results 

CLL : -0.093393 

AUC ROC : 0.992353 

AUC PR : 0.338068 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.172929048538208 

Total Inference Time : 1.9905402660369873 

Total revision time: 16.279130458831787
Best scored revision CLL: -0.086675


Results 

CLL : -0.093393 

AUC ROC : 0.992353 

AUC PR : 0.338068 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.2979633808136 

Total Inference Time : 1.9905402660369873 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2633931636810303
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6795833279484366;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839127;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.572857114237048;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360622;  // std dev = 7.60e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.43061574395618857;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3296087568321088;  // std dev = 2.17e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926082;  // std dev = 6.72e-09, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22998415270100908;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20346161571023547;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109154;  // std dev = 7.30e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15523559347682375;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 3.87e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.07324622576333707;  // std dev = 9.13e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13282088757943472;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.27e-09, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14665686513282158;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
Inference time using transfer learning 1.7199182510375977
Parameter learned model CLL:-0.085416 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.392, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.45e-08, 77, 0], 'false,false': [5.89e-09, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 129, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [7.6e-08, 101, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [5.77e-08, 83, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.17e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.72e-09, 126, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 121, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.3e-08, 128, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [3.87e-08, 85, 0], 'false,false': [9.13e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 142, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 69, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 32, 0]}]
{'': [0.030273437499999334, 6.00120553851436e-17], 'false': [7.209240419643874e-17, 3.2653618371328135e-17], 'false,true': [nan, 7.209240419643874e-17]}
{'': [0.044023668639051404, -3.4425520143415706e-18], 'false': [nan, -3.4425520143415706e-18]}
{'': [-5.730183352904034e-16, 7.173748774501012e-17], 'false': [nan, 7.173748774501012e-17], 'false,false': [5.71599973074338e-17, -7.656710514656252e-18]}
{'': [0.0, -2.05596856412066e-18], 'false': [nan, -2.05596856412066e-18], 'false,false': [4.01285430587406e-17, -2.220446049250313e-18], 'false,false,false': [nan, -2.220446049250313e-18]}
{'': [4.440892098500626e-16, 4.4056469231157003e-17], 'false': [nan, 4.4056469231157003e-17], 'false,false': [nan, 4.4056469231157003e-17]}
{'': [0.030273437500000007, 3.4866508211368553e-17], 'false': [nan, 3.4866508211368553e-17], 'false,false': [nan, 3.4866508211368553e-17]}
{'': [0.01562106324011086, 4.163336342344337e-17], 'false': [nan, 4.163336342344337e-17], 'false,false': [nan, 4.163336342344337e-17], 'false,false,false': [nan, 4.163336342344337e-17]}
{'': [0.0302734374999999, 1.1002210153942993e-17], 'true': [0.0302734374999999, nan], 'false': [1.763295392051719e-17, 3.2025664171879517e-18]}
{'': [0.030273437500000052, 2.892834641628929e-17], 'false': [nan, 2.892834641628929e-17], 'false,false': [nan, 2.892834641628929e-17]}
{'': [-4.297637514678025e-17, 1.09923071745065e-18], 'false': [0.0, -4.336808689942018e-18], 'false,false': [nan, -4.336808689942018e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 28.513075590133667
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), recursion_accounttype(D, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.735339595552877;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7670719622367217;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(J, A) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5551050186554657;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5606562933492123;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6134357899470098;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360621;  // std dev = 7.68e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, F) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.4175549093398024;  // std dev = 0.000136, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.43593071296670044;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.41453826052824166;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4163884148100594;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.4747069427721568;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45297521845328237;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.43809729050266877;  // std dev = 0.087, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1015963294878364;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3207597975597283;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3199617861345354;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.3354314816626219;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31946253714060274;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.3324867155155727;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23230546121446122;  // std dev = 0.941, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0204802766029147;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.31624421336773223;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926083;  // std dev = 6.45e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.26139634122666094;  // std dev = 0.066, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2535895141695343;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.29443567883795174;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10566833767312044;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.25530696782859263;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2546257720607059;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3538255738736026;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2521213358662525;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839679;  // std dev = 5.51e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.07875159307379036;  // std dev = 1.287, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.209242406841628;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(D, G), follows(A, H) )
%   | | | then return 0.21835851431478603;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2086388154798096;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K), follows(L, A) )
%   | | | then return 0.2177301674893643;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25534233378505067;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.20767908940121896;  // std dev = 0.000432, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(M, A) )
%   | then return -0.07877675473109165;  // std dev = 4.84e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return -0.07877675473109179;  // std dev = 9.31e-10, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.1943082618419563;  // std dev = 0.042, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.17769508077909799;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.17566701684170796;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1836726885678315;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2011925782136873;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.24035499323512877;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17550106874031612;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, K) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | | then return 0.16473468801586882;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15276301946757817;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.17079515743140566;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1992339208976689;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return 0.15237551111959505;  // std dev = 0.001, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15153248402168074;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420268;  // std dev = 3.61e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.06842697784420271;  // std dev = 1.61e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.14334734129909382;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1323492109753609;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.19031356349808115;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13371555661216405;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.14155643311469313;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15518325126324384;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.13317645358023364;  // std dev = 0.000634, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.06419184008202622;  // std dev = 9.31e-10, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
Inference time using transfer learning 7.262007236480713
Refined model CLL: -0.084574


******************************************
Best model found
******************************************
Results 

CLL : -0.092946 

AUC ROC : 0.993643 

AUC PR : 0.391174 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.513075590133667 

Total Inference Time : 3.9307360649108887 

Total revision time: 35.39161539077759
Best scored revision CLL: -0.084574


Results 

CLL : -0.092946 

AUC ROC : 0.993643 

AUC PR : 0.391174 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.4104483127594 

Total Inference Time : 3.9307360649108887 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5319297313690186
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8370963035205642;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7026501651365477;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839166;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5436459828221922;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360615;  // std dev = 1.01e-07, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3983722683607835;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878364;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783626;  // std dev = 2.58e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3046175492900078;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926064;  // std dev = 6.45e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24037723916574094;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21611079289261398;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109148;  // std dev = 9.19e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17004862788500175;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333695;  // std dev = 4.94e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return -0.07324622576333707;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1555454550922681;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11448340171811817;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
Inference time using transfer learning 2.0649096965789795
Parameter learned model CLL:-0.084598 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.399, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 140, 0], 'false,false': [7.21e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [1.01e-07, 139, 0], 'false,false,false': [1.83e-08, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 126, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.58e-08, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 171, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 184, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 193, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [4.94e-08, 124, 0], 'false,false': [7.45e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 193, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 133, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 39, 0]}]
{'': [0.02060941828254939, -2.2086976574553378e-16], 'false': [-7.930164461608261e-17, 5.437827059388522e-17], 'false,true': [nan, -7.930164461608261e-17]}
{'': [0.02060941828255029, -3.700743415417188e-17], 'false': [nan, -3.700743415417188e-17]}
{'': [0.02060941828254984, -7.240584943207542e-18], 'false': [nan, -7.240584943207542e-18], 'false,false': [7.348238724137727e-17, 7.401486830834377e-18]}
{'': [0.030273437500000017, -8.154180406851432e-17], 'false': [nan, -8.154180406851432e-17], 'false,false': [-3.348291661567932e-17, 1.3061447348531253e-17], 'false,false,false': [nan, 1.3061447348531253e-17]}
{'': [0.03027343750000024, 4.15522067695965e-17], 'false': [nan, 4.15522067695965e-17], 'false,false': [nan, 4.15522067695965e-17]}
{'': [0.030273437499999695, 3.499616055883646e-17], 'false': [nan, 3.499616055883646e-17], 'false,false': [nan, 3.499616055883646e-17]}
{'': [0.010525124490719615, 4.3718626876431036e-17], 'false': [nan, 4.3718626876431036e-17], 'false,false': [nan, 4.3718626876431036e-17], 'false,false,false': [nan, 4.3718626876431036e-17]}
{'': [0.020609418282548638, 3.742324802107269e-17], 'true': [0.020609418282548638, nan], 'false': [1.9697505275607617e-17, 1.02798428206033e-18]}
{'': [0.010525124490719911, 3.3364215247802633e-17], 'false': [nan, 3.3364215247802633e-17], 'false,false': [nan, 3.3364215247802633e-17]}
{'': [0.03027343749999992, -5.809306524201401e-18], 'false': [-1.419082061550952e-17, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 27.850643396377563
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.8581489350995118;  // std dev = 2.06e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( tweets(A, G) )
%   | then return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.730245414215968;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.6285643213018635;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.7194734122109545;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.12544463852839108;  // std dev = 7.88e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.5656418891154892;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5538878027590328;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.15536643674628428;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4644573458371935;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5776873145590465;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360629;  // std dev = 6.97e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else return -0.11231637819360632;  // std dev = 4.17e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.43116166460795363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.41501677356289424;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.46286569613752226;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.43077654673105314;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.41563161550417443;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4177533452630573;  // std dev = 0.000415, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.41862660029400633;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783652;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, D) )
%   | | | then return 0.3293663836931543;  // std dev = 0.110, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.21980007440113256;  // std dev = 0.856, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.012655804567326697;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.3450350982120193;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3387653742762347;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.3303735459203448;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.32058466009544057;  // std dev = 0.000829, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( tweets(A, K) )
%   | then return -0.09269127618926076;  // std dev = 6.72e-09, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.25767556720637536;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2753926308727782;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.25285727726292273;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.3789654149454625;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.2747568625401332;  // std dev = 0.000265, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3016678913045464;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.261762958440653;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25508546059563025;  // std dev = 0.000723, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.2128939950713623;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2076642662019269;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.22514034043431816;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2710958607409421;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2229287318658696;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.2163078552349012;  // std dev = 1.67e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20969444944519253;  // std dev = 0.000628, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(L, A) )
%   | then return -0.07877675473109153;  // std dev = 6.59e-09, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return -0.07877675473109169;  // std dev = 3.48e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.18069547829379964;  // std dev = 0.069, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.07361637445181793;  // std dev = 0.960, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.0572651021444292;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1848473903927774;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2173395748305101;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17602231306331817;  // std dev = 0.012, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.17935573342864114;  // std dev = 0.011, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333718;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, E) )
%   | | | then return 0.09531183969554792;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.15993902472536423;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.2399034864527157;  // std dev = 1.075, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.16783324685345963;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.18660831357116042;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1540754031833632;  // std dev = 0.013, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15632570156713965;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1524675601697121;  // std dev = 0.000605, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420262;  // std dev = 5.82e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.08266016974323594;  // std dev = 0.966, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.1397796186957355;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B), follows(F, A) )
%   | | | then return 0.18315340856851833;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13975729620897565;  // std dev = 0.099, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.13676464892114878;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.5292664188947315;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1336675251194962;  // std dev = 7.15e-05, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
Inference time using transfer learning 4.245220422744751
Refined model CLL: -0.083093


******************************************
Best model found
******************************************
Results 

CLL : -0.091329 

AUC ROC : 0.994321 

AUC PR : 0.434034 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.850643396377563 

Total Inference Time : 3.8678624629974365 

Total revision time: 34.9832808971405
Best scored revision CLL: -0.083093


Results 

CLL : -0.091329 

AUC ROC : 0.994321 

AUC PR : 0.434034 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.002113819122314 

Total Inference Time : 3.8678624629974365 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8179748058319092
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834526887855416;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7083432582197383;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283918;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5326806158951883;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360663;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41567188599133326;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 4.71e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31013909709062343;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892605;  // std dev = 5.43e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25280075442552785;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21398042201971804;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 8.43e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1713520289939592;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.05e-07, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return -0.07324622576333707;  // std dev = 3.07e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15453379646689805;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442028;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12670648138042037;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
Inference time using transfer learning 1.988976240158081
Parameter learned model CLL:-0.087747 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.711, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 178, 0], 'false,false': [8.12e-09, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 224, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 203, 0], 'false,false,false': [3.49e-08, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 197, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.71e-08, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 230, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 247, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.43e-08, 237, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.403, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-07, 181, 0], 'false,false': [3.07e-08, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 263, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 171, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 71, 0]}]
{'': [0.0230640461280963, -1.6584244351247152e-16], 'false': [-1.9709577291098283e-16, 6.344131569286608e-17], 'false,true': [nan, -1.9709577291098283e-16]}
{'': [0.015621063240112101, -5.74936923466599e-17], 'false': [nan, -5.74936923466599e-17]}
{'': [0.0302734375, -9.367506770274758e-17], 'false': [nan, -9.367506770274758e-17], 'false,false': [-4.594026308793751e-17, 2.3042364662031552e-17]}
{'': [0.015621063240111085, -6.368071688415992e-17], 'false': [nan, -6.368071688415992e-17], 'false,false': [-9.242465788757649e-17, 3.2653618371328135e-17], 'false,false,false': [nan, 3.2653618371328135e-17]}
{'': [0.023064046128092243, 2.9927751098591176e-17], 'false': [nan, 2.9927751098591176e-17], 'false,false': [nan, 2.9927751098591176e-17]}
{'': [0.015621063240110691, 3.595864047368928e-17], 'false': [nan, 3.595864047368928e-17], 'false,false': [nan, 3.595864047368928e-17]}
{'': [0.007935999999999787, 2.9980706150215195e-17], 'false': [nan, 2.9980706150215195e-17], 'false,false': [nan, 2.9980706150215195e-17], 'false,false,false': [nan, 2.9980706150215195e-17]}
{'': [0.015621063240110889, 2.7644107440465744e-17], 'true': [0.015621063240110889, nan], 'false': [6.072490576679034e-17, 1.3877787807814457e-17]}
{'': [0.00793599999999995, -1.9418349480135817e-17], 'false': [nan, -1.9418349480135817e-17], 'false,false': [nan, -1.9418349480135817e-17]}
{'': [0.015621063240110896, 1.8350793795457133e-18], 'false': [-7.141785538524398e-18, -7.818472004402511e-18], 'false,false': [nan, -7.818472004402511e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 41.87236785888672
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995117;  // std dev = 2.06e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.5717620920477199;  // std dev = 0.809, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.7298126921219175;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7194734122109542;  // std dev = 8.43e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7194734122109542;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5376552303927727;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.1254446385283919;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5662006488931428;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.5615267949062578;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09296050685218123;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.4997379043289364;  // std dev = 0.839, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5721667618260912;  // std dev = 0.107, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.1123163781936068;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.426963621213158;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.3501350286103877;  // std dev = 0.969, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.08242527839245677;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return 0.4362240129792753;  // std dev = 0.164, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.48609065806544466;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4160218463642734;  // std dev = 0.038, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.4421842933247415;  // std dev = 0.065, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.10159632948783658;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(D, B), follows(D, F) )
%   | | | then return 0.2775458283823643;  // std dev = 1.257, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.34531377267627084;  // std dev = 0.220, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.32407184928213434;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.23335535452101255;  // std dev = 1.349, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.326627446902726;  // std dev = 0.074, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.31488885740403616;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.3424931699453069;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3520237908053556;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926047;  // std dev = 6.59e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2639522805977155;  // std dev = 0.026, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.25381917684297284;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.2649716556128468;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31003240264005927;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.19216276205663038;  // std dev = 0.841, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.25430700395060607;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.19521533074589623;  // std dev = 0.819, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2695735037723392;  // std dev = 0.067, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.21981875328465295;  // std dev = 0.146, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.25504072848195186;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.21283509703023346;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20395606859413298;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.21546149481337856;  // std dev = 0.000297, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.012783017845259509;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.21768931290247007;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.228715193182841;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07877675473109144;  // std dev = 3.95e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.16675366700803762;  // std dev = 1.003, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.08896093422914324;  // std dev = 1.354, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.46690330802612384;  // std dev = 1.221, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18743748933210982;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17934178685178961;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19275314793350695;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1883958008558756;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333673;  // std dev = 7.45e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.11003290300628492;  // std dev = 1.376, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return -0.07683402286079499;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.1673515137640489;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.21560928210453242;  // std dev = 0.228, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.15931385576314588;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.038596803363240645;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.17078459205800012;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15880440820601782;  // std dev = 0.026, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.06842697784420271;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( tweets(E, F), follows(D, E) )
%   | | | then return 0.14215870583518095;  // std dev = 0.030, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.17673604652568084;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.15431690556904545;  // std dev = 0.172, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.23338627605313914;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.1450901465030374;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.08282222951135387;  // std dev = 1.312, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return -0.07356938138719625;  // std dev = 1.514, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
Inference time using transfer learning 5.2019007205963135
Refined model CLL: -0.084276


******************************************
Best model found
******************************************
Results 

CLL : -0.090218 

AUC ROC : 0.994721 

AUC PR : 0.445423 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 41.87236785888672 

Total Inference Time : 5.321504831314087 

Total revision time: 50.93830966949463
Best scored revision CLL: -0.084276


Results 

CLL : -0.090218 

AUC ROC : 0.994721 

AUC PR : 0.445423 

Precision : 0.334218 

Recall : 1.0 

F1 : 0.500994 

Total Learning Time : 50.95714259147644 

Total Inference Time : 5.321504831314087 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0150599479675293
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6994914035015026;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839205;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5537863633693071;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360683;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.11231637819360622;  // std dev = 6.66e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41001096924187297;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783619;  // std dev = 5.16e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31373459011150107;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926044;  // std dev = 8.84e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24194614029597897;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1973336487893758;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 2.11e-08, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17121798578598596;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.28e-07, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1462445602102769;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420311;  // std dev = 0.000, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12092644877172846;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
Inference time using transfer learning 2.0207650661468506
Parameter learned model CLL:-0.087576 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 234, 0], 'false,false': [8.33e-09, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 313, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 245, 0], 'false,false,false': [6.66e-08, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 245, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.16e-08, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.84e-09, 288, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11e-08, 320, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 215, 0], 'false,false': [0.0, 87, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 328, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 82, 0]}]
{'': [0.024375000000006076, 4.382459307730881e-17], 'false': [-1.8978171361113786e-16, 6.97854472621527e-17], 'false,true': [nan, -1.8978171361113786e-16]}
{'': [0.02437499999999968, -1.0499233715304994e-16], 'false': [nan, -1.0499233715304994e-16]}
{'': [0.012497997115847155, -4.844609562000683e-17], 'false': [nan, -4.844609562000683e-17], 'false,false': [-9.06304509898087e-17, 5.224578939412501e-17]}
{'': [0.018511925952295845, -1.0765799026668185e-17], 'false': [nan, -1.0765799026668185e-17], 'false,false': [-7.250436079184695e-17, 3.134747363647501e-17], 'false,false,false': [nan, 3.134747363647501e-17]}
{'': [0.018511925952296962, 7.864079757761526e-17], 'false': [nan, 7.864079757761526e-17], 'false,false': [nan, 7.864079757761526e-17]}
{'': [0.02437500000000047, 3.7366729631396854e-17], 'false': [nan, 3.7366729631396854e-17], 'false,false': [nan, 3.7366729631396854e-17]}
{'': [0.02437499999999999, 1.3877787807814458e-18], 'false': [nan, 1.3877787807814458e-18], 'false,false': [nan, 1.3877787807814458e-18], 'false,false,false': [nan, 1.3877787807814458e-18]}
{'': [0.018511925952296365, 4.411482217053602e-18], 'true': [0.018511925952296365, nan], 'false': [7.642465471838287e-17, -7.656710514656252e-18]}
{'': [0.018511925952296202, -7.649707425770895e-17], 'false': [nan, -7.649707425770895e-17], 'false,false': [nan, -7.649707425770895e-17]}
{'': [0.024375000000000015, 4.830191081161395e-17], 'false': [-1.964996503761339e-18, -1.0154478883766675e-17], 'false,false': [nan, -1.0154478883766675e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 40.834375858306885
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.8581489350995118;  // std dev = 2.23e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(F, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8126943896449668;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.6940009907494112;  // std dev = 1.395, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.71972582892319;  // std dev = 0.006, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.7320463574971107;  // std dev = 0.076, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | | then return 0.6480448407823829;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.3861400788776211;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7285554015677008;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839208;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.5659350991136147;  // std dev = 0.016, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.5053696379590898;  // std dev = 0.971, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.36164726031671085;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.46354569465745804;  // std dev = 1.346, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5747749900115815;  // std dev = 0.096, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.61465957926429;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5553133397300208;  // std dev = 0.000115, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5697380555422843;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.41859400017291815;  // std dev = 1.005, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.31515858632070587;  // std dev = 0.936, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.3278373787202745;  // std dev = 1.612, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else return 0.2874338534544306;  // std dev = 1.613, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4327634222984473;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4852671177619429;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4300739964981642;  // std dev = 0.098, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.42268435880738076;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783644;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.3270725739209882;  // std dev = 0.021, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.343441676942566;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3787942895023786;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35368412146380424;  // std dev = 0.071, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.21036449672496849;  // std dev = 1.290, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.24970303614533745;  // std dev = 1.074, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.349197976738696;  // std dev = 0.093, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.2844768074880996;  // std dev = 0.962, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.0926912761892604;  // std dev = 1.01e-08, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.2620774808790861;  // std dev = 0.024, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.28764080173639844;  // std dev = 0.141, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.2699938018481798;  // std dev = 0.086, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21188560343779597;  // std dev = 1.250, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return 0.06431396768061126;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.28519281417305203;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21714597809543834;  // std dev = 0.908, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.08518475138839678;  // std dev = 3.65e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.2121828501415581;  // std dev = 0.019, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.22159705886415734;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.23153665556448894;  // std dev = 0.050, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.21749217450418343;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.2509876797996448;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3051762902337773;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.22502221957966526;  // std dev = 0.039, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.23756180532257337;  // std dev = 0.077, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.1551239960725735;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.19100714224518914;  // std dev = 0.109, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.20681293400217063;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08915595345139789;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.18290661547620715;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.19041802009439618;  // std dev = 0.049, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.21058214946490927;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19339135916704986;  // std dev = 0.063, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.07324622576333698;  // std dev = 5.59e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.15865259596947423;  // std dev = 0.057, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.19654980664696736;  // std dev = 0.121, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13016075113413633;  // std dev = 1.069, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.15714059131147073;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1627882358732114;  // std dev = 0.043, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.17770136609759882;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16501779398547403;  // std dev = 0.056, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.06842697784420303;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.13741702411540968;  // std dev = 0.040, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.14441506522212796;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14304756410764236;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16552567575537672;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.16016259918646217;  // std dev = 0.102, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19922910310518047;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14046220129633508;  // std dev = 0.025, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.14599498095328878;  // std dev = 0.052, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202586;  // std dev = 7.51e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
Inference time using transfer learning 4.22920298576355
Refined model CLL: -0.086365


******************************************
Best model found
******************************************
Results 

CLL : -0.092663 

AUC ROC : 0.993849 

AUC PR : 0.403941 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.834375858306885 

Total Inference Time : 5.476545572280884 

Total revision time: 50.60068869590759
Best scored revision CLL: -0.086365


Results 

CLL : -0.092663 

AUC ROC : 0.993849 

AUC PR : 0.403941 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 50.619521617889404 

Total Inference Time : 5.476545572280884 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.0121731758117676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4888757179904782;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.36726399087451295;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31519670983018766;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926104;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24686447251822485;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 1.86e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2377493398551307;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 2.24e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1589093849264483;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1734003706323439;  // std dev = 4.93e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442027;  // std dev = 2.08e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14993414959492715;  // std dev = 4.17e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning 2.1793038845062256
Parameter learned model CLL:-0.096795 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.981, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.94e-08, 38, 0], 'false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.262, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 41, 0], 'false,false,false': [1.39e-08, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-09, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.11e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.24e-08, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [9.13e-09, 37, 0], 'false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [4.93e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [4.17e-09, 0, 25], 'false,true': [0.0, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
{'': [0.03698224852071082, 5.437827059388522e-17], 'false': [4.0902953538821554e-17, -1.0092936587501423e-17], 'false,true': [nan, 4.0902953538821554e-17]}
{'': [-1.4210854715202004e-16, -3.289549702593056e-17], 'false': [nan, -3.289549702593056e-17]}
{'': [0.06858710562414264, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [-2.7078610356711136e-18, 1.295260195396016e-17]}
{'': [0.06858710562414287, 1.9825411154020653e-17], 'false': [nan, 1.9825411154020653e-17], 'false,false': [1.261617073437678e-18, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.03698224852071013, -2.3927220358300786e-17], 'false': [nan, -2.3927220358300786e-17], 'false,false': [nan, -2.3927220358300786e-17]}
{'': [0.03698224852071013, 3.543264972207946e-18], 'false': [nan, 3.543264972207946e-18], 'false,false': [nan, 3.543264972207946e-18]}
{'': [1.7763568394002505e-17, 8.326672684688674e-18], 'false': [nan, 8.326672684688674e-18], 'false,false': [nan, 8.326672684688674e-18], 'false,false,false': [nan, 8.326672684688674e-18]}
{'': [0.036982248520710026, 2.1769078914218755e-18], 'true': [0.036982248520710026, nan], 'false': [2.250452076942885e-18, 9.912705577010326e-19]}
{'': [1.7763568394002505e-17, 4.7132109535973624e-18], 'false': [nan, 4.7132109535973624e-18], 'false,false': [nan, 4.7132109535973624e-18]}
{'': [1.7763568394002505e-17, -3.543264972207946e-18], 'false': [-1.50030138462859e-18, 0.0], 'false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 10.427210569381714
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, F) )
%   | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.7392070123615109;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.5750887498568714;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, F) )
%   | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.43230702413071775;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.02047227215279155;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, H) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21964844216391693;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.36575685156950505;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.05797254325305481;  // std dev = 1.040, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.41254337634120386;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926105;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.28086709073973914;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.29603327626809384;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3254072992069809;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.08518475138839682;  // std dev = 1.75e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839686;  // std dev = 1.86e-09, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.22777353035791295;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23825097627021863;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25839097589329113;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.10501838342449858;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.19021318949998678;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1977298847545793;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22198386003143958;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.20590262855724528;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16263048997055002;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1682230753920687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18601718192857267;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.17426376730420523;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.1416838330291446;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.15415045455728904;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.10402142693714156;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.15310804258428917;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 5.413714408874512
Refined model CLL: -0.095287


******************************************
Best model found
******************************************
Results 

CLL : -0.08699 

AUC ROC : 0.994519 

AUC PR : 0.363792 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.427210569381714 

Total Inference Time : 1.7013490200042725 

Total revision time: 14.09826922416687
Best scored revision CLL: -0.095287


Results 

CLL : -0.08699 

AUC ROC : 0.994519 

AUC PR : 0.363792 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.117102146148682 

Total Inference Time : 1.7013490200042725 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1212775707244873
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7075623961399956;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839127;  // std dev = 1.49e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.460625094701364;  // std dev = 0.309, 56.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360625;  // std dev = 6.66e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.43356110356193384;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783619;  // std dev = 5.48e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32984708503700927;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926089;  // std dev = 6.32e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25901901509745406;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2100397606278813;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109157;  // std dev = 6.23e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17500015447029324;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.21e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07772455002814203;  // std dev = 0.287, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420267;  // std dev = 4.47e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15801575541486404;  // std dev = 5.89e-09, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
Inference time using transfer learning 2.326241970062256
Parameter learned model CLL:-0.094272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.387, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.74e-08, 82, 0], 'false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-08, 113, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.309, 6, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [6.66e-08, 90, 0], 'false,false,false': [0.0, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [5.48e-08, 86, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.32e-09, 113, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 107, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.23e-08, 109, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [4.21e-08, 91, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.287, 5, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.47e-09, 86, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [5.89e-09, 0, 50], 'false,true': [0.0, 70, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 23, 0]}]
{'': [0.03698224852071041, 6.579099405186112e-17], 'false': [7.311224796312007e-17, 1.708035422500241e-17], 'false,true': [nan, 7.311224796312007e-17]}
{'': [0.019223375624760407, 1.964996503761339e-18], 'false': [nan, 1.964996503761339e-18]}
{'': [0.09566326530612221, 6.508203937457814e-17], 'false': [nan, 6.508203937457814e-17], 'false,false': [4.9343245538895844e-17, -2.135044278125301e-18]}
{'': [0.019223375624759606, 0.0], 'false': [nan, 0.0], 'false,false': [3.4855839145208403e-17, -1.3877787807814458e-18], 'false,false,false': [nan, -1.3877787807814458e-18]}
{'': [0.019223375624759727, 3.929993007522678e-17], 'false': [nan, 3.929993007522678e-17], 'false,false': [nan, 3.929993007522678e-17]}
{'': [0.01922337562475951, 2.9052565130377925e-17], 'false': [nan, 2.9052565130377925e-17], 'false,false': [nan, 2.9052565130377925e-17]}
{'': [0.019223375624759752, 3.564936317603714e-17], 'false': [nan, 3.564936317603714e-17], 'false,false': [nan, 3.564936317603714e-17], 'false,false,false': [nan, 3.564936317603714e-17]}
{'': [0.019223375624759762, 1.715799219875242e-17], 'true': [0.019223375624759762, nan], 'false': [1.9520404828574182e-17, -7.304098846218135e-19]}
{'': [0.08264462809917351, 1.9364355080671336e-17], 'false': [nan, 1.9364355080671336e-17], 'false,false': [nan, 1.9364355080671336e-17]}
{'': [3.552713678800501e-17, -1.4325458382260084e-17], 'false': [-7.93016446160826e-18, 6.033820786006285e-19], 'false,false': [nan, 6.033820786006285e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 23.68377113342285
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7384287587143868;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5687112334863373;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.616567554138767;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5538046010114882;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5779233121965061;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360624;  // std dev = 7.09e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.43410356107067943;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4244464729449929;  // std dev = 0.069, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.47952646127923143;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4159417308780147;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.13499929882371794;  // std dev = 0.682, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4487219618144208;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.10159632948783616;  // std dev = 6.32e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.12771698402589837;  // std dev = 1.787, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return 0.32386077882334946;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.31796351447963583;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.35156186692416824;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return 0.3412428837228719;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3837370084269554;  // std dev = 1.29e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.31837641138561007;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.35635746537108925;  // std dev = 0.142, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926105;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3000487666525897;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25733128565154045;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.253296544847278;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2763493740720039;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.07074964085299357;  // std dev = 1.161, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.28756285155550687;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2848320653343978;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.23925671445637087;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839679;  // std dev = 5.43e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.23791632921404643;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2143625696848717;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.2782479780296345;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23187317145505287;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.2058201937898949;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23067405016473877;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109166;  // std dev = 4.66e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.12411513612346056;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.17029086942240904;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.18295655173239733;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1956198030148115;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.22594998473903988;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1964292661960565;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1930628208311737;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16519925531251856;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333706;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18171169800629164;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.168343252081538;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1510980871014832;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1660391029328366;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.14607189236335108;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15039937836820125;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16923944130826052;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16170365960407068;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420265;  // std dev = 4.56e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.15922878987479377;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1329207671033975;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.13422514472733607;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.16297861296782754;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13951191858704717;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14675935999102366;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12969698000882138;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.06419184008202622;  // std dev = 3.73e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
Inference time using transfer learning 6.554497480392456
Refined model CLL: -0.095062


******************************************
Best model found
******************************************
Results 

CLL : -0.087006 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.68377113342285 

Total Inference Time : 2.668076753616333 

Total revision time: 28.647562742233276
Best scored revision CLL: -0.094272


Results 

CLL : -0.087006 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.666395664215088 

Total Inference Time : 2.668076753616333 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2228224277496338
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8321749091254866;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6987117541100454;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839133;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5668752174980869;  // std dev = 2.47e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360617;  // std dev = 9.54e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4001306750157423;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783637;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 2.69e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2582055667777204;  // std dev = 0.262, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892608;  // std dev = 6.72e-09, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20358602140311383;  // std dev = 2.357, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 6.11e-09, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20026314412703344;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109151;  // std dev = 8.02e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13017479541539623;  // std dev = 2.357, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333716;  // std dev = 3.33e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1454418656041411;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420264;  // std dev = 5.59e-09, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12460804247215734;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
Inference time using transfer learning 2.480806589126587
Parameter learned model CLL:-0.092598 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.396, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [8.69e-08, 104, 0], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 134, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [2.47e-08, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [9.54e-08, 125, 0], 'false,false,false': [0.0, 27, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 121, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.69e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.262, 6, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.72e-09, 125, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.357, 6, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 152, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.02e-08, 145, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.357, 6, 75], 'true,false': [0.0, 0, 0], 'false,true': [3.33e-08, 122, 0], 'false,false': [1.18e-08, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 156, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [2.69e-08, 102, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 40, 0]}]
{'': [0.025299375948725576, -8.188879046880587e-17], 'false': [7.259150545626024e-17, 3.900783600034334e-17], 'false,true': [nan, 7.259150545626024e-17]}
{'': [0.025299375948725947, -6.628197161941233e-18], 'false': [nan, -6.628197161941233e-18]}
{'': [6.158037043254202e-16, 5.551115123125783e-17], 'false': [nan, 5.551115123125783e-17], 'false,false': [7.283063041541027e-17, -4.11193712824132e-18]}
{'': [0.025299375948727214, -7.269317423140906e-17], 'false': [nan, -7.269317423140906e-17], 'false,false': [-2.3856031934094273e-17, 1.5354148212901102e-17], 'false,false,false': [nan, 1.5354148212901102e-17]}
{'': [0.06858710562414266, 4.618527782440651e-17], 'false': [nan, 4.618527782440651e-17], 'false,false': [nan, 4.618527782440651e-17]}
{'': [0.06858710562414266, 3.652049423109068e-17], 'false': [nan, 3.652049423109068e-17], 'false,false': [nan, 3.652049423109068e-17]}
{'': [0.036982248520710255, 4.4408920985006264e-17], 'false': [nan, 4.4408920985006264e-17], 'false,false': [nan, 4.4408920985006264e-17], 'false,false,false': [nan, 4.4408920985006264e-17]}
{'': [0.06858710562414252, -7.604267291953127e-18], 'true': [0.06858710562414252, nan], 'false': [9.100188726435709e-18, 5.782411586589357e-18]}
{'': [0.03698224852071011, 3.0602301319795984e-17], 'false': [nan, 3.0602301319795984e-17], 'false,false': [nan, 3.0602301319795984e-17]}
{'': [0.036982248520709936, 1.2509555207044018e-17], 'false': [7.074950647121095e-18, -3.469446951953614e-18], 'false,false': [nan, -3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 24.772144556045532
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.7500408269914034;  // std dev = 1.889, 37.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=33 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.739393275525272;  // std dev = 0.029, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.7571118113513912;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.723022353376149;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1254446385283915;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5203545273661376;  // std dev = 1.394, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), follows(D, G) )
%   | | | then return 0.5589378102080583;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5549227377594445;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.4110217988540426;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.11231637819360622;  // std dev = 6.32e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(E, G) )
%   | | | then return 0.44421571996136233;  // std dev = 0.047, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.48191352070702453;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.44600684326999623;  // std dev = 0.073, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41938030369824536;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.41664529716070814;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4176214939208438;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4176214939208438;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, K) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.33792203544263244;  // std dev = 0.040, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.259022740979816;  // std dev = 0.955, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return -0.013634646822029639;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2689651441713946;  // std dev = 0.981, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | | then return 0.35869459681428323;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3198646619270819;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3583875721036822;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then return -0.09269127618926086;  // std dev = 6.45e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.23474046653087824;  // std dev = 0.969, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.2697439918460219;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3030052328212155;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.25506281510196616;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2564520213285724;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2843119962755655;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.005397143059200471;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.25539714305920047;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839679;  // std dev = 5.89e-09, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.19043696726876733;  // std dev = 0.984, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.22350914411583506;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.23655647015004524;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21584351232632049;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2106720028223227;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.23032481905775515;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.25437212704303025;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22085870828460033;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109151;  // std dev = 6.72e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.19653691644130258;  // std dev = 0.037, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.18626556585957685;  // std dev = 0.045, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.00532102642143375;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1761436425625399;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.17777355188175734;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20777646378624007;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.22291151573906348;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04235722890058908;  // std dev = 0.937, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333722;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.16427492889732423;  // std dev = 0.045, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.11733525806674258;  // std dev = 0.970, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1584899037961464;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.05384406360496699;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.183449145991029;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15736686920052792;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19381023233188535;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1695747169444991;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420264;  // std dev = 5.35e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), tweets(F, D) )
%   | | | then return 0.14551780459659427;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.17353080007051758;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.13527035129352497;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1449226068136531;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1350458274464006;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.03739061143725022;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.21161228893579423;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15560633838027305;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
Inference time using transfer learning 8.463938236236572
Refined model CLL: -0.093232


******************************************
Best model found
******************************************
Results 

CLL : -0.086305 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.772144556045532 

Total Inference Time : 4.43848180770874 

Total revision time: 31.87951898574829
Best scored revision CLL: -0.092598


Results 

CLL : -0.086305 

AUC ROC : 0.993671 

AUC PR : 0.333333 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.898351907730103 

Total Inference Time : 4.43848180770874 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4487407207489014
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995113;  // std dev = 4.13e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6903471986187215;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839166;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5149275713368743;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360618;  // std dev = 9.06e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4246212825889962;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783646;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3148602733627254;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926058;  // std dev = 6.45e-09, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2299090575136382;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17807018616227324;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109146;  // std dev = 9.19e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17648674110329055;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333682;  // std dev = 7.96e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.08718525839487444;  // std dev = 0.275, 109.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13820978050769878;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
Inference time using transfer learning 2.2856903076171875
Parameter learned model CLL:-0.094327 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [4.13e-07, 0, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 161, 0], 'false,false': [6.45e-09, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 194, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [9.06e-08, 119, 0], 'false,false,false': [3.33e-08, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 155, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 199, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 189, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 209, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [7.96e-08, 148, 0], 'false,false': [1.39e-08, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.275, 9, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 205, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 150, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
{'': [1.7053025658242404e-15, -2.3980817331903383e-16], 'false': [-1.5170749404815803e-16, 4.2700885562506023e-17], 'false,true': [nan, -1.5170749404815803e-16]}
{'': [0.028277877274012223, -3.8915033852840536e-17], 'false': [nan, -3.8915033852840536e-17]}
{'': [0.045351473922902674, 1.5582077538598687e-17], 'false': [nan, 1.5582077538598687e-17], 'false,false': [6.903907884223663e-17, 2.1350442781253012e-17]}
{'': [0.009802960494067845, -9.06304509898087e-17], 'false': [nan, -9.06304509898087e-17], 'false,false': [-6.446456272017038e-17, -6.769652589177784e-18], 'false,false,false': [nan, -6.769652589177784e-18]}
{'': [0.019223375624759693, 4.1284675287568635e-17], 'false': [nan, 4.1284675287568635e-17], 'false,false': [nan, 4.1284675287568635e-17]}
{'': [0.03698224852070987, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17]}
{'': [0.0453514739229027, 4.0371746350005693e-17], 'false': [nan, 4.0371746350005693e-17], 'false,false': [nan, 4.0371746350005693e-17], 'false,false,false': [nan, 4.0371746350005693e-17]}
{'': [0.01922337562475972, 4.8168406359398323e-17], 'true': [0.01922337562475972, nan], 'false': [4.2758589461914814e-17, 4.738756812424449e-18]}
{'': [0.0757511993939904, 3.411904904945603e-17], 'false': [nan, 3.411904904945603e-17], 'false,false': [nan, 3.411904904945603e-17]}
{'': [0.019223375624759606, -2.254259948477475e-18], 'false': [-1.0362081563168128e-17, -4.724353296277262e-18], 'false,false': [nan, -4.724353296277262e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 28.837458610534668
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(E, D) )
%   | | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995117;  // std dev = 2.15e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.7197573858422108;  // std dev = 0.011, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.7263952694728182;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.5283333895061401;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.6844786814028321;  // std dev = 0.989, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, I) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.5552963127411958;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.5635476098703389;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.5757217236703823;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.61516437914294;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5122129824236481;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.2441432887347517;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5696534767252271;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360639;  // std dev = 1.32e-09, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4177576477096177;  // std dev = 0.011, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.35208653826987096;  // std dev = 0.960, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.058219091168191656;  // std dev = 0.976, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3356901886808661;  // std dev = 0.931, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.46970311472738946;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3438538749898255;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.5136936797331555;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43388316070047334;  // std dev = 0.075, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.10159632948783655;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.33485345128538707;  // std dev = 0.160, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.10080489338005053;  // std dev = 0.875, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), follows(D, G) )
%   | | | then return 0.22310124180070223;  // std dev = 1.536, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.2992896838283338;  // std dev = 1.009, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.15988824871716337;  // std dev = 0.893, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.09269127618926074;  // std dev = 6.83e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | | else return -0.09269127618926087;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.26249265910752856;  // std dev = 0.125, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.05107732176562726;  // std dev = 1.164, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(F, A), follows(A, E) )
%   | | | then return 0.3144220688331265;  // std dev = 0.124, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2819441506795803;  // std dev = 0.085, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.25342111969239334;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28892607268216336;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.11386323611815528;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.08518475138839679;  // std dev = 1.86e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.21460970667601242;  // std dev = 0.098, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.11186429270515953;  // std dev = 0.842, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2692954155792363;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.23082461301556093;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.07733636934948133;  // std dev = 1.161, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.3994693335824591;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1833577186854761;  // std dev = 0.910, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.2473067815324125;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109146;  // std dev = 4.75e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.17650410726932253;  // std dev = 0.036, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.20850467051299654;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.22413103423022848;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19300460622235613;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.22678657908982003;  // std dev = 0.993, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10892524068996566;  // std dev = 1.365, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2567727451696137;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1881310368946749;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333663;  // std dev = 8.69e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1581127369553206;  // std dev = 0.114, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.16396862466953074;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.2192637069981758;  // std dev = 0.153, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.18218959431463125;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16403483221970086;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17476279939178524;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.12622791958795535;  // std dev = 1.276, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.11366055904079667;  // std dev = 0.989, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else return -0.06842697784420262;  // std dev = 5.74e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.08690615670757146;  // std dev = 1.380, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.07688865774255726;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.1868677617538427;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14835880220553985;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(I, K) )
%   | | | then return 0.1748075478143281;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2772396382675574;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return 0.18211516485285684;  // std dev = 0.140, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1463373783698269;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202626;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
Inference time using transfer learning 6.917196035385132
Refined model CLL: -0.091411


******************************************
Best model found
******************************************
Results 

CLL : -0.084663 

AUC ROC : 0.9963 

AUC PR : 0.521885 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.837458610534668 

Total Inference Time : 4.266490697860718 

Total revision time: 36.45369553565979
Best scored revision CLL: -0.091411


Results 

CLL : -0.084663 

AUC ROC : 0.9963 

AUC PR : 0.521885 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.4725284576416 

Total Inference Time : 4.266490697860718 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5574407577514648
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6963427563312394;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5471914596527967;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else return -0.11231637819360629;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4266257726218005;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31837671121708405;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926047;  // std dev = 6.59e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2593960244744784;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20398959791099439;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.96e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16339767735926888;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.139849657477635;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420278;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12927796363784338;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
Inference time using transfer learning 2.282654047012329
Parameter learned model CLL:-0.09365 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.193, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 191, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 196, 0], 'false,false,false': [3.33e-08, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 199, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 260, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.96e-08, 248, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 193, 0], 'false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 256, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 171, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 45, 0]}]
{'': [0.03671114736903867, -1.8064645824409328e-16], 'false': [-2.2320714212359167e-16, 4.9343245538895844e-17], 'false,true': [nan, -2.2320714212359167e-16]}
{'': [0.02982248520709748, -7.040438692744895e-17], 'false': [nan, -7.040438692744895e-17]}
{'': [0.02271498107084835, -9.200254546694525e-17], 'false': [nan, -9.200254546694525e-17], 'false,false': [-3.8517941670668696e-17, 2.0185873175002847e-17]}
{'': [0.007812015624030675, -7.186505885540433e-17], 'false': [nan, -7.186505885540433e-17], 'false,false': [-9.149576685353049e-17, -3.96508223080413e-18], 'false,false,false': [nan, -3.96508223080413e-18]}
{'': [0.015380859374999611, 4.350261647510817e-17], 'false': [nan, 4.350261647510817e-17], 'false,false': [nan, 4.350261647510817e-17]}
{'': [0.0078120156240312905, 3.416070845000482e-17], 'false': [nan, 3.416070845000482e-17], 'false,false': [nan, 3.416070845000482e-17]}
{'': [0.015380859375000049, 1.4325458382260084e-17], 'false': [nan, 1.4325458382260084e-17], 'false,false': [nan, 1.4325458382260084e-17], 'false,false,false': [nan, 1.4325458382260084e-17]}
{'': [0.022714981070848978, 3.299457984829782e-17], 'true': [0.022714981070848978, nan], 'false': [6.787892067656397e-17, -9.912705577010326e-19]}
{'': [0.022714981070849207, -4.336808689942018e-18], 'false': [nan, -4.336808689942018e-18], 'false,false': [nan, -4.336808689942018e-18]}
{'': [0.015380859374999997, -5.13992141030165e-19], 'false': [-7.141785538524398e-18, -1.8503717077085942e-18], 'false,false': [nan, -1.8503717077085942e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 62.1204879283905
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.7229957418067734;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.6181680314478194;  // std dev = 1.641, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7257624710318674;  // std dev = 0.049, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.7414996535886116;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.38942901223604726;  // std dev = 1.143, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.125444638528392;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5681736869481011;  // std dev = 0.089, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.5549780563017;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.3362572370047465;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5636360361265882;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5630715128765483;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5499209759119214;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.5987720875274971;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5795943325402091;  // std dev = 0.142, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.11231637819360688;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.41800660866704664;  // std dev = 0.014, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.4486904237531798;  // std dev = 0.090, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.08187795721693425;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4262373585609748;  // std dev = 0.103, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.21951137376202423;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.31394079659371166;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.41531013824886726;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, I) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.28062716409186045;  // std dev = 1.377, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.3240203918643042;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.33570741188336595;  // std dev = 0.093, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32046770227572546;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.34156883431336066;  // std dev = 0.100, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3232222955198749;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.415539122845322;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.34088196067701276;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926043;  // std dev = 8.74e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.21242274064925845;  // std dev = 1.897, 72.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=68 */
%   | | | else return 0.26850288128360417;  // std dev = 0.119, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08535396807535423;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.25525482423810214;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.27265733608537784;  // std dev = 0.077, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.31128406281434906;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2647829139553019;  // std dev = 0.054, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.0851847513883968;  // std dev = 1.61e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.22612477576824766;  // std dev = 0.079, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.18635517849571032;  // std dev = 0.924, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( follows(H, A), recursion_accounttype(D, B) )
%   | | | then return 0.10351879830795144;  // std dev = 1.206, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.22995988197901235;  // std dev = 0.131, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.10833377913468124;  // std dev = 0.288, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.07877675473109148;  // std dev = 7.88e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.07877675473109166;  // std dev = 1.61e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.1714933454069479;  // std dev = 0.983, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.02138466683737641;  // std dev = 1.191, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.19985023366413138;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1795729503014333;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1922442321065371;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21117310049026494;  // std dev = 0.087, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20070793654499738;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1784911901366311;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07324622576333667;  // std dev = 8.38e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(D, F) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.14710546645240008;  // std dev = 0.986, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.1649977326374409;  // std dev = 0.128, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.17899246915808567;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16998579483686993;  // std dev = 0.090, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.052470480238483934;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.06842697784420261;  // std dev = 4.34e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | | else return -0.06842697784420267;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06842697784420265;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.0684269778442027;  // std dev = 1.86e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.14600607346353217;  // std dev = 0.080, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.03757236309989162;  // std dev = 0.949, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.1840196814521415;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return -0.07727827425075051;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10152111689239889;  // std dev = 0.978, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.050597885984112204;  // std dev = 1.519, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.13914680046659378;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning 14.892707347869873
Refined model CLL: -0.090997


******************************************
Best model found
******************************************
Results 

CLL : -0.085759 

AUC ROC : 0.995486 

AUC PR : 0.416792 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 62.1204879283905 

Total Inference Time : 12.255650758743286 

Total revision time: 77.83791255950928
Best scored revision CLL: -0.090997


Results 

CLL : -0.085759 

AUC ROC : 0.995486 

AUC PR : 0.416792 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 77.85674548149109 

Total Inference Time : 12.255650758743286 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.9732131958007812
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7257371741022817;  // std dev = 1.19e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5302775585769441;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.39848959680945834;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30469818047587455;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926107;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27168280261386185;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.86e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19010555745272747;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109168;  // std dev = 3.65e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15907653951768513;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1670102228361422;  // std dev = 7.21e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420268;  // std dev = 2.08e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.0844424400691502;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning 1.7924673557281494
Parameter learned model CLL:-0.087515 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.984, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.16e-08, 49, 0], 'false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.19e-07, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [2.79e-08, 49, 0], 'false,false,false': [1.39e-08, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [2.79e-08, 48, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.65e-08, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 47, 0], 'false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [7.21e-09, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.239, 2, 31], 'false,true': [0.0, 43, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 14, 0]}]
{'': [0.030273437500001332, 6.446456272017038e-17], 'false': [5.437827059388522e-17, -1.2810265668751807e-17], 'false,true': [nan, 5.437827059388522e-17]}
{'': [4.584146682323227e-16, -2.3550185370836655e-17], 'false': [nan, -2.3550185370836655e-17]}
{'': [0.03027343749999989, 3.8163916471489756e-17], 'false': [nan, 3.8163916471489756e-17], 'false,false': [1.586032892321652e-17, 1.295260195396016e-17]}
{'': [0.03027343749999989, 3.40229636578677e-17], 'false': [nan, 3.40229636578677e-17], 'false,false': [1.61907524424502e-17, -3.96508223080413e-18], 'false,false,false': [nan, -3.96508223080413e-18]}
{'': [0.03027343750000014, -8.673617379884035e-18], 'false': [nan, -8.673617379884035e-18], 'false,false': [nan, -8.673617379884035e-18]}
{'': [-1.4325458382260084e-17, 3.2653618371328133e-18], 'false': [nan, 3.2653618371328133e-18], 'false,false': [nan, 3.2653618371328133e-18]}
{'': [0.030273437499999986, 1.8764332810566026e-17], 'false': [nan, 1.8764332810566026e-17], 'false,false': [nan, 1.8764332810566026e-17], 'false,false,false': [nan, 1.8764332810566026e-17]}
{'': [0.030273437500000007, 0.0], 'true': [0.030273437500000007, nan], 'false': [3.543264972207946e-18, 0.0]}
{'': [5.0139104337910294e-17, 4.037174635000569e-18], 'false': [nan, 4.037174635000569e-18], 'false,false': [nan, 4.037174635000569e-18]}
{'': [0.05693296602387514, -3.895519384649672e-18], 'false': [-1.9364355080671335e-18, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 9.052517890930176
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return -0.030526587789045448;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1254446385283915;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6121086780478282;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, F) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4747109039971702;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.4120209715145441;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.41751358415831014;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3157794661869378;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3635741505854329;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.3219096209613348;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926103;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.24863508524412656;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2860407987065545;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25566252195928413;  // std dev = 0.000895, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.005876175112162874;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2554068867503806;  // std dev = 0.000813, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839679;  // std dev = 1.05e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.10986628077130219;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.21639734740237337;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return -0.07834042623071909;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05088867769213982;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.21001763425182907;  // std dev = 0.000637, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20969764128520174;  // std dev = 4.24e-05, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109177;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.07568341030851479;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.19735862853611344;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.16238675717793818;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.26161721201830773;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1875055517020435;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17719078046933376;  // std dev = 0.000620, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), follows(A, D) )
%   | | | then return 0.18034523929295238;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1568999781217665;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20634924948568661;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return 0.16065978576130635;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15269253155470236;  // std dev = 3.31e-05, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.145006255869043;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1730663903460331;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.12301106457651438;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1465493856427475;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return -0.23572619509559506;  // std dev = 1.108, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.14691355968297132;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202622;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(J, A) )
%   | | then return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning 4.217553615570068
Refined model CLL: -0.086127


******************************************
Best model found
******************************************
Results 

CLL : -0.091258 

AUC ROC : 0.992655 

AUC PR : 0.33347 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.052517890930176 

Total Inference Time : 1.57780122756958 

Total revision time: 12.811809301376343
Best scored revision CLL: -0.086127


Results 

CLL : -0.091258 

AUC ROC : 0.992655 

AUC PR : 0.33347 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.831748247146606 

Total Inference Time : 1.57780122756958 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3343579769134521
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6882234122109542;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283913;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5318191875243454;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.43089720103927925;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32980022750903626;  // std dev = 9.13e-09, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926085;  // std dev = 6.59e-09, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.245491410189496;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18555550966162176;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109153;  // std dev = 7.88e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15570235959615397;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 3.73e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.07324622576333707;  // std dev = 9.13e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1182749085404795;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.02e-09, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10266272722389091;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.79e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
Inference time using transfer learning 1.9395027160644531
Parameter learned model CLL:-0.088171 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.0, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.88e-08, 84, 0], 'false,false': [6.45e-09, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 122, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [7.88e-08, 98, 0], 'false,false,false': [2.79e-08, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [4.71e-08, 94, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [9.13e-09, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 120, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 132, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.88e-08, 142, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [3.73e-08, 79, 0], 'false,false': [9.13e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.02e-09, 108, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.21, 3, 62], 'false,true': [2.79e-08, 104, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 49, 0]}]
{'': [-6.87622002348484e-16, -7.162729191130042e-18], 'false': [7.401486830834377e-17, 4.163336342344337e-17], 'false,true': [nan, 7.401486830834377e-17]}
{'': [0.030273437500000056, -3.640075490574284e-18], 'false': [nan, -3.640075490574284e-18]}
{'': [0.030273437500000056, 6.797283824235652e-17], 'false': [nan, 6.797283824235652e-17], 'false,false': [6.344131569286608e-17, 1.586032892321652e-17]}
{'': [-2.2920733411616134e-16, -2.842170943040401e-17], 'false': [nan, -2.842170943040401e-17], 'false,false': [2.362176648138631e-17, -1.7906822977825105e-18], 'false,false,false': [nan, -1.7906822977825105e-18]}
{'': [8.59527502935605e-17, 4.4408920985006264e-17], 'false': [nan, 4.4408920985006264e-17], 'false,false': [nan, 4.4408920985006264e-17]}
{'': [0.015621063240110825, 3.532527805625498e-17], 'false': [nan, 3.532527805625498e-17], 'false,false': [nan, 3.532527805625498e-17]}
{'': [0.030273437499999903, 4.378344322465406e-17], 'false': [nan, 4.378344322465406e-17], 'false,false': [nan, 4.378344322465406e-17], 'false,false,false': [nan, 4.378344322465406e-17]}
{'': [0.030273437500000052, 1.057355261547768e-17], 'true': [0.030273437500000052, nan], 'false': [1.756682000989172e-17, 3.2025664171879517e-18]}
{'': [0.0440236686390532, 2.4671622769447922e-17], 'false': [nan, 2.4671622769447922e-17], 'false,false': [nan, 2.4671622769447922e-17]}
{'': [0.04402366863905321, 5.079451746651043e-18], 'false': [7.472654973438553e-18, -4.5315225494904345e-18], 'false,false': [nan, -4.5315225494904345e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 26.25031089782715
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6581489350995122;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.7254991188171493;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.6156370071040244;  // std dev = 0.946, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.5369470549362851;  // std dev = 0.861, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839133;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.5620820553280711;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5940395248894281;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5538779894758341;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6401957966213282;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5947969362557473;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.5617343062243627;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1123163781936062;  // std dev = 8.12e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(F, D) )
%   | | | then return 0.42199698758802817;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1864588824743053;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.46290706473510856;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41735600864870726;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4840100197207424;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.44745344191566;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.42735027205124293;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41704923753251144;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878364;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3282634269394849;  // std dev = 0.083, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.3494640012117923;  // std dev = 0.100, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.012046416631789255;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3356779708986357;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), recursion_accounttype(F, B) )
%   | | | then return 0.31973589802973224;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3207907363987515;  // std dev = 5.46e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16090698736997647;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.09269127618926093;  // std dev = 5.59e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.2576212652051304;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.07706922782482903;  // std dev = 1.576, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3095870820879501;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2649125271884597;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.25201182740046185;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2713910915534073;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.28472000299002226;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.08518475138839682;  // std dev = 5.02e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.21210265436605663;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22780092041259856;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.2545839191869856;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23449070584626466;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.22161374483317955;  // std dev = 0.059, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.20626823532105787;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.23048108019528812;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.07877675473109166;  // std dev = 4.66e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.19113833679027897;  // std dev = 0.061, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17933123188558842;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.11355704434218768;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.014632551592007026;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | | then return 0.19933423547858586;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18065101698151406;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19690310275565157;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19126807894185152;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333711;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.16334742463612872;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15445183228421194;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.20397120703163654;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.17034492273430168;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.6035885338208652;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15843394854416198;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16547572125739723;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(J, A) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.05029736452716993;  // std dev = 0.903, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.15025585448113052;  // std dev = 0.091, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.19226282497111546;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, G) )
%   | | | then return 0.13017544603729758;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16379804126501482;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13667454241172053;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14388076168102007;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
Inference time using transfer learning 5.517820358276367
Refined model CLL: -0.088166


******************************************
Best model found
******************************************
Results 

CLL : -0.092824 

AUC ROC : 0.992743 

AUC PR : 0.346128 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 26.25031089782715 

Total Inference Time : 3.394761085510254 

Total revision time: 32.544899702072144
Best scored revision CLL: -0.088166


Results 

CLL : -0.092824 

AUC ROC : 0.992743 

AUC PR : 0.346128 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.56483864784241 

Total Inference Time : 3.394761085510254 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5993266105651855
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6803784199117096;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839163;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5569727669089628;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360617;  // std dev = 9.31e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4292622403535496;  // std dev = 1.88e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783642;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31804991607136734;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892606;  // std dev = 6.45e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24161021826062354;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2079718500425858;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109148;  // std dev = 8.82e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15391232500852006;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return -0.07324622576333707;  // std dev = 1.29e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14200269819211508;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.59e-09, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11334094780896058;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
Inference time using transfer learning 1.808931827545166
Parameter learned model CLL:-0.08758 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.995, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 149, 0], 'false,false': [6.45e-09, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 187, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [9.31e-08, 125, 0], 'false,false,false': [0.0, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.88e-07, 0, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 139, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.94e-08, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 176, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.82e-08, 165, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.705, 3, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 107, 0], 'false,false': [1.29e-08, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 169, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 125, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 46, 0]}]
{'': [0.010525124490720615, -2.1610758340297165e-16], 'false': [-1.1027718633860615e-16, 4.0902953538821554e-17], 'false,true': [nan, -1.1027718633860615e-16]}
{'': [0.03953661388032611, -3.5622129132357964e-17], 'false': [nan, -3.5622129132357964e-17]}
{'': [0.010525124490719785, 2.6914497566670462e-17], 'false': [nan, 2.6914497566670462e-17], 'false,false': [6.927791673660977e-17, -5.551115123125783e-18]}
{'': [3.820122235269356e-16, -8.926416278393219e-17], 'false': [nan, -8.926416278393219e-17], 'false,false': [-4.792329602698517e-17, 2.590520390792032e-17], 'false,false,false': [nan, 2.590520390792032e-17]}
{'': [0.010525124490720201, 4.163336342344337e-17], 'false': [nan, 4.163336342344337e-17], 'false,false': [nan, 4.163336342344337e-17]}
{'': [0.02060941828254837, 3.154042683594195e-17], 'false': [nan, 3.154042683594195e-17], 'false,false': [nan, 3.154042683594195e-17]}
{'': [0.0105251244907197, 4.710037074167331e-17], 'false': [nan, 4.710037074167331e-17], 'false,false': [nan, 4.710037074167331e-17], 'false,false,false': [nan, 4.710037074167331e-17]}
{'': [0.03027343750000007, 1.8385859006531254e-17], 'true': [0.03027343750000007, nan], 'false': [-2.0751832235984233e-18, 3.3306690738754695e-18]}
{'': [0.020609418282548617, 3.087602494519666e-17], 'false': [nan, 3.087602494519666e-17], 'false,false': [nan, 3.087602494519666e-17]}
{'': [0.030273437499999927, -6.492532307749453e-18], 'false': [-1.687538997430238e-17, -4.2236745502044e-18], 'false,false': [nan, -4.2236745502044e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 23.14905595779419
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.7401919213324014;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5528067455442875;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.723892263722164;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7273068307990077;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.12544463852839116;  // std dev = 6.97e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.12544463852839133;  // std dev = 4.93e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5553664367462839;  // std dev = 4.21e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.5550935786480419;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6059366619991672;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5918238232891503;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, G), follows(A, H) )
%   | | | then return 0.5545732474873457;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4081771098659662;  // std dev = 1.302, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5534312655875333;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5698430673605338;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11231637819360656;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(E, D) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.08418025082497671;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.453854336188221;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4411501079692193;  // std dev = 0.101, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.41757994364711665;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.42749646926055157;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3018064041955879;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return -0.10159632948783624;  // std dev = 4.17e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3207118471601494;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.34620602253540184;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.34787286655710936;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3374331958036395;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), follows(J, I) )
%   | | | then return 0.17127078200223664;  // std dev = 1.240, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.256119249511265;  // std dev = 0.982, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.35124109023161276;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.34681107860115634;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0926912761892606;  // std dev = 6.59e-09, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.25517224256948956;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2627596036308185;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.07770100861996525;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.189844438886293;  // std dev = 0.936, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2667064114198196;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.29545745759329767;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2771339416041731;  // std dev = 0.067, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.08518475138839682;  // std dev = 2.63e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.20961828152156292;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.22416257605767023;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, E), follows(D, A) )
%   | | | then return 0.2728427441649526;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23748386511934858;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.22125421827818204;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.1188833288293258;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.14969151232484829;  // std dev = 1.337, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else if ( follows(I, A) )
%   | then return -0.07877675473109158;  // std dev = 5.82e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1843025479668313;  // std dev = 0.099, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.11426518517592947;  // std dev = 1.308, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return -0.1134612761710146;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.19591826300863963;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18256710501748993;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.19497902101175;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20321518716740616;  // std dev = 0.046, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333686;  // std dev = 5.89e-09, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.155296919016055;  // std dev = 0.025, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.16342670993299407;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.18234799712996885;  // std dev = 0.109, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.17377030427469112;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then return 0.16872994234646976;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.05468365718555138;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.06842697784420268;  // std dev = 4.17e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.06842697784420268;  // std dev = 3.23e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.09812763037510706;  // std dev = 0.931, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.15140453327923312;  // std dev = 0.081, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.2063675954752391;  // std dev = 1.783, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.09632413144961689;  // std dev = 0.942, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.17852239652662316;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.14696310539617025;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16351998681548377;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning 4.019340753555298
Refined model CLL: -0.085384


******************************************
Best model found
******************************************
Results 

CLL : -0.091183 

AUC ROC : 0.994802 

AUC PR : 0.439024 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.14905595779419 

Total Inference Time : 3.7056899070739746 

Total revision time: 30.190423250198364
Best scored revision CLL: -0.085384


Results 

CLL : -0.091183 

AUC ROC : 0.994802 

AUC PR : 0.439024 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.210362195968628 

Total Inference Time : 3.7056899070739746 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6667802333831787
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264946;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7067928809885279;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5544056876045338;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360622;  // std dev = 6.99e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.11231637819360628;  // std dev = 4.08e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4010862890036664;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783624;  // std dev = 2.79e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29204213177594895;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.09e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24598780686176897;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1927353561669056;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 6.32e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1610201768038737;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.02e-07, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14487084946964926;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.10e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11039871653346346;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
Inference time using transfer learning 1.8549163341522217
Parameter learned model CLL:-0.087346 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 164, 0], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [6.99e-08, 153, 0], 'false,false,false': [4.08e-08, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 161, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.79e-08, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.09e-09, 240, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 241, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.969, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.32e-08, 249, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.969, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.02e-07, 173, 0], 'false,false': [0.0, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.1e-09, 233, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 180, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 70, 0]}]
{'': [0.015621063240114865, -2.349889092480152e-16], 'false': [-1.5705594006892458e-16, 6.39789539614497e-17], 'false,true': [nan, -1.5705594006892458e-16]}
{'': [0.015621063240114186, -7.196702610218406e-17], 'false': [nan, -7.196702610218406e-17]}
{'': [0.0079360000000014, -5.212314669601674e-17], 'false': [nan, -5.212314669601674e-17], 'false,false': [3.192798240752084e-17, 2.7755575615628914e-17]}
{'': [0.023064046128091906, -8.131210884578612e-17], 'false': [nan, -8.131210884578612e-17], 'false,false': [-7.033711087687327e-17, 1.4945309946877107e-17], 'false,false,false': [nan, 1.4945309946877107e-17]}
{'': [0.037257376359593884, 4.9960036108132046e-17], 'false': [nan, 4.9960036108132046e-17], 'false,false': [nan, 4.9960036108132046e-17]}
{'': [0.02306404612809262, 3.501118251929954e-17], 'false': [nan, 3.501118251929954e-17], 'false,false': [nan, 3.501118251929954e-17]}
{'': [0.03027343749999973, 1.6051417223496238e-17], 'false': [nan, 1.6051417223496238e-17], 'false,false': [nan, 1.6051417223496238e-17], 'false,false,false': [nan, 1.6051417223496238e-17]}
{'': [0.030273437500000142, 3.1587935428665544e-17], 'true': [0.030273437500000142, nan], 'false': [6.032425682934376e-17, -3.3643121958338078e-18]}
{'': [0.02306404612809222, 2.5730490699467146e-17], 'false': [nan, 2.5730490699467146e-17], 'false,false': [nan, 2.5730490699467146e-17]}
{'': [0.03725737635959382, 3.552713678800501e-18], 'false': [-4.3175339846533866e-18, -7.93016446160826e-18], 'false,false': [nan, -7.93016446160826e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 41.78807735443115
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.8581489350995121;  // std dev = 1.33e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(F, B) )
%   | | | then return 0.6706996223176475;  // std dev = 0.976, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.7234289286841584;  // std dev = 0.050, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5818714555253542;  // std dev = 1.318, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6033847723955014;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7452002295853042;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839194;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.5658189643998549;  // std dev = 0.076, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5225538338854163;  // std dev = 0.991, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5547302816659248;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23113560691446203;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.5850215604944435;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6159669502890074;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5635743521314607;  // std dev = 0.078, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5854171920522377;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.11231637819360688;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.4270593249158719;  // std dev = 0.062, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.41964432179762584;  // std dev = 0.024, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.4244803517637046;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4555403496496184;  // std dev = 0.074, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4640228081137664;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.20126102122408618;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4155188137818244;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4399122792081148;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783658;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.32818897889134296;  // std dev = 0.064, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.3775125136438507;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3284985718080246;  // std dev = 0.082, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.3193597882096316;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.3221792919344509;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.12459033223260725;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.34249102940296283;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3345151142064585;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926044;  // std dev = 8.01e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.23310923294567304;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.2677005548825519;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.1760806151446007;  // std dev = 0.280, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.26225523293283587;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32634482176343177;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.25424944768160657;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2686583475506823;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.08518475138839678;  // std dev = 2.08e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), follows(E, D) )
%   | | | then return 0.21403712539137798;  // std dev = 0.026, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.22458158548792376;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return -0.024800969433072112;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2168750667556699;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.22052850312221847;  // std dev = 0.127, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.07998227558916415;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.39015134843341936;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.15768429999219308;  // std dev = 1.379, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else return -0.07877675473109146;  // std dev = 3.95e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.18067655964682236;  // std dev = 0.032, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.19574726432685843;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.05952618078137482;  // std dev = 1.493, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.19154446364176678;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.19694024273195207;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22500076153189488;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18221016099682064;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1962878067840562;  // std dev = 0.084, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07324622576333678;  // std dev = 7.51e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(A, D), follows(D, E) )
%   | | | then return 0.15556421855662728;  // std dev = 0.030, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.16278632716723732;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.16419321354442246;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1911780648332446;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.1649875616918037;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1849075768042931;  // std dev = 0.123, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16263013485609945;  // std dev = 0.064, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.09355245106600245;  // std dev = 0.970, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.06842697784420262;  // std dev = 3.73e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.136081308888317;  // std dev = 0.025, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.14382915835424442;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.0945092236866896;  // std dev = 0.893, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.4231382879425943;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(J, A), follows(A, J) )
%   | | | then return 0.15696644762743073;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13777313163088406;  // std dev = 0.040, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.1572874966694217;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14838917346497063;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.0641918400820262;  // std dev = 3.23e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
Inference time using transfer learning 6.413270950317383
Refined model CLL: -0.084965


******************************************
Best model found
******************************************
Results 

CLL : -0.090868 

AUC ROC : 0.993442 

AUC PR : 0.381677 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.78807735443115 

Total Inference Time : 6.389130592346191 

Total revision time: 51.93124794960022
Best scored revision CLL: -0.084965


Results 

CLL : -0.090868 

AUC ROC : 0.993442 

AUC PR : 0.381677 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.95118689537048 

Total Inference Time : 6.389130592346191 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.932884931564331
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6946426377185237;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5441206495122389;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360665;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return -0.1123163781936062;  // std dev = 7.45e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4212664155999167;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783621;  // std dev = 4.59e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29172865473708715;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.68e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24206385140452558;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19671952421271247;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.23e-07, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14625215740380276;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.29e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15422168136547004;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420299;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12105904691444853;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 2.11e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning 1.8529844284057617
Parameter learned model CLL:-0.087087 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.201, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 230, 0], 'false,false': [8.54e-09, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 337, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 208, 0], 'false,false,false': [7.45e-08, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 256, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.59e-08, 90, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.68e-09, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 321, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.23e-07, 340, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.759, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-07, 224, 0], 'false,false': [0.0, 94, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 298, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [2.11e-08, 236, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 86, 0]}]
{'': [0.030091431657735174, 5.730183352904034e-17], 'false': [-2.0852884636437723e-16, 7.216449660063518e-17], 'false,true': [nan, -2.0852884636437723e-16]}
{'': [0.03009143165772723, -1.0278622661218066e-16], 'false': [nan, -1.0278622661218066e-16]}
{'': [0.024374999999997947, -7.91446116564468e-17], 'false': [nan, -7.91446116564468e-17], 'false,false': [-5.551115123125783e-17, 5.843279076974508e-17]}
{'': [0.012497997115846931, 2.4386401696968757e-17], 'false': [nan, 2.4386401696968757e-17], 'false,false': [-6.765421556309548e-17, 2.3438041630975527e-17], 'false,false,false': [nan, 2.3438041630975527e-17]}
{'': [0.0411005306936653, 9.341682407849214e-17], 'false': [nan, 9.341682407849214e-17], 'false,false': [nan, 9.341682407849214e-17]}
{'': [0.03009143165772983, 3.873675350717057e-17], 'false': [nan, 3.873675350717057e-17], 'false,false': [nan, 3.873675350717057e-17]}
{'': [0.030091431657729584, 4.4408920985006264e-17], 'false': [nan, 4.4408920985006264e-17], 'false,false': [nan, 4.4408920985006264e-17], 'false,false,false': [nan, 4.4408920985006264e-17]}
{'': [0.046400951814396296, 6.982534746070167e-19], 'true': [0.046400951814396296, nan], 'false': [7.434529182757744e-17, -8.267618268485208e-18]}
{'': [0.018511925952296344, -5.290324479757457e-17], 'false': [nan, -5.290324479757457e-17], 'false,false': [nan, -5.290324479757457e-17]}
{'': [0.030091431657729255, 5.930383858246178e-17], 'false': [1.8817339400426382e-18, -1.0973134545713756e-17], 'false,false': [nan, -1.0973134545713756e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 35.536173820495605
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.8181489350995119;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.44373910152973967;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7281577911227056;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.7266075567045289;  // std dev = 0.063, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.6526173787370745;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.12544463852839202;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.5304770997118777;  // std dev = 1.357, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.3248861941584464;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.5667189590465377;  // std dev = 0.072, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5578221823289593;  // std dev = 0.030, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.24172998058548978;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4949847782296644;  // std dev = 0.954, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( tweets(A, K) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.11231637819360624;  // std dev = 6.45e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4235787099489947;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.32866036714484415;  // std dev = 0.955, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.47691463484614244;  // std dev = 0.146, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4213326718751106;  // std dev = 0.080, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.3903333149908708;  // std dev = 0.908, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.09159389286531587;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.3550135841583098;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.4645619404393732;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.32413426279584334;  // std dev = 0.021, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.33874039212017854;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3511700615608244;  // std dev = 0.105, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.32745466682830965;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(I, G) )
%   | | | then return -0.11907814662643232;  // std dev = 0.992, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3352451433321915;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2738754402381609;  // std dev = 0.979, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.3205906909114853;  // std dev = 0.993, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else return -0.09269127618926044;  // std dev = 8.01e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, F), follows(A, F) )
%   | | | then return 0.2620024102677954;  // std dev = 0.099, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.3291766653638107;  // std dev = 0.163, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2708971350141803;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15992446550796785;  // std dev = 0.904, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0762400842486967;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1882984598126501;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26706103749587196;  // std dev = 0.108, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.20814986742433375;  // std dev = 1.371, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1900584500421758;  // std dev = 0.992, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.010354213199719322;  // std dev = 1.195, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.23018156755511418;  // std dev = 0.065, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.2087333075114129;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2970461412525358;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23637068955507334;  // std dev = 0.000676, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21383863615209284;  // std dev = 0.023, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.23615311221163207;  // std dev = 0.105, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.07877675473109143;  // std dev = 2.63e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18799634906887122;  // std dev = 0.102, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.1347866924148797;  // std dev = 0.897, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.04076279057527254;  // std dev = 1.205, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.16007333095136536;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.17779036637726803;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1858553521484169;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.2070248983138553;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20518111447100423;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333702;  // std dev = 5.10e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.15702853970212402;  // std dev = 0.059, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.1538017717224478;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.16842166133823577;  // std dev = 0.066, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.15587810529924445;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, I) )
%   | | | then return 0.1856856810816632;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22991594712667204;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.17827326459019807;  // std dev = 0.089, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16190395422662465;  // std dev = 0.057, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06842697784420289;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.13681994866431813;  // std dev = 0.036, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.10344900912653239;  // std dev = 0.988, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.027645498240820705;  // std dev = 1.297, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.4625270684442187;  // std dev = 0.889, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, I) )
%   | | | then return 0.14783931584922758;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.08491895400603483;  // std dev = 1.376, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13712847744454415;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15199650389201871;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202597;  // std dev = 6.45e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
Inference time using transfer learning 4.181497097015381
Refined model CLL: -0.085279


******************************************
Best model found
******************************************
Results 

CLL : -0.091105 

AUC ROC : 0.994755 

AUC PR : 0.449162 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.536173820495605 

Total Inference Time : 5.460692882537842 

Total revision time: 45.33793902397156
Best scored revision CLL: -0.085279


Results 

CLL : -0.091105 

AUC ROC : 0.994755 

AUC PR : 0.449162 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.35787796974182 

Total Inference Time : 5.460692882537842 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 0.8822214603424072
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839152;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.37905204569677153;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.290686509880861;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926104;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26840553188832345;  // std dev = 5.16e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.63e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21906338484413979;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.10981819816642109;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1679795946553906;  // std dev = 5.89e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442027;  // std dev = 2.08e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07171789183754199;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202618;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
Inference time using transfer learning 2.2071971893310547
Parameter learned model CLL:-0.09202 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.33e-07, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.08e-08, 39, 0], 'false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 40, 0], 'false,false,false': [1.39e-08, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 32, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [5.16e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.361, 2, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 47, 0], 'false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [5.89e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.262, 2, 25], 'false,true': [0.0, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 13, 0]}]
{'': [7.105427357601002e-16, 5.659960517696876e-17], 'false': [4.2700885562506023e-17, -1.1564823173178714e-17], 'false,true': [nan, 4.2700885562506023e-17]}
{'': [-7.105427357601002e-17, -2.337311630789803e-17], 'false': [nan, -2.337311630789803e-17]}
{'': [-2.842170943040401e-16, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [-5.551115123125783e-18, 1.214306433183765e-17]}
{'': [0.03698224852071001, 1.261617073437678e-18], 'false': [nan, 1.261617073437678e-18], 'false,false': [-1.0408340855860843e-17, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.03698224852071, -2.434699615406045e-17], 'false': [nan, -2.434699615406045e-17], 'false,false': [nan, -2.434699615406045e-17]}
{'': [1.0658141036401502e-16, 7.11681426041767e-18], 'false': [nan, 7.11681426041767e-18], 'false,false': [nan, 7.11681426041767e-18]}
{'': [-3.552713678800501e-17, -2.4671622769447924e-18], 'false': [nan, -2.4671622769447924e-18], 'false,false': [nan, -2.4671622769447924e-18], 'false,false,false': [nan, -2.4671622769447924e-18]}
{'': [0.06858710562414266, 2.1769078914218755e-18], 'true': [0.06858710562414266, nan], 'false': [3.543264972207946e-18, 0.0]}
{'': [3.552713678800501e-17, 4.7132109535973624e-18], 'false': [nan, 4.7132109535973624e-18], 'false,false': [nan, 4.7132109535973624e-18]}
{'': [0.06858710562414269, -3.408579461568463e-18], 'false': [-2.523234146875356e-18, 5.337610695313253e-19], 'false,false': [nan, 5.337610695313253e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 20.820472240447998
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, E) )
%   | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7512057788947993;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.735339595552877;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then return -0.12544463852839133;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, F) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5501359394367226;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.40075911522982666;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.35935615258843845;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, H) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.41701891383629697;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4725797413321632;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5033286903478591;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.24491072443967057;  // std dev = 0.721, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.32034070831414235;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3449205539876236;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.43506947191092804;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.307204447560755;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.41839527172913726;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926104;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.25491964012337404;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2717132271566051;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.33264527516910225;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2459342913645763;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3216706443321468;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( tweets(G, H) )
%   | | | then return -0.08518475138839679;  // std dev = 2.24e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839685;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, F) )
%   | | | then return 0.20937815014506522;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22223169498981862;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.26330211000924275;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20321151039813537;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2560431582679024;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.1773149085388165;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1818794600497258;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.20979312926975377;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17846489413337263;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.04446910423175654;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.06200043350829057;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.18254172843130215;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1761299688274459;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.1629343214120648;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19299920982035648;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.0684269778442027;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then return 0.14723457724247527;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1624291022894327;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return -0.12036285256066723;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16254272930254365;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 8.408703804016113
Refined model CLL: -0.091104


******************************************
Best model found
******************************************
Results 

CLL : -0.086106 

AUC ROC : 0.995419 

AUC PR : 0.475267 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.820472240447998 

Total Inference Time : 2.1805896759033203 

Total revision time: 24.915287971496582
Best scored revision CLL: -0.091104


Results 

CLL : -0.086106 

AUC ROC : 0.995419 

AUC PR : 0.475267 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.935226917266846 

Total Inference Time : 2.1805896759033203 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.149393081665039
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6810118737494162;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839133;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5082387987897388;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360621;  // std dev = 7.45e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4000021089818459;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783626;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3239674500447829;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 4.93e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20053360831015057;  // std dev = 1.925, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 4.93e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23651122097993726;  // std dev = 7.30e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0787767547310916;  // std dev = 5.67e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1964843313621092;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12883658056416245;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420264;  // std dev = 5.10e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11164892882696613;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
Inference time using transfer learning 2.369168758392334
Parameter learned model CLL:-0.093271 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.46e-07, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [6.99e-08, 70, 0], 'false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 98, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-08, 92, 0], 'false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [4.21e-08, 97, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.93e-09, 102, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.925, 4, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.93e-09, 89, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [7.3e-08, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.67e-08, 100, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.98e-08, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.1e-09, 112, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 66, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 24, 0]}]
{'': [4.263256414560601e-16, 7.864079757761526e-17], 'false': [6.97854472621527e-17, 1.708035422500241e-17], 'false,true': [nan, 6.97854472621527e-17]}
{'': [0.03698224852070972, -4.5315225494904345e-18], 'false': [nan, -4.5315225494904345e-18]}
{'': [0.05339978640085508, 7.098147206619854e-17], 'false': [nan, 7.098147206619854e-17], 'false,false': [6.033820786006285e-17, -7.401486830834377e-18]}
{'': [0.03698224852070965, -2.2204460492503132e-17], 'false': [nan, -2.2204460492503132e-17], 'false,false': [1.8312957107219077e-17, -2.413528314402514e-18], 'false,false,false': [nan, -2.413528314402514e-18]}
{'': [0.019223375624759446, 2.503444075135157e-17], 'false': [nan, 2.503444075135157e-17], 'false,false': [nan, 2.503444075135157e-17]}
{'': [0.06858710562414255, 2.494883201404846e-17], 'false': [nan, 2.494883201404846e-17], 'false,false': [nan, 2.494883201404846e-17]}
{'': [1.0658141036401502e-16, 3.219646771412954e-17], 'false': [nan, 3.219646771412954e-17], 'false,false': [nan, 3.219646771412954e-17], 'false,false,false': [nan, 3.219646771412954e-17]}
{'': [1.7763568394002505e-17, -6.867358915207154e-18], 'true': [1.7763568394002505e-17, nan], 'false': [-5.767392335715099e-18, -1.3877787807814458e-18]}
{'': [0.03698224852071004, 2.577303450022685e-17], 'false': [nan, 2.577303450022685e-17], 'false,false': [nan, 2.577303450022685e-17]}
{'': [0.03698224852071008, -1.295260195396016e-17], 'false': [-6.7286243916676156e-18, 5.782411586589357e-19], 'false,false': [nan, 5.782411586589357e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 15.57115626335144
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839133;  // std dev = 1.49e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5717863843936095;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.41751358415831;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1660181686402704;  // std dev = 1.226, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.43606116366209574;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.21751358415830996;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.11170443521163775;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3200810430161573;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.3433592261990141;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.34722936221927875;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.38704245122015846;  // std dev = 0.096, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07928815283985055;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.09269127618926107;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.25529215132171507;  // std dev = 3.33e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2734625286200285;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.08984237149285612;  // std dev = 0.812, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(H, A), follows(H, F) )
%   | | | then return 0.26428736025225613;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2854882717565191;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3369033991912954;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then if ( follows(A, J) )
%   | | then return -0.08518475138839683;  // std dev = 4.66e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839682;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(E, D), follows(A, F) )
%   | | | then return 0.2098424139120088;  // std dev = 2.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20630834487450553;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2427274781251456;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22777520542716073;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.08323078845336727;  // std dev = 0.906, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.25736560601921504;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.18684861523749635;  // std dev = 0.964, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, H) )
%   | then return -0.07877675473109168;  // std dev = 4.27e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.17683422132475227;  // std dev = 0.006, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1888977517162108;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(D, B) )
%   | | | then return 0.20538804904831634;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.24655543108991218;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.19721730547988003;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.016332193988633132;  // std dev = 0.720, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1525450646430058;  // std dev = 0.005, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1616690118316217;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1761712705321845;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.186459982755514;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18658966272678587;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22223486450768407;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420267;  // std dev = 3.73e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13691771248293425;  // std dev = 0.046, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.1600848055130673;  // std dev = 0.096, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20367725448100485;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09995823396375769;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
Inference time using transfer learning 6.13123631477356
Refined model CLL: -0.091815


******************************************
Best model found
******************************************
Results 

CLL : -0.084906 

AUC ROC : 0.995042 

AUC PR : 0.436032 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 15.57115626335144 

Total Inference Time : 2.8667447566986084 

Total revision time: 20.75775933265686
Best scored revision CLL: -0.091815


Results 

CLL : -0.084906 

AUC ROC : 0.995042 

AUC PR : 0.436032 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.777698278427124 

Total Inference Time : 2.8667447566986084 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3140509128570557
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379742;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7140123445404081;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839113;  // std dev = 7.60e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5277228609597265;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360622;  // std dev = 7.88e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.11231637819360649;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42185613855643866;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3223720202124951;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926072;  // std dev = 6.84e-09, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24185784002069413;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19715768389092878;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109154;  // std dev = 7.15e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14019087611537823;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333716;  // std dev = 3.33e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return -0.07324622576333707;  // std dev = 1.18e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11947577772979137;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420265;  // std dev = 5.27e-09, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11543866681200561;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
Inference time using transfer learning 2.2262582778930664
Parameter learned model CLL:-0.092562 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.698, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false': [4.21e-08, 120, 0], 'false,false': [5.89e-09, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [7.6e-08, 135, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [7.88e-08, 104, 0], 'false,false,false': [0.0, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 106, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.84e-09, 148, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 144, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.15e-08, 124, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.949, 4, 75], 'true,false': [0.0, 0, 0], 'false,true': [3.33e-08, 122, 0], 'false,false': [1.18e-08, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.219, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 132, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 3, 75], 'false,true': [2.58e-08, 98, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 31, 0]}]
{'': [0.03698224852070899, -1.3179421711679277e-16], 'false': [1.4802973661668754e-17, 3.489272363107635e-17], 'false,true': [nan, 1.4802973661668754e-17]}
{'': [0.012984764542937404, 4.2764146133709734e-17], 'false': [nan, 4.2764146133709734e-17]}
{'': [0.03698224852070954, 7.131359574234582e-17], 'false': [nan, 7.131359574234582e-17], 'false,false': [5.978123978750843e-17, -2.5232341468753557e-17]}
{'': [0.012984764542935862, -4.7580986769649563e-17], 'false': [nan, -4.7580986769649563e-17], 'false,false': [0.0, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.012984764542936516, 4.650934292348629e-17], 'false': [nan, 4.650934292348629e-17], 'false,false': [nan, 4.650934292348629e-17]}
{'': [0.025299375948726752, 3.5465457731081387e-17], 'false': [nan, 3.5465457731081387e-17], 'false,false': [nan, 3.5465457731081387e-17]}
{'': [0.02529937594872653, 4.118569284899774e-17], 'false': [nan, 4.118569284899774e-17], 'false,false': [nan, 4.118569284899774e-17], 'false,false,false': [nan, 4.118569284899774e-17]}
{'': [0.04806921967633385, -2.137696507042227e-17], 'true': [0.04806921967633385, nan], 'false': [9.100188726435709e-18, 3.558407130208835e-18]}
{'': [0.04806921967633384, 2.8596653664587365e-17], 'false': [nan, 2.8596653664587365e-17], 'false,false': [nan, 2.8596653664587365e-17]}
{'': [0.036982248520710005, 4.303190017926963e-18], 'false': [6.797283824235652e-18, -4.476705744456276e-18], 'false,false': [nan, -4.476705744456276e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 18.128446102142334
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.6361400788776208;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7194734122109542;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, K) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5358840503323344;  // std dev = 0.998, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.24250468440316522;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.585865103373455;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.05536643674628429;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.11231637819360621;  // std dev = 7.68e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.11231637819360642;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.37878083765717596;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.42096486733535093;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return 0.48412873438135584;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.42022530665455654;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(K, A) )
%   | | | then return 0.43866450387759376;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5183235323322712;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return 0.45691639320394534;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783648;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2554335805323183;  // std dev = 1.357, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.34554535157685906;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.3524284525392329;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3214737199221731;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.32267436732435717;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1813571641689021;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.039976425300792574;  // std dev = 1.090, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926076;  // std dev = 6.72e-09, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.22829005060145033;  // std dev = 0.973, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.27528644683860765;  // std dev = 0.146, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2522866848940473;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.09862792315402039;  // std dev = 1.193, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2769471439127079;  // std dev = 0.092, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2858086425553799;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, H) )
%   | then return -0.0851847513883968;  // std dev = 5.89e-09, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return -0.0851847513883968;  // std dev = 3.73e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.18811381775926211;  // std dev = 0.975, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.22351965581424094;  // std dev = 0.045, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.12765497772267173;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20645237843687206;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.24048742624300654;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.31876412433954154;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2258316656936415;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20882990320858752;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0787767547310915;  // std dev = 6.84e-09, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(D, E) )
%   | | | then return 0.19889310320902878;  // std dev = 0.098, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.17387086704254315;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.22477487390434267;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19818776344574895;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21191898685037047;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17440196922748516;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.19385444407189067;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333711;  // std dev = 3.09e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return -0.07324622576333707;  // std dev = 1.61e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.0930317116876176;  // std dev = 1.365, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.027607079597352736;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.1624847008714882;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1880070757134502;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.18830355385754372;  // std dev = 0.082, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16856280639782795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15069759396025117;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.165341286863376;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420264;  // std dev = 5.51e-09, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15518402112790236;  // std dev = 0.031, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1425877507945599;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.13086710888991807;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14376652525554867;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.16266953827630135;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.3181668352644502;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.16023277409907513;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13213970124610674;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 2.28e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
Inference time using transfer learning 6.0844950675964355
Refined model CLL: -0.091063


******************************************
Best model found
******************************************
Results 

CLL : -0.085549 

AUC ROC : 0.996085 

AUC PR : 0.471936 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.128446102142334 

Total Inference Time : 3.475275754928589 

Total revision time: 24.42136526107788
Best scored revision CLL: -0.091063


Results 

CLL : -0.085549 

AUC ROC : 0.996085 

AUC PR : 0.471936 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.441304206848145 

Total Inference Time : 3.475275754928589 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4299280643463135
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379727;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7075623961399962;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839158;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5481601087069679;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360625;  // std dev = 8.94e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42167846713345175;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783646;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.275854316229362;  // std dev = 0.231, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926057;  // std dev = 6.45e-09, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.226675303803507;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2024169675749107;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109147;  // std dev = 8.94e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17788555004482864;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633368;  // std dev = 8.36e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.07324622576333707;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15119889743025522;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 5.74e-09, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11198291327872163;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
Inference time using transfer learning 2.215132236480713
Parameter learned model CLL:-0.092056 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.961, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 151, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 179, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [8.94e-08, 152, 0], 'false,false,false': [1.83e-08, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 156, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 43, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.231, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.45e-09, 209, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 207, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.94e-08, 192, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [8.36e-08, 152, 0], 'false,false': [1.29e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 188, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 144, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
{'': [0.036982248520711906, -2.266705341943028e-16], 'false': [-1.1763952578809607e-16, 4.603363760640893e-17], 'false,true': [nan, -1.1763952578809607e-16]}
{'': [0.01922337562475957, -2.2328507757824378e-17], 'false': [nan, -2.2328507757824378e-17]}
{'': [0.019223375624757864, -2.4796859433252228e-17], 'false': [nan, -2.4796859433252228e-17], 'false,false': [5.258951169277057e-17, 7.401486830834377e-18]}
{'': [0.009802960494069252, -8.926416278393219e-17], 'false': [nan, -8.926416278393219e-17], 'false,false': [-6.405132834375903e-17, -1.290957005378089e-18], 'false,false,false': [nan, -1.290957005378089e-18]}
{'': [0.05339978640085486, 4.249657510526915e-17], 'false': [nan, 4.249657510526915e-17], 'false,false': [nan, 4.249657510526915e-17]}
{'': [0.04535147392290252, 3.325305677621242e-17], 'false': [nan, 3.325305677621242e-17], 'false,false': [nan, 3.325305677621242e-17]}
{'': [0.028277877274012455, 4.163336342344337e-17], 'false': [nan, 4.163336342344337e-17], 'false,false': [nan, 4.163336342344337e-17], 'false,false,false': [nan, 4.163336342344337e-17]}
{'': [0.019223375624759793, 4.4408920985006264e-17], 'true': [0.019223375624759793, nan], 'false': [4.601582273117425e-17, 3.469446951953614e-18]}
{'': [0.019223375624759606, 3.307047307394083e-17], 'false': [nan, 3.307047307394083e-17], 'false,false': [nan, 3.307047307394083e-17]}
{'': [0.03698224852071015, -2.254259948477475e-18], 'false': [-1.1564823173178714e-17, -4.7132109535973624e-18], 'false,false': [nan, -4.7132109535973624e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 46.87627148628235
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.8126943896449664;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.858148935099512;  // std dev = 1.58e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7262365957744888;  // std dev = 0.027, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.4717439095501411;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(D, G) )
%   | | | then return 0.7213432335491085;  // std dev = 0.021, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.7373228684706172;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6302322013528495;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.12544463852839124;  // std dev = 4.56e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(H, I) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.5650493543372769;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.5064622603937071;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return -0.11176200109594565;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5549046655707209;  // std dev = 5.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), follows(J, H) )
%   | | | then return 0.5738415478047535;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.60538885663006;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.5741176471656627;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5524358409625858;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360661;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.42507447107047763;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.45579330889236114;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.2904094057134913;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4282850250526126;  // std dev = 0.094, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.42256200748620815;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41601683010802964;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13680488486544976;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.41388990362128164;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783653;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.27921278463133825;  // std dev = 1.284, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.3271082329472811;  // std dev = 0.105, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.4129741051193217;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.35275397674870734;  // std dev = 0.137, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.23448539641039423;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.07489726770963978;  // std dev = 1.096, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.31896145409569154;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926071;  // std dev = 6.04e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else return -0.092691276189261;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.24180254218386288;  // std dev = 0.989, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.25973534360155304;  // std dev = 0.078, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3180133776624958;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27769471507090276;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.18353230794332404;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.08518475138839678;  // std dev = 5.27e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839678;  // std dev = 2.08e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.08518475138839679;  // std dev = 2.46e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.1982761634894267;  // std dev = 0.987, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return -0.03751883976442728;  // std dev = 1.509, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( follows(E, G) )
%   | | | then return 0.21357911263002605;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2535500309975481;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then return 0.25798464005335736;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.23305264530429373;  // std dev = 0.137, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.21334213510341088;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109147;  // std dev = 5.51e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.09383697477766757;  // std dev = 1.828, 40.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=36 */
%   | | | else return 0.19884389642307085;  // std dev = 0.143, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.11535352863827282;  // std dev = 0.874, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.14240184348650428;  // std dev = 1.187, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), tweets(H, J) )
%   | | | then return 0.1779845385475043;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1733644466550426;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21424868019000046;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18465308523224105;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333667;  // std dev = 8.23e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1745700041145862;  // std dev = 0.035, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.18608314673746706;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1691625567900008;  // std dev = 0.073, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11157700162949141;  // std dev = 0.951, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(H, I), follows(A, H) )
%   | | | then return 0.1591770873274039;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12106223501430265;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22576568567604005;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14695327897831392;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420262;  // std dev = 5.82e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1275219462959643;  // std dev = 0.988, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return -0.027480638392094824;  // std dev = 0.954, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(E, G), tweets(D, G) )
%   | | | then return 0.15147549256882378;  // std dev = 0.111, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.19041416730097704;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.05024421009785305;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.14522781942276544;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.012314714642595719;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
Inference time using transfer learning 9.194498062133789
Refined model CLL: -0.090916


******************************************
Best model found
******************************************
Results 

CLL : -0.08602 

AUC ROC : 0.995259 

AUC PR : 0.423296 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 46.87627148628235 

Total Inference Time : 6.157629489898682 

Total revision time: 56.08771467208862
Best scored revision CLL: -0.090916


Results 

CLL : -0.08602 

AUC ROC : 0.995259 

AUC PR : 0.423296 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 56.10765361785889 

Total Inference Time : 6.157629489898682 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.595557451248169
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7085181213873046;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5559235329608464;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360654;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return -0.11231637819360628;  // std dev = 3.94e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4024642969419304;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 4.47e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27171197853961404;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.45e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22154964975628993;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21673005554456193;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 8.69e-08, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15778382179566522;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333674;  // std dev = 9.54e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return -0.07324622576333707;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13410910851913577;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420285;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1461107508385023;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
Inference time using transfer learning 2.1762843132019043
Parameter learned model CLL:-0.092972 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.712, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 191, 0], 'false,false': [7.9e-09, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 241, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 190, 0], 'false,false,false': [3.94e-08, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 180, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.47e-08, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.45e-09, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.69e-08, 272, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [9.54e-08, 169, 0], 'false,false': [7.45e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 271, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 173, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 74, 0]}]
{'': [0.022714981070853308, -1.360918546314708e-16], 'false': [-2.2320714212359167e-16, 6.232831015439475e-17], 'false,true': [nan, -2.2320714212359167e-16]}
{'': [0.015380859375001332, -7.002236503859908e-17], 'false': [nan, -7.002236503859908e-17]}
{'': [0.007812015624032213, -9.095803093314535e-17], 'false': [nan, -9.095803093314535e-17], 'false,false': [-3.0385051200267444e-17, 2.6344275160596936e-17]}
{'': [0.022714981070848874, -6.859914623700155e-17], 'false': [nan, -6.859914623700155e-17], 'false,false': [-8.758426083154012e-17, 3.027880976250427e-17], 'false,false,false': [nan, 3.027880976250427e-17]}
{'': [0.05613722432613008, 5.596246140386968e-17], 'false': [nan, 5.596246140386968e-17], 'false,false': [nan, 5.596246140386968e-17]}
{'': [0.04986149584487554, 3.552713678800501e-17], 'false': [nan, 3.552713678800501e-17], 'false,false': [nan, 3.552713678800501e-17]}
{'': [0.015380859374999938, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [nan, 2.7755575615628914e-17], 'false,false,false': [nan, 2.7755575615628914e-17]}
{'': [0.03671114736903423, 4.978578585763034e-17], 'true': [0.03671114736903423, nan], 'false': [5.386880947885375e-17, 1.02798428206033e-18]}
{'': [0.036711147369034476, -2.7857994713841565e-17], 'false': [nan, -2.7857994713841565e-17], 'false,false': [nan, -2.7857994713841565e-17]}
{'': [0.00781201562403136, 2.696898035526696e-18], 'false': [-6.4174741307812516e-18, -9.00180830777154e-18], 'false,false': [nan, -9.00180830777154e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 37.18076539039612
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), tweets(A, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( tweets(A, I) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.6822527743391266;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.7194734122109542;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.33906413650681994;  // std dev = 1.671, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.6121337135620065;  // std dev = 0.900, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7359812264346162;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839174;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.49693772451891505;  // std dev = 2.089, 68.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=63 */
%   | | | else return 0.5916355643777086;  // std dev = 0.283, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.6599453491242777;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.563208910305367;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5734493045911175;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.11231637819360633;  // std dev = 3.73e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), tweets(D, F) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.45978594012229457;  // std dev = 0.253, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.4273919920465643;  // std dev = 0.127, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.09076541506893392;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4345212757844765;  // std dev = 0.132, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.31751358415830977;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.23938988285126978;  // std dev = 0.797, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4310720533466297;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return -0.1015963294878362;  // std dev = 5.27e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(F, D), follows(F, A) )
%   | | | then return 0.32339245650802406;  // std dev = 0.990, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.3971609716092528;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.41161893447790693;  // std dev = 0.134, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.32458815779930855;  // std dev = 0.086, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.32853817738538393;  // std dev = 0.078, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.04294775426976686;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.34608455183476544;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3275371871726765;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926053;  // std dev = 6.59e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.20485041866158127;  // std dev = 1.871, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.28003476950920164;  // std dev = 0.195, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.26424621975185564;  // std dev = 0.069, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.27889543204197176;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.2556509438461042;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.34459403487659435;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.27274757816404405;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10577966442182198;  // std dev = 1.303, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.23640398032046123;  // std dev = 0.122, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.22369972974663835;  // std dev = 0.152, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2278997984600435;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.03747952338516516;  // std dev = 0.921, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.24569821436225472;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1537429616142658;  // std dev = 1.045, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.22504991063977003;  // std dev = 0.079, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.11110639465580513;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109144;  // std dev = 6.04e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.1927360771542661;  // std dev = 0.070, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.20817166053128142;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.17534265168218702;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18609162256979164;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.14525318328614042;  // std dev = 1.465, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.23297588476002187;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18092283844419782;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20428554264931661;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333693;  // std dev = 5.96e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(G, E) )
%   | | | then return 0.16452111738954941;  // std dev = 0.062, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.17596117041132686;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.1325273225124464;  // std dev = 0.858, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.1762529628355489;  // std dev = 0.114, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.05488519776961204;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.16628628374650492;  // std dev = 0.084, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.5235053242135195;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.028627327930786595;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.06842697784420265;  // std dev = 3.09e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.1231064610912216;  // std dev = 0.988, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.16049232028308738;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.13920394688602786;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1519014000529382;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return -0.02067739127069928;  // std dev = 1.221, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.23651786120013307;  // std dev = 0.145, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.14248607604101735;  // std dev = 0.085, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.06110556302314515;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06419184008202623;  // std dev = 3.23e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
Inference time using transfer learning 6.787522554397583
Refined model CLL: -0.090843


******************************************
Best model found
******************************************
Results 

CLL : -0.085007 

AUC ROC : 0.995646 

AUC PR : 0.456463 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.18076539039612 

Total Inference Time : 5.1545960903167725 

Total revision time: 45.733875036239624
Best scored revision CLL: -0.090843


Results 

CLL : -0.085007 

AUC ROC : 0.995646 

AUC PR : 0.456463 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.75381398200989 

Total Inference Time : 5.1545960903167725 

