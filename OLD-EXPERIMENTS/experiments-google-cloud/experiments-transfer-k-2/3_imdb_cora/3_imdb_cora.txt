Starting experiment 3_imdb_cora 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2095484733581543
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1775632730434027;  // std dev = 15.031, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15116220871192843;  // std dev = 14.991, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12636813427325808;  // std dev = 14.958, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1040008319294421;  // std dev = 14.932, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08449013032014598;  // std dev = 14.913, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06792697018261566;  // std dev = 14.899, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05416290377654376;  // std dev = 14.889, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04291178975796362;  // std dev = 14.881, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.033829820576650606;  // std dev = 14.875, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.4298396110534668
Parameter learned model CLL:-0.610705 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.031, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.991, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.958, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.932, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.913, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.899, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.889, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.881, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.875, 688, 368]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [nan, 0.21396261948921783]}
{'': [nan, 0.21280498841507858]}
{'': [nan, 0.211874155715436]}
{'': [nan, 0.21115363970790493]}
{'': [nan, 0.21061082141622184]}
{'': [nan, 0.21020884253036057]}
{'': [nan, 0.2099138352318243]}
{'': [nan, 0.20969794288616062]}
{'': [nan, 0.20953970786680315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 53.15989398956299
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2049183322262339;  // std dev = 0.472, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.468312075903186;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.34766340565397563;  // std dev = 2.461, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.17357802733179237;  // std dev = 0.471, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3994142942144719;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3748603184562167;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.28255478758742775;  // std dev = 2.414, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14395480624734666;  // std dev = 0.470, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.30289072617432067;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3177761740995264;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2232195344610785;  // std dev = 2.381, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11726647328023204;  // std dev = 0.469, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.23603843390781912;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25926780628123086;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17123197589790554;  // std dev = 2.362, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09415169470596141;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.17985356295935798;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1986385982054756;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13070349918265314;  // std dev = 2.351, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07474249104647375;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1620555679077724;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10344761351841367;  // std dev = 0.438, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05882426299060999;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else return 0.08179207428597964;  // std dev = 0.437, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0459962294727047;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10030954353871738;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.10460823584443486;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05117490448488679;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.161528146193138;  // std dev = 0.748, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08031615475120135;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03695606251487471;  // std dev = 0.468, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07525239614163914;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.038729290734549844;  // std dev = 2.344, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.007581877322620253;  // std dev = 0.329, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.004062781395501627;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.658915758132935
Refined model CLL: -0.588986


******************************************
Best model found
******************************************
Results 

CLL : -0.640946 

AUC ROC : 0.615854 

AUC PR : 0.530984 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 53.15989398956299 

Total Inference Time : 1.1404979228973389 

Total revision time: 56.239630699157715
Best scored revision CLL: -0.588986


Results 

CLL : -0.640946 

AUC ROC : 0.615854 

AUC PR : 0.530984 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 56.25611853599548 

Total Inference Time : 1.1404979228973389 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3343234062194824
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3806526163240884;  // std dev = 17.682, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3117976179584805;  // std dev = 17.653, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.24582587485442758;  // std dev = 17.635, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18888511793530605;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14306763367044112;  // std dev = 17.624, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10766303631880281;  // std dev = 17.625, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08085635394709823;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06073509274713063;  // std dev = 17.629, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.045671070800936533;  // std dev = 17.630, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3046519756317139
Parameter learned model CLL:-0.667757 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.682, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.653, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.635, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.624, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.625, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.629, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.63, 544, 771]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [nan, 0.2377624405968968]}
{'': [nan, 0.23697901057273382]}
{'': [nan, 0.23650340130609027]}
{'': [nan, 0.23627946557054255]}
{'': [nan, 0.23621216461675754]}
{'': [nan, 0.2362246020272847]}
{'': [nan, 0.23626991152993357]}
{'': [nan, 0.23632377119655829]}
{'': [nan, 0.2363750848623608]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 57.70148682594299
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3732165172968606;  // std dev = 0.489, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3061497457413284;  // std dev = 0.488, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24185825771482808;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18620230180581407;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641062;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4171786509312099;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.01579420258355682;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1505717440916841;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22711196591905072;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13917963543396852;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064222;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17805918236963383;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.21003275240803626;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3795274962097198;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.011900208449844712;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.18230619751739113;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2614604803504582;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10427998012163193;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14069831902044802;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1370524169548924;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.1776908242252013;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06590041896332113;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2849479242758629;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.008965295361207687;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15428458271036882;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07836134313221091;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10809142114220006;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10603568943105794;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.18862984091966073;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05056296461893003;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04835042126343131;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2646435534146562;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.006753797635027703;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1556257702084019;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21640142832867193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.21665142839406135;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11775076812032151;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.057067068609000154;  // std dev = 16.657, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.0833353712630658;  // std dev = 2.694, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.09790544844926853;  // std dev = 0.379, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045315335006139885;  // std dev = 0.484, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06431127292992059;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03564835868391024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17140577300117088;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.14861908495893877;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.017265349447167906;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01514629561062302;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.174508333206177
Refined model CLL: -0.652172


******************************************
Best model found
******************************************
Results 

CLL : -0.740649 

AUC ROC : 0.59851 

AUC PR : 0.400008 

Precision : 0.354191 

Recall : 0.957703 

F1 : 0.517129 

Total Learning Time : 57.70148682594299 

Total Inference Time : 1.2001636028289795 

Total revision time: 61.00219488143921
Best scored revision CLL: -0.652172


Results 

CLL : -0.740649 

AUC ROC : 0.59851 

AUC PR : 0.400008 

Precision : 0.354191 

Recall : 0.957703 

F1 : 0.517129 

Total Learning Time : 61.01868271827698 

Total Inference Time : 1.2001636028289795 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.994382619857788
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.14201230376852972;  // std dev = 18.579, 1,698.000 (wgt'ed) examples reached here.  /* #neg=1,216 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.164040051556027;  // std dev = 19.343, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1472784765097382;  // std dev = 19.207, 1,718.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11816584968012474;  // std dev = 19.261, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09643487972017975;  // std dev = 19.261, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07569111739766782;  // std dev = 19.291, 1,771.000 (wgt'ed) examples reached here.  /* #neg=1,190 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.060164708414884936;  // std dev = 19.296, 1,777.000 (wgt'ed) examples reached here.  /* #neg=1,196 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.051750088086536826;  // std dev = 19.238, 1,758.000 (wgt'ed) examples reached here.  /* #neg=1,177 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04425197826958073;  // std dev = 19.188, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.027503264145774482;  // std dev = 19.295, 1,784.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=581 */
Inference time using transfer learning 1.2397181987762451
Parameter learned model CLL:-0.514213 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.579, 1, 482]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.343, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.207, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.261, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.261, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.291, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.296, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.238, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.188, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.295, 1, 581]}]
{'': [1.4354398702224246e-15, 0.20328495659687976]}
{'': [nan, 0.21307477045142537]}
{'': [nan, 0.21472687336467436]}
{'': [nan, 0.2123656844817054]}
{'': [nan, 0.21150300211461823]}
{'': [nan, 0.21013739607594648]}
{'': [nan, 0.20953468245129267]}
{'': [nan, 0.21051795668827247]}
{'': [nan, 0.21135269227944586]}
{'': [nan, 0.2086821578758297]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 39.971126556396484
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1657351419960591;  // std dev = 0.461, 1,450.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029577506528083813;  // std dev = 3.862, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return 0.007681645379886196;  // std dev = 3.689, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1935351956991679;  // std dev = 0.472, 1,495.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.001860917318853136;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.06535139725759044;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.025141662746448717;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.0231987481606268;  // std dev = 0.374, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16098758967809135;  // std dev = 0.470, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5793030809710343;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14772758111094766;  // std dev = 0.013, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14839770714554204;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.051602292854457985;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.031508161518764344;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.048829839038363805;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.14489526704166583;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13026065320955696;  // std dev = 0.468, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4904512067334927;  // std dev = 2.090, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13016175395596621;  // std dev = 0.010, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13060484262800923;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.04496200585411807;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.029584996534159153;  // std dev = 3.612, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.033971601031118265;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.12807664565799246;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10318631301798985;  // std dev = 0.466, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03246385398534925;  // std dev = 0.311, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03559133008309962;  // std dev = 3.358, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.03484079016624822;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.005113848192665661;  // std dev = 3.216, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.11434930284535208;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08753959007340893;  // std dev = 0.467, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5044112293970199;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.15856219293697418;  // std dev = 0.097, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.04047975348363512;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004923465466881069;  // std dev = 2.997, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.038181919017603885;  // std dev = 1.317, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.10418057218721789;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08454530142599104;  // std dev = 0.471, 1,464.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4529086845387312;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14124564208318466;  // std dev = 0.033, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10971413078524381;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.03594835323628268;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.0016987910331152396;  // std dev = 2.994, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.04065684147965654;  // std dev = 1.318, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.0940836476855406;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121954264651218;  // std dev = 0.469, 1,488.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.46420534461014035;  // std dev = 1.794, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.12514685429034308;  // std dev = 0.029, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.09944750231169983;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.018988487359647345;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.005854225975792017;  // std dev = 2.957, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.04967051699520727;  // std dev = 1.333, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.08636523225986592;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03820611235118907;  // std dev = 0.466, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5048951489282522;  // std dev = 1.591, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11620578624305453;  // std dev = 0.015, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10436657683603157;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.008807363883550865;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.1069339227878298;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.004303341918310766;  // std dev = 2.924, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | | else return -0.08117620812875562;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.021993768624988974;  // std dev = 0.464, 1,567.000 (wgt'ed) examples reached here.  /* #neg=1,022 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2506956989802505;  // std dev = 2.213, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.10727175344400405;  // std dev = 0.075, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.19675312954385568;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0271658779875618;  // std dev = 2.667, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.020532323300635164;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.07345800314810697;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 4.875391721725464
Refined model CLL: -0.493411


******************************************
Best model found
******************************************
Results 

CLL : -0.683364 

AUC ROC : 0.632526 

AUC PR : 0.602415 

Precision : 0.556338 

Recall : 0.03243 

F1 : 0.061288 

Total Learning Time : 39.971126556396484 

Total Inference Time : 1.5479419231414795 

Total revision time: 44.421138286590576
Best scored revision CLL: -0.493411


Results 

CLL : -0.683364 

AUC ROC : 0.632526 

AUC PR : 0.602415 

Precision : 0.556338 

Recall : 0.03243 

F1 : 0.061288 

Total Learning Time : 44.437626123428345 

Total Inference Time : 1.5479419231414795 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.6002917289733887
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2325027574862731;  // std dev = 20.644, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1959429507245259;  // std dev = 20.607, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16116350550495942;  // std dev = 20.580, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1298999603307261;  // std dev = 20.560, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10305017916071658;  // std dev = 20.547, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08077846179185574;  // std dev = 20.538, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06276812473057027;  // std dev = 20.532, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04846592026704589;  // std dev = 20.528, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03725293645810656;  // std dev = 20.526, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3637583255767822
Parameter learned model CLL:-0.658612 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.644, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.607, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.58, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.56, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.547, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.538, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.532, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.528, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.526, 1, 747]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [nan, 0.2347992655532649]}
{'': [nan, 0.23397623997859443]}
{'': [nan, 0.2333492476995792]}
{'': [nan, 0.23290158602598354]}
{'': [nan, 0.23259678485762286]}
{'': [nan, 0.23239568426199084]}
{'': [nan, 0.23226537891559754]}
{'': [nan, 0.23218157391505495]}
{'': [nan, 0.23212763957761315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 86.82912063598633
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23997579570462133;  // std dev = 0.486, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.23731256435706355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3931222390520146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.39965022669472566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.4573990510486601;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20195635443585203;  // std dev = 0.485, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.19790260195457568;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3233539065239137;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.33018352692831887;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3619024120661199;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16574731203416915;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16093270187404643;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.25547492871073824;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.26175584944027985;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2765052371118384;  // std dev = 1.063, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1332346597299043;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1282364424331673;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19636081459964413;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20161048795416922;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2084227621080803;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1053845689322735;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10062036393508318;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14861888638435888;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15275352268615017;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.15712291650259408;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08236134324260945;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07807239852050062;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11171048321279485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11486509759402526;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.11918139925945118;  // std dev = 1.062, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3111302805130847;  // std dev = 2.616, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.18886971948691572;  // std dev = 0.192, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.040757147515490304;  // std dev = 0.453, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.6349018600115934;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.32540449258577714;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.42362150428668877;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.15370245288643464;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4037024528864347;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.059916648909441435;  // std dev = 19.102, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.07670544931872088;  // std dev = 4.317, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.03243599440156126;  // std dev = 0.416, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | else return 0.016646728115532035;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.48127294321705627;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25915641040948634;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3219507677723819;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04743565349141354;  // std dev = 0.482, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.052005470169947096;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06856625485536569;  // std dev = 2.541, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04958750719902132;  // std dev = 1.919, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.019730908059437842;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.014164251003062662;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5621675800270918;  // std dev = 0.335, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3931200860974021;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3016738028258742;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.035926240748833556;  // std dev = 0.481, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.03859185443073519;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05321746093294106;  // std dev = 2.542, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.03946838481832844;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.014473884687082944;  // std dev = 0.399, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012031809194977839;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.364510774612427
Refined model CLL: -0.643351


******************************************
Best model found
******************************************
Results 

CLL : -0.618328 

AUC ROC : 0.638937 

AUC PR : 0.530714 

Precision : 0.73297 

Recall : 0.237004 

F1 : 0.358189 

Total Learning Time : 86.82912063598633 

Total Inference Time : 1.5162723064422607 

Total revision time: 90.78016638755798
Best scored revision CLL: -0.643351


Results 

CLL : -0.618328 

AUC ROC : 0.638937 

AUC PR : 0.530714 

Precision : 0.73297 

Recall : 0.237004 

F1 : 0.358189 

Total Learning Time : 90.79665422439575 

Total Inference Time : 1.5162723064422607 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.175215721130371
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32792426719195494;  // std dev = 15.980, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27136953398357516;  // std dev = 15.950, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2170906827561686;  // std dev = 15.930, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1693395840472565;  // std dev = 15.918, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1299052785251963;  // std dev = 15.912, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09865670716675269;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07450337696554825;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05609627379071496;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04217525375549462;  // std dev = 15.911, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3552048206329346
Parameter learned model CLL:-0.677181 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.98, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.95, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.93, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.918, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.912, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.911, 500, 550]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [nan, 0.24321138735565884]}
{'': [nan, 0.2422939892769591]}
{'': [nan, 0.24167879417769575]}
{'': [nan, 0.24132429590877122]}
{'': [nan, 0.24114972712595403]}
{'': [nan, 0.2410816574359215]}
{'': [nan, 0.24106942723644986]}
{'': [nan, 0.24108293468286326]}
{'': [nan, 0.2411059615414346]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 45.64330720901489
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37950737305974774;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6153947826951112;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6237336544841059;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17626634551589418;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11418623766746618;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03719491633600885;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.6409625329500375;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.253223752633347;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04018726456675312;  // std dev = 1.975, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.273166772576367;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.02747933471527465;  // std dev = 1.977, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3395548501172605;  // std dev = 0.478, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.18127227390986342;  // std dev = 0.437, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0983529971467659;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06268203328346601;  // std dev = 0.416, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24296157689562276;  // std dev = 0.482, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.41935741951146294;  // std dev = 0.326, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.610080893646504;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18638025050407914;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.19271334586414893;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09665934309181919;  // std dev = 2.878, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.011132734633298873;  // std dev = 0.769, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11881167132224815;  // std dev = 2.938, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030704888691244964;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.4656244236952854;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14416909407633313;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.016926668266669758;  // std dev = 0.399, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19607655020061138;  // std dev = 0.481, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3085839000045914;  // std dev = 0.337, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.07882051425748679;  // std dev = 0.439, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.01631883993572216;  // std dev = 0.783, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10278021052053417;  // std dev = 2.937, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026487380383737543;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1412122687080386;  // std dev = 0.479, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.29762968244548277;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.0509155508325571;  // std dev = 0.374, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return 0.1292118226472214;  // std dev = 0.995, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06394799718705152;  // std dev = 2.874, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17792513595118595;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.04802442880607941;  // std dev = 3.024, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.09250117740391804;  // std dev = 4.066, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1939035649389609;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3163808459028098;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.06660434615173637;  // std dev = 2.586, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.176629195681384;  // std dev = 1.867, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1149347216590777;  // std dev = 0.480, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.19706296546225924;  // std dev = 0.338, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.10517919857047264;  // std dev = 0.426, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.2143901601630547;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06428654658606468;  // std dev = 2.849, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.031053197320354324;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2528306088788187;  // std dev = 0.135, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return -0.06806943524999602;  // std dev = 3.064, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2466861480143323;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.08639789284594891;  // std dev = 0.480, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15581382797700616;  // std dev = 0.338, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.45087652062059125;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18654850288769229;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.031089093629010047;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.024763942814855812;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.4960537024241725;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19571085281107073;  // std dev = 0.382, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.22389039940721842;  // std dev = 0.309, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, A) )
%   | | | then return 0.0679833007749285;  // std dev = 0.921, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07322288359827285;  // std dev = 2.992, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.06779036171346482;  // std dev = 0.479, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1274454839812824;  // std dev = 0.338, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.0021533818323333296;  // std dev = 0.379, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.0369461856863728;  // std dev = 0.426, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3807963272770034;  // std dev = 0.264, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.35493594279197077;  // std dev = 0.123, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.23233670527739364;  // std dev = 0.214, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return 0.056632724993100673;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.05108783760910419;  // std dev = 0.480, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.10403786911720929;  // std dev = 0.337, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.04896844501025555;  // std dev = 1.192, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.042469401522661224;  // std dev = 2.744, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.006630291839571501;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning 5.61950945854187
Refined model CLL: -0.606523


******************************************
Best model found
******************************************
Results 

CLL : -0.690328 

AUC ROC : 0.612531 

AUC PR : 0.505869 

Precision : 0.373561 

Recall : 0.920957 

F1 : 0.531524 

Total Learning Time : 45.64330720901489 

Total Inference Time : 1.1531963348388672 

Total revision time: 48.73857235908508
Best scored revision CLL: -0.606523


Results 

CLL : -0.690328 

AUC ROC : 0.612531 

AUC PR : 0.505869 

Precision : 0.373561 

Recall : 0.920957 

F1 : 0.531524 

Total Learning Time : 48.75506019592285 

Total Inference Time : 1.1531963348388672 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1918222904205322
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17756327304340275;  // std dev = 15.031, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15116220871192845;  // std dev = 14.991, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12636813427325802;  // std dev = 14.958, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10400083192944215;  // std dev = 14.932, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08449013032014598;  // std dev = 14.913, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06792697018261569;  // std dev = 14.899, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05416290377654376;  // std dev = 14.889, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04291178975796359;  // std dev = 14.881, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.033829820576650606;  // std dev = 14.875, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.4276444911956787
Parameter learned model CLL:-0.610705 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.031, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.991, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.958, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.932, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.913, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.899, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.889, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.881, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.875, 688, 368]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [nan, 0.2139626194892178]}
{'': [nan, 0.21280498841507858]}
{'': [nan, 0.21187415571543605]}
{'': [nan, 0.21115363970790493]}
{'': [nan, 0.21061082141622184]}
{'': [nan, 0.21020884253036054]}
{'': [nan, 0.20991383523182433]}
{'': [nan, 0.20969794288616067]}
{'': [nan, 0.20953970786680312]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 56.30339002609253
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20491833222623396;  // std dev = 0.472, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.468312075903186;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3476634056539757;  // std dev = 2.461, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.17357802733179237;  // std dev = 0.471, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3994142942144719;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3299142695022662;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29004579574641937;  // std dev = 2.420, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14395480624734672;  // std dev = 0.470, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3177761740995264;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32029310470486766;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.22008762664840031;  // std dev = 2.380, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11726647328023208;  // std dev = 0.469, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.2514962981132339;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25862402068731355;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1687064435777551;  // std dev = 2.360, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09415169470596157;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1986562922486588;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1924557241444608;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12865206237205362;  // std dev = 2.350, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07474249104647379;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16227550731919196;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14529320587277486;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09649824869556058;  // std dev = 2.346, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.1381365501522555;  // std dev = 0.751, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.12395848556485224;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05998695964434594;  // std dev = 0.468, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11257959687194244;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07243664909914704;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.0018814697676476043;  // std dev = 0.343, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.08346016306130004;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04599218582306557;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10340788932429128;  // std dev = 0.736, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09098622284444682;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.052851452450401334;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15261835164815443;  // std dev = 2.767, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14130564420223965;  // std dev = 0.107, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08338480849374699;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002286248498433968;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03578809985802873;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07125621706272459;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.07952595826977042;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03949683114136966;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1336733342093886;  // std dev = 2.764, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12504518057450692;  // std dev = 0.095, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07727666048056743;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002003590649664562;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 7.5541956424713135
Refined model CLL: -0.58624


******************************************
Best model found
******************************************
Results 

CLL : -0.637428 

AUC ROC : 0.617198 

AUC PR : 0.53139 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 56.30339002609253 

Total Inference Time : 1.2497241497039795 

Total revision time: 59.400545835494995
Best scored revision CLL: -0.58624


Results 

CLL : -0.637428 

AUC ROC : 0.617198 

AUC PR : 0.53139 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 59.41329264640808 

Total Inference Time : 1.2497241497039795 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3841915130615234
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3806526163240883;  // std dev = 17.682, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3117976179584803;  // std dev = 17.653, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2458258748544275;  // std dev = 17.635, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188885117935306;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1430676336704412;  // std dev = 17.624, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1076630363188029;  // std dev = 17.625, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08085635394709823;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.060735092747130674;  // std dev = 17.629, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.045671070800936533;  // std dev = 17.630, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3399314880371094
Parameter learned model CLL:-0.667757 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.682, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.653, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.635, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.624, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.625, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.629, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.63, 544, 771]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [nan, 0.23776244059689688]}
{'': [nan, 0.23697901057273396]}
{'': [nan, 0.23650340130609027]}
{'': [nan, 0.23627946557054255]}
{'': [nan, 0.23621216461675754]}
{'': [nan, 0.23622460202728468]}
{'': [nan, 0.23626991152993357]}
{'': [nan, 0.23632377119655829]}
{'': [nan, 0.2363750848623608]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 55.100929260253906
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3732165172968606;  // std dev = 0.489, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30614974574132836;  // std dev = 0.488, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24185825771482808;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.186202301805814;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4171786509312099;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.015794202583556877;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1505717440916841;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22711196591905072;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.41499329723884393;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17711196591905073;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.13685733315164741;  // std dev = 16.654, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.181833744377662;  // std dev = 2.689, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.17952693040278783;  // std dev = 0.382, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10639275860803908;  // std dev = 0.485, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1417508331559352;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11091498587257032;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22217296837348846;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.22257186931105152;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.07246418066023966;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06730634515113185;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2873427168349947;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return -0.014344368795374651;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.13829662801924014;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19786634471913622;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07836665416776215;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11286569633493271;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10348875505139642;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14584418071426203;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.05163480847720222;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.26654106401974714;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return -0.010807352853021951;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.16902271434688046;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22898423379726088;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05849717397250718;  // std dev = 0.486, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08678289265211575;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08159065019229611;  // std dev = 1.892, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.12871596035849925;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.025375564771277812;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.20310722661421324;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return -0.008141765474938084;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12703147304379542;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04397817709450073;  // std dev = 0.486, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0673115951719;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06488180009254194;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.14831565604978314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.01928680723564848;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.013461287124027622;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.434026718139648
Refined model CLL: -0.65219


******************************************
Best model found
******************************************
Results 

CLL : -0.740441 

AUC ROC : 0.598271 

AUC PR : 0.399631 

Precision : 0.354249 

Recall : 0.957703 

F1 : 0.517192 

Total Learning Time : 55.100929260253906 

Total Inference Time : 1.2402007579803467 

Total revision time: 58.470985412597656
Best scored revision CLL: -0.65219


Results 

CLL : -0.740441 

AUC ROC : 0.598271 

AUC PR : 0.399631 

Precision : 0.354249 

Recall : 0.957703 

F1 : 0.517192 

Total Learning Time : 58.48373222351074 

Total Inference Time : 1.2402007579803467 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.0872879028320312
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15827346810075268;  // std dev = 18.367, 1,606.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16664821905959676;  // std dev = 19.280, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14076181719854503;  // std dev = 19.269, 1,738.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11390161306161924;  // std dev = 19.305, 1,760.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10006398133554967;  // std dev = 19.198, 1,728.000 (wgt'ed) examples reached here.  /* #neg=1,147 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08608006199123237;  // std dev = 19.118, 1,705.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06321108974764302;  // std dev = 19.199, 1,738.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05250847968503485;  // std dev = 19.163, 1,728.000 (wgt'ed) examples reached here.  /* #neg=1,147 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04388533738524271;  // std dev = 19.126, 1,717.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.027991314165950017;  // std dev = 19.221, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
Inference time using transfer learning 1.2927875518798828
Parameter learned model CLL:-0.51702 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.367, 1, 482]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.28, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.269, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.305, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.198, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.118, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.199, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.163, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.126, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.221, 1, 581]}]
{'': [1.4354398702224246e-15, 0.21004979769201307]}
{'': [nan, 0.2147521323587394]}
{'': [nan, 0.213640165352612]}
{'': [nan, 0.2117460871237592]}
{'': [nan, 0.21329388337019586]}
{'': [nan, 0.2143630436979745]}
{'': [nan, 0.21208135107444379]}
{'': [nan, 0.21251270850683626]}
{'': [nan, 0.2130454726762516]}
{'': [nan, 0.21074236952461822]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 47.8457989692688
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17069273327750317;  // std dev = 0.464, 1,427.000 (wgt'ed) examples reached here.  /* #neg=981 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04419544672741935;  // std dev = 3.609, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.023286549778411467;  // std dev = 3.877, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18611177336952694;  // std dev = 0.470, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.02046073489574865;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.011897525248928613;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.026655506729533898;  // std dev = 3.633, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.0071426818496363904;  // std dev = 3.682, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15191061373976025;  // std dev = 0.467, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5773851166346318;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1498909843504646;  // std dev = 0.017, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.15069645838664478;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.002765232578527385;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.004340148217684902;  // std dev = 3.688, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
%   | | | else return -0.06867263927764565;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.1255020008415653;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.12679096893923472;  // std dev = 0.469, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return -9.361874357953492E-5;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.14303499804482728;  // std dev = 0.471, 1,438.000 (wgt'ed) examples reached here.  /* #neg=909 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5814580775472945;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14570203532082562;  // std dev = 0.008, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.031996016241030344;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.12473016362004836;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.024623387595346356;  // std dev = 3.507, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | | else return -0.11247717180150658;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2056317799518662;  // std dev = 1.032, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.048079994390325474;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.10985016818833061;  // std dev = 0.469, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( title(J, H), venue(J, B) )
%   | | | then return 0.35044213137431013;  // std dev = 2.489, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.1318265287335803;  // std dev = 0.147, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.038275926386939406;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.019544442415783278;  // std dev = 3.270, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.054717974891192435;  // std dev = 1.324, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.10223010814439912;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.11686493782208636;  // std dev = 0.477, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else return 0.031145593144698596;  // std dev = 0.695, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.0673651067135371;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.08895152663236326;  // std dev = 0.468, 1,431.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.4797433980228103;  // std dev = 2.091, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13648023403573425;  // std dev = 0.030, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.05367999891524267;  // std dev = 0.283, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.11201096755625382;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -7.010915550597885E-4;  // std dev = 0.313, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.14168109866601375;  // std dev = 1.016, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.07976187914668059;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | else return 0.07138563616183832;  // std dev = 0.468, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4978073562746935;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.12096402711211639;  // std dev = 0.162, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.09315331580251097;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.010956571238866494;  // std dev = 2.961, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.06912213208557962;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.09038963822427218;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.2248959027322102;  // std dev = 0.682, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.05359751816022094;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | | else return -0.005558991387254538;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.051914712938910895;  // std dev = 0.466, 1,489.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=529 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( title(K, I), venue(K, A) )
%   | | | then return 0.2654167718819587;  // std dev = 2.264, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | | | else return -0.11957444590563288;  // std dev = 0.029, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(L, I), venue(L, A) )
%   | | | then return -0.12189815715102295;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.03772106262259491;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return -0.012740723640622315;  // std dev = 0.270, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04760997233322517;  // std dev = 0.468, 1,504.000 (wgt'ed) examples reached here.  /* #neg=959 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.010963731567147361;  // std dev = 0.309, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.01198241884238997;  // std dev = 2.721, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.147333455332949;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.08958159198975547;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.003024019274557667;  // std dev = 2.854, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.032563513422846746;  // std dev = 0.467, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.32694906604371315;  // std dev = 2.018, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11043248353029159;  // std dev = 0.161, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.04309913740420206;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.008049567113663954;  // std dev = 2.727, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.059256510630423566;  // std dev = 1.323, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.08240102792324223;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 5.453964948654175
Refined model CLL: -0.494573


******************************************
Best model found
******************************************
Results 

CLL : -0.682898 

AUC ROC : 0.633751 

AUC PR : 0.619081 

Precision : 0.745455 

Recall : 0.016831 

F1 : 0.032919 

Total Learning Time : 47.8457989692688 

Total Inference Time : 1.5380210876464844 

Total revision time: 52.37553358078003
Best scored revision CLL: -0.494573


Results 

CLL : -0.682898 

AUC ROC : 0.633751 

AUC PR : 0.619081 

Precision : 0.745455 

Recall : 0.016831 

F1 : 0.032919 

Total Learning Time : 52.388280391693115 

Total Inference Time : 1.5380210876464844 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.59130859375
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23250275748627316;  // std dev = 20.644, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19594295072452564;  // std dev = 20.607, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1611635055049593;  // std dev = 20.580, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12989996033072584;  // std dev = 20.560, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10305017916071674;  // std dev = 20.547, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08077846179185612;  // std dev = 20.538, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06276812473057043;  // std dev = 20.532, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04846592026704621;  // std dev = 20.528, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0372529364581065;  // std dev = 20.526, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3712706565856934
Parameter learned model CLL:-0.658612 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.644, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.607, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.58, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.56, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.547, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.538, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.532, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.528, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.526, 1, 747]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [nan, 0.2347992655532647]}
{'': [nan, 0.23397623997859462]}
{'': [nan, 0.2333492476995796]}
{'': [nan, 0.23290158602598374]}
{'': [nan, 0.23259678485762286]}
{'': [nan, 0.2323956842619908]}
{'': [nan, 0.23226537891559754]}
{'': [nan, 0.23218157391505492]}
{'': [nan, 0.23212763957761315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 92.58758091926575
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23997579570462133;  // std dev = 0.486, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.23731256435706355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3931222390520146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.39965022669472566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.4573990510486601;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7746965962672843;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2101472345911304;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5656028947823332;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1997426078910175;  // std dev = 0.484, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2531011759650844;  // std dev = 3.517, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3378398095477881;  // std dev = 2.545, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1656076163165552;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.14997557229060002;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.2600630490701636;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2709502552580754;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2823587977927854;  // std dev = 1.064, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3309125064279366;  // std dev = 2.628, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.16908749357206307;  // std dev = 0.109, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.09107688064040842;  // std dev = 0.455, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13313781757629972;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.11885850582505986;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.20019176628293345;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20936765276326416;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.21292655788215503;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10527529174949773;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028184208815936432;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10532536477609926;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.09289089573158148;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.15163440241797665;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1588961459826637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16047089825788627;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08632343575542516;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024172550677182353;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0823315381968186;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07187057144512352;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11401058416842255;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11956438842436477;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12165301639728329;  // std dev = 1.061, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07001800777768506;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.020674036282824017;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06380271013271786;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07373730054730014;  // std dev = 2.959, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | | else return 0.05521439237046837;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08970472843540679;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09294719648573983;  // std dev = 1.064, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05629827345407859;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017639294111430465;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04913944570122068;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04000837361113581;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06710807426589706;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06729612210885184;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.071559017416356;  // std dev = 1.067, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04495465333118345;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015018889909239887;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03768054688270734;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.030462019036828786;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05040202438415877;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0505425587459806;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0554638345858662;  // std dev = 1.069, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03570239855261535;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012765108355844611;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.425942659378052
Refined model CLL: -0.646787


******************************************
Best model found
******************************************
Results 

CLL : -0.618297 

AUC ROC : 0.633613 

AUC PR : 0.546797 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 92.58758091926575 

Total Inference Time : 1.372737169265747 

Total revision time: 96.37553381919861
Best scored revision CLL: -0.646787


Results 

CLL : -0.618297 

AUC ROC : 0.633613 

AUC PR : 0.546797 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 96.3882806301117 

Total Inference Time : 1.372737169265747 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2610387802124023
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32792426719195505;  // std dev = 15.980, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2713695339835752;  // std dev = 15.950, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21709068275616866;  // std dev = 15.930, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16933958404725655;  // std dev = 15.918, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12990527852519607;  // std dev = 15.912, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0986567071667528;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0745033769655483;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05609627379071507;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04217525375549462;  // std dev = 15.911, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.4138727188110352
Parameter learned model CLL:-0.677181 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.98, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.95, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.93, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.918, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.912, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.911, 500, 550]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [nan, 0.24321138735565875]}
{'': [nan, 0.24229398927695886]}
{'': [nan, 0.24167879417769572]}
{'': [nan, 0.24132429590877114]}
{'': [nan, 0.24114972712595398]}
{'': [nan, 0.24108165743592147]}
{'': [nan, 0.24106942723644986]}
{'': [nan, 0.24108293468286315]}
{'': [nan, 0.24110596154143454]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 37.31173324584961
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37950737305974785;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6153947826951109;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6380477260568458;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16195227394315417;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16138373412926285;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12953319980207573;  // std dev = 2.910, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.030823778666540975;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15637051244554845;  // std dev = 2.977, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6409625329500377;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.253223752633347;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04018726456675307;  // std dev = 1.975, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.273166772576367;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.02747933471527465;  // std dev = 1.977, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3395548501172605;  // std dev = 0.478, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.2065251545099686;  // std dev = 0.489, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09333043000724611;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.062494333391898596;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24296157689562284;  // std dev = 0.482, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4193574195114629;  // std dev = 0.326, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5185171493712397;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14967936757180297;  // std dev = 8.93e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08302274015443839;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return -0.005945805783763381;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11830734073253743;  // std dev = 2.971, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.024190732955538516;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03775005498943681;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18676519812618125;  // std dev = 0.481, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.31671993188348996;  // std dev = 0.326, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.40314841177504634;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.131610059046702;  // std dev = 8.02e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06994761264459148;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1346045198908668;  // std dev = 1.367, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0776286652810036;  // std dev = 2.788, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.019312861619964625;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03422972451661701;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14216449194997355;  // std dev = 0.480, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2666439459804654;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.01815021559844522;  // std dev = 0.281, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return 0.05537429674419274;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07515359765570667;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.17458200605102125;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0921845108392874;  // std dev = 4.091, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.046916274830097256;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.19729599014217827;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3192561360631093;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.06462079044981539;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18369435182654756;  // std dev = 1.868, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11563595559801752;  // std dev = 0.481, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1853339327781079;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.514759420172501;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2735464656453372;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.038421431898497733;  // std dev = 0.429, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.030728395212870314;  // std dev = 0.406, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.48054061637882617;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21911561929831777;  // std dev = 0.397, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.24839909413810587;  // std dev = 0.310, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.07389371507661245;  // std dev = 0.990, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07730264816716674;  // std dev = 2.932, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.08876166967208907;  // std dev = 0.480, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1637437816085588;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.04794572462707194;  // std dev = 0.422, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.006137759108830819;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.2396667591398216;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then return 0.033276862895408287;  // std dev = 0.447, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.04430311814811011;  // std dev = 0.409, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4192742885609321;  // std dev = 1.309, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.39831761974247337;  // std dev = 0.640, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.28415367355915994;  // std dev = 0.851, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.08021305123372516;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.07653538927428728;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.00985293352541783;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.04844268514092975;  // std dev = 0.410, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.19197091671004232;  // std dev = 0.299, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.13503063969897997;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0627746780416138;  // std dev = 3.088, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.023789532164158564;  // std dev = 0.385, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return -0.20499564781293728;  // std dev = 1.141, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.07023622668683792;  // std dev = 2.998, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05776897787775949;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.008375899042286769;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning 4.606367111206055
Refined model CLL: -0.604148


******************************************
Best model found
******************************************
Results 

CLL : -0.691212 

AUC ROC : 0.62364 

AUC PR : 0.518558 

Precision : 0.374392 

Recall : 0.93636 

F1 : 0.534908 

Total Learning Time : 37.31173324584961 

Total Inference Time : 1.1996634006500244 

Total revision time: 40.497153759002686
Best scored revision CLL: -0.604148


Results 

CLL : -0.691212 

AUC ROC : 0.62364 

AUC PR : 0.518558 

Precision : 0.374392 

Recall : 0.93636 

F1 : 0.534908 

Total Learning Time : 40.50990056991577 

Total Inference Time : 1.1996634006500244 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.283829927444458
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1775632730434027;  // std dev = 15.031, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15116220871192843;  // std dev = 14.991, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12636813427325808;  // std dev = 14.958, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1040008319294421;  // std dev = 14.932, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08449013032014598;  // std dev = 14.913, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06792697018261566;  // std dev = 14.899, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05416290377654376;  // std dev = 14.889, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04291178975796365;  // std dev = 14.881, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03382982057665058;  // std dev = 14.875, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.5005028247833252
Parameter learned model CLL:-0.610705 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.031, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.991, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.958, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.932, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.913, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.899, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.889, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.881, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.875, 688, 368]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [nan, 0.21396261948921788]}
{'': [nan, 0.21280498841507856]}
{'': [nan, 0.21187415571543605]}
{'': [nan, 0.2111536397079049]}
{'': [nan, 0.21061082141622184]}
{'': [nan, 0.21020884253036054]}
{'': [nan, 0.20991383523182433]}
{'': [nan, 0.20969794288616064]}
{'': [nan, 0.20953970786680315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 58.565285205841064
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20491833222623382;  // std dev = 0.472, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.468312075903186;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3476634056539757;  // std dev = 2.461, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.17357802733179237;  // std dev = 0.471, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3748603184562167;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3994142942144719;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.28255478758742775;  // std dev = 2.414, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813019;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14395480624734672;  // std dev = 0.470, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.30289072617432067;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3177761740995264;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22321953446107848;  // std dev = 2.381, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338802;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531355;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11726647328023201;  // std dev = 0.469, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.23603843390781912;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25926780628123086;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17123197589790545;  // std dev = 2.362, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00347496757165363;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0941516947059615;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1986385982054756;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.17985356295935798;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13070349918265314;  // std dev = 2.351, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0908314846320462;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0030492092141663697;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07474249104647379;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1620555679077724;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14648483824857053;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09627474273005417;  // std dev = 2.345, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15216141264124733;  // std dev = 2.770, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1412332715590814;  // std dev = 0.094, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09844806809303071;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0026747502538140406;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05882426299061003;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.12388541750697414;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1115089613226852;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07258612515740885;  // std dev = 2.344, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08197139869445526;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0022067272427396378;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0023456102534392133;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045996229472704736;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09185244593428124;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08363959673130039;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.052587568599451164;  // std dev = 2.199, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07601778805321076;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019345047566460556;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0020564592146484523;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03579124908348959;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.09115665661401927;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06892870215542035;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.03860536382854861;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030572450011171984;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07085343428393155;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016955142092905688;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005668230509796399;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 8.134135723114014
Refined model CLL: -0.586034


******************************************
Best model found
******************************************
Results 

CLL : -0.637023 

AUC ROC : 0.617533 

AUC PR : 0.531447 

Precision : 0.890311 

Recall : 0.183843 

F1 : 0.304756 

Total Learning Time : 58.565285205841064 

Total Inference Time : 1.1837222576141357 

Total revision time: 61.75792336463928
Best scored revision CLL: -0.586034


Results 

CLL : -0.637023 

AUC ROC : 0.617533 

AUC PR : 0.531447 

Precision : 0.890311 

Recall : 0.183843 

F1 : 0.304756 

Total Learning Time : 61.7710542678833 

Total Inference Time : 1.1837222576141357 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.4674251079559326
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.38065261632408826;  // std dev = 17.682, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3117976179584803;  // std dev = 17.653, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2458258748544275;  // std dev = 17.635, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18888511793530596;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14306763367044115;  // std dev = 17.624, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10766303631880277;  // std dev = 17.625, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08085635394709818;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.060735092747130674;  // std dev = 17.629, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.045671070800939254;  // std dev = 17.630, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.406158447265625
Parameter learned model CLL:-0.667757 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.682, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.653, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.635, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.624, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.625, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.629, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.63, 544, 771]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [nan, 0.23776244059689697]}
{'': [nan, 0.23697901057273396]}
{'': [nan, 0.23650340130609018]}
{'': [nan, 0.23627946557054255]}
{'': [nan, 0.23621216461675754]}
{'': [nan, 0.2362246020272847]}
{'': [nan, 0.23626991152993418]}
{'': [nan, 0.2363237711965583]}
{'': [nan, 0.23637508486236056]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 56.34709930419922
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3732165172968606;  // std dev = 0.489, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3061497457413284;  // std dev = 0.488, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24185825771482808;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18620230180581407;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4171786509312099;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.01579420258355682;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1505717440916841;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22711196591905072;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13917963543396852;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1780591823696338;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.21003275240803632;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3795274962097198;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.011900208449844712;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.21146048035045825;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10427998012163191;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14069831902044802;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1370524169548924;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06590041896332113;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2849479242758629;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.008965295361207687;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.17078451307356812;  // std dev = 0.410, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.286075812645463;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.1481438917974136;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20952606418484748;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.07657690410235114;  // std dev = 16.656, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10698834558987985;  // std dev = 2.693, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.12894419117792916;  // std dev = 0.378, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.21697785882479503;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.006753797635027703;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.09826522591656507;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1572636465697308;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.058891426201290134;  // std dev = 0.486, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08275070938923622;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0838565328570866;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.11794392790783151;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.038797234895753895;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.20255957891356244;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.005087640209734567;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1258675395020909;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17365706942945613;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.044010850638351126;  // std dev = 0.486, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06427661472266928;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06655416079230271;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.11288003699567388;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return -0.001135275164012069;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 5.915887355804443
Refined model CLL: -0.651655


******************************************
Best model found
******************************************
Results 

CLL : -0.741669 

AUC ROC : 0.597561 

AUC PR : 0.399578 

Precision : 0.354074 

Recall : 0.957703 

F1 : 0.517005 

Total Learning Time : 56.34709930419922 

Total Inference Time : 1.2290527820587158 

Total revision time: 59.787522077560425
Best scored revision CLL: -0.651655


Results 

CLL : -0.741669 

AUC ROC : 0.597561 

AUC PR : 0.399578 

Precision : 0.354074 

Recall : 0.957703 

F1 : 0.517005 

Total Learning Time : 59.80065298080444 

Total Inference Time : 1.2290527820587158 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.9096758365631104
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15939893509950737;  // std dev = 18.352, 1,600.000 (wgt'ed) examples reached here.  /* #neg=1,118 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1653678959304565;  // std dev = 19.298, 1,737.000 (wgt'ed) examples reached here.  /* #neg=1,156 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1407996844704964;  // std dev = 19.270, 1,738.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11485406378924314;  // std dev = 19.292, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09748054598139007;  // std dev = 19.235, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07807179280633625;  // std dev = 19.242, 1,749.000 (wgt'ed) examples reached here.  /* #neg=1,168 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07085503800241051;  // std dev = 19.117, 1,708.000 (wgt'ed) examples reached here.  /* #neg=1,127 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05219487078449086;  // std dev = 19.175, 1,732.000 (wgt'ed) examples reached here.  /* #neg=1,151 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04966053216939923;  // std dev = 19.049, 1,690.000 (wgt'ed) examples reached here.  /* #neg=1,109 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02933848608171147;  // std dev = 19.191, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
Inference time using transfer learning 1.3134493827819824
Parameter learned model CLL:-0.517507 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.352, 1, 482]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.298, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.27, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.292, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.235, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.242, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.117, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.175, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.049, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.191, 1, 581]}]
{'': [1.4354398702224246e-15, 0.21049843749998337]}
{'': [nan, 0.21439231555378266]}
{'': [nan, 0.2136558390024479]}
{'': [nan, 0.21206839973281194]}
{'': [nan, 0.21251114230545878]}
{'': [nan, 0.21169549636312837]}
{'': [nan, 0.21395848110618704]}
{'': [nan, 0.21229061387466092]}
{'': [nan, 0.2147134265934276]}
{'': [nan, 0.21142155844948088]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 42.9415078163147
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17491029873587102;  // std dev = 0.465, 1,408.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05814893509951238;  // std dev = 3.795, 90.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=18 */
%   | | | else return 0.011995088945666216;  // std dev = 3.679, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18328841973076335;  // std dev = 0.469, 1,534.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6192048779934222;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14223667076887175;  // std dev = 0.020, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14331750143463112;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.023349165232035524;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0036528548958311272;  // std dev = 3.681, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.0731442547357764;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.14115584010311244;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15509550877841177;  // std dev = 0.468, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6123628219249978;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14915827080813512;  // std dev = 0.017, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14954193997976364;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.041403329211345194;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02229723427901475;  // std dev = 3.268, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.0326907598996694;  // std dev = 1.326, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.12684350137369566;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.19263686547077724;  // std dev = 0.485, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | else return -6.959033470709391E-4;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.13787106619322395;  // std dev = 0.470, 1,456.000 (wgt'ed) examples reached here.  /* #neg=927 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.03335888763700436;  // std dev = 0.289, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04845349804463008;  // std dev = 3.216, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.02042938345329578;  // std dev = 1.318, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.009944892710631937;  // std dev = 3.314, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.11256309019868942;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10586100669290004;  // std dev = 0.467, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.022844014071570173;  // std dev = 0.286, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.029629991458028217;  // std dev = 3.013, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.029475986993606623;  // std dev = 1.331, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.012903006771834733;  // std dev = 3.513, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.10260887786475721;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.29334916332250255;  // std dev = 0.692, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.08984491498424882;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.050836544682604345;  // std dev = 0.700, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.08430077568764767;  // std dev = 0.467, 1,492.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=529 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5462666391867146;  // std dev = 1.793, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13604523268249913;  // std dev = 0.038, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.0480793820562619;  // std dev = 0.269, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 9.552958277843111E-4;  // std dev = 0.330, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | else return -0.09353843398387988;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07188669539233203;  // std dev = 0.468, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47900667893666976;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13309883627697786;  // std dev = 0.025, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13424482742984337;  // std dev = 9.13e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.013646816207555037;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.013535499854117845;  // std dev = 2.892, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.04063241223948039;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.08760006879658691;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05207146987954546;  // std dev = 0.466, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.01882068407534778;  // std dev = 0.312, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return -0.10884142909783998;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.055726221790943935;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.014466014306654715;  // std dev = 2.878, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.04942703654853593;  // std dev = 1.321, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08046480809716774;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.03149545023331289;  // std dev = 0.468, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return 0.014981488739900647;  // std dev = 0.692, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04280001145056321;  // std dev = 0.466, 1,487.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.41045195266761914;  // std dev = 1.954, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11905582134390907;  // std dev = 0.028, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.06334075242525737;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.01893987258615575;  // std dev = 2.911, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.04945657973922734;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.07506637315439649;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.025338921789844326;  // std dev = 0.466, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return 0.01179932939406847;  // std dev = 0.692, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04456132034977096;  // std dev = 0.470, 1,440.000 (wgt'ed) examples reached here.  /* #neg=911 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.007211485346195996;  // std dev = 0.247, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.01822057456944644;  // std dev = 2.895, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.0436729060784155;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.021837163497185133;  // std dev = 2.872, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.06897027034790737;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 4.684657096862793
Refined model CLL: -0.496181


******************************************
Best model found
******************************************
Results 

CLL : -0.68515 

AUC ROC : 0.634406 

AUC PR : 0.651306 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 42.9415078163147 

Total Inference Time : 1.5009665489196777 

Total revision time: 47.27130460739136
Best scored revision CLL: -0.496181


Results 

CLL : -0.68515 

AUC ROC : 0.634406 

AUC PR : 0.651306 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 47.284435510635376 

Total Inference Time : 1.5009665489196777 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.5625338554382324
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23250275748627322;  // std dev = 20.644, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19594295072452603;  // std dev = 20.607, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16116350550495936;  // std dev = 20.580, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12989996033072596;  // std dev = 20.560, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10305017916071671;  // std dev = 20.547, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08077846179185606;  // std dev = 20.538, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06276812473057036;  // std dev = 20.532, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048465920267046145;  // std dev = 20.528, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03725293645810646;  // std dev = 20.526, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3036785125732422
Parameter learned model CLL:-0.658612 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.644, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.607, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.58, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.56, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.547, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.538, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.532, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.528, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.526, 1, 747]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [nan, 0.23479926555326472]}
{'': [nan, 0.23397623997859443]}
{'': [nan, 0.23334924769957946]}
{'': [nan, 0.23290158602598365]}
{'': [nan, 0.23259678485762283]}
{'': [nan, 0.23239568426199075]}
{'': [nan, 0.2322653789155975]}
{'': [nan, 0.23218157391505492]}
{'': [nan, 0.23212763957761315]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 87.60107326507568
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2399757957046214;  // std dev = 0.486, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.23731256435706355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3931222390520146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.39965022669472566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.4573990510486601;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20195635443585194;  // std dev = 0.485, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.19790260195457568;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3233539065239137;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.33018352692831887;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3619024120661199;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16574731203416931;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16093270187404643;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.25547492871073824;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.26175584944027985;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2765052371118384;  // std dev = 1.063, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13323465972990417;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1282364424331673;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19636081459964413;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20161048795416922;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2084227621080803;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.32342996356885667;  // std dev = 2.623, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.17657003643114286;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.07188755709780537;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10538456893227344;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10062036393508318;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14861888638435888;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15275352268615017;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.15712291650259408;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08623477877996191;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02380666001612689;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6535744819776741;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3052436939921037;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4424569493562195;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.17210370301343184;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4221037030134318;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.0784672399720882;  // std dev = 19.108, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.10132860419164838;  // std dev = 4.318, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.03563596021642974;  // std dev = 0.414, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | | else return 0.023449125540929747;  // std dev = 0.383, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06370157372296857;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.05467050748276091;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.086390468622651;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08955130599798457;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09527051900755865;  // std dev = 1.064, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.06301355050682561;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.019189817735845605;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0175826190961986;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04906042039274778;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04178658350609992;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06481645327671096;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06718131215679349;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07329810254921483;  // std dev = 1.067, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3019756136320432;  // std dev = 2.614, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.19802438636795672;  // std dev = 0.208, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.028242286198650303;  // std dev = 0.416, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.014971454518582852;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037619446346741685;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.031829889205799454;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04868938893130367;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05045675750937764;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05677886789500265;  // std dev = 1.069, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.043860558865565925;  // std dev = 0.432, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.012725598822113103;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.009783965551364637;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.448284149169922
Refined model CLL: -0.644544


******************************************
Best model found
******************************************
Results 

CLL : -0.61536 

AUC ROC : 0.634029 

AUC PR : 0.545602 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 87.60107326507568 

Total Inference Time : 1.376330852508545 

Total revision time: 91.31795454025269
Best scored revision CLL: -0.644544


Results 

CLL : -0.61536 

AUC ROC : 0.634029 

AUC PR : 0.545602 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 91.3310854434967 

Total Inference Time : 1.376330852508545 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.302067518234253
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32792426719195505;  // std dev = 15.980, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2713695339835751;  // std dev = 15.950, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21709068275616855;  // std dev = 15.930, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1693395840472565;  // std dev = 15.918, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1299052785251963;  // std dev = 15.912, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0986567071667528;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07450337696554825;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05609627379071507;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04217525375549451;  // std dev = 15.911, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3856489658355713
Parameter learned model CLL:-0.677181 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.98, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.95, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.93, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.918, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.912, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.911, 500, 550]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [nan, 0.24321138735565875]}
{'': [nan, 0.24229398927695908]}
{'': [nan, 0.24167879417769578]}
{'': [nan, 0.24132429590877116]}
{'': [nan, 0.24114972712595392]}
{'': [nan, 0.24108165743592147]}
{'': [nan, 0.24106942723644992]}
{'': [nan, 0.2410829346828632]}
{'': [nan, 0.24110596154143457]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 55.282437801361084
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37950737305974774;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6153947826951108;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6237336544841059;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17626634551589418;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11418623766746618;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.03719491633600885;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3109376906193612;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4827246427766596;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5146583598562537;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1521138120365269;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0983529971467659;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.1964360111709178;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10542919399565492;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.031890215671894456;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04672372980928399;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.605469748274692;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18840908610625828;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.24565458309098714;  // std dev = 0.485, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.3929388630143099;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5929244272130194;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20323702695600812;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.1851237720861967;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08902475495183111;  // std dev = 2.862, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.053413764079922196;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.45765154170101907;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14549815915203138;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.07609547637718587;  // std dev = 0.416, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1995101349537953;  // std dev = 0.483, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.27367379339150677;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.017895993794628296;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.09605065999390228;  // std dev = 0.923, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0944413078025209;  // std dev = 2.885, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04333105066308588;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14222284777231212;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2649814685376957;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.216879920853629;  // std dev = 0.722, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18705852623956876;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.07883255375909401;  // std dev = 0.446, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.022036527091296398;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08941284811327639;  // std dev = 2.926, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.014174863500843547;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.027326705418778637;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.3180929724143643;  // std dev = 0.110, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05106404646320246;  // std dev = 2.584, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.10742216615684133;  // std dev = 0.483, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.21808836265064463;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.05655582422679624;  // std dev = 0.428, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.06974641603403046;  // std dev = 4.098, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18600301576861172;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04360048998861256;  // std dev = 3.022, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20619879618016623;  // std dev = 0.100, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.08039740362325365;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.17436184399153096;  // std dev = 0.286, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4385946097123278;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19561282852035453;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18656630707045252;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04720581318211243;  // std dev = 2.815, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.005105349009955549;  // std dev = 0.377, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.07759423703740213;  // std dev = 4.047, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.18935413542843868;  // std dev = 0.142, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.27652380403626103;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.03126079896853248;  // std dev = 0.470, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | else return -0.06105366157006304;  // std dev = 0.434, 71.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=20 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then if ( author(I, G), title(I, H) )
%   | | | then return 0.2457894121238989;  // std dev = 1.875, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return -0.4492980776688196;  // std dev = 0.338, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.3831187077777135;  // std dev = 1.368, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.07246178940330031;  // std dev = 2.984, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.08371584232736921;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.009000423238325242;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.22586625386670808;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.42552437303875223;  // std dev = 1.310, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.4076758607531665;  // std dev = 0.631, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.05345705371685244;  // std dev = 0.427, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3667642774772796;  // std dev = 1.256, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3885406958472226;  // std dev = 0.535, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.05516189694287778;  // std dev = 0.432, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.0631497353883447;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.007647831970341636;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning 16.561250686645508
Refined model CLL: -0.603678


******************************************
Best model found
******************************************
Results 

CLL : -0.684674 

AUC ROC : 0.63183 

AUC PR : 0.525278 

Precision : 0.379954 

Recall : 0.940413 

F1 : 0.541234 

Total Learning Time : 55.282437801361084 

Total Inference Time : 1.3179423809051514 

Total revision time: 58.64038681983948
Best scored revision CLL: -0.603678


Results 

CLL : -0.684674 

AUC ROC : 0.63183 

AUC PR : 0.525278 

Precision : 0.379954 

Recall : 0.940413 

F1 : 0.541234 

Total Learning Time : 58.653517723083496 

Total Inference Time : 1.3179423809051514 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1846306324005127
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17756327304340275;  // std dev = 15.031, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15116220871192843;  // std dev = 14.991, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1263681342732579;  // std dev = 14.958, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10400083192944226;  // std dev = 14.932, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08449013032014598;  // std dev = 14.913, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06792697018261569;  // std dev = 14.899, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054162903776543786;  // std dev = 14.889, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04291178975796349;  // std dev = 14.881, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03382982057665071;  // std dev = 14.875, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.3520240783691406
Parameter learned model CLL:-0.610705 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.031, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.991, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.958, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.932, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.913, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.899, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.889, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.881, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.875, 688, 368]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [nan, 0.21396261948921774]}
{'': [nan, 0.2128049884150786]}
{'': [nan, 0.211874155715436]}
{'': [nan, 0.21115363970790488]}
{'': [nan, 0.21061082141622187]}
{'': [nan, 0.2102088425303605]}
{'': [nan, 0.2099138352318243]}
{'': [nan, 0.20969794288616062]}
{'': [nan, 0.2095397078668032]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 57.38561010360718
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2049183322262339;  // std dev = 0.472, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.468312075903186;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3476634056539757;  // std dev = 2.461, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.17357802733179245;  // std dev = 0.471, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3748603184562167;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3994142942144719;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.28255478758742775;  // std dev = 2.414, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14395480624734666;  // std dev = 0.470, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.30289072617432067;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3177761740995264;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22321953446107853;  // std dev = 2.381, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11726647328023208;  // std dev = 0.469, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.23603843390781912;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25926780628123086;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1712319758979054;  // std dev = 2.362, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09415169470596138;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1986385982054756;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.17863717513210123;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13090623048719593;  // std dev = 2.351, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07474249104647375;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16202258746837775;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.147671273208852;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09608074063825282;  // std dev = 2.345, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05882426299060999;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.12391986223234329;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11089696928772433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07268458369047102;  // std dev = 2.344, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.15117552920942384;  // std dev = 0.749, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09491839354601295;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.0471601713775579;  // std dev = 0.468, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09244529043824339;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05343168864994398;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.019981988600391565;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.007985895162756286;  // std dev = 0.329, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.004271742742892122;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035787183167566426;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08827637931898928;  // std dev = 0.735, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06937178858153961;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.03890382981280873;  // std dev = 2.344, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15260108240265016;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14167506595281865;  // std dev = 0.107, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07900433548272712;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002671823354135452;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.567426681518555
Refined model CLL: -0.587445


******************************************
Best model found
******************************************
Results 

CLL : -0.638965 

AUC ROC : 0.617165 

AUC PR : 0.531382 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 57.38561010360718 

Total Inference Time : 1.22977876663208 

Total revision time: 60.48117518424988
Best scored revision CLL: -0.587445


Results 

CLL : -0.638965 

AUC ROC : 0.617165 

AUC PR : 0.531382 

Precision : 0.88764 

Recall : 0.178935 

F1 : 0.297832 

Total Learning Time : 60.493775367736816 

Total Inference Time : 1.22977876663208 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3344552516937256
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.38065261632408814;  // std dev = 17.682, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3117976179584803;  // std dev = 17.653, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.24582587485442742;  // std dev = 17.635, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18888511793530588;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14306763367044084;  // std dev = 17.624, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10766303631880272;  // std dev = 17.625, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08085635394709831;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06073509274713085;  // std dev = 17.629, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04567107080093913;  // std dev = 17.630, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.324355125427246
Parameter learned model CLL:-0.667757 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.682, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.653, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.635, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.624, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.625, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.629, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.63, 544, 771]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [nan, 0.237762440596897]}
{'': [nan, 0.23697901057273396]}
{'': [nan, 0.23650340130609018]}
{'': [nan, 0.23627946557054255]}
{'': [nan, 0.23621216461675756]}
{'': [nan, 0.23622460202728468]}
{'': [nan, 0.23626991152993423]}
{'': [nan, 0.23632377119655823]}
{'': [nan, 0.23637508486236056]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 52.58530378341675
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3732165172968606;  // std dev = 0.489, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30614974574132836;  // std dev = 0.488, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24185825771482808;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4620838467022307;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0614340287362788;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13228839574599702;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.4598168674118978;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13228839574599702;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.1818137984713355;  // std dev = 16.657, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23985506378478072;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.24491996752212664;  // std dev = 0.330, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14118951577656913;  // std dev = 0.485, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.18581002370323105;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14993924880770418;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2708414839194305;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.269842396185919;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08358036206241817;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31363944429976176;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.011745581853933762;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.12450523654638097;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18439253238911135;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10483317991639114;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1421633936657066;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1362084040506809;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.1793459106391915;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06445689449052436;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.28604461501142;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.15190190192214625;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.008848771514290255;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.209480807695049;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07837270400715377;  // std dev = 0.486, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1084131342411631;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1060743080730952;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14810606629577835;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04710137179015755;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06017202041546299;  // std dev = 0.484, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0835064145539234;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.054475477682832354;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18190682537278147;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.169002018268904;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.035942667006854036;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01900715608573739;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2038907593269988;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return -0.008179352123060563;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.12772862705483456;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17392360474612162;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.20204836001352375;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1288965554166271;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.04256544337016934;  // std dev = 16.659, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.06662309832668395;  // std dev = 2.692, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.08222487695931692;  // std dev = 0.379, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
Inference time using transfer learning 6.046144723892212
Refined model CLL: -0.65181


******************************************
Best model found
******************************************
Results 

CLL : -0.739757 

AUC ROC : 0.597884 

AUC PR : 0.399039 

Precision : 0.354191 

Recall : 0.957703 

F1 : 0.517129 

Total Learning Time : 52.58530378341675 

Total Inference Time : 1.2381832599639893 

Total revision time: 56.00875401496887
Best scored revision CLL: -0.65181


Results 

CLL : -0.739757 

AUC ROC : 0.597884 

AUC PR : 0.399039 

Precision : 0.354191 

Recall : 0.957703 

F1 : 0.517129 

Total Learning Time : 56.02135419845581 

Total Inference Time : 1.2381832599639893 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.9487888813018799
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15027014722071946;  // std dev = 18.472, 1,650.000 (wgt'ed) examples reached here.  /* #neg=1,168 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16317434716792073;  // std dev = 19.344, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14056847845017514;  // std dev = 19.294, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12078059426333371;  // std dev = 19.228, 1,733.000 (wgt'ed) examples reached here.  /* #neg=1,152 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09595503985149732;  // std dev = 19.265, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08228062906714718;  // std dev = 19.193, 1,733.000 (wgt'ed) examples reached here.  /* #neg=1,152 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06539918376622814;  // std dev = 19.198, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05207091851003191;  // std dev = 19.195, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04019043259076838;  // std dev = 19.208, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03485180171728652;  // std dev = 19.159, 1,732.000 (wgt'ed) examples reached here.  /* #neg=1,151 #pos=581 */
Inference time using transfer learning 1.2779769897460938
Parameter learned model CLL:-0.516107 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.472, 1, 482]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.344, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.294, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.228, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.265, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.193, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.198, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.195, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.208, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.159, 1, 581]}]
{'': [1.4354398702224246e-15, 0.20678640955002892]}
{'': [nan, 0.21320610214910057]}
{'': [nan, 0.2129652198385248]}
{'': [nan, 0.21333451628922856]}
{'': [nan, 0.21160702950728297]}
{'': [nan, 0.21256652295724918]}
{'': [nan, 0.21194293852945606]}
{'': [nan, 0.2116326356995586]}
{'': [nan, 0.2110667659726911]}
{'': [nan, 0.21194208596496866]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 36.989279985427856
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17047386507149617;  // std dev = 0.463, 1,428.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04862512557570285;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.04661296966239256;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.02178529873587602;  // std dev = 3.880, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18182960100492312;  // std dev = 0.469, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.018959432299449165;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03729445948418517;  // std dev = 3.384, 77.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=14 */
%   | | | else return -0.03341261122288577;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.018966908812772066;  // std dev = 3.875, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.16067770937493875;  // std dev = 0.472, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return 0.02757235481843545;  // std dev = 0.755, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.15502109025423316;  // std dev = 0.468, 1,496.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.025076630656897345;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.05289576486735864;  // std dev = 3.339, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | | | else return -0.03325577527786795;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.020015660205829938;  // std dev = 3.869, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.1160040387770901;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1187140964782194;  // std dev = 0.416, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.07253105576524842;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.13168662252465468;  // std dev = 0.468, 1,486.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6061810346986347;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1533662643465757;  // std dev = 0.064, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.06540202976431761;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.009102124737973316;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.14604086364238603;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.015911305437850434;  // std dev = 3.649, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.1293647053716151;  // std dev = 0.476, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | else return 0.07364558047047391;  // std dev = 0.704, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.06654659009283086;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.10304086050401047;  // std dev = 0.466, 1,470.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5431791228580831;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1516754722470224;  // std dev = 0.047, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.0495967713026578;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.006388328208220251;  // std dev = 0.328, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | else return -0.10306544567328992;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09380300879443462;  // std dev = 0.468, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.36782388265641863;  // std dev = 2.422, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.133239125185447;  // std dev = 0.038, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13879947396169323;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.0612005260383068;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.009987103399881282;  // std dev = 3.256, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.03302179242699528;  // std dev = 1.330, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.09502861304148198;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07573856433337288;  // std dev = 0.468, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4731410585000491;  // std dev = 2.093, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13665804348234498;  // std dev = 0.028, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1136812447878269;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.044163782390025545;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.014089884716017565;  // std dev = 3.007, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.052286766973327105;  // std dev = 1.339, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.08604311141726766;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06016428962227847;  // std dev = 0.468, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.030033709454661328;  // std dev = 0.259, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.017848360201016187;  // std dev = 0.286, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.012609247030893446;  // std dev = 3.095, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.005882995489398577;  // std dev = 2.950, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041004844219880036;  // std dev = 0.466, 1,535.000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.038534927164307856;  // std dev = 0.252, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.013274808858111598;  // std dev = 2.864, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.025505661918286175;  // std dev = 1.317, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return -0.00487011233633985;  // std dev = 3.134, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.07975778108792043;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03366977500515716;  // std dev = 0.466, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.02659397093108442;  // std dev = 0.267, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.005207799023605839;  // std dev = 2.736, 77.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=14 */
%   | | | else return 0.026073109174232195;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return -0.005362438521248719;  // std dev = 3.336, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.07409659106352838;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 4.070817470550537
Refined model CLL: -0.497938


******************************************
Best model found
******************************************
Results 

CLL : -0.689932 

AUC ROC : 0.624501 

AUC PR : 0.642524 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 36.989279985427856 

Total Inference Time : 1.4168295860290527 

Total revision time: 41.27495527267456
Best scored revision CLL: -0.497938


Results 

CLL : -0.689932 

AUC ROC : 0.624501 

AUC PR : 0.642524 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 41.2875554561615 

Total Inference Time : 1.4168295860290527 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.5448801517486572
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23250275748627322;  // std dev = 20.644, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19594295072452608;  // std dev = 20.607, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16116350550495936;  // std dev = 20.580, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12989996033072576;  // std dev = 20.560, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10305017916071671;  // std dev = 20.547, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08077846179185594;  // std dev = 20.538, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06276812473057036;  // std dev = 20.532, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04846592026704605;  // std dev = 20.528, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0372529364581065;  // std dev = 20.526, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3600749969482422
Parameter learned model CLL:-0.658612 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.644, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.607, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.58, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.56, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.547, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.538, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.532, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.528, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.526, 1, 747]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [nan, 0.23479926555326477]}
{'': [nan, 0.23397623997859443]}
{'': [nan, 0.23334924769957935]}
{'': [nan, 0.23290158602598365]}
{'': [nan, 0.23259678485762286]}
{'': [nan, 0.23239568426199084]}
{'': [nan, 0.23226537891559754]}
{'': [nan, 0.23218157391505492]}
{'': [nan, 0.23212763957761318]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 88.00414776802063
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23997579570462146;  // std dev = 0.486, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.23731256435706355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3931222390520146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.39965022669472566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.4573990510486601;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20195635443585216;  // std dev = 0.485, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.19790260195457568;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3233539065239137;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.33018352692831887;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3619024120661199;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1657473120341693;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16093270187404643;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.25547492871073824;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.26175584944027985;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2765052371118384;  // std dev = 1.063, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1332346597299042;  // std dev = 0.484, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1282364424331673;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19636081459964413;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20161048795416922;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.2084227621080803;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10538456893227348;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10062036393508318;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14861888638435888;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15275352268615017;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.15712291650259408;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08236134324260952;  // std dev = 0.483, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07807239852050062;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11171048321279485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11486509759402526;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.11918139925945118;  // std dev = 1.062, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6349018600115934;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3462975471135654;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.42362150428668865;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06160943510061621;  // std dev = 0.483, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07052517231277784;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08736109932896763;  // std dev = 2.540, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.049062517535487675;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04354062036684305;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06435192060694188;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06618376655208884;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07103656232838594;  // std dev = 1.067, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03762065889832954;  // std dev = 0.482, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.033180758411204596;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04834221198920121;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.049711254103621115;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05506853445910493;  // std dev = 1.069, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.257835388183594
Refined model CLL: -0.648747


******************************************
Best model found
******************************************
Results 

CLL : -0.621886 

AUC ROC : 0.631582 

AUC PR : 0.54544 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 88.00414776802063 

Total Inference Time : 1.4506545066833496 

Total revision time: 91.82711291313171
Best scored revision CLL: -0.648747


Results 

CLL : -0.621886 

AUC ROC : 0.631582 

AUC PR : 0.54544 

Precision : 0.910156 

Recall : 0.205286 

F1 : 0.335011 

Total Learning Time : 91.83971309661865 

Total Inference Time : 1.4506545066833496 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2045097351074219
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32792426719195517;  // std dev = 15.980, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27136953398357516;  // std dev = 15.950, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2170906827561686;  // std dev = 15.930, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16933958404725646;  // std dev = 15.918, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12990527852519612;  // std dev = 15.912, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09865670716675264;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0745033769655483;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05609627379071507;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04217525375549451;  // std dev = 15.911, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3470633029937744
Parameter learned model CLL:-0.677181 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.98, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.95, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.93, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.918, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.912, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.911, 500, 550]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [nan, 0.2432113873556587]}
{'': [nan, 0.24229398927695905]}
{'': [nan, 0.2416787941776957]}
{'': [nan, 0.24132429590877114]}
{'': [nan, 0.24114972712595398]}
{'': [nan, 0.2410816574359215]}
{'': [nan, 0.2410694272364498]}
{'': [nan, 0.2410829346828632]}
{'': [nan, 0.24110596154143454]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 44.13713717460632
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3795073730597478;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.615394782695111;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6237336544841059;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17626634551589418;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.1585410350598063;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1341418917694617;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03719491633600885;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31093769061936133;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.5980590635843117;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.40046289436163596;  // std dev = 1.249, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.49822564569358246;  // std dev = 1.308, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.1135049811896822;  // std dev = 0.444, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.15626779724797976;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06636216617102066;  // std dev = 3.058, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.12252188004420057;  // std dev = 4.109, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1680271125083344;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5390614541559055;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.18840908610625828;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.11293680925708788;  // std dev = 1.929, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.25633360315082265;  // std dev = 0.483, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3603634615283073;  // std dev = 0.337, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.60315591852847;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1915026110916049;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07678780125545749;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05193182751972651;  // std dev = 0.411, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.18813643419288598;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.32728562184523313;  // std dev = 0.280, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.49071698419026105;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16360991706527955;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0644599110030629;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.015004617096503147;  // std dev = 0.777, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1092533740612032;  // std dev = 2.930, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.014700007735263339;  // std dev = 2.970, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03335619497343176;  // std dev = 2.955, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35767204838277783;  // std dev = 0.088, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.08719163819390163;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.22534317251708524;  // std dev = 1.882, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15397295725157847;  // std dev = 0.481, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2298288816868206;  // std dev = 0.335, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.13945422310658065;  // std dev = 0.431, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.17370524824149658;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07004766379647709;  // std dev = 2.860, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.036090606484913315;  // std dev = 0.407, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10709402617509274;  // std dev = 0.480, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2117034583316842;  // std dev = 0.282, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.36719562828846936;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14778468969152742;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.046793298346611195;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.15786281479732833;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08264881838190132;  // std dev = 4.064, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03460594356488844;  // std dev = 3.014, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.18671012937815326;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.4827732080816202;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21857065981442733;  // std dev = 0.380, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return -0.022408494411783542;  // std dev = 0.423, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.44793323137698576;  // std dev = 1.279, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.41440630881710044;  // std dev = 0.467, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.3187535295049785;  // std dev = 0.926, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07999974636569263;  // std dev = 2.875, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.10119833486241163;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.010292458443058553;  // std dev = 0.391, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.0658294597965939;  // std dev = 0.374, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.20315618643053746;  // std dev = 0.271, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return 0.05764853072701346;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0634715237946653;  // std dev = 2.929, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.06576678108859217;  // std dev = 0.479, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1311352393067076;  // std dev = 0.335, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.14324154729085598;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06969019998789465;  // std dev = 4.042, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.007940151576372057;  // std dev = 0.376, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.04950332684654153;  // std dev = 0.396, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.2533925844696014;  // std dev = 0.315, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.050927016727871234;  // std dev = 0.889, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07690160566958809;  // std dev = 2.949, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.04338497065191811;  // std dev = 0.379, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.059824371099057125;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.04620974364289518;  // std dev = 4.048, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.14150283635511304;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.012832885524707738;  // std dev = 0.377, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
Inference time using transfer learning 5.279399633407593
Refined model CLL: -0.603839


******************************************
Best model found
******************************************
Results 

CLL : -0.690782 

AUC ROC : 0.621119 

AUC PR : 0.514517 

Precision : 0.374433 

Recall : 0.936765 

F1 : 0.535016 

Total Learning Time : 44.13713717460632 

Total Inference Time : 1.2484230995178223 

Total revision time: 47.347461462020874
Best scored revision CLL: -0.603839


Results 

CLL : -0.690782 

AUC ROC : 0.621119 

AUC PR : 0.514517 

Precision : 0.374433 

Recall : 0.936765 

F1 : 0.535016 

Total Learning Time : 47.36006164550781 

Total Inference Time : 1.2484230995178223 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2738866806030273
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17756327304340275;  // std dev = 15.031, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15116220871192843;  // std dev = 14.991, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12636813427325802;  // std dev = 14.958, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10400083192944215;  // std dev = 14.932, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08449013032014598;  // std dev = 14.913, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06792697018261569;  // std dev = 14.899, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05416290377654376;  // std dev = 14.889, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.042911789757963566;  // std dev = 14.881, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03382982057665063;  // std dev = 14.875, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.4437391757965088
Parameter learned model CLL:-0.610705 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.031, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.991, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.958, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.932, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.913, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.899, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.889, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.881, 688, 368]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [14.875, 688, 368]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [nan, 0.2139626194892178]}
{'': [nan, 0.21280498841507858]}
{'': [nan, 0.21187415571543597]}
{'': [nan, 0.2111536397079049]}
{'': [nan, 0.21061082141622184]}
{'': [nan, 0.21020884253036057]}
{'': [nan, 0.20991383523182433]}
{'': [nan, 0.20969794288616067]}
{'': [nan, 0.20953970786680312]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 54.91244149208069
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2049183322262339;  // std dev = 0.472, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.468312075903186;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.35598627634935104;  // std dev = 2.468, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13338343804520728;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0055561304250918405;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.17357802733179237;  // std dev = 0.471, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3896317105821268;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3984948220050251;  // std dev = 0.756, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2797694089985006;  // std dev = 2.413, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.14982636725050505;  // std dev = 2.783, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.141458970622752;  // std dev = 0.043, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12833389879411766;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004881411392881223;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14395480624734666;  // std dev = 0.470, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.31769875681482873;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3177169918294954;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22065986053045356;  // std dev = 2.380, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11501619960074781;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0039217398337944185;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004286407673482556;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11726647328023204;  // std dev = 0.469, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24560981863661022;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21031288685556984;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17694912446318128;  // std dev = 2.365, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10382728052359012;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.00344241891280717;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0037622142316740643;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09415169470596141;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.20788422454726;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2125597307974195;  // std dev = 0.736, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12468183193038845;  // std dev = 2.350, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.02931123354208879;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0022404351531598666;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10113865216003814;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0068810952286985526;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07474249104647375;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.15738183994464053;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.16245642329895355;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09452256937241327;  // std dev = 2.345, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1332026030260651;  // std dev = 2.769, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12526931125971907;  // std dev = 0.075, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09752774467477664;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003716842173176159;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05882426299060999;  // std dev = 0.468, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11828215538832057;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.12409975227865837;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07151611343279511;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03628217014967147;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.08902292637090219;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032609028888543547;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.005783094861102317;  // std dev = 2.790, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0459962294727047;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1032299029004282;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0887216839112717;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05327474034415014;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.031463701973624;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.0820804707539086;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002859896551849497;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0050776141733286555;  // std dev = 2.790, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03579124908348962;  // std dev = 0.467, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07360442919479637;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.07938932455450454;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03914294458642981;  // std dev = 2.343, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07611891420050028;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.001060015088623984;  // std dev = 0.339, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0025074360883730173;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 7.592069149017334
Refined model CLL: -0.586376


******************************************
Best model found
******************************************
Results 

CLL : -0.636636 

AUC ROC : 0.617081 

AUC PR : 0.531017 

Precision : 0.890311 

Recall : 0.183843 

F1 : 0.304756 

Total Learning Time : 54.91244149208069 

Total Inference Time : 1.1735219955444336 

Total revision time: 58.08287024497986
Best scored revision CLL: -0.586376


Results 

CLL : -0.636636 

AUC ROC : 0.617081 

AUC PR : 0.531017 

Precision : 0.890311 

Recall : 0.183843 

F1 : 0.304756 

Total Learning Time : 58.09537053108215 

Total Inference Time : 1.1735219955444336 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3354110717773438
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3806526163240884;  // std dev = 17.682, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3117976179584806;  // std dev = 17.653, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.24582587485442764;  // std dev = 17.635, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18888511793530607;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14306763367044142;  // std dev = 17.624, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1076630363188029;  // std dev = 17.625, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08085635394709809;  // std dev = 17.627, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06073509274713054;  // std dev = 17.629, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04567107080093662;  // std dev = 17.630, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3928465843200684
Parameter learned model CLL:-0.667757 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.682, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.653, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.635, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.624, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.625, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.627, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.629, 544, 771]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.63, 544, 771]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [nan, 0.2377624405968968]}
{'': [nan, 0.23697901057273377]}
{'': [nan, 0.2365034013060902]}
{'': [nan, 0.23627946557054255]}
{'': [nan, 0.23621216461675748]}
{'': [nan, 0.23622460202728468]}
{'': [nan, 0.23626991152993354]}
{'': [nan, 0.23632377119655829]}
{'': [nan, 0.2363750848623608]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 58.09921169281006
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3732165172968606;  // std dev = 0.489, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30614974574132836;  // std dev = 0.488, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24185825771482808;  // std dev = 0.487, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4620838467022307;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0614340287362788;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.10969769051397436;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.182288395745997;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.1841330955870238;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2611880142597034;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14125260689624702;  // std dev = 0.486, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1843926491048414;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15116160134657963;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2718201561947906;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.26664917052066356;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08553060689030563;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37952711884432716;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.011730023611338292;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.21146141606897026;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10428180339460906;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14286117219398245;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13556054134273204;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.21783300094806574;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06604177632970187;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07995610865435157;  // std dev = 0.485, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10892718826292476;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0781131821860187;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1989630261705525;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.18299706781972397;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0506751249917834;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06006822073094886;  // std dev = 0.485, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0883321929977823;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0550469837140177;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1691376688947802;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.1572054559621971;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.038714041298688016;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.25170723148382546;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return -0.02568843441533658;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.18052137436787213;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24376449084453364;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04353745753987576;  // std dev = 0.487, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07073865001912986;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06433397556200876;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.11119136596460164;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.02948551342468451;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.880422592163086
Refined model CLL: -0.65349


******************************************
Best model found
******************************************
Results 

CLL : -0.739646 

AUC ROC : 0.601075 

AUC PR : 0.406742 

Precision : 0.35461 

Recall : 0.957257 

F1 : 0.517511 

Total Learning Time : 58.09921169281006 

Total Inference Time : 1.2616686820983887 

Total revision time: 61.470906496047974
Best scored revision CLL: -0.65349


Results 

CLL : -0.739646 

AUC ROC : 0.601075 

AUC PR : 0.406742 

Precision : 0.35461 

Recall : 0.957257 

F1 : 0.517511 

Total Learning Time : 61.48340678215027 

Total Inference Time : 1.2616686820983887 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.9899141788482666
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.14816096879385152;  // std dev = 18.499, 1,662.000 (wgt'ed) examples reached here.  /* #neg=1,180 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16586336243715996;  // std dev = 19.307, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1384210488675278;  // std dev = 19.323, 1,759.000 (wgt'ed) examples reached here.  /* #neg=1,178 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12158324485374708;  // std dev = 19.218, 1,730.000 (wgt'ed) examples reached here.  /* #neg=1,149 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09847538265910852;  // std dev = 19.229, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07383655300957057;  // std dev = 19.310, 1,777.000 (wgt'ed) examples reached here.  /* #neg=1,196 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05793860688468628;  // std dev = 19.326, 1,787.000 (wgt'ed) examples reached here.  /* #neg=1,206 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.059414279586661276;  // std dev = 19.129, 1,717.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04322973543526437;  // std dev = 19.183, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03392211888246192;  // std dev = 19.183, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
Inference time using transfer learning 1.3524107933044434
Parameter learned model CLL:-0.515613 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.499, 1, 482]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.307, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.323, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.218, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.229, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.31, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.326, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.129, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.183, 1, 581]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.183, 1, 581]}]
{'': [1.4354398702224246e-15, 0.20590505400679768]}
{'': [nan, 0.21398845210909928]}
{'': [nan, 0.2122595355457803]}
{'': [nan, 0.21349523507230944]}
{'': [nan, 0.2123754218432232]}
{'': [nan, 0.20984323558168647]}
{'': [nan, 0.20900441749568632]}
{'': [nan, 0.21310614001395523]}
{'': [nan, 0.21160282993936483]}
{'': [nan, 0.21137205413543078]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 31.2978298664093
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16808639166656786;  // std dev = 0.462, 1,439.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.030739953789376686;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.026373234164932945;  // std dev = 3.869, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19204570725164524;  // std dev = 0.472, 1,500.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.010900558139146243;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07543600074677749;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04095462686220508;  // std dev = 3.609, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.023495788204647188;  // std dev = 3.644, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1574174776655376;  // std dev = 0.469, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.043926464862803584;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.0012481332859107677;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03229141237417516;  // std dev = 3.618, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.0139253671374332;  // std dev = 3.655, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12738254316991726;  // std dev = 0.467, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.03954952981038;  // std dev = 0.394, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return -0.14492748637758754;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07729473584463466;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03938352501765146;  // std dev = 3.600, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.06869932445924615;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.1294415598069584;  // std dev = 0.000576, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11015375208654561;  // std dev = 0.468, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03558390982500427;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.040089808459734116;  // std dev = 3.352, 71.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=14 */
%   | | | else return -0.05642960330409728;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.012399427633881627;  // std dev = 3.859, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.11569225182047375;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.16379532799123442;  // std dev = 1.039, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11122564833594382;  // std dev = 0.483, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.10090818801848352;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.09364863951013058;  // std dev = 0.469, 1,417.000 (wgt'ed) examples reached here.  /* #neg=901 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5672321345099228;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.15679013563923305;  // std dev = 0.083, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return 0.045224616947234945;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.03254960915984892;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return 2.2991784421086867E-4;  // std dev = 0.362, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06769224379635938;  // std dev = 0.467, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7288982384442383;  // std dev = 1.335, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.15950720810239366;  // std dev = 0.026, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12929001501785403;  // std dev = 9.13e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.002584583629359547;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.01267327397710384;  // std dev = 3.253, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.036970545075464205;  // std dev = 1.332, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.10416930180128055;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.050555184144546704;  // std dev = 0.466, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5082349670680424;  // std dev = 1.948, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1414145735493109;  // std dev = 0.046, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11530762994548041;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.005287204553251569;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02059585906501433;  // std dev = 3.103, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.037611568561368186;  // std dev = 1.313, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.0945016846215187;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045972149389368305;  // std dev = 0.467, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.029970346580542435;  // std dev = 0.275, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.025410245648379792;  // std dev = 0.277, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.008633845006922769;  // std dev = 3.206, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0059231104809236565;  // std dev = 2.993, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03773685503562124;  // std dev = 0.468, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.025279033642635403;  // std dev = 0.269, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.01189885867276739;  // std dev = 2.632, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.027689706979210936;  // std dev = 1.326, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.0036113945319720853;  // std dev = 0.328, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
Inference time using transfer learning 3.549849510192871
Refined model CLL: -0.499783


******************************************
Best model found
******************************************
Results 

CLL : -0.690026 

AUC ROC : 0.627604 

AUC PR : 0.644993 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 31.2978298664093 

Total Inference Time : 1.3079729080200195 

Total revision time: 35.533608198165894
Best scored revision CLL: -0.499783


Results 

CLL : -0.690026 

AUC ROC : 0.627604 

AUC PR : 0.644993 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 35.54610848426819 

Total Inference Time : 1.3079729080200195 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.6392364501953125
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23250275748627316;  // std dev = 20.644, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19594295072452603;  // std dev = 20.607, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16116350550495936;  // std dev = 20.580, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1298999603307257;  // std dev = 20.560, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10305017916071671;  // std dev = 20.547, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08077846179185587;  // std dev = 20.538, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06276812473057036;  // std dev = 20.532, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04846592026704611;  // std dev = 20.528, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.037252936458106525;  // std dev = 20.526, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3147552013397217
Parameter learned model CLL:-0.658612 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.644, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.607, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.58, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.56, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.547, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.538, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.532, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.528, 1, 747]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.526, 1, 747]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [nan, 0.2347992655532648]}
{'': [nan, 0.23397623997859449]}
{'': [nan, 0.2333492476995795]}
{'': [nan, 0.23290158602598365]}
{'': [nan, 0.23259678485762286]}
{'': [nan, 0.23239568426199078]}
{'': [nan, 0.2322653789155975]}
{'': [nan, 0.2321815739150549]}
{'': [nan, 0.23212763957761318]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 98.23071098327637
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23997579570462146;  // std dev = 0.486, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.23731256435706355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3931222390520146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.39965022669472566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.4573990510486601;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3483910980446958;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.15160890195530377;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.13497714535974895;  // std dev = 0.457, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7746965962672843;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21014723459113055;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.565602894782333;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19974260789101742;  // std dev = 0.484, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2531011759650844;  // std dev = 3.517, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3378398095477881;  // std dev = 2.545, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.15025964966533645;  // std dev = 0.457, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03881672043938629;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6149603005947261;  // std dev = 0.142, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17738213871660474;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.45161422614662705;  // std dev = 0.871, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1639552698189838;  // std dev = 0.484, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.19841406207360796;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.27370404138714355;  // std dev = 2.540, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.12682918322756975;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033544581201227705;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4649668909329978;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1529605109186778;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.34524957603727946;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.13184247385576778;  // std dev = 0.483, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15254453388019426;  // std dev = 3.507, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.21483795385175858;  // std dev = 2.538, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.10539077252424614;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02887907796267461;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10502613376508578;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07433725272321445;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.16317670681501978;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.17211175748634744;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16212000885859507;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08642415956740128;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024780586028828794;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08216009034291043;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.05715415232263658;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.12284861727956735;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.12973095694468373;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12287040948841792;  // std dev = 1.061, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07010384327299457;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.021203000857024697;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06372303320580282;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04371547004559023;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.09218001033147237;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09737615362405268;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0938502335425724;  // std dev = 1.064, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.056370102054830805;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.018097173779198124;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04912122390747968;  // std dev = 0.481, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.033315495926687054;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0691487644815068;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07304008917656732;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07223516548537821;  // std dev = 1.067, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04501392176637558;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015413542658823186;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0377005974820087;  // std dev = 0.480, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.025324992290272918;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05192709121040298;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0548352414244512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05597525770796441;  // std dev = 1.069, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03575077929861877;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.013104022655938947;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 8.284519910812378
Refined model CLL: -0.644725


******************************************
Best model found
******************************************
Results 

CLL : -0.618679 

AUC ROC : 0.630672 

AUC PR : 0.520394 

Precision : 0.798361 

Recall : 0.214537 

F1 : 0.338194 

Total Learning Time : 98.23071098327637 

Total Inference Time : 1.4378104209899902 

Total revision time: 102.1285011768341
Best scored revision CLL: -0.644725


Results 

CLL : -0.618679 

AUC ROC : 0.630672 

AUC PR : 0.520394 

Precision : 0.798361 

Recall : 0.214537 

F1 : 0.338194 

Total Learning Time : 102.1410014629364 

Total Inference Time : 1.4378104209899902 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3022308349609375
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32792426719195505;  // std dev = 15.980, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2713695339835752;  // std dev = 15.950, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2170906827561686;  // std dev = 15.930, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1693395840472565;  // std dev = 15.918, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12990527852519612;  // std dev = 15.912, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09865670716675275;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0745033769655483;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05609627379071466;  // std dev = 15.910, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(A, C), venue(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04217525375549451;  // std dev = 15.911, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.392770528793335
Parameter learned model CLL:-0.677181 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.98, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.95, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.93, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.918, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.912, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.91, 500, 550]}]
['samevenue(A, B)', {'': 'venue(A, C), venue(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.911, 500, 550]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [nan, 0.24321138735565875]}
{'': [nan, 0.24229398927695897]}
{'': [nan, 0.2416787941776957]}
{'': [nan, 0.24132429590877116]}
{'': [nan, 0.24114972712595403]}
{'': [nan, 0.2410816574359215]}
{'': [nan, 0.24106942723644986]}
{'': [nan, 0.2410829346828632]}
{'': [nan, 0.24110596154143454]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 52.885080337524414
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3795073730597477;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.615394782695111;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6401039249359076;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1584415707641431;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.1555325621642444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.129877843165277;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03719491633600885;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6409625329500376;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.253223752633347;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.040187264566753055;  // std dev = 1.975, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.13204717119457618;  // std dev = 3.387, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3395548501172604;  // std dev = 12.884, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.6191905398268016;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17740931237466798;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0893529040162479;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06268194389604101;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.5255371968411573;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2414538625808352;  // std dev = 0.483, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.35795164459881923;  // std dev = 0.395, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.4396209908102217;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.10254799656550338;  // std dev = 0.441, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.008116434461394373;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1139208207180736;  // std dev = 2.938, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.024165230400551435;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03772455243444975;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.37692616799436773;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17582866408648187;  // std dev = 2.589, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12668209597779964;  // std dev = 1.940, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.16653253567505494;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08376171130122702;  // std dev = 1.899, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2097715183251837;  // std dev = 0.477, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.17009443505685812;  // std dev = 0.436, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06708480810643734;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.043418034734613156;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1397361151556716;  // std dev = 0.479, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2827291432825524;  // std dev = 0.327, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.4633819065919528;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18426593173253997;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.16712717620413695;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07226375600659346;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17727478636929137;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09285575618097745;  // std dev = 4.067, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 0.0050279687221313285;  // std dev = 0.387, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10538020778659835;  // std dev = 0.479, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2187418848029283;  // std dev = 0.327, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.4637309890228131;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17736618750038338;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03715725725003045;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.16174753381975462;  // std dev = 0.107, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08536785233704185;  // std dev = 4.047, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03494172860134929;  // std dev = 2.991, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20006061414208903;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.23015022908308885;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.014557737650518219;  // std dev = 2.800, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.20816068088254286;  // std dev = 1.499, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08696615016972213;  // std dev = 0.480, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16231614162510358;  // std dev = 0.338, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.08574793587096947;  // std dev = 0.381, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03781403960197319;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.042867734727287256;  // std dev = 0.421, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.00436266838855087;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.4205631463922415;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2558727718836684;  // std dev = 1.897, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.05855401353173362;  // std dev = 0.478, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.1808308154927562;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.15246516188229178;  // std dev = 0.114, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.14408985745588537;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05802823820107059;  // std dev = 4.072, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.057106908903626054;  // std dev = 0.433, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.19752121588540605;  // std dev = 0.164, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.48034471888097524;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19661417255015873;  // std dev = 0.384, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.2551047832460261;  // std dev = 0.305, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, A) )
%   | | | then return 0.05400082999831599;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06484553825221584;  // std dev = 2.922, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.05234989779689816;  // std dev = 0.478, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.12195167453714112;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.03477538520844582;  // std dev = 0.419, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.013685573225586743;  // std dev = 0.375, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
Inference time using transfer learning 12.521815776824951
Refined model CLL: -0.607379


******************************************
Best model found
******************************************
Results 

CLL : -0.690928 

AUC ROC : 0.616235 

AUC PR : 0.508706 

Precision : 0.374035 

Recall : 0.922578 

F1 : 0.532273 

Total Learning Time : 52.885080337524414 

Total Inference Time : 1.2820255756378174 

Total revision time: 56.15801739692688
Best scored revision CLL: -0.607379


Results 

CLL : -0.690928 

AUC ROC : 0.616235 

AUC PR : 0.508706 

Precision : 0.374035 

Recall : 0.922578 

F1 : 0.532273 

Total Learning Time : 56.170517683029175 

Total Inference Time : 1.2820255756378174 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0999178886413574
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.3049516677856445
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 45.49756407737732
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.433906510857088;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.46341493136240836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3676119673930714;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3910064939368783;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3004027222766365;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30664252570447526;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23718539783209985;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002774751350556609;  // std dev = 3.071, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24387427529249886;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1816264674752956;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09676673656602776;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003761336513445353;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18327419126982888;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1377102824195472;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08863457116456785;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033000237681407455;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13533018626655238;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10192413851539227;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08173245557581221;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002894268643883205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.12018356758919276;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07634489464976091;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07580535150068558;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002537617124409127;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08476601510037311;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05614340876107739;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07066327984423039;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022243095914969133;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.07704627301495189;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04225351647540188;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.019884200551140152;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007853629384744468;  // std dev = 3.072, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.830660647600367E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning 5.950625658035278
Refined model CLL: -0.62193


******************************************
Best model found
******************************************
Results 

CLL : -0.659073 

AUC ROC : 0.555741 

AUC PR : 0.427985 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 45.49756407737732 

Total Inference Time : 1.2521708011627197 

Total revision time: 48.58580684661865
Best scored revision CLL: -0.62193


Results 

CLL : -0.659073 

AUC ROC : 0.555741 

AUC PR : 0.427985 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.619725704193115 

Total Inference Time : 1.2521708011627197 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1618554592132568
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3296465873718262
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 43.99988532066345
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101613;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359355;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479392;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13209388693963517;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3922035313213573;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.12696459948062144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08119839174374606;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18455049842658583;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.2385714361497944;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.25707323099650414;  // std dev = 1.943, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | | else return 0.13002868761001962;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14101657711192464;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1594613655167904;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.19687737356900534;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.28612939832545614;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08082891251501072;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.07760554289304497;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3735566311410654;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.12615061514286152;  // std dev = 1.647, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.10398399293930467;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1364281097299494;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.23140638492811577;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06227727562531055;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05983455720359671;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23201498329953035;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.034296063506944315;  // std dev = 1.612, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1400137803425607;  // std dev = 2.293, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.0777875617507416;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.19281941349523185;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04770466929717206;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.045885504137802804;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0596233762039511;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07024016053930436;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10221301053502535;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.16456969593896664;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0363934222409364;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.035056204599046896;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04480136559428877;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.05021214174959627;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08402052979711043;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14317298573537984;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.02768495042736052;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02671196662628191;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.686761379241943
Refined model CLL: -0.666621


******************************************
Best model found
******************************************
Results 

CLL : -0.755524 

AUC ROC : 0.537209 

AUC PR : 0.344274 

Precision : 0.352912 

Recall : 0.957703 

F1 : 0.515765 

Total Learning Time : 43.99988532066345 

Total Inference Time : 1.2962815761566162 

Total revision time: 47.205623149871826
Best scored revision CLL: -0.666621


Results 

CLL : -0.755524 

AUC ROC : 0.537209 

AUC PR : 0.344274 

Precision : 0.352912 

Recall : 0.957703 

F1 : 0.515765 

Total Learning Time : 47.23954200744629 

Total Inference Time : 1.2962815761566162 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7148261070251465
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19129113693436972;  // std dev = 19.684, 1,744.000 (wgt'ed) examples reached here.  /* #neg=1,163 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17399451521114484;  // std dev = 19.571, 1,705.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14347295345782723;  // std dev = 19.644, 1,730.000 (wgt'ed) examples reached here.  /* #neg=1,149 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11616762800109606;  // std dev = 19.703, 1,751.000 (wgt'ed) examples reached here.  /* #neg=1,170 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09436220562162093;  // std dev = 19.725, 1,759.000 (wgt'ed) examples reached here.  /* #neg=1,178 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08540412619256445;  // std dev = 19.600, 1,715.000 (wgt'ed) examples reached here.  /* #neg=1,134 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06423502203483371;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04815840773594527;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03829131399024727;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04140377626302985;  // std dev = 19.553, 1,699.000 (wgt'ed) examples reached here.  /* #neg=1,118 #pos=581 */
Inference time using transfer learning 1.2327306270599365
Parameter learned model CLL:-0.536593 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.684, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.571, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.644, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.703, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.725, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.6, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.553, 1, 581]}]
{'': [nan, 0.2221584751914678]}
{'': [nan, 0.22464340691943727]}
{'': [nan, 0.2230508870994645]}
{'': [nan, 0.22171225645393872]}
{'': [nan, 0.22120235378453745]}
{'': [nan, 0.22400666389003585]}
{'': [nan, 0.2224772090799393]}
{'': [nan, 0.2213935559694951]}
{'': [nan, 0.2213935559695229]}
{'': [nan, 0.22502521131255876]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 53.52230882644653
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21459105413155447;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.026373234164932945;  // std dev = 3.869, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18994277304966703;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.05003006645381032;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.04509188476570232;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.027564810926871353;  // std dev = 3.856, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.1347967861918911;  // std dev = 3.162, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | | else return 0.051463452858557475;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.15817282575135364;  // std dev = 0.479, 1,483.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.017166086600230387;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.015317485739548971;  // std dev = 1.313, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.026986539022773256;  // std dev = 5.131, 182.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5361443670451069;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09216570151064353;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.1353089383212534;  // std dev = 0.480, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.028505924002230124;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.021694290516034512;  // std dev = 3.851, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.007213647285519336;  // std dev = 3.663, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.13451551259738442;  // std dev = 3.030, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return -0.058347055378290144;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.1096548715142221;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0363076413782062;  // std dev = 3.591, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.054628534672761214;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.001120010712424617;  // std dev = 0.356, 120.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09005971867598418;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.02890473666624047;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.06030961696845708;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -8.23914818374186E-4;  // std dev = 3.888, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.11301640127386699;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07962867247831294;  // std dev = 0.482, 1,480.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.035984841897977515;  // std dev = 3.593, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.0398524873737966;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0011574496916779444;  // std dev = 3.886, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.1036161560891116;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.13548759284571754;  // std dev = 1.201, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.024730989436241867;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.0500110823802947;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | | else return 0.06548634949443777;  // std dev = 18.020, 1,392.000 (wgt'ed) examples reached here.  /* #neg=876 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.006321146018221691;  // std dev = 3.645, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.04669125010822899;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.01029958785481207;  // std dev = 3.863, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.09527633591404265;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03948384235338226;  // std dev = 0.479, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.047272863309802765;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.03788430559330088;  // std dev = 1.329, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.006497283093576359;  // std dev = 5.153, 195.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5416675319959977;  // std dev = 7.363, 460.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=396 */
%   | | | else return -0.29586210391597706;  // std dev = 4.141, 900.000 (wgt'ed) examples reached here.  /* #neg=884 #pos=16 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.19457272738642448;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.192418119208923;  // std dev = 7.957, 258.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=132 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.006514904422130234;  // std dev = 3.733, 99.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=17 */
%   | | | else return 0.14525848150707166;  // std dev = 1.540, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.4691216169270616;  // std dev = 1.544, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.08552769442328685;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 8.427956819534302
Refined model CLL: -0.437466


******************************************
Best model found
******************************************
Results 

CLL : -0.584806 

AUC ROC : 0.839235 

AUC PR : 0.7716 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 53.52230882644653 

Total Inference Time : 1.866194248199463 

Total revision time: 57.97658157348633
Best scored revision CLL: -0.437466


Results 

CLL : -0.584806 

AUC ROC : 0.839235 

AUC PR : 0.7716 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 58.01050043106079 

Total Inference Time : 1.866194248199463 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3568108081817627
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3797633647918701
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 61.60335159301758
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374319;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896765;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.184650884821522;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3177650311402712;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.21748005851877827;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.07957454309045771;  // std dev = 20.018, 1,649.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=697 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03728292940755481;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.13773899040428547;  // std dev = 1.909, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.39980780397300353;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.061551676273840915;  // std dev = 19.613, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.08168091300603755;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.05740972969085729;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.0197975261359838;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5647092456725517;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3915829317068931;  // std dev = 0.224, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.30145207785267003;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04731737671164566;  // std dev = 19.613, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.06149830015282132;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.027546684355041238;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.016855099865528557;  // std dev = 2.964, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4252013460710249;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.30510342069619667;  // std dev = 0.186, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.22679504162528055;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.13205184587551866;  // std dev = 1.709, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.03565383833292587;  // std dev = 20.017, 1,649.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=697 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.023021747242792483;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.014320740126135238;  // std dev = 2.964, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.1631410121917725
Refined model CLL: -0.664674


******************************************
Best model found
******************************************
Results 

CLL : -0.641974 

AUC ROC : 0.571185 

AUC PR : 0.428386 

Precision : 0.503797 

Recall : 0.087665 

F1 : 0.149343 

Total Learning Time : 61.60335159301758 

Total Inference Time : 1.384904384613037 

Total revision time: 65.2094476222992
Best scored revision CLL: -0.664674


Results 

CLL : -0.641974 

AUC ROC : 0.571185 

AUC PR : 0.428386 

Precision : 0.503797 

Recall : 0.087665 

F1 : 0.149343 

Total Learning Time : 65.24336647987366 

Total Inference Time : 1.384904384613037 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.072815179824829
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.2583763599395752
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 37.88633632659912
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.6674283310648041;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10699722258824731;  // std dev = 3.426, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.12452093517174535;  // std dev = 3.389, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.34088658787335774;  // std dev = 13.067, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02479868411363947;  // std dev = 3.137, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08931411673328135;  // std dev = 4.209, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24375302821660957;  // std dev = 0.490, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.33633692211301836;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.440538122182698;  // std dev = 1.308, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2077903460118149;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07541851145852158;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.012253491997194148;  // std dev = 3.126, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08143504099767356;  // std dev = 4.204, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.4370076991353674;  // std dev = 0.308, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.02824487483323186;  // std dev = 3.408, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.03957915497038199;  // std dev = 3.365, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.20990578395035345;  // std dev = 13.056, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02009246340604763;  // std dev = 1.190, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09588933709654056;  // std dev = 3.109, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.09308562456721918;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.025323873286395696;  // std dev = 4.212, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14020367362748562;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.21312138152297613;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.290111751629921;  // std dev = 1.312, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1331828559121657;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05601862764217346;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06105645806357801;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0035372563615473055;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16339553606834328;  // std dev = 2.645, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.11203582427214023;  // std dev = 2.079, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11265743819014121;  // std dev = 13.402, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.20501399717915325;  // std dev = 1.584, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.1485815575865602;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03850758084351493;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05571122331712791;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004356896966951837;  // std dev = 3.137, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.12411849489053559;  // std dev = 2.646, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.07687327990691428;  // std dev = 13.613, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1543408333912035;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.269974523549566;  // std dev = 0.199, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.09904415789815513;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.037571385090861276;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.00499066829316066;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0476410727835375;  // std dev = 4.185, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2637114607822067;  // std dev = 0.240, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0555852202184224;  // std dev = 3.306, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.0483398661263404;  // std dev = 3.340, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07503512338233717;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.05119122550082474;  // std dev = 4.317, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.19332586189951265;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.06489046112038256;  // std dev = 4.260, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22109244348023926;  // std dev = 0.099, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.04396573329303546;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1154223358763196;  // std dev = 1.262, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20954198750947964;  // std dev = 0.218, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.03353531670988542;  // std dev = 1.170, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.04908774819737147;  // std dev = 3.063, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.009502549452014059;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03399006071903256;  // std dev = 4.155, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning 6.982442140579224
Refined model CLL: -0.63229


******************************************
Best model found
******************************************
Results 

CLL : -0.705213 

AUC ROC : 0.554688 

AUC PR : 0.404052 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 37.88633632659912 

Total Inference Time : 1.2374012470245361 

Total revision time: 40.9147846698761
Best scored revision CLL: -0.63229


Results 

CLL : -0.705213 

AUC ROC : 0.554688 

AUC PR : 0.404052 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 40.94870352745056 

Total Inference Time : 1.2374012470245361 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0281529426574707
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.2746245861053467
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 42.961697578430176
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.433906510857088;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.46341493136240836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3676119673930714;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.3781663025623387;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3015033101087399;  // std dev = 2.927, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.32107906698989797;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23592773969263758;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.24548363868249368;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18149039465801287;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18486814128594156;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13757699546923027;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1354362599061675;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10191189984136506;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11350061638894215;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05984201257766986;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.0769213325963463;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045816398181049774;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08473160484593634;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.056151279053149906;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.019981988600391565;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.007985895162756263;  // std dev = 3.072, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 1.7604017460509032E-4;  // std dev = 2.920, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554203749134573;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.08197924772314184;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04183265161960319;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.06791967027090638;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019275269996730652;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002671823354135452;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06843820032958449;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.295272588729858
Refined model CLL: -0.621782


******************************************
Best model found
******************************************
Results 

CLL : -0.659548 

AUC ROC : 0.555462 

AUC PR : 0.427867 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 42.961697578430176 

Total Inference Time : 1.229701042175293 

Total revision time: 45.94526267051697
Best scored revision CLL: -0.621782


Results 

CLL : -0.659548 

AUC ROC : 0.555462 

AUC PR : 0.427867 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 45.9672417640686 

Total Inference Time : 1.229701042175293 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.192613124847412
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3265161514282227
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 46.67388081550598
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558626;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101613;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.43170309793098227;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359355;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479393;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614209121708455;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21847891833460684;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.25592406517200134;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3413723950665916;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10390055191315252;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.410655196086927;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.09645071861201505;  // std dev = 1.641, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1389149075561927;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17954278264770496;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.2692252801573361;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08078498109920405;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10610532120444548;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11940513915816976;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15112779874681828;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.21963717184900058;  // std dev = 3.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06229831139735501;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2816241121459287;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.08015752068392225;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1744908416004057;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.0778630426565772;  // std dev = 17.054, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1048635643786991;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.14054641307332494;  // std dev = 1.824, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05980114398929727;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06335429101130778;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09707137520551322;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16410924498344048;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.018756802237090035;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04491867640467845;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.04765474904081337;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07784325721370054;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.14281853041343284;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.014250172990032043;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.694925546646118
Refined model CLL: -0.667085


******************************************
Best model found
******************************************
Results 

CLL : -0.754957 

AUC ROC : 0.537047 

AUC PR : 0.34422 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 46.67388081550598 

Total Inference Time : 1.161386489868164 

Total revision time: 49.7787766456604
Best scored revision CLL: -0.667085


Results 

CLL : -0.754957 

AUC ROC : 0.537047 

AUC PR : 0.34422 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 49.800755739212036 

Total Inference Time : 1.161386489868164 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7755072116851807
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1939870853885247;  // std dev = 19.644, 1,730.000 (wgt'ed) examples reached here.  /* #neg=1,149 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16986405650971445;  // std dev = 19.626, 1,724.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13592081262808778;  // std dev = 19.758, 1,771.000 (wgt'ed) examples reached here.  /* #neg=1,190 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11844348042670728;  // std dev = 19.692, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0927769770504988;  // std dev = 19.767, 1,774.000 (wgt'ed) examples reached here.  /* #neg=1,193 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07588797330402126;  // std dev = 19.764, 1,773.000 (wgt'ed) examples reached here.  /* #neg=1,192 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06487309231449469;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06052848469194064;  // std dev = 19.586, 1,710.000 (wgt'ed) examples reached here.  /* #neg=1,129 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03722491695395109;  // std dev = 19.748, 1,767.000 (wgt'ed) examples reached here.  /* #neg=1,186 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.034578621546191325;  // std dev = 19.672, 1,740.000 (wgt'ed) examples reached here.  /* #neg=1,159 #pos=581 */
Inference time using transfer learning 1.2167792320251465
Parameter learned model CLL:-0.535315 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.644, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.626, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.758, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.692, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.767, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.764, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.586, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.748, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.672, 1, 581]}]
{'': [nan, 0.22305088709945445]}
{'': [nan, 0.22343326909308592]}
{'': [nan, 0.22043775094127255]}
{'': [nan, 0.2219672353522042]}
{'': [nan, 0.22024666706491472]}
{'': [nan, 0.22031035819932057]}
{'': [nan, 0.2215210322325547]}
{'': [nan, 0.22432509148113441]}
{'': [nan, 0.22069257522285726]}
{'': [nan, 0.22241346280883137]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 50.80417323112488
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2159952909760668;  // std dev = 0.479, 1,523.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.06068058066913263;  // std dev = 3.572, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03122585817643546;  // std dev = 3.858, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18435779244312328;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.023473261821010605;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.01646731954693023;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return 0.011961655791914896;  // std dev = 3.665, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15602395747038764;  // std dev = 0.478, 1,540.000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04479772688184238;  // std dev = 3.588, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.025593683140999326;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.008894629692658963;  // std dev = 3.896, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.12611768239269877;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13240316341496874;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.044131545082757954;  // std dev = 3.593, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.03776892998123612;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.017129340508432973;  // std dev = 0.373, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.04081798757906444;  // std dev = 3.267, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.0023564491175257565;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.1017619973341741;  // std dev = 0.477, 1,514.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.029806875013917326;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.018061870829273692;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.015388941994472008;  // std dev = 1.286, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.0013153347402653508;  // std dev = 3.677, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09783888164311634;  // std dev = 0.481, 1,495.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.042652533160032396;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.015558225100280881;  // std dev = 3.864, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.008450225295262447;  // std dev = 3.642, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06302658842799924;  // std dev = 3.129, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return 0.06655392414223471;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.014518937439657122;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.07291321045189875;  // std dev = 18.178, 1,435.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.0323107344601354;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.034585502627812445;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.007488812783851862;  // std dev = 3.914, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
%   | | | else return -0.11446104587762647;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.14553186058971607;  // std dev = 1.305, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.03225381779896266;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.05639602934352539;  // std dev = 0.479, 1,477.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.028005389828427513;  // std dev = 3.613, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.04531907432586158;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012123501835673818;  // std dev = 3.854, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.10330200974760234;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5804340137057536;  // std dev = 6.670, 447.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=396 */
%   | | | else return -0.28285396567124105;  // std dev = 4.090, 877.000 (wgt'ed) examples reached here.  /* #neg=861 #pos=16 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.15382231141577216;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.1913047969256733;  // std dev = 8.080, 266.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=132 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.011359829120881378;  // std dev = 3.742, 96.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=17 */
%   | | | else return 0.12107079303059318;  // std dev = 1.553, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return 0.5009625346425912;  // std dev = 0.374, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03252899353614858;  // std dev = 0.417, 1,506.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04471570366313979;  // std dev = 0.312, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.052499267963708046;  // std dev = 1.197, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0.003538954295122349;  // std dev = 4.907, 195.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */
Inference time using transfer learning 8.159067392349243
Refined model CLL: -0.434525


******************************************
Best model found
******************************************
Results 

CLL : -0.583078 

AUC ROC : 0.847205 

AUC PR : 0.773921 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 50.80417323112488 

Total Inference Time : 1.826014757156372 

Total revision time: 55.33754062652588
Best scored revision CLL: -0.434525


Results 

CLL : -0.583078 

AUC ROC : 0.847205 

AUC PR : 0.773921 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 55.359519720077515 

Total Inference Time : 1.826014757156372 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.4353442192077637
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.261737585067749
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 67.11913919448853
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977234;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374319;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.21845275277390386;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.103255439591714;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.13384279860471546;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230444561629689;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07214607887745392;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15164264116489157;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06365041165088464;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0539290965460095;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11491273918300642;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.16057701273554825;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.4105518210827843;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04672334200262265;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05742691754053755;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.12234118361572796;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.31036543194042776;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03575245915789576;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04322261268832227;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.996892690658569
Refined model CLL: -0.669421


******************************************
Best model found
******************************************
Results 

CLL : -0.64548 

AUC ROC : 0.56216 

AUC PR : 0.412379 

Precision : 0.480851 

Recall : 0.04978 

F1 : 0.09022 

Total Learning Time : 67.11913919448853 

Total Inference Time : 1.3336968421936035 

Total revision time: 70.72898459434509
Best scored revision CLL: -0.669421


Results 

CLL : -0.64548 

AUC ROC : 0.56216 

AUC PR : 0.412379 

Precision : 0.480851 

Recall : 0.04978 

F1 : 0.09022 

Total Learning Time : 70.75096368789673 

Total Inference Time : 1.3336968421936035 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1439249515533447
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.346097707748413
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 31.51014256477356
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.38027420357062824;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137361;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3114584996620759;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.6080322453757985;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46423066424336923;  // std dev = 1.828, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5303862940560788;  // std dev = 0.209, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03744885502559076;  // std dev = 3.407, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.05300706227085537;  // std dev = 3.364, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2741914106759238;  // std dev = 13.056, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.026441334918466543;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.018192328705489653;  // std dev = 3.139, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07848058847685298;  // std dev = 4.202, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18788777150306465;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2528795935092648;  // std dev = 1.249, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4059034171487783;  // std dev = 0.152, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.18988424101568085;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0583330441774836;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.007796118266543291;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07154545515204905;  // std dev = 4.197, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.348283714408761;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.020774850294590943;  // std dev = 3.395, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.15085181100192632;  // std dev = 13.425, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.23920878599639936;  // std dev = 1.564, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1331321932010322;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05558654748461301;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06110505839681381;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0038711334239900723;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10658291727753004;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.159916000788178;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2671057856126588;  // std dev = 0.169, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.148588114874625;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03856932469734007;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.055611855311414944;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004163475931049745;  // std dev = 3.137, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4539193821026624;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.22647812924109334;  // std dev = 2.317, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2785109113574002;  // std dev = 1.592, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08300617584550231;  // std dev = 3.201, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.08900098890313507;  // std dev = 13.404, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.15775733781308363;  // std dev = 1.560, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.003889338307522317;  // std dev = 3.132, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04753064843279074;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.3098920110354711;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20486090786801564;  // std dev = 0.122, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(E, G), haswordvenue(A, G) )
%   | | | then return -0.36301639027451515;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 7.915331338924641E-4;  // std dev = 4.490, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.07588841266053631;  // std dev = 2.707, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.03943143355229226;  // std dev = 3.660, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.07662066107774848;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.01022111327483637;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.2500812100397209;  // std dev = 0.146, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17385485395995742;  // std dev = 0.107, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.05277974983333741;  // std dev = 3.153, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.0479529419211569;  // std dev = 3.484, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04938257252453043;  // std dev = 13.322, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.11212014678033938;  // std dev = 1.561, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03993789126288807;  // std dev = 4.177, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.014060942171475483;  // std dev = 3.136, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
Inference time using transfer learning 5.0865478515625
Refined model CLL: -0.629822


******************************************
Best model found
******************************************
Results 

CLL : -0.706667 

AUC ROC : 0.554448 

AUC PR : 0.403454 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 31.51014256477356 

Total Inference Time : 1.1221330165863037 

Total revision time: 34.48328995704651
Best scored revision CLL: -0.629822


Results 

CLL : -0.706667 

AUC ROC : 0.554448 

AUC PR : 0.403454 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 34.505269050598145 

Total Inference Time : 1.1221330165863037 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0481083393096924
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.3664171695709229
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 46.23514795303345
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.003663753705113708;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30187643473689757;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11855890509857493;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416284;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.30090639731156066;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23763375697696637;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0027156034810444435;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11703413331139742;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0042748193215849835;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.22883557309838967;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18290394578346572;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10101084267434303;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003752007200638478;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037684685517513977;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1790302565924964;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13808828228734432;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09220085565367923;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033063005098527727;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.13442345679195367;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10393895603099665;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08476839268520331;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002887056395745621;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002899788752291021;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10950088389668902;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07535393503551523;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07841912868332744;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002542468792962408;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.08766293409259152;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05755826687054244;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00179089030861202;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08079336582754272;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002228571437746931;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07629176906443536;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04031166799181876;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07024738770659707;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019529612249788461;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002555421040188541;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.354998350143433
Refined model CLL: -0.621891


******************************************
Best model found
******************************************
Results 

CLL : -0.658993 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.23514795303345 

Total Inference Time : 1.1654860973358154 

Total revision time: 49.15199637413025
Best scored revision CLL: -0.621891


Results 

CLL : -0.658993 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.173845529556274 

Total Inference Time : 1.1654860973358154 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2233474254608154
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3767805099487305
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 36.75740051269531
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.042971029325586246;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.43170309793098227;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359352;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479393;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4558251098703149;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12696459948062144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1576151847535715;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1840137808415251;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857143614979423;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.27370955844542566;  // std dev = 1.861, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10390055191315252;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.34292749077602475;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09682474240493255;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11959133437598535;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.20781421620251186;  // std dev = 2.265, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.13927295535157344;  // std dev = 17.120, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.21335922413600775;  // std dev = 1.864, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08355186707764037;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2903875746203067;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.07745265656296008;  // std dev = 1.624, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.15599096416735708;  // std dev = 2.153, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.10481205630688918;  // std dev = 17.120, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.24154033960095417;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06448230787759282;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03573326099394241;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07913778387230877;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10129510352863977;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13863910767535315;  // std dev = 1.957, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2000801567416078;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04946500471904941;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.027249876430950067;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2016377307460034;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.06200827675586812;  // std dev = 1.615, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05826066752629521;  // std dev = 17.037, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.09370219372893168;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1699652428748522;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03778495010522128;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.020741126217074295;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.15721246640062697;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.04731630720065061;  // std dev = 1.616, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.043750906489359774;  // std dev = 17.037, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.0730807534932729;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.14731225998831904;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.028777393581363105;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.015765623905319957;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 5.944673776626587
Refined model CLL: -0.665373


******************************************
Best model found
******************************************
Results 

CLL : -0.757009 

AUC ROC : 0.535494 

AUC PR : 0.344236 

Precision : 0.354174 

Recall : 0.955922 

F1 : 0.516851 

Total Learning Time : 36.75740051269531 

Total Inference Time : 1.1617498397827148 

Total revision time: 39.85574412345886
Best scored revision CLL: -0.665373


Results 

CLL : -0.757009 

AUC ROC : 0.535494 

AUC PR : 0.344236 

Precision : 0.354174 

Recall : 0.955922 

F1 : 0.516851 

Total Learning Time : 39.87759327888489 

Total Inference Time : 1.1617498397827148 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7701148986816406
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18958076624611314;  // std dev = 19.709, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1675696408860873;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1416561350380958;  // std dev = 19.689, 1,746.000 (wgt'ed) examples reached here.  /* #neg=1,165 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11803577152176736;  // std dev = 19.700, 1,750.000 (wgt'ed) examples reached here.  /* #neg=1,169 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09789495179085725;  // std dev = 19.695, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07426026796674091;  // std dev = 19.777, 1,778.000 (wgt'ed) examples reached here.  /* #neg=1,197 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0747800737316257;  // std dev = 19.559, 1,701.000 (wgt'ed) examples reached here.  /* #neg=1,120 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04995697175798615;  // std dev = 19.706, 1,752.000 (wgt'ed) examples reached here.  /* #neg=1,171 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.036553029358998;  // std dev = 19.753, 1,769.000 (wgt'ed) examples reached here.  /* #neg=1,188 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04737247823154911;  // std dev = 19.480, 1,675.000 (wgt'ed) examples reached here.  /* #neg=1,094 #pos=581 */
Inference time using transfer learning 1.1826655864715576
Parameter learned model CLL:-0.536683 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.709, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.689, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.7, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.695, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.777, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.559, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.706, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.753, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.48, 1, 581]}]
{'': [nan, 0.2215847724493991]}
{'': [nan, 0.22247720907993082]}
{'': [nan, 0.2220309816317156]}
{'': [nan, 0.22177599999998948]}
{'': [nan, 0.2219034895715994]}
{'': [nan, 0.21999193998386563]}
{'': [nan, 0.22489796609594292]}
{'': [nan, 0.22164851389668902]}
{'': [nan, 0.2205651569122256]}
{'': [nan, 0.22654987747829952]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 25.050721406936646
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.18314893509951236;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.21727996021831253;  // std dev = 0.480, 1,473.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.046384229217159435;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.029577506528083813;  // std dev = 3.862, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18010058812207613;  // std dev = 0.477, 1,555.000 (wgt'ed) examples reached here.  /* #neg=1,010 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.042745498499244326;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.06548979561840314;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0066686811293406745;  // std dev = 3.903, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.20789872399494594;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.16478537370800514;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=542 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03572381546996118;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.037699634526635314;  // std dev = 3.610, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return 0.012358257533256705;  // std dev = 3.880, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1238751839080257;  // std dev = 0.477, 1,563.000 (wgt'ed) examples reached here.  /* #neg=1,018 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.02755749350304856;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04756271539278619;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.012521346420085247;  // std dev = 3.878, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.11355442975172907;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11695972518250584;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.02944670741020651;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.025058166402052655;  // std dev = 3.841, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
%   | | | else return 0.016317265092107208;  // std dev = 3.644, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07961504814485959;  // std dev = 0.477, 1,561.000 (wgt'ed) examples reached here.  /* #neg=1,016 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.043565952035451674;  // std dev = 3.572, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.04006813936424593;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.18303257335293355;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.007128903324074392;  // std dev = 3.657, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06747421800787824;  // std dev = 0.478, 1,544.000 (wgt'ed) examples reached here.  /* #neg=999 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.05211417504873407;  // std dev = 0.299, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.034700579463444056;  // std dev = 3.807, 95.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=18 */
%   | | | else return 0.02102458459181959;  // std dev = 3.602, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.16059067679745875;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.022856013149771395;  // std dev = 3.067, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.04099223355751135;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.06885659334710698;  // std dev = 18.054, 1,401.000 (wgt'ed) examples reached here.  /* #neg=885 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.02107218886009877;  // std dev = 3.607, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.037790044951142444;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.14435902129101302;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0027337818118600135;  // std dev = 3.875, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08365873214684018;  // std dev = 3.018, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return -0.12628729943055544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.042954683803464844;  // std dev = 0.479, 1,483.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.04517900188900603;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.023327845864010075;  // std dev = 3.816, 97.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=18 */
%   | | | else return 0.008366406371689944;  // std dev = 3.640, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.12020905182657815;  // std dev = 1.226, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.007679828085912814;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.041697363602664184;  // std dev = 0.481, 1,450.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=529 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.02686583266213228;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.017270154296897093;  // std dev = 3.600, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return 0.00403660596312024;  // std dev = 3.867, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
Inference time using transfer learning 2.7939934730529785
Refined model CLL: -0.528454


******************************************
Best model found
******************************************
Results 

CLL : -0.728914 

AUC ROC : 0.550437 

AUC PR : 0.500888 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 25.050721406936646 

Total Inference Time : 1.3413372039794922 

Total revision time: 29.02431845664978
Best scored revision CLL: -0.528454


Results 

CLL : -0.728914 

AUC ROC : 0.550437 

AUC PR : 0.500888 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 29.046167612075806 

Total Inference Time : 1.3413372039794922 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3417129516601562
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.3074631690979004
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 67.02087903022766
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497722;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.29201435143743204;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556025;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332084;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084443;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18322324263597606;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.1695469424352294;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3725593246983209;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08057112543682675;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.1012908076105485;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06362839472159032;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.04731950661345223;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.126374527016667;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5807351976014096;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.38963661815606687;  // std dev = 0.222, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.26409021504351776;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04761104029349888;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05740368757175228;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.02641561393003837;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03734902452326621;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.020718569470452336;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08189972473799662;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03577772367201456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014792102480385334;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.481961488723755
Refined model CLL: -0.667867


******************************************
Best model found
******************************************
Results 

CLL : -0.643522 

AUC ROC : 0.569004 

AUC PR : 0.421274 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 67.02087903022766 

Total Inference Time : 1.3053557872772217 

Total revision time: 70.42711544036865
Best scored revision CLL: -0.667867


Results 

CLL : -0.643522 

AUC ROC : 0.569004 

AUC PR : 0.421274 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 70.44896459579468 

Total Inference Time : 1.3053557872772217 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.143127202987671
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.2814371585845947
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 31.953543424606323
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.31263919827319864;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24520514513707992;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.32505594174386604;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.39374345118910103;  // std dev = 1.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1557002943717436;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.083737008556944;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5090709220497217;  // std dev = 0.372, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.022635279992678337;  // std dev = 3.397, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.006244401634932531;  // std dev = 3.357, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2156917007044908;  // std dev = 13.051, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.002831362065512176;  // std dev = 1.184, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09436009508464534;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.01228719993013696;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340944;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.18180741269898232;  // std dev = 2.694, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.09630033549100965;  // std dev = 2.147, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.0047474829314522096;  // std dev = 3.357, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.16314199231329643;  // std dev = 13.051, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.1747069311166178;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04229681111681131;  // std dev = 2.938, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06341839112828655;  // std dev = 4.187, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.002305301569527497;  // std dev = 3.136, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1044689974258242;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18796781671080093;  // std dev = 1.255, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.24436932127574215;  // std dev = 1.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return -9.498202960683474E-4;  // std dev = 1.182, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06759466660348423;  // std dev = 3.105, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.053264586635204024;  // std dev = 4.182, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 1.645264360361955E-4;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.34504792553463903;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.05736991233111879;  // std dev = 3.317, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.03221507265765338;  // std dev = 3.346, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09602223445430771;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.13495756327582717;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.027008664781558223;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.006404539189870948;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.049708432303536186;  // std dev = 4.181, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.058009210430491884;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.12143356582624465;  // std dev = 1.252, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.18341977649958338;  // std dev = 1.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.09409106027689933;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02614329236971488;  // std dev = 2.928, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.0075525418115860036;  // std dev = 3.138, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04256087494366968;  // std dev = 4.181, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4614994409788871;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.21997223087890588;  // std dev = 2.342, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.23106407062232517;  // std dev = 1.548, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.06891234605151861;  // std dev = 3.208, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.07483828382384984;  // std dev = 3.061, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.05237834517002629;  // std dev = 3.345, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.0574884584272943;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.009449219681499012;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning 3.8835067749023438
Refined model CLL: -0.630219


******************************************
Best model found
******************************************
Results 

CLL : -0.707569 

AUC ROC : 0.554455 

AUC PR : 0.403921 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 31.953543424606323 

Total Inference Time : 1.1537203788757324 

Total revision time: 34.97530674934387
Best scored revision CLL: -0.630219


Results 

CLL : -0.707569 

AUC ROC : 0.554455 

AUC PR : 0.403921 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 34.9971559047699 

Total Inference Time : 1.1537203788757324 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0962703227996826
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.3173205852508545
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 49.797959089279175
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.433906510857088;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.46341493136240836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3676119673930714;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3910064939368783;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30040272227663645;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30664252570447526;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23718539783209985;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2132260944307295;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1824975368290668;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002477264470117352;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09999413152221179;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1988921340125612;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13638912450561855;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08855026142782672;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033144850730382884;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1489990184647215;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10265742200291414;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08166025301016137;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.00290698309028464;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1199873171066949;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07635873285857837;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07574285353662781;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025487887653019756;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08469182608633422;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.056152498212748696;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07060867345808883;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022341202704727822;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06906693786397247;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04135240320160818;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.007431378469888906;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 2.1745060803527716E-4;  // std dev = 2.920, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning 6.430337429046631
Refined model CLL: -0.621931


******************************************
Best model found
******************************************
Results 

CLL : -0.659082 

AUC ROC : 0.555707 

AUC PR : 0.427977 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.797959089279175 

Total Inference Time : 1.2423522472381592 

Total revision time: 52.89669156074524
Best scored revision CLL: -0.621931


Results 

CLL : -0.659082 

AUC ROC : 0.555707 

AUC PR : 0.427977 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 52.91889500617981 

Total Inference Time : 1.2423522472381592 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.125314474105835
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.3542201519012451
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 32.13552522659302
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.43170309793098227;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10417536869907289;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.23989562422735553;  // std dev = 17.053, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.3176581172953735;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.35163309306853874;  // std dev = 1.924, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.1320938869396352;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3893380901605745;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08079283695241732;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18452555690647326;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23856950095834908;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2714208172227738;  // std dev = 1.913, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10446094245665015;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.34149521269202965;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10793428239695535;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12029652523260312;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.13941173908550517;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1795305867597745;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2260032979874245;  // std dev = 1.880, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.046761641925190674;  // std dev = 1.819, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10616002106354455;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11830081728868647;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15205239177390767;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2576186530083785;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03575969286972728;  // std dev = 1.818, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0334069524432435;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.23090223183382513;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.05590107443849178;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11316803588612546;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07846886528303719;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10484397052895116;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1468965916206423;  // std dev = 1.855, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.025461442356652677;  // std dev = 1.819, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2123749621776752;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04206084699426273;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13219127842552905;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.0586177136538575;  // std dev = 17.027, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08142787884077139;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.12963976184110595;  // std dev = 1.845, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return -0.004767597657168514;  // std dev = 1.811, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.1641850082529673;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.04648919815434621;  // std dev = 1.593, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.08880377863025793;  // std dev = 2.093, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.0437041822558639;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.16902716544234458;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.0036145037914377715;  // std dev = 1.811, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.008550404505157276;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 5.269927501678467
Refined model CLL: -0.664796


******************************************
Best model found
******************************************
Results 

CLL : -0.756498 

AUC ROC : 0.536785 

AUC PR : 0.344794 

Precision : 0.35357 

Recall : 0.956812 

F1 : 0.516338 

Total Learning Time : 32.13552522659302 

Total Inference Time : 1.1971359252929688 

Total revision time: 35.243823528289795
Best scored revision CLL: -0.664796


Results 

CLL : -0.756498 

AUC ROC : 0.536785 

AUC PR : 0.344794 

Precision : 0.35357 

Recall : 0.956812 

F1 : 0.516338 

Total Learning Time : 35.266026973724365 

Total Inference Time : 1.1971359252929688 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7901043891906738
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19771643948290885;  // std dev = 19.589, 1,711.000 (wgt'ed) examples reached here.  /* #neg=1,130 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16245093863806098;  // std dev = 19.728, 1,760.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13854236700318942;  // std dev = 19.728, 1,760.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11616568710428063;  // std dev = 19.728, 1,760.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09504643358806505;  // std dev = 19.742, 1,765.000 (wgt'ed) examples reached here.  /* #neg=1,184 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07963930792990315;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06359521172509539;  // std dev = 19.723, 1,758.000 (wgt'ed) examples reached here.  /* #neg=1,177 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0547722505890227;  // std dev = 19.667, 1,738.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04074927548831281;  // std dev = 19.709, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.042408193144731605;  // std dev = 19.559, 1,701.000 (wgt'ed) examples reached here.  /* #neg=1,120 #pos=581 */
Inference time using transfer learning 1.2350103855133057
Parameter learned model CLL:-0.536016 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.589, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.728, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.728, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.728, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.742, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.723, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.667, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.709, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.559, 1, 581]}]
{'': [nan, 0.22426141435021596]}
{'': [nan, 0.22113862345041826]}
{'': [nan, 0.22113862345043375]}
{'': [nan, 0.2211386234504108]}
{'': [nan, 0.22082000497554408]}
{'': [nan, 0.22152103223256567]}
{'': [nan, 0.22126608606064851]}
{'': [nan, 0.2225409548427271]}
{'': [nan, 0.2215847724493969]}
{'': [nan, 0.2248979660959376]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 51.25902342796326
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.20698614440183793;  // std dev = 3.125, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.25208832903890627;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.2137657510884805;  // std dev = 18.235, 1,451.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.027960255854229364;  // std dev = 3.866, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return 0.013488740924755091;  // std dev = 3.676, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.15157681816758972;  // std dev = 0.467, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.12693748895409124;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.20024344767846503;  // std dev = 18.028, 1,394.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=516 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.039555201765882064;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.030613772910232314;  // std dev = 3.631, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.016264574815900004;  // std dev = 3.891, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15726664747174823;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.05182794495401348;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.043868742352065934;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.013072300549339392;  // std dev = 3.893, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.14324361493816953;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.29403534395890896;  // std dev = 1.211, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.10815883281554832;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.0891874884302866;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return 0.13646439164200252;  // std dev = 18.132, 1,422.000 (wgt'ed) examples reached here.  /* #neg=906 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.04684036525953314;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.017945478985631615;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.009620566288744959;  // std dev = 3.876, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10368547461084368;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.030595262196747342;  // std dev = 3.625, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.05850181353783492;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.006345573775389631;  // std dev = 3.882, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.1286427119069671;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08291737128400996;  // std dev = 0.472, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | else return 0.09479404899460707;  // std dev = 0.482, 1,447.000 (wgt'ed) examples reached here.  /* #neg=918 #pos=529 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.044114298976971056;  // std dev = 3.586, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.024480468819746148;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.13389342204225035;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.012122452695472229;  // std dev = 3.866, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0768967716728628;  // std dev = 0.482, 1,488.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.001125342703533706;  // std dev = 3.665, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return 0.0750816233740831;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.14172829098621476;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.004217599814404123;  // std dev = 3.884, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05649542007266996;  // std dev = 0.481, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.0228472268249735;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.022487756487401752;  // std dev = 3.838, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.017611719026229992;  // std dev = 3.629, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2745935657993612;  // std dev = 1.080, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05068774886413452;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.04362076710342257;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0.045330783782880836;  // std dev = 18.117, 1,418.000 (wgt'ed) examples reached here.  /* #neg=902 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.03383013418469822;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.011998008138139104;  // std dev = 1.305, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.008590904491536416;  // std dev = 5.148, 192.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5667416003144929;  // std dev = 6.665, 447.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=396 */
%   | | | else return -0.2925702877537613;  // std dev = 4.141, 825.000 (wgt'ed) examples reached here.  /* #neg=809 #pos=16 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.14126855519530548;  // std dev = 8.366, 281.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=132 */
%   | | | else return 0.13048701080042777;  // std dev = 1.548, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.015530223984751262;  // std dev = 3.729, 94.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=17 */
%   | | | else return 0.09906284049740285;  // std dev = 1.565, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.5907192730622662;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11485734684315052;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 8.391739130020142
Refined model CLL: -0.437852


******************************************
Best model found
******************************************
Results 

CLL : -0.580441 

AUC ROC : 0.838465 

AUC PR : 0.767279 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 51.25902342796326 

Total Inference Time : 1.9127132892608643 

Total revision time: 55.80518078804016
Best scored revision CLL: -0.437852


Results 

CLL : -0.580441 

AUC ROC : 0.838465 

AUC PR : 0.767279 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 55.82738423347473 

Total Inference Time : 1.9127132892608643 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3011829853057861
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.257042407989502
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 72.03270292282104
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.42475617506381624;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497722;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556034;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332082;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084445;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.183223242635976;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230904723488824;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07213835268202301;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1515536609355912;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.17533534594916916;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.42549384373152693;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.06145985666288711;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.07628586207423028;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048904583332417484;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03494784525107562;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09615676809769863;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03741984916027547;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.020309560756568815;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08266918960531304;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.5213353633880615
Refined model CLL: -0.669622


******************************************
Best model found
******************************************
Results 

CLL : -0.64434 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 72.03270292282104 

Total Inference Time : 1.337935209274292 

Total revision time: 75.44790315628052
Best scored revision CLL: -0.669622


Results 

CLL : -0.64434 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 75.47010660171509 

Total Inference Time : 1.337935209274292 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.118938684463501
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.290452480316162
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 32.85111594200134
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.24083117708588228;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11041804280190058;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.6674283310648041;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10699722258824731;  // std dev = 3.426, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.48209840385016406;  // std dev = 1.599, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.20590530498894818;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09484043847161305;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.24578011745001857;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3186966060103764;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4832163144047184;  // std dev = 0.147, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.17166559827212335;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08054506949074022;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.4397291435466693;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.027967165741044984;  // std dev = 3.408, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1968828131322853;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.2781055306254332;  // std dev = 1.571, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.14002487143515582;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06773016862315123;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012287199930136989;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340932;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.33921491975096246;  // std dev = 0.267, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0694358155422898;  // std dev = 3.379, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.03690988667027307;  // std dev = 3.364, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.16474569946815795;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.0667917375972369;  // std dev = 0.454, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05855866946674008;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250092;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1062949150665697;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1684311609163084;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.27501175961535307;  // std dev = 0.239, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.06677990404716622;  // std dev = 4.330, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.1892705892431544;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0741083304826086;  // std dev = 4.269, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.21162802804703806;  // std dev = 0.111, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.26158727306472757;  // std dev = 2.194, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.20840893041799216;  // std dev = 1.245, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2842989428336378;  // std dev = 1.551, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08325306511843555;  // std dev = 3.173, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.0011641009663534792;  // std dev = 3.355, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09702690356706466;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.013844516829718354;  // std dev = 3.114, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.052612045520748156;  // std dev = 4.161, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.33155462854894097;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19952549773131542;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.042169115496494845;  // std dev = 3.038, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.053058394105130094;  // std dev = 3.352, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.06588890107636539;  // std dev = 13.384, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.1551137667809957;  // std dev = 1.578, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.011686336067533356;  // std dev = 3.114, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04407327003561921;  // std dev = 4.160, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.042876895267047174;  // std dev = 0.484, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09410926240455994;  // std dev = 1.263, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14707855074454576;  // std dev = 1.283, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1121162031063904;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.027542190916697774;  // std dev = 2.878, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.009878651776541243;  // std dev = 3.114, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.036721847804062235;  // std dev = 4.159, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning 4.235677719116211
Refined model CLL: -0.629663


******************************************
Best model found
******************************************
Results 

CLL : -0.704716 

AUC ROC : 0.555139 

AUC PR : 0.404618 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 32.85111594200134 

Total Inference Time : 1.1101899147033691 

Total revision time: 35.814488649368286
Best scored revision CLL: -0.629663


Results 

CLL : -0.704716 

AUC ROC : 0.555139 

AUC PR : 0.404618 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 35.836692094802856 

Total Inference Time : 1.1101899147033691 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.103743553161621
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.4106333255767822
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 47.70167660713196
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3679730071352011;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0036637537051137023;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3315399042152861;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3038812748962419;  // std dev = 2.836, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11855890509857493;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416278;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.30673828929496505;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.237192474933753;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10672285341134428;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004274819321584995;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.20676092910813396;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18349058694653952;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09697063560776858;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003752007200638472;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.19887611531423185;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13639788801782904;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0021349630218403916;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10101864179535057;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.14883002585647123;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10267908920471147;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08460349857328382;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028870563957456154;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0029234481300496966;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.11998606634637894;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07636542059799666;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07827748745531095;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025632573487824957;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09061179145133828;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05526167270793668;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0018207066950529428;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08024190788735718;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0022468274954907156;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.07711486721589984;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04224918524168827;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07016195035514382;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.001968985580313269;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025582734875841586;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.5337159633636475
Refined model CLL: -0.621892


******************************************
Best model found
******************************************
Results 

CLL : -0.659009 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 47.70167660713196 

Total Inference Time : 1.209630012512207 

Total revision time: 50.70675611495972
Best scored revision CLL: -0.621892


Results 

CLL : -0.659009 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 50.72888135910034 

Total Inference Time : 1.209630012512207 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.169114351272583
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.2828164100646973
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 39.307472467422485
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.042971029325586246;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101613;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359352;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608676;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33325231394793914;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4558251098703148;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12696459948062144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1576151847535715;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.3843087944792521;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.08119839174374606;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.18434357319980482;  // std dev = 17.122, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | | else return 0.23310409494846301;  // std dev = 2.624, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14056901751543538;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.17274461849010378;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.210171024584088;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2910503092917415;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.09209426359879103;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0552275148795436;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.26114981847295826;  // std dev = 1.595, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.02897585895463295;  // std dev = 1.597, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1045550760460253;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.14612064816117964;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.23481157281860873;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.07127688843824306;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04231968037982899;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2809909743321356;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.0846627575020646;  // std dev = 1.626, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07772625906105823;  // std dev = 17.027, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.11197446950536585;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.19526580276328515;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.05478324582822574;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03232023153213195;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05968518856676904;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06958625446708055;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10156459540159063;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.16639209753465378;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04190215935610201;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.024625318010290758;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.20027184446826887;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.07860094229204208;  // std dev = 1.626, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.08467931812800424;  // std dev = 2.100, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.043403027657143094;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.1445739865618712;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03194093882888775;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.018731011954610435;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.328572750091553
Refined model CLL: -0.665184


******************************************
Best model found
******************************************
Results 

CLL : -0.757415 

AUC ROC : 0.536475 

AUC PR : 0.34537 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 39.307472467422485 

Total Inference Time : 1.361210584640503 

Total revision time: 42.51268792152405
Best scored revision CLL: -0.665184


Results 

CLL : -0.757415 

AUC ROC : 0.536475 

AUC PR : 0.34537 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 42.53481316566467 

Total Inference Time : 1.361210584640503 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7462482452392578
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19476538932893955;  // std dev = 19.632, 1,726.000 (wgt'ed) examples reached here.  /* #neg=1,145 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16025717865278594;  // std dev = 19.767, 1,774.000 (wgt'ed) examples reached here.  /* #neg=1,193 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15119011440314967;  // std dev = 19.553, 1,699.000 (wgt'ed) examples reached here.  /* #neg=1,118 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12043167842935484;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10232911617252217;  // std dev = 19.603, 1,716.000 (wgt'ed) examples reached here.  /* #neg=1,135 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07717194579959735;  // std dev = 19.695, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06433334468345621;  // std dev = 19.664, 1,737.000 (wgt'ed) examples reached here.  /* #neg=1,156 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04992943325717533;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.043159164976232525;  // std dev = 19.635, 1,727.000 (wgt'ed) examples reached here.  /* #neg=1,146 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.028390646872355926;  // std dev = 19.720, 1,757.000 (wgt'ed) examples reached here.  /* #neg=1,176 #pos=581 */
Inference time using transfer learning 1.2619004249572754
Parameter learned model CLL:-0.536104 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.632, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.767, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.553, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.603, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.695, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.664, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.635, 1, 581]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.72, 1, 581]}]
{'': [nan, 0.2233058169714225]}
{'': [nan, 0.2202466670649069]}
{'': [nan, 0.22502521131255002]}
{'': [nan, 0.22298715007972678]}
{'': [nan, 0.22394296651290221]}
{'': [nan, 0.22190348957160044]}
{'': [nan, 0.22260469996873078]}
{'': [nan, 0.22209472828629814]}
{'': [nan, 0.223242087503603]}
{'': [nan, 0.22132982016159575]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 24.74700355529785
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2095351375495396;  // std dev = 0.477, 1,551.000 (wgt'ed) examples reached here.  /* #neg=1,006 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03814893509951238;  // std dev = 3.842, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.024815601766179047;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18503780279578597;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04643006409619935;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.0615654491409276;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.011469911085555836;  // std dev = 3.893, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.14489878247426097;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2316150974109001;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.09193255772836043;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0.16315258647049913;  // std dev = 0.480, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.045202484189381234;  // std dev = 3.588, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.0465270451208252;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.01888117903432882;  // std dev = 3.872, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.12785229087705496;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.11631756579498007;  // std dev = 3.139, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return 0.013833354515919709;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.13910180473437267;  // std dev = 0.481, 1,458.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.027641788140449118;  // std dev = 3.626, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.0451326591767409;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -6.86411285400078E-4;  // std dev = 3.904, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.11426115666629617;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11275150191512949;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.016588938807488695;  // std dev = 3.642, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.044719433806962625;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.005736875642828544;  // std dev = 3.887, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.10245544826115204;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.010669745748325354;  // std dev = 3.287, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return -0.05975792800909887;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09164006293075828;  // std dev = 0.481, 1,461.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.025540611936582313;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.02148161140102549;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0059071994757537265;  // std dev = 3.887, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.09409307845264697;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0642582964763707;  // std dev = 0.478, 1,546.000 (wgt'ed) examples reached here.  /* #neg=1,001 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.046436417430585825;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.015383158287513786;  // std dev = 1.310, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.006756686527883278;  // std dev = 5.170, 201.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0625296122234147;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.023301228096949064;  // std dev = 3.621, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.02314968676144582;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0017766646343919832;  // std dev = 3.887, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.0855370104990952;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.036481237066522836;  // std dev = 0.477, 1,551.000 (wgt'ed) examples reached here.  /* #neg=1,006 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02415673142569745;  // std dev = 3.612, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.06109639934874457;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return 0.0026125522160531426;  // std dev = 0.362, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.29815672925156705;  // std dev = 1.090, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.024746006923194452;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.039466464021830606;  // std dev = 0.481, 1,458.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=529 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.05838498092788899;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.020949919294911568;  // std dev = 3.618, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.005805180353245704;  // std dev = 3.868, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
Inference time using transfer learning 2.8216423988342285
Refined model CLL: -0.527814


******************************************
Best model found
******************************************
Results 

CLL : -0.729686 

AUC ROC : 0.550241 

AUC PR : 0.500837 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 24.74700355529785 

Total Inference Time : 1.4884521961212158 

Total revision time: 28.873056173324585
Best scored revision CLL: -0.527814


Results 

CLL : -0.729686 

AUC ROC : 0.550241 

AUC PR : 0.500837 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 28.89518141746521 

Total Inference Time : 1.4884521961212158 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3565845489501953
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.2797811031341553
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 73.79230785369873
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.34982421251676;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183317;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896767;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.184650884821522;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07865195988799582;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14015013481000485;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.05337173011871802;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11580583554988459;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.34781984983750647;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.046661810116601865;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.057441706147235254;  // std dev = 4.363, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.026415613930038398;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03734590428292643;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.025315416289820945;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07420193765315596;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03577772367201456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014704125438060345;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.322072505950928
Refined model CLL: -0.668194


******************************************
Best model found
******************************************
Results 

CLL : -0.641305 

AUC ROC : 0.568525 

AUC PR : 0.429595 

Precision : 0.721212 

Recall : 0.052423 

F1 : 0.097741 

Total Learning Time : 73.79230785369873 

Total Inference Time : 1.3218061923980713 

Total revision time: 77.23446583747864
Best scored revision CLL: -0.668194


Results 

CLL : -0.641305 

AUC ROC : 0.568525 

AUC PR : 0.429595 

Precision : 0.721212 

Recall : 0.052423 

F1 : 0.097741 

Total Learning Time : 77.25659108161926 

Total Inference Time : 1.3218061923980713 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1606674194335938
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3152666091918945
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'samebib(C, A), samebib(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- samebib(C, A), samebib(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 36.06510519981384
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( samebib(C, A), samebib(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.306595680483299;  // std dev = 2.718, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.31285078605716415;  // std dev = 13.761, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.5311063066649064;  // std dev = 0.219, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03881269054759063;  // std dev = 3.412, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2569875120032801;  // std dev = 13.463, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.36806606788366114;  // std dev = 1.570, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.20070515822718704;  // std dev = 1.551, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07009868312435633;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.017044400366822355;  // std dev = 3.132, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08088272625165593;  // std dev = 4.202, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.40219151964530075;  // std dev = 0.212, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.021505982353412122;  // std dev = 3.390, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.20016675700277126;  // std dev = 13.429, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.2964395308145708;  // std dev = 1.565, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1444981383377075;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0711927654325636;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0703401046152524;  // std dev = 4.191, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0067114620926655615;  // std dev = 3.140, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1424113073039135;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1917000108316798;  // std dev = 1.249, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.30312592164844926;  // std dev = 0.153, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.0019359510114475113;  // std dev = 1.181, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08247552317134665;  // std dev = 3.108, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.00469503931578866;  // std dev = 3.138, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.060976123239276855;  // std dev = 4.190, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.12472019496816256;  // std dev = 2.623, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.13602877927244023;  // std dev = 2.117, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.038206137836455094;  // std dev = 3.354, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.1285377307103256;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14835007603854358;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03818981764090696;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.055813793213574485;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004084494341439082;  // std dev = 3.137, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.0947450177489065;  // std dev = 2.625, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.10454973259212384;  // std dev = 2.111, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08650157378358166;  // std dev = 13.405, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.16147354554848897;  // std dev = 1.560, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.10033844084797927;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03749229223314859;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.004892324497515724;  // std dev = 3.136, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04757501876412684;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05797102873177687;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.24626141993546652;  // std dev = 0.881, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1294933008241656;  // std dev = 1.562, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.05128422868408619;  // std dev = 4.318, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.19448819726333536;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0648205422048469;  // std dev = 4.259, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22035017697626225;  // std dev = 0.102, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.0980646252027835;  // std dev = 2.601, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.1619099578398498;  // std dev = 2.137, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.060735224119521244;  // std dev = 3.223, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.060225961982533494;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.10118985112343244;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.01885345329270406;  // std dev = 2.895, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.016455939474705972;  // std dev = 3.112, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04051336186512868;  // std dev = 4.157, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning 8.209537267684937
Refined model CLL: -0.631802


******************************************
Best model found
******************************************
Results 

CLL : -0.705775 

AUC ROC : 0.553386 

AUC PR : 0.402514 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 36.06510519981384 

Total Inference Time : 1.1925368309020996 

Total revision time: 39.08581590652466
Best scored revision CLL: -0.631802


Results 

CLL : -0.705775 

AUC ROC : 0.553386 

AUC PR : 0.402514 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 39.10794115066528 

Total Inference Time : 1.1925368309020996 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0568571090698242
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.2902348041534424
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 44.11174941062927
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3974484051691344;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3717678476909069;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520728;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091865;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3307939837252071;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3040412844425181;  // std dev = 2.837, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917127;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0048814113928811334;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.31218003061916594;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2367500200038858;  // std dev = 2.927, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.002677181801036127;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11768949475621578;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.265441233354951;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17979862646389455;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0025418555451123814;  // std dev = 3.071, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10391334235738228;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003764806174277053;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1863616789583645;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13745364521969347;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09647146749735158;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003303078144066235;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0042173236271036765;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12870104226976178;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10291847253419163;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.001909809139094559;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09865395635455933;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037014086597902006;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.13651470331431367;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07492790665889965;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0843017308880799;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003247324935525707;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032727559014573875;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.10279005360671652;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05621311232562855;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07801807500160737;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002847959396725486;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002870312269348368;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06383537674426712;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.042152535903516676;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07258773926039765;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0024969478804547298;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025165831550431057;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.019583463668823
Refined model CLL: -0.621902


******************************************
Best model found
******************************************
Results 

CLL : -0.658781 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 44.11174941062927 

Total Inference Time : 1.1055076122283936 

Total revision time: 46.97065258026123
Best scored revision CLL: -0.621902


Results 

CLL : -0.658781 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.98626470565796 

Total Inference Time : 1.1055076122283936 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1779770851135254
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.275641679763794
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 43.341718912124634
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.042971029325586246;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359355;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479392;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3922035313213573;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12696459948062144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08119839174374606;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18455049842658583;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857143614979426;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25707323099650414;  // std dev = 1.943, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | | else return 0.13002868761001962;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.29448315494802063;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09682474240493255;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06435934004348376;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1398384804332947;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17953824788627154;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2130459230511447;  // std dev = 1.871, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08082891251501072;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.22344403871544433;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.0034253549235625006;  // std dev = 1.590, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.10520415017711501;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13642140713782433;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.24465907576552057;  // std dev = 2.98e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06227727562531055;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03154216706765396;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07972338658986373;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08481637699935338;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.12213210255105071;  // std dev = 1.957, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.20230294968034737;  // std dev = 3.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04770466929717206;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.024052728211181967;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05986713322264972;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06426547685421291;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09626030539432696;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.17160915891236428;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0363934222409364;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.01831235796031196;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04498916430117132;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.045681641707909094;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0795318305949512;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1485682781601501;  // std dev = 2.24e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.02768495042736052;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.013926010967524391;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.2857346534729
Refined model CLL: -0.667705


******************************************
Best model found
******************************************
Results 

CLL : -0.755184 

AUC ROC : 0.533865 

AUC PR : 0.341858 

Precision : 0.352912 

Recall : 0.957703 

F1 : 0.515765 

Total Learning Time : 43.341718912124634 

Total Inference Time : 1.2318816184997559 

Total revision time: 46.49588918685913
Best scored revision CLL: -0.667705


Results 

CLL : -0.755184 

AUC ROC : 0.533865 

AUC PR : 0.341858 

Precision : 0.352912 

Recall : 0.957703 

F1 : 0.515765 

Total Learning Time : 46.51150131225586 

Total Inference Time : 1.2318816184997559 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7485361099243164
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18291137221521442;  // std dev = 19.807, 1,789.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16772655787567695;  // std dev = 19.681, 1,743.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13667189005168948;  // std dev = 19.777, 1,778.000 (wgt'ed) examples reached here.  /* #neg=1,197 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11020368205307901;  // std dev = 19.844, 1,803.000 (wgt'ed) examples reached here.  /* #neg=1,222 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10597378282097628;  // std dev = 19.626, 1,724.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0872005451832882;  // std dev = 19.618, 1,721.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06057869359706655;  // std dev = 19.764, 1,773.000 (wgt'ed) examples reached here.  /* #neg=1,192 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.053240261240141105;  // std dev = 19.695, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.035695122896850784;  // std dev = 19.794, 1,784.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.038068814685068744;  // std dev = 19.650, 1,732.000 (wgt'ed) examples reached here.  /* #neg=1,151 #pos=581 */
Inference time using transfer learning 1.2777972221374512
Parameter learned model CLL:-0.534741 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.807, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.681, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.777, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.844, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.626, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.618, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.764, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.695, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.794, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.65, 1, 581]}]
{'': [nan, 0.2192917965543587]}
{'': [nan, 0.22222222222221025]}
{'': [nan, 0.21999193998387828]}
{'': [nan, 0.21840163479304586]}
{'': [nan, 0.22343326909309263]}
{'': [nan, 0.2236244281850373]}
{'': [nan, 0.2203103581993504]}
{'': [nan, 0.22190348957162093]}
{'': [nan, 0.21960997355668274]}
{'': [nan, 0.2229234115068199]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 23.87360906600952
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.14703782398840126;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.15360348055405781;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.2125445394951118;  // std dev = 18.252, 1,456.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0346195233348065;  // std dev = 3.850, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
%   | | | else return 0.01052988748046475;  // std dev = 3.683, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.29279418357704884;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.15636416592392052;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.1554766055245295;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | | else return 0.18247623299200358;  // std dev = 18.283, 1,465.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=516 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.020372740083607847;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.030370836833250574;  // std dev = 3.859, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.006623490163960892;  // std dev = 3.681, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1617659687091469;  // std dev = 0.479, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04650968848652592;  // std dev = 3.594, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.035792073941265524;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.025042836434184455;  // std dev = 3.861, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.1432930156472404;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13028512427428823;  // std dev = 0.478, 1,541.000 (wgt'ed) examples reached here.  /* #neg=996 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.05327589329613193;  // std dev = 3.565, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
%   | | | else return -0.03136296497121169;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.036079161773013735;  // std dev = 3.828, 97.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=18 */
%   | | | else return -0.12643681637334842;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11036293743308297;  // std dev = 0.479, 1,526.000 (wgt'ed) examples reached here.  /* #neg=981 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04593436046352011;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.025540490939992742;  // std dev = 3.842, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.002428302828195055;  // std dev = 3.659, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09646519677483714;  // std dev = 0.473, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | else return 0.08897021441738447;  // std dev = 0.479, 1,482.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.05436154737371738;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.01885730283006874;  // std dev = 1.317, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.005253278713954245;  // std dev = 5.172, 198.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06563818942494189;  // std dev = 0.477, 1,551.000 (wgt'ed) examples reached here.  /* #neg=1,006 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.008422398518850412;  // std dev = 0.338, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.027395686193135677;  // std dev = 1.325, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.017440541060208196;  // std dev = 5.133, 183.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.36881922876442763;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.16614119227512275;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.06691461694274867;  // std dev = 0.482, 1,444.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.032639380898776826;  // std dev = 3.594, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.0778566328324115;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.0038422719116104876;  // std dev = 3.899, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.1131383771606581;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05088062817843774;  // std dev = 0.481, 1,493.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.03708468849225634;  // std dev = 3.584, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.05033751393345882;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0014208461728881497;  // std dev = 3.878, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.10227648783271338;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.033933410601382864;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.05228810499575607;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.004447018523895841;  // std dev = 3.870, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.008219894851894347;  // std dev = 3.667, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
Inference time using transfer learning 2.4985711574554443
Refined model CLL: -0.528629


******************************************
Best model found
******************************************
Results 

CLL : -0.727981 

AUC ROC : 0.549669 

AUC PR : 0.499732 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 23.87360906600952 

Total Inference Time : 1.304347038269043 

Total revision time: 27.78710961341858
Best scored revision CLL: -0.528629


Results 

CLL : -0.727981 

AUC ROC : 0.549669 

AUC PR : 0.499732 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 27.802721738815308 

Total Inference Time : 1.304347038269043 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3839104175567627
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.2935287952423096
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 86.217289686203
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2257431683218333;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896763;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18465088482152192;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07865195988799589;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14015013481000496;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.05337173011871798;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11580583554988458;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.039494432092995385;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08838528210282064;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.025145885999215488;  // std dev = 3.496, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07453058718410026;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 7.061582565307617
Refined model CLL: -0.670432


******************************************
Best model found
******************************************
Results 

CLL : -0.642552 

AUC ROC : 0.564202 

AUC PR : 0.422227 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 86.217289686203 

Total Inference Time : 1.2492916584014893 

Total revision time: 89.68837547302246
Best scored revision CLL: -0.670432


Results 

CLL : -0.642552 

AUC ROC : 0.564202 

AUC PR : 0.422227 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 89.70398759841919 

Total Inference Time : 1.2492916584014893 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1022968292236328
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.2763893604278564
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 36.05661940574646
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.622689630722142;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10747096949672581;  // std dev = 3.426, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.3232065475583421;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.48209840385016406;  // std dev = 1.599, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.47102860615418585;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03782127469070193;  // std dev = 3.402, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.10074652875714872;  // std dev = 3.380, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2716420475354571;  // std dev = 13.058, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.026441334918466543;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.018192328705489667;  // std dev = 3.139, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07848058847685295;  // std dev = 4.202, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2012932742190603;  // std dev = 2.620, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.04719848033656298;  // std dev = 2.167, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.07903573190375365;  // std dev = 3.379, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.20810950940241685;  // std dev = 13.057, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.09105677835794528;  // std dev = 3.117, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.027424913809597443;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.3244414701607533;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1379481054830391;  // std dev = 13.807, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.23367001803529924;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.31807092331867654;  // std dev = 1.317, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 5.258890547054536E-4;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07849983607364949;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05845108547197524;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009311696047104386;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10553725488122424;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1790710391004872;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.31771725008120355;  // std dev = 0.197, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.16671056668654674;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.033901040813675946;  // std dev = 2.934, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.00560910172761825;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.057169596976421024;  // std dev = 4.188, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07859827961340961;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13909005811049133;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20037429196239925;  // std dev = 1.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1355933191239743;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.027688058762964988;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04879801750372032;  // std dev = 4.176, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.006698948222073315;  // std dev = 3.142, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4558159609248426;  // std dev = 1.338, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.4208007033056214;  // std dev = 0.352, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.30156371661204623;  // std dev = 1.063, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.07098079924275733;  // std dev = 3.057, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.021138235332155832;  // std dev = 3.347, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07532445866113262;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.040852357799523474;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.00566871526608108;  // std dev = 3.142, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.13169685146908233;  // std dev = 2.583, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.04046429767593865;  // std dev = 13.465, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10998607606985486;  // std dev = 1.268, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20818242328218986;  // std dev = 0.171, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.20436223571720374;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.06338415921244042;  // std dev = 4.221, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.062020071798411326;  // std dev = 4.207, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22673280871704707;  // std dev = 0.138, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning 8.932645797729492
Refined model CLL: -0.623447


******************************************
Best model found
******************************************
Results 

CLL : -0.704167 

AUC ROC : 0.562153 

AUC PR : 0.412945 

Precision : 0.376024 

Recall : 0.930685 

F1 : 0.535635 

Total Learning Time : 36.05661940574646 

Total Inference Time : 1.1996145248413086 

Total revision time: 39.059048891067505
Best scored revision CLL: -0.623447


Results 

CLL : -0.704167 

AUC ROC : 0.562153 

AUC PR : 0.412945 

Precision : 0.376024 

Recall : 0.930685 

F1 : 0.535635 

Total Learning Time : 39.07466101646423 

Total Inference Time : 1.1996145248413086 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.102426528930664
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.2694220542907715
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 43.04714250564575
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0036637537051136997;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3018764347368976;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11855890509857493;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416284;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.30090639731156066;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23763375697696634;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.002715603481044443;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1170341333113974;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0042748193215849835;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21371122647509302;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1824117784648789;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10101084267434303;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003752007200638478;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003768468551751396;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18297657240756604;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1377651596287503;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09220085565367925;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033063005098527727;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.14550886302146682;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10298381115077178;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08476839268520332;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002887056395745621;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.00289978875229103;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10994332524182207;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07527163462960476;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07841912868332744;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002542468792962408;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.13445782620068708;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0899420145324286;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04688810059978192;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.05734543898328038;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.0729359064419091;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022187478909486556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.002228571437746933;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.035540351086348614;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06900529869448184;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0413967534553038;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0016849412792414513;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.07674896198864711;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0019529612249788461;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 6.653815984725952
Refined model CLL: -0.621753


******************************************
Best model found
******************************************
Results 

CLL : -0.659276 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 43.04714250564575 

Total Inference Time : 1.2788500785827637 

Total revision time: 46.14576292037964
Best scored revision CLL: -0.621753


Results 

CLL : -0.659276 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.16189241409302 

Total Inference Time : 1.2788500785827637 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1999249458312988
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.2177915573120117
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 39.279139041900635
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101613;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10417536869907289;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.23989562422735558;  // std dev = 17.053, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.31765811729537363;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.35163309306853874;  // std dev = 1.924, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.13209388693963517;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.38996419756864076;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0817552396862309;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.38483665812442;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.08079283695241732;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.18483255835653165;  // std dev = 17.122, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | | else return 0.2316924490940441;  // std dev = 2.660, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1405556873780534;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.17464039834552209;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.20829697112466736;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3115997346432673;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.05616525761866016;  // std dev = 1.821, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05553284594353726;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10582771686469497;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12597034674733293;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.16335112139883692;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.24894428468345625;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.043044981662801025;  // std dev = 1.820, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.042556801494957205;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2338477042571526;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.049353722451841255;  // std dev = 1.599, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07818858726844474;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.11191266229580561;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.205348518155427;  // std dev = 3.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.032876589078419956;  // std dev = 1.820, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03250290720116493;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05971481522170617;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06954443720786299;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10151497722130394;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.17385574106550278;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.02504964651875823;  // std dev = 1.820, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.024765273764553446;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16721782718978753;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05177932921037235;  // std dev = 1.599, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.043804966672602155;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06782721823682818;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.15028094454289948;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.01905335125906311;  // std dev = 1.819, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.018837827180376326;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.086561918258667
Refined model CLL: -0.665228


******************************************
Best model found
******************************************
Results 

CLL : -0.756891 

AUC ROC : 0.537015 

AUC PR : 0.345473 

Precision : 0.353512 

Recall : 0.956812 

F1 : 0.516276 

Total Learning Time : 39.279139041900635 

Total Inference Time : 1.2596538066864014 

Total revision time: 42.50622272491455
Best scored revision CLL: -0.665228


Results 

CLL : -0.756891 

AUC ROC : 0.537015 

AUC PR : 0.345473 

Precision : 0.353512 

Recall : 0.956812 

F1 : 0.516276 

Total Learning Time : 42.52235221862793 

Total Inference Time : 1.2596538066864014 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7925851345062256
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19110022449778813;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16697483371101293;  // std dev = 19.675, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1438159998615774;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1161938398742395;  // std dev = 19.720, 1,757.000 (wgt'ed) examples reached here.  /* #neg=1,176 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09224751252442917;  // std dev = 19.775, 1,777.000 (wgt'ed) examples reached here.  /* #neg=1,196 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08184380565125593;  // std dev = 19.678, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06195912369481086;  // std dev = 19.739, 1,764.000 (wgt'ed) examples reached here.  /* #neg=1,183 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041277242960376645;  // std dev = 19.862, 1,810.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.047535441565311504;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03499564921233476;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
Inference time using transfer learning 1.187767744064331
Parameter learned model CLL:-0.534709 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.675, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.72, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.775, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.678, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.739, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.862, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
{'': [nan, 0.22209472828628862]}
{'': [nan, 0.22234971615736135]}
{'': [nan, 0.22279593023178734]}
{'': [nan, 0.22132982016156866]}
{'': [nan, 0.22005561591892447]}
{'': [nan, 0.22228596925290495]}
{'': [nan, 0.22088372385990152]}
{'': [nan, 0.21795702206890769]}
{'': [nan, 0.2229871500797278]}
{'': [nan, 0.22209472828632287]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 50.44662141799927
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.2002541982574071;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else return 0.21534002220281595;  // std dev = 0.479, 1,481.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.05092001943686177;  // std dev = 3.594, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.004937925925200435;  // std dev = 3.695, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1973420199701182;  // std dev = 0.482, 1,483.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.03365490486920219;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.057455334774016986;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.01072122347769505;  // std dev = 3.900, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.142453219059622;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15681160537694305;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.025924678266948237;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03607840527112192;  // std dev = 3.823, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | | else return 0.009292879079113591;  // std dev = 3.680, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12799694239848783;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.044036208933187306;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.015084313010353467;  // std dev = 3.666, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 9.767161391911127E-4;  // std dev = 3.893, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10344070965133195;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04287090271707704;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.05983836963587621;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.011024899923100072;  // std dev = 3.871, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.12871918647698746;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10059750920885852;  // std dev = 0.483, 1,474.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02904085882016838;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.03419447181511061;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0032482743727753264;  // std dev = 3.887, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.11465880823625722;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06701583084310288;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04441643176996778;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.053013039312952356;  // std dev = 1.333, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.013712149903220568;  // std dev = 5.152, 193.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E), haswordtitle(G, D) )
%   | | | then return 0.3323324213036482;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0481323080098597;  // std dev = 3.014, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | else return 0.060987639019241695;  // std dev = 0.481, 1,452.000 (wgt'ed) examples reached here.  /* #neg=923 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.037697602442640844;  // std dev = 3.582, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.04744802047401464;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.011791365728903262;  // std dev = 3.869, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.10268328254078984;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.05384835302823569;  // std dev = 3.025, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | | else return -0.09513032671933419;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04585919770640339;  // std dev = 0.481, 1,461.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.005874929500280807;  // std dev = 3.637, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.06720292779126029;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.002629761140026674;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.012320344738310007;  // std dev = 3.693, 114.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5627736863210412;  // std dev = 6.814, 449.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=396 */
%   | | | else return -0.29237857430198055;  // std dev = 4.145, 854.000 (wgt'ed) examples reached here.  /* #neg=838 #pos=16 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.19304562968837596;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.17076103312421098;  // std dev = 8.150, 270.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=132 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10219246554971928;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.5309368691661034;  // std dev = 1.310, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.020641486723613232;  // std dev = 3.846, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.0925136639966604;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 8.493592500686646
Refined model CLL: -0.436043


******************************************
Best model found
******************************************
Results 

CLL : -0.581639 

AUC ROC : 0.840977 

AUC PR : 0.77878 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 50.44662141799927 

Total Inference Time : 1.8247148990631104 

Total revision time: 54.950873374938965
Best scored revision CLL: -0.436043


Results 

CLL : -0.581639 

AUC ROC : 0.840977 

AUC PR : 0.77878 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 54.967002868652344 

Total Inference Time : 1.8247148990631104 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.416090965270996
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.2761726379394531
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 70.38614153862
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.29201435143743204;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832254;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896774;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18465088482152206;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.195257836296556;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08006052311436539;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10122723928974572;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.175327525865995;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.42548591742271225;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.061452048815789855;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.0763398668626433;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04889846261467306;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03511702818548418;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09597972890594474;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.037415100431069694;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.020397039559449062;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08260726956365234;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.84942889213562
Refined model CLL: -0.66962


******************************************
Best model found
******************************************
Results 

CLL : -0.644342 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 70.38614153862 

Total Inference Time : 1.357520580291748 

Total revision time: 73.96386981010437
Best scored revision CLL: -0.66962


Results 

CLL : -0.644342 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 73.97999930381775 

Total Inference Time : 1.357520580291748 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0789103507995605
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.2919909954071045
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 34.301350355148315
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.622689630722142;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10747096949672576;  // std dev = 3.426, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.3232065475583421;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.48209840385016417;  // std dev = 1.599, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.47102860615418585;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.037821274690702025;  // std dev = 3.402, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.25734524472364806;  // std dev = 13.431, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.3803516883152353;  // std dev = 1.596, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.026441334918466532;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.20059240891655772;  // std dev = 2.620, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.0499200965439961;  // std dev = 2.161, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.042754105305273384;  // std dev = 3.368, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.21085144752597168;  // std dev = 13.054, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.18362602472896147;  // std dev = 1.551, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05390512277209512;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.012071578267207577;  // std dev = 3.133, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07082638789173398;  // std dev = 4.195, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1409669998023076;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.21793944493437806;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.36731900268273426;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.04429676774834823;  // std dev = 1.173, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.073909023377928;  // std dev = 3.119, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.062213439856545996;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.001514986856543549;  // std dev = 3.145, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.3000772866462683;  // std dev = 0.168, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.026777874553200375;  // std dev = 3.328, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.0030814973273192883;  // std dev = 3.356, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.12375599362749777;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.12132976815621048;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04315173488851326;  // std dev = 2.942, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 7.498725075819091E-4;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.053430493442546606;  // std dev = 4.185, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07801237517881907;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24065017839910416;  // std dev = 0.887, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.17230086600296757;  // std dev = 1.580, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.05747974958374689;  // std dev = 4.323, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.18817524635749813;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07033480644435164;  // std dev = 4.262, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.21919240212284558;  // std dev = 0.113, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0593196002108518;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11221547194696535;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.22950302761415253;  // std dev = 0.201, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.024427121110609365;  // std dev = 1.182, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.054968086674727454;  // std dev = 3.069, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.0054527736273438385;  // std dev = 3.133, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03820941531978901;  // std dev = 4.155, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4595517977828529;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.20961034401086207;  // std dev = 2.301, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.23568878911747682;  // std dev = 1.534, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07202015610556665;  // std dev = 3.184, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.07802375285254923;  // std dev = 3.061, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.05199552110256027;  // std dev = 3.326, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.0582882197462188;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.006886515761818534;  // std dev = 4.195, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning 5.001134157180786
Refined model CLL: -0.628319


******************************************
Best model found
******************************************
Results 

CLL : -0.707629 

AUC ROC : 0.554745 

AUC PR : 0.403472 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 34.301350355148315 

Total Inference Time : 1.1467151641845703 

Total revision time: 37.33833575248718
Best scored revision CLL: -0.628319


Results 

CLL : -0.707629 

AUC ROC : 0.554745 

AUC PR : 0.403472 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 37.35446524620056 

Total Inference Time : 1.1467151641845703 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0532677173614502
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.3092210292816162
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 45.47341251373291
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37277259202160834;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30192753761678814;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0031576158915441145;  // std dev = 3.073, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.26830348475807086;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23873835760054066;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10659972967786581;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004275198200142493;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.24479651662125987;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18157258654063316;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09686776837207182;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037523389461441205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16959795376356382;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13704297137439625;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08872009475685076;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032921083304070144;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.150133614177383;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1025809285828091;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08180574262627595;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028873101104008913;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.11875682871926685;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07648016190037026;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07586882447203398;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025315036113168696;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.09070747811345137;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05727982905507505;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07071876782370919;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022189414091018872;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06935395955040372;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04134448717117698;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.019902273458104358;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007860375345083267;  // std dev = 3.072, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.801255488318191E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning 6.289412021636963
Refined model CLL: -0.621929


******************************************
Best model found
******************************************
Results 

CLL : -0.659069 

AUC ROC : 0.555741 

AUC PR : 0.427985 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 45.47341251373291 

Total Inference Time : 1.1645030975341797 

Total revision time: 48.37333846092224
Best scored revision CLL: -0.621929


Results 

CLL : -0.659069 

AUC ROC : 0.555741 

AUC PR : 0.427985 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.3895468711853 

Total Inference Time : 1.1645030975341797 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.2759697437286377
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.201782464981079
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 46.61653757095337
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10459348710461978;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.2399523433083081;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.3176515255108324;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.33324199902303153;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1861282147015946;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21846310628117366;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2559408218141817;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10823437731842023;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4106485696401105;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.082500753403975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20093798620649422;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2069920358760189;  // std dev = 2.264, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.1387612459644352;  // std dev = 17.120, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.21771459696603074;  // std dev = 1.833, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08428552717955452;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10578487082493913;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.12910515961647503;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.16074633105900923;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2273585653490687;  // std dev = 3.33e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06506600997309579;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06497050941798617;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07939814730888262;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09392171502095097;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1275473603077816;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.18990227512303268;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04992255465396754;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0498446366918388;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.059578110975905;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07069874340625362;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10062749385818467;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16239056907321586;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0381399950396174;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03807710156582384;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.24866134954908067;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0014464601133033078;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20938869689632206;  // std dev = 1.229, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.04308634551977143;  // std dev = 17.049, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06787914389067304;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.10746835161723801;  // std dev = 1.814, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.029050993766366582;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 5.815598487854004
Refined model CLL: -0.666776


******************************************
Best model found
******************************************
Results 

CLL : -0.755722 

AUC ROC : 0.537202 

AUC PR : 0.346123 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 46.61653757095337 

Total Inference Time : 1.09761381149292 

Total revision time: 49.66834855079651
Best scored revision CLL: -0.666776


Results 

CLL : -0.755722 

AUC ROC : 0.537202 

AUC PR : 0.346123 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 49.68455696105957 

Total Inference Time : 1.09761381149292 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.751831293106079
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19359928151983066;  // std dev = 19.650, 1,732.000 (wgt'ed) examples reached here.  /* #neg=1,151 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1683614200898163;  // std dev = 19.650, 1,732.000 (wgt'ed) examples reached here.  /* #neg=1,151 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1414841752538363;  // std dev = 19.681, 1,743.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12031808218170072;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09722182868623305;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07925886556617559;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0596305802894905;  // std dev = 19.750, 1,768.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04793094662764819;  // std dev = 19.748, 1,767.000 (wgt'ed) examples reached here.  /* #neg=1,186 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04440633571611016;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.039670525245644774;  // std dev = 19.589, 1,711.000 (wgt'ed) examples reached here.  /* #neg=1,130 #pos=581 */
Inference time using transfer learning 1.2479126453399658
Parameter learned model CLL:-0.536096 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.65, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.65, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.681, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.75, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.748, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.589, 1, 581]}]
{'': [nan, 0.22292341150679407]}
{'': [nan, 0.22292341150682357]}
{'': [nan, 0.22222222222221624]}
{'': [nan, 0.2227959302317854]}
{'': [nan, 0.22209472828629295]}
{'': [nan, 0.22209472828628343]}
{'': [nan, 0.22062886458099257]}
{'': [nan, 0.22069257522285546]}
{'': [nan, 0.22279593023179567]}
{'': [nan, 0.22426141435021169]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 24.138882398605347
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22172465224427054;  // std dev = 0.481, 1,499.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03592671287729016;  // std dev = 3.627, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.030739953789376686;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.017440970497742472;  // std dev = 3.890, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.42896012646764425;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1312857078629927;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.1863925589000588;  // std dev = 0.479, 1,480.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.033502576142161705;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.01872669223626123;  // std dev = 3.656, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.012856789188923386;  // std dev = 3.895, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1585778345101728;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.020961328170972175;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.021752203454128784;  // std dev = 3.867, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.013375603858203794;  // std dev = 3.667, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E), haswordtitle(G, D) )
%   | | | then return 0.2292335454384682;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10564722358899402;  // std dev = 3.074, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.12574784640879821;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | | else return 0.13322820576676;  // std dev = 18.189, 1,438.000 (wgt'ed) examples reached here.  /* #neg=922 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.04364833201361562;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.041987841915176786;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.006228963277636708;  // std dev = 3.896, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.1266516716031363;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10275843046810298;  // std dev = 0.478, 1,547.000 (wgt'ed) examples reached here.  /* #neg=1,002 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03264517517225597;  // std dev = 3.613, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -9.488229289539811E-4;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.005422094291449584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.018456021638983015;  // std dev = 3.641, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06005791499401128;  // std dev = 3.170, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return -0.06381756198673405;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.08276526256653786;  // std dev = 0.478, 1,502.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.023569144197734163;  // std dev = 3.626, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.03905745480169497;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.008925982361457186;  // std dev = 3.879, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.11482688156043133;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0738723193235181;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.010367564287318205;  // std dev = 3.649, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.0774312686823298;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.003885366966229847;  // std dev = 3.887, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.10430149562346805;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.055482744831578286;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.06270291677414808;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.028792695051295714;  // std dev = 3.603, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 7.272184605423252E-4;  // std dev = 3.891, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05065842827036557;  // std dev = 0.481, 1,500.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.022981287148872827;  // std dev = 3.615, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.060295648124625595;  // std dev = 1.341, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.002832654182370895;  // std dev = 3.886, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.09383131226443718;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.044214897952140404;  // std dev = 0.482, 1,481.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02701619475382016;  // std dev = 3.598, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.04222161142535794;  // std dev = 1.333, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.006976842384054903;  // std dev = 3.878, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.08644225786389904;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning 2.834773063659668
Refined model CLL: -0.528724


******************************************
Best model found
******************************************
Results 

CLL : -0.727857 

AUC ROC : 0.550363 

AUC PR : 0.500869 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 24.138882398605347 

Total Inference Time : 1.3966410160064697 

Total revision time: 28.14563775062561
Best scored revision CLL: -0.528724


Results 

CLL : -0.727857 

AUC ROC : 0.550363 

AUC PR : 0.500869 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 28.161846160888672 

Total Inference Time : 1.3966410160064697 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.381932258605957
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.2426745891571045
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 62.99161076545715
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497722;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.1755276593955603;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1054968638933209;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084447;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.183223242635976;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.659157418262724;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.317318254108104;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.44445994916822373;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.08011356619946995;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10129080761054801;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.03728292940755499;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.14131029722616054;  // std dev = 1.902, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.33468563580882393;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.061966276223882115;  // std dev = 19.614, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.0763397039766577;  // std dev = 4.375, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05740972969085724;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019796582104952883;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0488335189989872;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.028451376338220716;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1073713399593005;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.045793611684258405;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016854283299177795;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.09542977870339314;  // std dev = 1.902, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.23965590300601197;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03618962739231862;  // std dev = 19.613, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04317291251243506;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.03632180444617924;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014320036728684987;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.725940704345703
Refined model CLL: -0.667543


******************************************
Best model found
******************************************
Results 

CLL : -0.644469 

AUC ROC : 0.566267 

AUC PR : 0.41821 

Precision : 0.544118 

Recall : 0.065198 

F1 : 0.116444 

Total Learning Time : 62.99161076545715 

Total Inference Time : 1.3406755924224854 

Total revision time: 66.48997521400452
Best scored revision CLL: -0.667543


Results 

CLL : -0.644469 

AUC ROC : 0.566267 

AUC PR : 0.41821 

Precision : 0.544118 

Recall : 0.065198 

F1 : 0.116444 

Total Learning Time : 66.50618362426758 

Total Inference Time : 1.3406755924224854 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0981616973876953
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.257098913192749
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 32.736533880233765
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137361;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.032078136196191376;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.10106546954416988;  // std dev = 4.218, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3114584996620759;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.6080322453757985;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46423066424336923;  // std dev = 1.828, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.22643086319039477;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09526168725802413;  // std dev = 2.945, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.12358095880871146;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.036296916650107904;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.5303862940560788;  // std dev = 0.209, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.037448855025590755;  // std dev = 3.407, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2572512060893007;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.361370546215876;  // std dev = 1.592, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.19152468573986167;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08093303602859613;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.012245500808286014;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08071097691968315;  // std dev = 4.203, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.401473825396039;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.023051246318001165;  // std dev = 3.386, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2004581002276291;  // std dev = 13.429, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.2899025424963106;  // std dev = 1.586, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.06095393089006695;  // std dev = 1.174, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.08830833628177934;  // std dev = 3.122, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.09315386907334805;  // std dev = 3.111, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.025240397853704057;  // std dev = 4.212, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.15900071295737758;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.10015774957968399;  // std dev = 2.125, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.004287185486691716;  // std dev = 3.354, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.16438022521435727;  // std dev = 13.052, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14418171125266252;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05354121653055115;  // std dev = 2.942, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06113265208659298;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0033511090386630273;  // std dev = 3.144, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10577656973258105;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16378133496911904;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.30624084864050566;  // std dev = 0.169, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.007395090414791236;  // std dev = 1.197, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06724613978189595;  // std dev = 3.101, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05641401069483267;  // std dev = 4.182, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004997339881213075;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.2745878859864669;  // std dev = 0.190, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.05506000728245693;  // std dev = 3.311, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.0869088689427107;  // std dev = 13.404, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.1543209326815458;  // std dev = 1.572, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.10742518043213989;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0363898438055204;  // std dev = 2.936, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.004094043459529957;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.046798742494840374;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.26717098869440115;  // std dev = 2.200, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.2188418219404989;  // std dev = 1.089, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2659000590736953;  // std dev = 1.577, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07430838913839752;  // std dev = 3.205, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.02865638106641968;  // std dev = 3.279, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07499065065044645;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04441883530179633;  // std dev = 4.176, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.01185465954940931;  // std dev = 3.138, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.04414479604513319;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1137317438891905;  // std dev = 1.271, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20972380734163132;  // std dev = 0.198, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.19333501566898678;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.06288446868106685;  // std dev = 4.251, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05895118695509672;  // std dev = 4.255, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22633550040742653;  // std dev = 0.127, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning 5.246506214141846
Refined model CLL: -0.628556


******************************************
Best model found
******************************************
Results 

CLL : -0.704956 

AUC ROC : 0.554862 

AUC PR : 0.404164 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 32.736533880233765 

Total Inference Time : 1.2356877326965332 

Total revision time: 35.7877631187439
Best scored revision CLL: -0.628556


Results 

CLL : -0.704956 

AUC ROC : 0.554862 

AUC PR : 0.404164 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 35.80397152900696 

Total Inference Time : 1.2356877326965332 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1940770149230957
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.2684800624847412
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 44.158355712890625
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3018764347368976;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.26831481283721625;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23873717036189152;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2134496077331999;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1824905666964664;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16211931623710776;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13819466255724813;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002239821746621496;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09361024488001457;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1534385884726469;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10229469501045048;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08158892117033024;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002924834380481179;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.13491705329322765;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07508153812004362;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07568113317161661;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025644747591500277;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.10159987568733424;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.056327753510914846;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07055476615140747;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022478960391661426;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07473034926406082;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03661174542507164;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.042467036382020054;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.06606646087953838;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0014757167188846957;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.001969923006175194;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 7.004503965377808
Refined model CLL: -0.621737


******************************************
Best model found
******************************************
Results 

CLL : -0.659679 

AUC ROC : 0.55552 

AUC PR : 0.427914 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 44.158355712890625 

Total Inference Time : 1.296147346496582 

Total revision time: 47.360164642333984
Best scored revision CLL: -0.621737


Results 

CLL : -0.659679 

AUC ROC : 0.55552 

AUC PR : 0.427914 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 47.37628221511841 

Total Inference Time : 1.296147346496582 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1586718559265137
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.2590360641479492
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 45.68147826194763
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22171737779321607;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2531325933398254;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4135394151203006;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.1031272515463662;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.13891629954241463;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17955370484806227;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10607568027028388;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11844924605735585;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15197813192664816;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.28436202931503746;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06281407614404877;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20683164060919132;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07801366625143066;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10487442703471386;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14575648741360903;  // std dev = 1.811, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.059776237366658574;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06535394541099855;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09536372123054;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.15684395404186718;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.035980197714660864;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.31244390572187253;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0324544215676177;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.29388161989008976;  // std dev = 1.229, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.09206252260915805;  // std dev = 2.168, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.04225631604558038;  // std dev = 17.118, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11102122193476849;  // std dev = 1.807, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.02738367014590908;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 6.488828420639038
Refined model CLL: -0.666933


******************************************
Best model found
******************************************
Results 

CLL : -0.755682 

AUC ROC : 0.537363 

AUC PR : 0.346217 

Precision : 0.35429 

Recall : 0.955922 

F1 : 0.516976 

Total Learning Time : 45.68147826194763 

Total Inference Time : 1.1134123802185059 

Total revision time: 48.71444654464722
Best scored revision CLL: -0.666933


Results 

CLL : -0.755682 

AUC ROC : 0.537363 

AUC PR : 0.346217 

Precision : 0.35429 

Recall : 0.955922 

F1 : 0.516976 

Total Learning Time : 48.73056411743164 

Total Inference Time : 1.1134123802185059 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.7064440250396729
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1845534294815298;  // std dev = 19.783, 1,780.000 (wgt'ed) examples reached here.  /* #neg=1,199 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1613058381781132;  // std dev = 19.772, 1,776.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14320499905522494;  // std dev = 19.692, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11853529943417764;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1089348108776154;  // std dev = 19.556, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,119 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07245721060977656;  // std dev = 19.799, 1,786.000 (wgt'ed) examples reached here.  /* #neg=1,205 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07338138520951551;  // std dev = 19.580, 1,708.000 (wgt'ed) examples reached here.  /* #neg=1,127 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0564107765174214;  // std dev = 19.615, 1,720.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.043885788895846045;  // std dev = 19.629, 1,725.000 (wgt'ed) examples reached here.  /* #neg=1,144 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03142736695950299;  // std dev = 19.678, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
Inference time using transfer learning 1.2037062644958496
Parameter learned model CLL:-0.53632 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.783, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.772, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.692, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.556, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.799, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.58, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.615, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.629, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.678, 1, 581]}]
{'': [nan, 0.219864600429224]}
{'': [nan, 0.22011929581608758]}
{'': [nan, 0.22196723535220386]}
{'': [nan, 0.22139355596951474]}
{'': [nan, 0.22496159169551672]}
{'': [nan, 0.2194826879211259]}
{'': [nan, 0.22445243214189714]}
{'': [nan, 0.2236881422390566]}
{'': [nan, 0.22336954421339283]}
{'': [nan, 0.2222859692529304]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 23.378841876983643
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2239207471800443;  // std dev = 0.482, 1,490.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03122585817643546;  // std dev = 3.858, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.021414241221961363;  // std dev = 3.659, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1722803057062915;  // std dev = 0.475, 1,586.000 (wgt'ed) examples reached here.  /* #neg=1,041 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.045451444510093544;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03834843768905941;  // std dev = 3.613, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return 0.004860871387029325;  // std dev = 3.914, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E), haswordtitle(G, D) )
%   | | | then return 0.46945269878526164;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.214550738000948;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | | else return 0.16118711612944286;  // std dev = 0.480, 1,476.000 (wgt'ed) examples reached here.  /* #neg=947 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.05323831768526542;  // std dev = 3.582, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.03396860305808982;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0027289423571019472;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.014714718672520478;  // std dev = 3.654, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D), haswordvenue(B, E) )
%   | | | then return 0.21795621254512154;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.0523208657783252;  // std dev = 3.162, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | else return 0.1418551051737333;  // std dev = 0.482, 1,446.000 (wgt'ed) examples reached here.  /* #neg=917 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.028782240423919865;  // std dev = 3.622, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04091711939811047;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0041965650887507535;  // std dev = 3.899, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.14500500590925308;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11449865728331306;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.030559956329003827;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return 0.13274689406780218;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.018456159540447024;  // std dev = 3.860, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.12742941933233137;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08975232218065621;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.026183854863491587;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.025129788916858728;  // std dev = 1.319, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.01402226893283519;  // std dev = 5.148, 188.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05937560915345413;  // std dev = 0.477, 1,561.000 (wgt'ed) examples reached here.  /* #neg=1,016 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.027886933493635642;  // std dev = 3.607, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.034635470192770274;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.008267738910208707;  // std dev = 3.873, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.11543919053971875;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05141604667885767;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.026853766230670446;  // std dev = 3.600, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.04487370020533291;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.1402767925555227;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.005549996339012093;  // std dev = 3.901, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.39682380462949474;  // std dev = 0.815, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.024200788431410325;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0.04552601619361435;  // std dev = 0.480, 1,476.000 (wgt'ed) examples reached here.  /* #neg=947 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0306371348391132;  // std dev = 3.602, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.07272396657697067;  // std dev = 1.338, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return 0.0024979483408197373;  // std dev = 0.368, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.041553309376561764;  // std dev = 0.481, 1,496.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.02794949319952698;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0019338839960392957;  // std dev = 3.873, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.009495519196234778;  // std dev = 3.673, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
Inference time using transfer learning 2.698138952255249
Refined model CLL: -0.528054


******************************************
Best model found
******************************************
Results 

CLL : -0.728204 

AUC ROC : 0.550986 

AUC PR : 0.501039 

Precision : 0.875 

Recall : 0.005747 

F1 : 0.011419 

Total Learning Time : 23.378841876983643 

Total Inference Time : 1.3738396167755127 

Total revision time: 27.341543197631836
Best scored revision CLL: -0.528054


Results 

CLL : -0.728204 

AUC ROC : 0.550986 

AUC PR : 0.501039 

Precision : 0.875 

Recall : 0.005747 

F1 : 0.011419 

Total Learning Time : 27.35766077041626 

Total Inference Time : 1.3738396167755127 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.358565330505371
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.282620906829834
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 63.862247943878174
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0803711573217346;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.17626717210462292;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04789385243275259;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.3158346306230407;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.2006373174408249;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.2851297848161343;  // std dev = 4.405, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.15150238996222307;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04161364193995419;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16637475827136666;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19018432385311873;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2900471196945369;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12787545250346505;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03598745608932591;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13358543781190366;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13821763447798716;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.24021895502966012;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.10621981933357773;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03099336090453001;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10550624512746852;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1051849151811951;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18344790090669846;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08704211527084456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026595858635667033;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08231667928485283;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07197444087214501;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15163808753688843;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07053494519933444;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022750626979808865;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.616964767420999;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3575499673680333;  // std dev = 0.191, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.352312428699552;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.12218529925149278;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.3937969060758032;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.06111776945321979;  // std dev = 20.017, 1,649.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=697 */
%   | | | else return 0.0285177002010044;  // std dev = 4.641, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5965214543828938;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3614958574887096;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.33238530856328447;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04695340114821812;  // std dev = 19.609, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.06111468322565459;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.02686373272652083;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017541184635289867;  // std dev = 2.963, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03718873295306867;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.023360176343800384;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.084954699515535;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.045431424425358094;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.014910847454819562;  // std dev = 2.963, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.011814447208304863;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.241110324859619
Refined model CLL: -0.665784


******************************************
Best model found
******************************************
Results 

CLL : -0.642663 

AUC ROC : 0.570839 

AUC PR : 0.422678 

Precision : 0.503797 

Recall : 0.087665 

F1 : 0.149343 

Total Learning Time : 63.862247943878174 

Total Inference Time : 1.395782470703125 

Total revision time: 67.41240119934082
Best scored revision CLL: -0.665784


Results 

CLL : -0.642663 

AUC ROC : 0.570839 

AUC PR : 0.422678 

Precision : 0.503797 

Recall : 0.087665 

F1 : 0.149343 

Total Learning Time : 67.42851877212524 

Total Inference Time : 1.395782470703125 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1269054412841797
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3229169845581055
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 33.52093458175659
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.08038064590513878;  // std dev = 1.214, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.1438801268471402;  // std dev = 3.118, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.3201497659160316;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.31233225298000517;  // std dev = 13.761, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.20680958908039723;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09465910268892143;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2452042060561065;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.4583810754176895;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.35875600383157646;  // std dev = 1.803, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.17252716824676737;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08038088739582595;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.1950964527216201;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.08306082613081248;  // std dev = 2.257, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.006419292847477883;  // std dev = 3.356, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2158447597906285;  // std dev = 13.051, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.14080200783000846;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06758472781837567;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012287199930136975;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340932;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.486425678931835;  // std dev = 0.319, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.03882292522165741;  // std dev = 3.328, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.15003569564762312;  // std dev = 13.427, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.24121063591106437;  // std dev = 1.566, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.02323333325882469;  // std dev = 1.167, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.07330343902648191;  // std dev = 3.124, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05855866946674008;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250049;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.3724313984608536;  // std dev = 0.292, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.02943481681365045;  // std dev = 3.329, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11275418746480803;  // std dev = 13.426, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.18679401705177465;  // std dev = 1.568, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.02470230845241255;  // std dev = 1.223, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06342070432087012;  // std dev = 3.105, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.005797596149501558;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.057742038665493295;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.45945784888859004;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24054952535761823;  // std dev = 2.308, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2815083931344312;  // std dev = 1.619, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07857871277442217;  // std dev = 3.209, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.08797917901502784;  // std dev = 13.376, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.17786966275662514;  // std dev = 1.584, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.049398473609689485;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.007020840215150515;  // std dev = 3.143, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4458165293197713;  // std dev = 1.295, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.37164900376791465;  // std dev = 0.379, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2758023791569162;  // std dev = 1.038, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.05813571361400907;  // std dev = 3.084, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.060629223973776514;  // std dev = 3.053, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.02861602283391151;  // std dev = 3.312, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.07491906849939241;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.01201606277786202;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.04304278482046544;  // std dev = 0.479, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.13006385065986867;  // std dev = 1.282, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20982196157691976;  // std dev = 0.189, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.049683476123884775;  // std dev = 4.274, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.1937131089825764;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05780676751390832;  // std dev = 4.223, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.23092846475462098;  // std dev = 0.154, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning 7.3525238037109375
Refined model CLL: -0.621717


******************************************
Best model found
******************************************
Results 

CLL : -0.705696 

AUC ROC : 0.555046 

AUC PR : 0.404421 

Precision : 0.37379 

Recall : 0.923794 

F1 : 0.532228 

Total Learning Time : 33.52093458175659 

Total Inference Time : 1.101919174194336 

Total revision time: 36.46061682701111
Best scored revision CLL: -0.621717


Results 

CLL : -0.705696 

AUC ROC : 0.555046 

AUC PR : 0.404421 

Precision : 0.37379 

Recall : 0.923794 

F1 : 0.532228 

Total Learning Time : 36.47673439979553 

Total Inference Time : 1.101919174194336 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.064016342163086
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning 1.2624249458312988
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 46.32166934013367
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3018764347368976;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30090639731156066;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23763375697696634;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0027747513505566148;  // std dev = 3.071, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.22883557309838967;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18290394578346572;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09676673656602774;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003761336513445365;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1790302565924964;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13808828228734432;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08863457116456785;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033000237681407455;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.13542730130284078;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10193931287716791;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0019721332406458045;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09406367081378471;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002894268643883205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11000060452337293;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07526521169835605;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07811873217742597;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002537617124409127;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025845391122892728;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.09076926035656933;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05727594066188194;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07267510625517466;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002224309591496901;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002265518206243104;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06853628283484228;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041469072279881336;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.019884200551140152;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007657674520830881;  // std dev = 3.072, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.830660647600352E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning 5.892786979675293
Refined model CLL: -0.621939


******************************************
Best model found
******************************************
Results 

CLL : -0.658879 

AUC ROC : 0.555809 

AUC PR : 0.428002 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.32166934013367 

Total Inference Time : 1.1481261253356934 

Total revision time: 49.25906825065613
Best scored revision CLL: -0.621939


Results 

CLL : -0.658879 

AUC ROC : 0.555809 

AUC PR : 0.428002 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.27505826950073 

Total Inference Time : 1.1481261253356934 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1726524829864502
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning 1.271599292755127
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 45.51203751564026
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10459348710461978;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.2399523433083081;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.3176515255108323;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3332419990230316;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18612821470159466;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2184631062811737;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2559408218141817;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10823437731842023;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4106485696401105;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.082500753403975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20093798620649425;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1389037394639584;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17954402862742036;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2177145969660308;  // std dev = 1.833, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.0842855271795545;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10611859429958105;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1194280221378418;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15110977261361616;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2273585653490687;  // std dev = 3.33e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06506600997309582;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06497050941798617;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07964719770150146;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08680621947497973;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.12045996274372793;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.18990227512303268;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04992255465396754;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0498446366918388;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05976301358669041;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0653807390761484;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09535472680608904;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.16239056907321586;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03813999503961739;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.038077101565823855;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.24847747721861668;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0012545423962777441;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20955736296578958;  // std dev = 1.229, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.11305439157060487;  // std dev = 2.261, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.042372212683499916;  // std dev = 17.118, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10746835161723804;  // std dev = 1.814, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.029050993766366568;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning 5.903456449508667
Refined model CLL: -0.666776


******************************************
Best model found
******************************************
Results 

CLL : -0.755749 

AUC ROC : 0.537202 

AUC PR : 0.346123 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 45.51203751564026 

Total Inference Time : 1.1116535663604736 

Total revision time: 48.60692644119263
Best scored revision CLL: -0.666776


Results 

CLL : -0.755749 

AUC ROC : 0.537202 

AUC PR : 0.346123 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 48.62291646003723 

Total Inference Time : 1.1116535663604736 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.8839802742004395
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18565739056737654;  // std dev = 19.767, 1,774.000 (wgt'ed) examples reached here.  /* #neg=1,193 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16244757158427864;  // std dev = 19.753, 1,769.000 (wgt'ed) examples reached here.  /* #neg=1,188 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14324120022989922;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12468618099873931;  // std dev = 19.621, 1,722.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10944743114848068;  // std dev = 19.526, 1,690.000 (wgt'ed) examples reached here.  /* #neg=1,109 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07112823262489831;  // std dev = 19.794, 1,784.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04834621539080468;  // std dev = 19.926, 1,835.000 (wgt'ed) examples reached here.  /* #neg=1,254 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05112086407223789;  // std dev = 19.745, 1,766.000 (wgt'ed) examples reached here.  /* #neg=1,185 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.043565799303575195;  // std dev = 19.703, 1,751.000 (wgt'ed) examples reached here.  /* #neg=1,170 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04091961291490599;  // std dev = 19.609, 1,718.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=581 */
Inference time using transfer learning 1.2129790782928467
Parameter learned model CLL:-0.534966 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.767, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.753, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.621, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.526, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.794, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.926, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.745, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.703, 1, 581]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [19.609, 1, 581]}]
{'': [nan, 0.2202466670649053]}
{'': [nan, 0.22056515691223616]}
{'': [nan, 0.22209472828631469]}
{'': [nan, 0.2235607112168785]}
{'': [nan, 0.22559749308497992]}
{'': [nan, 0.21960997355666778]}
{'': [nan, 0.21637223529761834]}
{'': [nan, 0.2207562887253921]}
{'': [nan, 0.22171225645391907]}
{'': [nan, 0.22381556104576503]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 54.18046855926514
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.19905802600860326;  // std dev = 3.144, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1914822684328457;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.21898809593866822;  // std dev = 18.161, 1,430.000 (wgt'ed) examples reached here.  /* #neg=914 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return 0.017440970497742472;  // std dev = 3.890, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.21888251950306348;  // std dev = 1.358, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10980123591239976;  // std dev = 3.067, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else return 0.1947702281925816;  // std dev = 0.482, 1,448.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.019529661474468635;  // std dev = 3.658, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.10601256667064546;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.013676491983419683;  // std dev = 3.891, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.14124573435439347;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16085199454810584;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04891405708277765;  // std dev = 3.588, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.041490214896778475;  // std dev = 1.326, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.00936962647351045;  // std dev = 3.896, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.1262025060740967;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13578969787664563;  // std dev = 0.481, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.02797539903297748;  // std dev = 3.630, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.06273955425327842;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -0.00534609682114892;  // std dev = 3.916, 123.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=18 */
%   | | | else return -0.11236928431029389;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10871596557920454;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.038545062482161364;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.03077327207733123;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -6.627973518663466E-4;  // std dev = 3.906, 120.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=18 */
%   | | | else return -0.1031803315464511;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.16442699625084697;  // std dev = 2.949, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.0035452917294515884;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.026673153349067936;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.08388345137072675;  // std dev = 18.221, 1,447.000 (wgt'ed) examples reached here.  /* #neg=931 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.013825424197345003;  // std dev = 3.638, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.14753551728381095;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.017444004965778324;  // std dev = 3.865, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.09288294792393759;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.1556181804681879;  // std dev = 1.278, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.021398649435336505;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.05896379218924651;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0.07890415690052295;  // std dev = 18.050, 1,400.000 (wgt'ed) examples reached here.  /* #neg=884 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.04610209470073299;  // std dev = 3.577, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.06237935477191704;  // std dev = 1.345, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.01753595480756994;  // std dev = 3.849, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.08464819582276954;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05765863946130168;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.017381946759030806;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.017037369191923512;  // std dev = 3.847, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.005993783665340439;  // std dev = 3.643, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5657846106655924;  // std dev = 6.994, 452.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=396 */
%   | | | else return -0.28438685278856185;  // std dev = 4.136, 888.000 (wgt'ed) examples reached here.  /* #neg=872 #pos=16 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.16674288852325658;  // std dev = 8.243, 272.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=132 */
%   | | | else return 0.03647577260143391;  // std dev = 1.680, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.027269360950600317;  // std dev = 3.683, 89.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=17 */
%   | | | else return 0.17494145761860233;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5747337950363106;  // std dev = 0.268, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.021572186301131658;  // std dev = 0.415, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.015198113618457205;  // std dev = 3.235, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.02869011871909371;  // std dev = 1.317, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.023488107340838643;  // std dev = 3.922, 127.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=18 */
%   | | | else return -0.13236350820872755;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 8.837309837341309
Refined model CLL: -0.437307


******************************************
Best model found
******************************************
Results 

CLL : -0.584144 

AUC ROC : 0.845211 

AUC PR : 0.769729 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 54.18046855926514 

Total Inference Time : 1.8857123851776123 

Total revision time: 58.81852626800537
Best scored revision CLL: -0.437307


Results 

CLL : -0.584144 

AUC ROC : 0.845211 

AUC PR : 0.769729 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 58.834516286849976 

Total Inference Time : 1.8857123851776123 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.3581891059875488
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning 1.2570152282714844
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 68.15890884399414
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167598;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832254;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183317;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.21845275277390386;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.103255439591714;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.1338427986047152;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230444561629693;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07214607887745399;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1516426411648917;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06365041165088466;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05392909654600946;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11491273918300655;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6018051085174551;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.37120044610452696;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.33651622469513115;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04719674033084051;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.057426917540537616;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.02641561393003837;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03734350863885395;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.02031281942627286;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08272225624357925;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.021227602999037927;  // std dev = 3.280, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.013709839223130215;  // std dev = 1.430, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.014753647373348883;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning 6.456111431121826
Refined model CLL: -0.667972


******************************************
Best model found
******************************************
Results 

CLL : -0.642282 

AUC ROC : 0.569036 

AUC PR : 0.421283 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 68.15890884399414 

Total Inference Time : 1.3985741138458252 

Total revision time: 71.71069669723511
Best scored revision CLL: -0.667972


Results 

CLL : -0.642282 

AUC ROC : 0.569036 

AUC PR : 0.421283 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 71.72668671607971 

Total Inference Time : 1.3985741138458252 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.1240417957305908
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning 1.3969383239746094
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
5;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
6;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
8;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;;samevenue(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
Model training time 31.428385019302368
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3126391982731987;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24520514513707992;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.32505594174386604;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.39374345118910103;  // std dev = 1.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1557002943717436;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.083737008556944;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5090709220497218;  // std dev = 0.372, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0215624505848723;  // std dev = 3.400, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.007361019998159194;  // std dev = 3.354, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2156917007044908;  // std dev = 13.051, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.002831362065512176;  // std dev = 1.184, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09436009508464531;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012287199930137003;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340948;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.3903355315197552;  // std dev = 0.343, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.02073902346483902;  // std dev = 3.396, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1502065031173282;  // std dev = 13.425, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.2401161385937657;  // std dev = 1.562, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.17470693111661778;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0422968111168113;  // std dev = 2.938, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.06341839112828654;  // std dev = 4.187, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.002305301569527526;  // std dev = 3.136, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.16811435728512006;  // std dev = 2.647, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.10405318909216392;  // std dev = 13.659, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1611441897199718;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.26277221449039523;  // std dev = 0.181, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -9.498202960683683E-4;  // std dev = 1.182, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06759466660348416;  // std dev = 3.105, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.05326458663520406;  // std dev = 4.182, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 1.6452643603623776E-4;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.45366064319832866;  // std dev = 3.33e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.23810685969484702;  // std dev = 2.327, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.28095728058329944;  // std dev = 1.582, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08082551350946682;  // std dev = 3.202, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.08861078221029199;  // std dev = 13.403, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.15890781880770277;  // std dev = 1.559, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.006404539189871132;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04970843230353613;  // std dev = 4.181, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.452651542877342;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2274279071328754;  // std dev = 2.310, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.26434356050402025;  // std dev = 1.606, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07295825086599819;  // std dev = 3.201, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.05888182875149663;  // std dev = 2.844, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.04767003103064571;  // std dev = 3.264, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.07685922450632311;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.011948749695261426;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4319796121284161;  // std dev = 1.284, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.38708573355294085;  // std dev = 0.340, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.269058786489372;  // std dev = 1.008, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.06468465330600386;  // std dev = 3.061, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.0498966161152138;  // std dev = 13.317, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.11332449268001422;  // std dev = 1.562, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.009313944040900716;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03462734938776462;  // std dev = 4.177, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning 7.241063356399536
Refined model CLL: -0.619498


******************************************
Best model found
******************************************
Results 

CLL : -0.706876 

AUC ROC : 0.554372 

AUC PR : 0.403433 

Precision : 0.372275 

Recall : 0.927442 

F1 : 0.53129 

Total Learning Time : 31.428385019302368 

Total Inference Time : 1.143481731414795 

Total revision time: 34.427149057388306
Best scored revision CLL: -0.619498


Results 

CLL : -0.706876 

AUC ROC : 0.554372 

AUC PR : 0.403433 

Precision : 0.372275 

Recall : 0.927442 

F1 : 0.53129 

Total Learning Time : 34.44313907623291 

Total Inference Time : 1.143481731414795 

