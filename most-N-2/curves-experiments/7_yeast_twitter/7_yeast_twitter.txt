Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.199
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.05851773156715445;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.32873717039363;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029793538444691847;  // std dev = 0.268, 53.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00798122688526866;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8109951949088119;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.15324310307852176;  // std dev = 2.334, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5796636858866319;  // std dev = 0.223, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.2834229565777913;  // std dev = 0.228, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3215625039560224;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.028456421118466312;  // std dev = 2.000, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | | | else return 0.14080229095057983;  // std dev = 2.203, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5873109968774272;  // std dev = 0.891, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1255035978819689;  // std dev = 0.050, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1411500068268189;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18288136807878802;  // std dev = 0.213, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.320713951454309;  // std dev = 0.283, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.28489681580526316;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.620285794530911;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09735287394461911;  // std dev = 1.204, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | | else return 0.012657178170324922;  // std dev = 0.302, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019626938914630007;  // std dev = 1.599, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2305520610931231;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5327007937878506;  // std dev = 0.413, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14951770933386194;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1459552441358068;  // std dev = 0.115, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2951569141137061;  // std dev = 0.436, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0770259172661751;  // std dev = 1.028, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024476794475089873;  // std dev = 0.978, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17272447279206457;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.020824775354763944;  // std dev = 0.166, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.002332440192687775;  // std dev = 1.046, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.09192828826342983;  // std dev = 1.067, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17288338750027937;  // std dev = 0.053, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24794162686585075;  // std dev = 1.022, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09586861792313572;  // std dev = 0.050, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2774261856976424;  // std dev = 0.879, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12496930635070724;  // std dev = 0.187, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18441406471744942;  // std dev = 0.348, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.13800756845136009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08643286812920302;  // std dev = 0.031, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09737950923964533;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2737899911841925;  // std dev = 0.554, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.007599230989382802;  // std dev = 0.594, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.15949515103387846;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05068110036110308;  // std dev = 0.904, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.351', 'seconds']
Parameter learned model CLL:-0.118149 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [2.79e-08, 30, 0], 'true,false,false': [0.276, 11, 1], 'false,true,true,true': [0.707, 1, 1], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 8, 0], 'false,false': [0.499, 9, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 47, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.926, 6, 1], 'false,false,false,true': [0.003, 0, 2], 'false,false,false,false': [2.334, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.223, 0, 14], 'true,true,false': [0.228, 2, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.819, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.0, 45, 6], 'false,false,false,false': [2.203, 17, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.891, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.05, 33, 0], 'false,true,false,false': [0.013, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.213, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.283, 0, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.085, 0, 9], 'false,false,true,false': [1.204, 48, 2], 'false,false,false': [0.302, 11, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.599, 34, 18], 'false,true': [0.0, 0, 1], 'false,false,true': [0.413, 0, 12], 'false,false,false,true': [0.107, 9, 0], 'false,false,false,false': [0.115, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.436, 0, 25], 'true,false': [1.028, 42, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.978, 13, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.024, 0, 13], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 29, 6], 'false,false,false,true': [1.046, 19, 4], 'false,false,false,false': [1.067, 8, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.053, 0, 16], 'false,true,true,true': [1.022, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.05, 37, 0], 'false,false,true': [0.879, 1, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.348, 0, 18], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.031, 33, 0], 'true,false,false,true': [0.022, 8, 0], 'true,false,false,false': [0.554, 1, 1], 'false,true': [0.594, 10, 3], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.904, 8, 7]}]
{'': [0.2203708680462237, 0.23543400713436335], 'false': [0.1874999999999999, 0.24913494809688583], 'true': [-2.8047739569477637e-16, 0.023242630385487597], 'false,true': [0.18750000000000006, -6.938893903907228e-18], 'false,true,true': [0.25, 0.0], 'true,false': [2.590520390792032e-17, 0.07638888888888894]}
{'': [1.3664283380001927e-16, 0.13232918780829145], 'false': [0.0716682080865717, 0.19771419763497056], 'false,false': [0.12244897959183669, 0.20851004181155536], 'false,false,false': [5.080782530919592e-06, 0.19456073235982044], 'false,false,true': [nan, 0.12244897959183669], 'false,true': [nan, 0.0716682080865717]}
{'': [0.11227901342919006, 0.12479745563418279], 'false': [nan, 0.12479745563418307], 'false,false': [0.0, 0.1228169582297748], 'false,false,false': [0.07839918074928294, 0.19420456518241416], 'true': [0.08782344478979584, 0.22370690074406027], 'true,false': [nan, 0.22370690074406027], 'true,true': [0.003542137894728586, 0.02598885970481954], 'false,false,true': [nan, 0.0]}
{'': [0.025620524562389887, 0.001539445387646759], 'false': [9.977060270383031e-05, 0.0022698719238453346], 'false,false': [nan, 0.0022698719238453346], 'false,false,false': [nan, 0.0022698719238453346], 'false,true': [nan, 9.977060270382739e-05], 'false,true,false': [7.71770650413669e-05, 3.628969536310644e-05]}
{'': [0.004998755565112298, 0.09100209779629301], 'false': [0.0, 0.09124394335141936], 'false,false': [0.09128437887845169, 0.09107330103178655], 'false,false,true': [0.0008058503774054494, 0.029010389831995834], 'true': [0.004998755565112298, nan], 'false,true': [0.0, nan]}
{'': [0.04916468327541294, 0.1128972124123004], 'false': [0.0, 0.11612695458861916], 'false,false': [0.01424769695322233, 0.0012973074020631449], 'true': [nan, 0.049164683275412936], 'true,false': [nan, 0.04916468327541294], 'false,false,false': [0.0012660337657333129, 0.0013194420734659567]}
{'': [0.050056891583639525, 0.05626159334323914], 'false': [nan, 0.05626159334323913], 'false,false': [nan, 0.05626159334323914], 'false,false,false': [nan, 0.05626159334323914], 'true': [0.007594917776597381, 0.02399458553812186]}
{'': [4.527600310839823e-05, 0.04516051018573698], 'false': [nan, 0.04516051018573697], 'false,false': [0.0275704522693855, 0.059400947253579535], 'false,false,false': [0.047557267445308124, 0.07118631509671859], 'true': [4.527600310839823e-05, nan]}
{'': [0.002789957030656813, 0.04964752857591674], 'false': [0.039591859301696904, 0.06288942777177274], 'false,false': [0.07721558486306107, 0.001752305219184136], 'false,true': [0.14909937545727356, 6.880313389583002e-05], 'false,true,true': [0.14909937545727356, nan], 'false,false,false': [nan, 0.001752305219184136]}
{'': [0.02468234702444446, 0.04132052026057685], 'false': [0.027143170202886722, 0.05172417750913235], 'false,false': [0.0, 0.0544324249082526], 'false,false,false': [nan, 0.05443242490825259], 'true': [0.006464842443194317, 0.01300968169408859], 'true,false': [2.878379782607144e-05, 0.0527728274052444], 'true,false,false': [6.007607291634229e-05, 0.15341039429865158], 'true,true': [0.006710654941142246, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.735
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.6081489350995123;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.002573247947267072;  // std dev = 0.303, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | | else return -0.01982988218597316;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.1842553658468876;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14907796748644578;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.41787244556146597;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1362553669804968;  // std dev = 2.303, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.6875915155804201;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.7457173377193764;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13227643374319045;  // std dev = 0.071, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.056649955336485404;  // std dev = 0.815, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.35306183670334984;  // std dev = 1.841, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then return 0.41751358415830986;  // std dev = 1.18e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.5004710972531301;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5843071090982638;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.5232248401082525;  // std dev = 0.259, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6442216610121209;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6664329926767638;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.11853931458485423;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( tweets(A, J) )
%   | | then return -0.13498611100816105;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.3123666955945188;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3072522918872113;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3950291738973832;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2981310346378506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.48942120961298335;  // std dev = 0.207, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08979598890862997;  // std dev = 0.984, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.11243382033871221;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.06079184940491995;  // std dev = 1.005, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2538479126947959;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.31031980699347095;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return -0.08081774535778202;  // std dev = 0.150, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | else return -0.02253097085385014;  // std dev = 0.198, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.23969640835384287;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.35787084868300006;  // std dev = 0.151, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5182334850754149;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.15458039203344764;  // std dev = 0.287, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.14111047859622305;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.15474366961657438;  // std dev = 0.912, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12677807217327208;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(C, F), follows(F, D) )
%   | | | then return 0.3361651725602789;  // std dev = 0.183, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4081973193778578;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(C, G) )
%   | | then return -0.0878791277137617;  // std dev = 0.003, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08796203676041507;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.21264357418290844;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, I), follows(J, A) )
%   | then return -0.13401633747921515;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.002941079462890123;  // std dev = 0.245, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18759843661696696;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.23075923563670667;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08196708813410983;  // std dev = 0.032, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.054340689020114685;  // std dev = 0.365, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.018244785543513487;  // std dev = 0.462, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.09492769912536339;  // std dev = 0.651, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04570680645402186;  // std dev = 0.491, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.012446046433098564;  // std dev = 0.669, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.15747010859406976;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.20028300954838904;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.15975726951182803;  // std dev = 0.858, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2516381761621132;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07684951104819586;  // std dev = 0.006, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23202876743381334;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.348177108242707;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14087711585472706;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.16157809153207636;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1574693529771649;  // std dev = 0.046, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.06944323648132805;  // std dev = 0.003, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.08606972975846199;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03687817344128617;  // std dev = 0.305, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then return -0.00999436942660405;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.10841043325543209;  // std dev = 0.309, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.267772316872088;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07912454696290173;  // std dev = 0.557, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return -0.05140906812303386;  // std dev = 0.455, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.692', 'seconds']
Refined model CLL: -0.113286


******************************************
Best model found
******************************************
Results 

CLL : -0.107253 

AUC ROC : 0.99318 

AUC PR : 0.386164 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 6.735 

Total Inference Time : 7.300904989242554 

Total revision time: 17.961428388595582
Best scored revision CLL: -0.113286


Results 

CLL : -0.107253 

AUC ROC : 0.99318 

AUC PR : 0.386164 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 19.460527166366578 

Total Inference Time : 7.300904989242554 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.625
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.23745927992709853;  // std dev = 0.485, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7285535959162082;  // std dev = 0.135, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.016508951965466638;  // std dev = 0.284, 78.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08815014721646235;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7809187655900448;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1273502668099255;  // std dev = 3.175, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5800678276873159;  // std dev = 0.315, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.62152059143571;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6548350647262702;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5590005904340114;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.035275503427906106;  // std dev = 2.811, 110.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=12 */
%   | | | else return 0.06281544353966974;  // std dev = 2.812, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5460434286569474;  // std dev = 1.609, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12175231753231047;  // std dev = 0.051, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.13152310562760774;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16366823901584546;  // std dev = 0.215, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26460649087509963;  // std dev = 1.338, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2891637345764772;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4753469731976523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6545159310866274;  // std dev = 0.155, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09915833498454377;  // std dev = 1.444, 118.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=3 */
%   | | else return 0.057513545926570736;  // std dev = 0.334, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037591095993762;  // std dev = 2.129, 103.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2652216940718378;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49383524330042516;  // std dev = 1.219, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12424900940045591;  // std dev = 0.147, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.13849234173452027;  // std dev = 0.166, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27945897260790153;  // std dev = 1.068, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else return -0.07971236322404178;  // std dev = 1.247, 97.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02308947717285515;  // std dev = 1.329, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15443695246344488;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( follows(A, E) )
%   | | then return 0.24624882927977254;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.01836500352419239;  // std dev = 0.171, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013544738149162084;  // std dev = 1.417, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0.06655305123810282;  // std dev = 1.470, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18230410157660826;  // std dev = 0.054, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2531035074292017;  // std dev = 1.082, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0967848617756407;  // std dev = 0.059, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4135686839733966;  // std dev = 0.385, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12803822163274342;  // std dev = 0.173, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16146271081350327;  // std dev = 0.968, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else return -0.1131273987499329;  // std dev = 0.609, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08675738333501043;  // std dev = 0.024, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09924921607056575;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.030211174366182886;  // std dev = 0.744, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01293013655036676;  // std dev = 0.922, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.3227002566965001;  // std dev = 0.680, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005016746829867541;  // std dev = 1.230, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.205', 'seconds']
Parameter learned model CLL:-0.115819 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [7.6e-08, 78, 0], 'true,false,false': [0.314, 16, 2], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [0.0, 16, 0], 'false,false': [0.485, 18, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.135, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.284, 68, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.056, 0, 3], 'false,false,false,false': [3.175, 38, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.315, 0, 32], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.079, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.136, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.811, 98, 12], 'false,false,false,false': [2.812, 35, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.609, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.051, 72, 0], 'false,true,false,false': [0.007, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.215, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.338, 2, 35], 'true,false': [0.0, 0, 0], 'false,true,true': [0.016, 0, 3], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.155, 0, 14], 'false,false,true,false': [1.444, 115, 3], 'false,false,false': [0.334, 17, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.129, 65, 38], 'false,true': [0.111, 0, 4], 'false,false,true': [1.219, 1, 20], 'false,false,false,true': [0.147, 37, 0], 'false,false,false,false': [0.166, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.068, 1, 51], 'true,false': [1.247, 94, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.329, 23, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.984, 1, 31], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.171, 48, 10], 'false,false,false,true': [1.417, 32, 9], 'false,false,false,false': [1.47, 18, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.054, 0, 35], 'false,true,true,true': [1.082, 1, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.059, 81, 0], 'false,false,true': [0.385, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.173, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.968, 1, 39], 'true,true,false': [0.609, 1, 2], 'true,false,true': [0.024, 71, 0], 'true,false,false,true': [0.013, 13, 0], 'true,false,false,false': [0.744, 7, 2], 'false,true': [0.922, 22, 8], 'false,false,true': [0.68, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.23, 22, 10]}]
{'': [0.21450325561856862, 0.22805212620027385], 'false': [0.2176000000000001, 0.23543400713436335], 'false,true': [0.09876543209876527, -6.938893903907228e-18], 'true': [0.023242630385488926, 0.020399305555555566], 'false,true,true': [0.15999999999999986, 0.0], 'true,false': [7.401486830834377e-17, 0.09876543209876548]}
{'': [0.0005731578095102829, 0.1287990008512604], 'false': [0.08069548988716367, 0.17106181330255374], 'false,false': [0.0475, 0.19819621518045472], 'false,false,false': [0.0010487678773337301, 0.1866671783734398], 'false,true': [nan, 0.08069548988716367], 'false,false,true': [nan, 0.0475]}
{'': [0.0031535095065685476, 0.11010244364929259], 'false': [nan, 0.11010244364929238], 'false,false': [0.006888184847155199, 0.10334648907292017], 'false,false,false': [0.07183756379926165, 0.17190929262341878], 'false,false,true': [0.009184246462873635, 0.0], 'true': [0.003106799398409299, 0.0020807046055184575], 'true,true': [0.003106799398409299, nan], 'true,false': [nan, 0.0020807046055184575]}
{'': [0.041115667756217694, 0.0007418259731058773], 'false': [4.376061779231344e-05, 0.0010710021279279297], 'false,false': [nan, 0.0010710021279279297], 'false,false,false': [nan, 0.0010710021279279297], 'false,true': [nan, 4.37606177923211e-05], 'false,true,false': [3.572798569344745e-05, 3.309003588599276e-06]}
{'': [0.048399142446181244, 0.07788781720581447], 'false': [0.006563302996334272, 0.07675929645831767], 'false,false': [0.06984299494949657, 0.11143810825680116], 'false,false,true': [0.001727041883444334, 0.01767948362180173], 'true': [0.048399142446181244, nan], 'false,true': [8.502107591170278e-05, 0.0]}
{'': [0.044025758063867514, 0.089125418591454], 'false': [0.003061811792324301, 0.09055876168244403], 'false,false': [0.07078875531515501, 0.0008182928924753002], 'true': [nan, 0.0440257580638675], 'true,false': [nan, 0.044025758063867514], 'false,false,false': [0.0005851978889938678, 0.0010204337054274815]}
{'': [0.04739154620974439, 0.05697115203871336], 'false': [nan, 0.056971152038713335], 'false,false': [nan, 0.05697115203871336], 'false,false,false': [nan, 0.05697115203871336], 'true': [0.02192706958068058, 0.01602105872425395]}
{'': [0.029593904399806473, 0.04684879124267867], 'false': [nan, 0.046848791242678656], 'false,false': [0.029101817550145934, 0.06023845226659597], 'false,false,false': [0.04899856819386778, 0.07448353525906368], 'true': [0.030263276920647803, 0.0], 'true,false': [0.0, nan]}
{'': [0.0028819805401846983, 0.043505843407710694], 'false': [0.02638106301710684, 0.06964617970280053], 'false,false': [0.009245904305860558, 0.0009607570254982704], 'false,true': [0.09753722020465912, 4.303966110030947e-05], 'false,true,true': [0.09753722020465912, nan], 'false,false,false': [nan, 0.0009607570254982704]}
{'': [0.026507189353433786, 0.04749806290838396], 'false': [0.028352480092580658, 0.06404465723412871], 'false,false': [0.23113479033524287, 0.04728396895058545], 'false,false,false': [nan, 0.04728396895058542], 'true': [0.03529846327913139, 0.007210433724644417], 'true,true': [0.0234110783463163, 0.12365764693831571], 'true,false': [8.096878172562528e-06, 0.02920400680954163], 'true,false,false': [1.2464605517773166e-05, 0.061465935725615733]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.856
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724011766669563;  // std dev = 0.143, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05618906059893681;  // std dev = 1.810, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return -0.08097526743684687;  // std dev = 0.822, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.031367421553086035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.13529924511358063;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7451706938182211;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17325990149519072;  // std dev = 2.825, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5542454804539326;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5815972816142497;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6551236280136217;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5542454804539326;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7499824188535619;  // std dev = 0.120, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12071901312289038;  // std dev = 0.063, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05649728816413785;  // std dev = 2.054, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.3033387577781713;  // std dev = 1.731, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.42359568670639547;  // std dev = 0.093, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.08334938831015541;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4323570946329214;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4606249132309104;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.5627138069051342;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6705215782286147;  // std dev = 0.195, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10836470408370553;  // std dev = 0.038, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.10493592844134869;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.16987716002404013;  // std dev = 0.192, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3254223283587247;  // std dev = 0.022, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3596926399982183;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1799977410062148;  // std dev = 0.334, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.05536580020401197;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5037834865963433;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.47648364828263107;  // std dev = 0.180, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09360959140654217;  // std dev = 1.091, 105.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.034974345976027076;  // std dev = 0.985, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.017202465280752106;  // std dev = 1.017, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.26190421459028124;  // std dev = 0.014, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.05452491701987361;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05652324674809116;  // std dev = 0.110, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | else return -0.006703504186544179;  // std dev = 0.362, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3140747685605207;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.283838510455954;  // std dev = 0.946, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5123991455094957;  // std dev = 0.238, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11866975742271646;  // std dev = 0.043, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.1149574534033226;  // std dev = 0.146, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22123820555444093;  // std dev = 0.025, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.08499133299590987;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.11747316468703199;  // std dev = 0.694, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2996049102613849;  // std dev = 0.117, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07179602958084012;  // std dev = 0.576, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return -0.10965691069862994;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.018366602556444466;  // std dev = 1.113, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19593220507035003;  // std dev = 0.587, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.0196736473666967;  // std dev = 0.908, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.1814501329767135;  // std dev = 0.026, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.2023481957329544;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3055322000685954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.19199234819555702;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.31831051347011946;  // std dev = 0.249, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.08804458755022787;  // std dev = 0.014, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.08190553047220452;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.024308323730791823;  // std dev = 0.684, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.10295730751914312;  // std dev = 0.225, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15786425942342935;  // std dev = 0.022, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(E, A) )
%   | | then return -0.03081465184812786;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.10320502550421162;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.20271467236086943;  // std dev = 0.069, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.27196816980434124;  // std dev = 0.204, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07397734571281306;  // std dev = 0.003, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.26632989397441775;  // std dev = 0.043, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.35366032747074644;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11563556671730463;  // std dev = 0.029, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.12407529515201063;  // std dev = 0.146, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07096554688518256;  // std dev = 0.743, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.061678770400212454;  // std dev = 0.052, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then return -0.0014736181195436292;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.09456860161838423;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2053633962650278;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0928296685756679;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04848175992019119;  // std dev = 0.493, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.021015922344396636;  // std dev = 0.736, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.507', 'seconds']
Refined model CLL: -0.102709


******************************************
Best model found
******************************************
Results 

CLL : -0.101273 

AUC ROC : 0.993017 

AUC PR : 0.372533 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 5.856 

Total Inference Time : 6.18053674697876 

Total revision time: 18.097610288619997
Best scored revision CLL: -0.102709


Results 

CLL : -0.101273 

AUC ROC : 0.993017 

AUC PR : 0.372533 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 19.596709066390993 

Total Inference Time : 6.18053674697876 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.884
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.06868033319317068;  // std dev = 0.260, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.27119241336038186;  // std dev = 0.492, 46.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7258574163394037;  // std dev = 0.203, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.012208198738582284;  // std dev = 0.288, 97.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09665745579768457;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4202595357793604;  // std dev = 1.218, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.14381731401117284;  // std dev = 4.161, 91.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5710347193205496;  // std dev = 0.319, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7581975528571268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.47725523587025886;  // std dev = 0.958, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.594671073344754;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5537894534666609;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0036229871762809627;  // std dev = 3.538, 133.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=21 */
%   | | | else return 0.08584143001696665;  // std dev = 3.522, 68.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5351684442679704;  // std dev = 2.463, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12474385675595798;  // std dev = 0.039, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.13333400752561542;  // std dev = 0.003, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17004674289046778;  // std dev = 0.270, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2604781007169572;  // std dev = 1.640, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | else return 0.46243514818790166;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.19126812622623332;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5032458042153176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6221010372026257;  // std dev = 0.253, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10572419666862252;  // std dev = 1.640, 168.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=4 */
%   | | else return 0.04167545371654645;  // std dev = 0.319, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026271103810939216;  // std dev = 2.389, 143.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27353189949399276;  // std dev = 0.146, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4750747975683089;  // std dev = 1.639, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13259307456487154;  // std dev = 0.203, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.1403957551520609;  // std dev = 0.234, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2771904879445442;  // std dev = 1.556, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else return -0.0892979840196977;  // std dev = 1.466, 144.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037121811655293845;  // std dev = 1.719, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18940499746042294;  // std dev = 0.063, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E) )
%   | | then return 0.24947776832323265;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04059167402691857;  // std dev = 0.151, 105.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006533995019551685;  // std dev = 1.779, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.02670793197727681;  // std dev = 2.138, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12295558147686131;  // std dev = 0.244, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2939410642762109;  // std dev = 0.674, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09549998370855463;  // std dev = 0.060, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3917105204081335;  // std dev = 0.631, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11907761402927551;  // std dev = 0.266, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15116916064487468;  // std dev = 1.438, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else return 0.0075011875542956435;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08546990759208353;  // std dev = 0.021, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0929924116610722;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.04108507470701323;  // std dev = 0.772, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.014694657216988127;  // std dev = 1.061, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25611068696686234;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03474236880916726;  // std dev = 1.670, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.855', 'seconds']
Parameter learned model CLL:-0.114739 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 57], 'true,false,true': [8.43e-08, 107, 0], 'true,false,false': [0.26, 38, 3], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [2.58e-08, 29, 0], 'false,false': [0.492, 27, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.203, 0, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.288, 84, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [1.218, 2, 4], 'false,false,false,false': [4.161, 62, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.319, 0, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.958, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 5], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [3.538, 112, 21], 'false,false,false,false': [3.522, 50, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.463, 3, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 100, 0], 'false,true,false,false': [0.003, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.27, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.64, 3, 43], 'true,false': [0.0, 0, 1], 'false,true,true': [0.945, 1, 9], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.253, 0, 26], 'false,false,true,false': [1.64, 164, 4], 'false,false,false': [0.319, 31, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.389, 95, 48], 'false,true': [0.146, 0, 11], 'false,false,true': [1.639, 2, 34], 'false,false,false,true': [0.203, 47, 0], 'false,false,false,false': [0.234, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.556, 2, 74], 'true,false': [1.466, 139, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.719, 33, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.063, 0, 44], 'true,false,true': [0.016, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 92, 13], 'false,false,false,true': [1.779, 49, 15], 'false,false,false,false': [2.138, 45, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.244, 3, 44], 'false,true,true,true': [0.674, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.06, 114, 0], 'false,false,true': [0.631, 0, 29], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.266, 68, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.438, 2, 50], 'true,true,false': [0.933, 1, 7], 'true,false,true': [0.021, 116, 0], 'true,false,false,true': [0.028, 18, 0], 'true,false,false,false': [0.772, 7, 3], 'false,true': [1.061, 31, 14], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.67, 30, 17]}]
{'': [0.20701963117192188, 0.23330387577326242], 'false': [0.21957815035154085, 0.24243856332703168], 'false,true': [-2.5376526277146434e-16, 2.2970131543968756e-17], 'true': [-3.739698609263685e-16, 0.01985938641344036], 'true,false': [6.640586315514955e-17, 0.06781677572873274], 'false,true,true': [-8.881784197001253e-17, 0.0]}
{'': [0.0008966211916642602, 0.1374470226470671], 'false': [0.08285302068359787, 0.17414118631180092], 'false,false': [0.03566529492455413, 0.19824003913038976], 'false,false,false': [0.24729680150192113, 0.1902784983374585], 'false,true': [nan, 0.08285302068359787], 'false,false,true': [nan, 0.03566529492455413]}
{'': [0.024372207501281315, 0.13301349101623014], 'false': [nan, 0.1330134910162301], 'false,false': [0.0037604403986780887, 0.12548080413286147], 'false,false,false': [0.0940923251737619, 0.18240002585821752], 'true': [0.0026022429507488, 0.16396611248049486], 'true,false': [0.0, 0.18360457073093545], 'false,false,true': [0.006685227375427649, 4.4408920985006264e-17], 'true,true': [0.0026022429507488, nan]}
{'': [0.06318756323332471, 0.0008401984889343712], 'false': [2.3367506649033296e-05, 0.001217809877883421], 'false,false': [nan, 0.001217809877883421], 'false,false,false': [nan, 0.001217809877883421], 'false,true': [nan, 2.3367506649033296e-05], 'false,true,false': [1.5121015331653886e-05, 3.6738575929431216e-07]}
{'': [0.05808131211988795, 0.0829808291078503], 'false': [0.08926479164907969, 0.08052641202520774], 'false,true': [0.08934308249003667, 0.0], 'false,false': [0.07567734006322445, 0.10198367758480487], 'false,false,true': [0.002465153561373471, 0.016013112716833235], 'true': [0.05847614829683913, 0.0]}
{'': [0.03990588429736054, 0.09350518516892983], 'false': [0.0019327483141385075, 0.09681337227325215], 'false,false': [0.07460451716815969, 0.0010478574237552589], 'true': [nan, 0.039905884297360576], 'true,false': [nan, 0.03990588429736054], 'false,false,false': [0.0008806624326366607, 0.0011879188547847747]}
{'': [0.051140181609658275, 0.06288083859532105], 'false': [nan, 0.06288083859532104], 'false,false': [nan, 0.06288083859532105], 'false,false,false': [nan, 0.06288083859532105], 'true': [0.031855514130130026, 0.014918887801350493]}
{'': [0.00024309493128080536, 0.044203373475723416], 'false': [nan, 0.04420337347572356], 'false,false': [0.022650901933888464, 0.060725735696595076], 'false,false,false': [0.049451607995340326, 0.07144735054261847], 'true': [9.125023220004939e-05, 0.00013184215536299337], 'true,false': [0.00013184215536299337, nan]}
{'': [0.05956136418647801, 0.03936705001454803], 'false': [0.02267007989766732, 0.05950819955706003], 'false,false': [0.013711001310173937, 0.001036975878511083], 'false,true': [0.022681174730298282, 3.166629319435805e-05], 'false,true,true': [0.022681174730298282, nan], 'false,false,false': [nan, 0.001036975878511083]}
{'': [0.027909855475296796, 0.04287587567716512], 'false': [0.025029346365157825, 0.05886062693359788], 'false,false': [0.0, 0.05936517396130082], 'false,false,false': [nan, 0.05936517396130077], 'true': [0.05137704418693064, 0.00520630729928736], 'true,true': [0.03977688001420048, 0.10888968968331526], 'true,false': [3.90059227789165e-06, 0.02544679142382727], 'true,false,false': [4.414966551976996e-05, 0.05961505007756236]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.65
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8409075557891676;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.038402789038418816;  // std dev = 0.305, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.15226658215833588;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7297605306931322;  // std dev = 0.193, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, E) )
%   | | then return 0.722940060545466;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1028799398878536;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return 0.722940060545466;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.43621327322118697;  // std dev = 0.879, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1287867430164355;  // std dev = 0.058, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.09259872940434317;  // std dev = 2.058, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.24527454265190227;  // std dev = 3.124, 49.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5572555528019768;  // std dev = 0.003, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(E, A) )
%   | | then return 0.7518758997836713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5960415929253001;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5873859445877387;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5025722379533728;  // std dev = 0.947, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.11419307758836969;  // std dev = 0.049, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08034938339659976;  // std dev = 2.465, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.14475837606099512;  // std dev = 2.978, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.28831113669500746;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.37584625750040834;  // std dev = 0.967, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( tweets(D, G), recursion_accounttype(D, B) )
%   | | | then return 0.42481964892808105;  // std dev = 0.147, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5417612410669603;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6300237757221455;  // std dev = 0.274, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6561446942025237;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.6065980462733969;  // std dev = 0.217, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7766776610194153;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12742611946961124;  // std dev = 0.036, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3372912696643677;  // std dev = 0.086, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.43210757931139476;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.30570849952335377;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.34435302938529455;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4706779062268531;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37333456357294137;  // std dev = 1.541, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return -0.08798377103459085;  // std dev = 1.396, 150.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09896224654240289;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.23446256866857926;  // std dev = 1.495, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.27370897144539574;  // std dev = 0.039, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.05161177097527554;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.25161177097527554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.062262783137367064;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.06029403859293551;  // std dev = 0.116, 110.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2753303067037145;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.05233154515233109;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.46632839351054317;  // std dev = 0.432, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.13480482569187918;  // std dev = 0.049, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(D, A), follows(F, D) )
%   | | | then return 0.2215776726349869;  // std dev = 0.074, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2835256382435603;  // std dev = 0.188, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.43255896995024584;  // std dev = 0.266, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return -0.07894611494437781;  // std dev = 0.008, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.11815650657175437;  // std dev = 0.016, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.22184531567268997;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.07998316444168824;  // std dev = 1.18e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.031986416915755225;  // std dev = 0.751, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.009777370271853617;  // std dev = 1.227, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.15173083587184863;  // std dev = 0.979, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.1655386310703193;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19300569943508322;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.2306467409079634;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.056846950177203835;  // std dev = 0.379, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return -0.0735509693375077;  // std dev = 0.007, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19397176529438553;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03955474591797182;  // std dev = 1.131, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | | else return 0.06881477325264947;  // std dev = 1.502, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1644253413327842;  // std dev = 0.051, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.17872940462407347;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.20497707538626705;  // std dev = 0.224, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.008147761202146145;  // std dev = 0.845, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.0685299805056344;  // std dev = 0.006, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24315610707566992;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3716846278243892;  // std dev = 0.203, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.1120948910475438;  // std dev = 0.130, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.1978150585035571;  // std dev = 0.094, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1493733635954546;  // std dev = 0.020, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.008950419042554761;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.05794976043624477;  // std dev = 0.044, 132.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return -0.0025551886214099655;  // std dev = 0.741, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return -0.025683186348016175;  // std dev = 0.300, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.01895794505473604;  // std dev = 0.188, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14363313949008982;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0101870521079822;  // std dev = 1.053, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0.14130561878820336;  // std dev = 0.842, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.658', 'seconds']
Refined model CLL: -0.105739


******************************************
Best model found
******************************************
Results 

CLL : -0.101645 

AUC ROC : 0.992738 

AUC PR : 0.351276 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 25.65 

Total Inference Time : 13.096689462661743 

Total revision time: 47.73735078239441
Best scored revision CLL: -0.105739


Results 

CLL : -0.101645 

AUC ROC : 0.992738 

AUC PR : 0.351276 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 49.236449560165404 

Total Inference Time : 13.096689462661743 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.05489454316135731;  // std dev = 0.282, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.12957750652808375;  // std dev = 0.445, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7091901467812574;  // std dev = 1.017, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01825354253907119;  // std dev = 0.281, 134.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.046087599572188914;  // std dev = 1.574, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5935263222650874;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.14159247252486673;  // std dev = 4.352, 102.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5723988670870124;  // std dev = 0.353, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.814364038709477;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4993920522369874;  // std dev = 0.844, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5913744580627088;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5579042630773304;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03102601445996336;  // std dev = 4.066, 224.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=26 */
%   | | | else return 0.060359710745936455;  // std dev = 3.725, 85.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5246177622498176;  // std dev = 2.768, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12219409751708658;  // std dev = 0.062, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.13172812777503398;  // std dev = 0.019, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16140302285272112;  // std dev = 0.219, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.308046099294297;  // std dev = 1.162, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.451830507829304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29697125602488056;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5074274976003947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6047127893493575;  // std dev = 1.059, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.10219931880569981;  // std dev = 1.655, 211.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=4 */
%   | | else return 0.0315087012237407;  // std dev = 0.329, 48.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035500546736028794;  // std dev = 2.710, 200.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=70 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25576593530753705;  // std dev = 0.166, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.550059430460174;  // std dev = 0.841, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12413219223365864;  // std dev = 0.151, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.13590001149106332;  // std dev = 0.175, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24588386352917552;  // std dev = 2.380, 104.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=99 */
%   | else return -0.08897588697581549;  // std dev = 1.554, 213.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010327802867724974;  // std dev = 1.996, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15964233700441782;  // std dev = 1.394, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.2570497871737101;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040327846657169736;  // std dev = 0.151, 146.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007614172190745522;  // std dev = 1.791, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | | | else return 0.07686780966756766;  // std dev = 2.157, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1581634989747841;  // std dev = 0.166, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.295119582761568;  // std dev = 0.781, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09343891773999104;  // std dev = 0.087, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40222676254465106;  // std dev = 0.694, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1167590339707921;  // std dev = 0.265, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18653745457362148;  // std dev = 0.662, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.15123533608083803;  // std dev = 0.223, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08423119670295334;  // std dev = 0.029, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09467545227118297;  // std dev = 0.030, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.02512152102070027;  // std dev = 0.882, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.01151464711610433;  // std dev = 1.471, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21650783167112642;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05907545838452665;  // std dev = 1.656, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.294', 'seconds']
Parameter learned model CLL:-0.113046 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 84], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.282, 42, 4], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [3.16e-08, 33, 0], 'false,false': [0.445, 51, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 117, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.574, 29, 3], 'false,false,false,true': [0.967, 1, 5], 'false,false,false,false': [4.352, 71, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.353, 0, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.844, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [2.11e-08, 0, 9], 'false,false,false,true': [4.066, 198, 26], 'false,false,false,false': [3.725, 66, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.768, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 152, 0], 'false,true,false,false': [0.019, 43, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.219, 80, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.162, 1, 63], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.059, 1, 31], 'false,false,true,false': [1.655, 207, 4], 'false,false,false': [0.329, 38, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.71, 130, 70], 'false,true': [0.166, 0, 15], 'false,false,true': [0.841, 0, 39], 'false,false,false,true': [0.151, 59, 0], 'false,false,false,false': [0.175, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.38, 5, 99], 'true,false': [1.554, 207, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.996, 54, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.394, 2, 66], 'true,false,true': [0.023, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 129, 17], 'false,false,false,true': [1.791, 72, 19], 'false,false,false,false': [2.157, 37, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.166, 2, 64], 'false,true,true,true': [0.781, 0, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.087, 155, 0], 'false,false,true': [0.694, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.662, 0, 72], 'true,true,false': [0.223, 0, 12], 'true,false,true': [0.029, 132, 0], 'true,false,false,true': [0.03, 29, 0], 'true,false,false,false': [0.882, 12, 4], 'false,true': [1.471, 47, 17], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.656, 28, 17]}]
{'': [0.21843846019670288, 0.209002117341713], 'true': [-4.2294210461910723e-16, 0.020716105372189923], 'false': [0.2222222222222217, 0.1977551020408158], 'false,true': [0.05246913580246885, 3.027880976250427e-17], 'false,true,true': [-2.7328566760003855e-16, 0.15999999999999986], 'true,false': [-9.006004955001269e-17, 0.07939508506616241]}
{'': [0.014998340859655766, 0.1332066288769605], 'false': [0.07907776082051811, 0.17592807464018334], 'false,false': [0.07737366654072352, 0.19478000391097286], 'false,false,false': [0.15577824898579765, 0.18572732453664503], 'false,true': [nan, 0.07907776082051811], 'false,false,true': [nan, 0.07737366654072352]}
{'': [0.015256442376618214, 0.1102738831907714], 'false': [nan, 0.11027388319077007], 'false,false': [0.0025093688532846175, 0.10008217851412164], 'false,false,false': [0.07381690997229857, 0.1632448325671675], 'true': [0.0021849728721341265, 0.10836180851095095], 'true,false': [0.0030956544464517677, 0.11864868846684411], 'false,false,true': [0.00560126976179635, 4.9343245538895844e-17], 'true,true': [0.0021849728721341265, nan]}
{'': [0.0598635042378271, 0.0004854198415807948], 'false': [3.747173251543182e-05, 0.0006009489134099876], 'false,false': [nan, 0.0006009489134099876], 'false,false,false': [nan, 0.0006009489134099876], 'false,true': [nan, 3.7471732515438654e-05], 'false,true,false': [2.5665748245272036e-05, 8.35089663543837e-06]}
{'': [0.021078634910895455, 0.07994237634595884], 'false': [0.002766358410499488, 0.079105529399646], 'false,false': [0.0730345625697717, 0.10846219988975725], 'false,false,true': [0.035050884638241686, 0.012987748685441036], 'true': [0.021089927717720294, 0.0], 'false,true': [1.1166798614839887e-05, 0.0]}
{'': [0.03671083004595005, 0.08573985434381903], 'false': [0.0018404456724245917, 0.08932260655959437], 'false,false': [0.018144612502610586, 0.000469656226637944], 'true': [nan, 0.03671083004595002], 'true,false': [nan, 0.03671083004595005], 'false,false,false': [0.00038706663010789423, 0.0004793673919600769]}
{'': [0.05019709456714818, 0.05455233231115766], 'false': [nan, 0.05455233231115763], 'false,false': [nan, 0.05455233231115766], 'false,false,false': [nan, 0.05455233231115766], 'true': [0.054449236125966714, 0.011333456912578326]}
{'': [0.028035512984472842, 0.03998088514687432], 'false': [nan, 0.039980885146874354], 'false,false': [0.022809530954390422, 0.05480585188632754], 'false,false,false': [0.0352449700575375, 0.0816462113923997], 'true': [0.028581495829399117, 0.00025497666130967767], 'true,false': [0.00025497666130967767, nan]}
{'': [0.027600266848827132, 0.037454508725849135], 'false': [0.023398722785059712, 0.05816528116951543], 'false,false': [0.015536736933075503, 0.0008435052352274908], 'false,true': [0.021018955946211924, 4.8569804329143174e-05], 'false,true,true': [0.021018955946211924, nan], 'false,false,false': [nan, 0.0008435052352274908]}
{'': [0.020079544905808086, 0.04607398297076473], 'false': [0.03379985269967715, 0.05934342880224037], 'false,false': [0.0, 0.06092623571152258], 'false,false,false': [nan, 0.06092623571152263], 'true': [0.005957619312573262, 0.005432962223219693], 'true,true': [0.006079526217332789, 0.004157972538234411], 'true,false': [6.567277528317919e-06, 0.020579539545615443], 'true,false,false': [3.0692525236575285e-05, 0.04857569967034126]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.934
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8432235619651843;  // std dev = 0.121, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11886255915336164;  // std dev = 0.150, 174.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.15226658215833588;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7268740365131258;  // std dev = 0.208, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5240103694872648;  // std dev = 1.181, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.7564318469150955;  // std dev = 0.131, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1279884594428229;  // std dev = 9.66e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11113241567862535;  // std dev = 2.683, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return 0.18880688019472902;  // std dev = 2.948, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.563540865022437;  // std dev = 0.154, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, E) )
%   | | then return 0.6713240223243405;  // std dev = 0.208, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2905132317661758;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5922025657983792;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5572237747055936;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5265743640439231;  // std dev = 1.004, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.11437095524149285;  // std dev = 3.65e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.04329504371511041;  // std dev = 2.335, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.13372280705980816;  // std dev = 3.271, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), tweets(D, G) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.4272036959290301;  // std dev = 0.185, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.5792008426593465;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.4188925167016566;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.07188067786453253;  // std dev = 1.026, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.494368959449957;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.666050271145262;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7355907051500775;  // std dev = 0.183, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10328721862305568;  // std dev = 7.90e-09, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return -0.16036550891340315;  // std dev = 0.186, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2995955276873331;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.4114704038162715;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.05426265946878079;  // std dev = 0.469, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.5065735064469341;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.33791133536524337;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0905649056896796;  // std dev = 0.434, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | | else return -0.0028306871794148364;  // std dev = 1.511, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.033533041610578046;  // std dev = 2.408, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return 0.1256920162989661;  // std dev = 1.949, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2249677564895702;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.25722582100569946;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2665633059031459;  // std dev = 0.016, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then return -0.043226483910987344;  // std dev = 0.132, 112.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | | else return -0.06619381431052608;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27672631522726204;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.02306755643333982;  // std dev = 1.493, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.5094348270692155;  // std dev = 0.285, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.1273238067187321;  // std dev = 0.031, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(C, D), tweets(E, D) )
%   | | | then return 0.13663150239565358;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.21663150239565368;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.21120728749346135;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2187073157874922;  // std dev = 0.034, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3348663880663628;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.08413354542145306;  // std dev = 0.045, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17051179492065907;  // std dev = 0.949, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.03208119725200255;  // std dev = 1.928, 70.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=22 */
%   | | | else return 0.013933098673135276;  // std dev = 1.493, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18483108627145586;  // std dev = 0.090, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.07634576592911613;  // std dev = 0.302, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2814371608974817;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2657212363721289;  // std dev = 0.050, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07761497159663738;  // std dev = 0.046, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.35347824892481505;  // std dev = 0.179, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.12833737717660335;  // std dev = 0.082, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0519496214442944;  // std dev = 0.730, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07185707147804571;  // std dev = 1.178, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.11601497791781601;  // std dev = 0.973, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.15543308349259757;  // std dev = 0.039, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.24886681930083068;  // std dev = 1.096, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.24370650457915546;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2005828904924888;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07257709210695124;  // std dev = 0.042, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2870817261895618;  // std dev = 0.089, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.403163113626418;  // std dev = 0.215, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1318186202776635;  // std dev = 0.033, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12534964571596227;  // std dev = 0.134, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.1675751628967118;  // std dev = 0.035, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.061180722213135655;  // std dev = 0.043, 169.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2311986118339669;  // std dev = 0.119, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09420899971287965;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.08361594771190428;  // std dev = 0.183, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.10091920170181852;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02445430084269057;  // std dev = 0.899, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.010330463153226653;  // std dev = 1.088, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.454', 'seconds']
Refined model CLL: -0.104333


******************************************
Best model found
******************************************
Results 

CLL : -0.101536 

AUC ROC : 0.991768 

AUC PR : 0.317016 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 25.934 

Total Inference Time : 11.691339492797852 

Total revision time: 48.1719831943512
Best scored revision CLL: -0.104333


Results 

CLL : -0.101536 

AUC ROC : 0.991768 

AUC PR : 0.317016 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 49.671081972122195 

Total Inference Time : 11.691339492797852 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.62
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else return -0.07935106490048771;  // std dev = 0.242, 64.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.1568502338008104;  // std dev = 0.458, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6906221599906752;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030798236259239557;  // std dev = 0.267, 170.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.058309228481383625;  // std dev = 1.784, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490958269337267;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.06681265935898605;  // std dev = 5.153, 178.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5769644420051633;  // std dev = 0.350, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7351432821584026;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5884616327198182;  // std dev = 0.198, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.598436706028597;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5648213166725845;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016776346057389247;  // std dev = 4.613, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.06841254490757087;  // std dev = 4.099, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5289185345096749;  // std dev = 2.981, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12139330738292554;  // std dev = 0.032, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.13017012443115067;  // std dev = 0.008, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15670001036738102;  // std dev = 0.238, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29420437897018237;  // std dev = 1.431, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.48117567363085967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2533798962139472;  // std dev = 0.981, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5153386017017654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6406331596802156;  // std dev = 0.365, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10167720769850702;  // std dev = 1.814, 248.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=5 */
%   | | else return 0.030175951959846646;  // std dev = 0.314, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02999213341891356;  // std dev = 3.064, 239.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2607255110094978;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5278103474288981;  // std dev = 1.110, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11699528558223429;  // std dev = 0.163, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.12534628991353317;  // std dev = 0.171, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28417602016735544;  // std dev = 1.472, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08759365821304355;  // std dev = 1.690, 259.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05325716329790014;  // std dev = 2.226, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16614365357248964;  // std dev = 1.394, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25932005991767104;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04976692020448757;  // std dev = 0.148, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007867890998863503;  // std dev = 2.318, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
%   | | | else return 0.033045342485887655;  // std dev = 2.537, 85.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15413400483727657;  // std dev = 0.157, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26160344277134345;  // std dev = 1.163, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09308590286313202;  // std dev = 0.114, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37896299984765325;  // std dev = 1.150, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10791962919745705;  // std dev = 0.203, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18353495362434688;  // std dev = 0.698, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16456701549798614;  // std dev = 0.345, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08282433355464688;  // std dev = 0.024, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10263138567049365;  // std dev = 0.270, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.04487321946927753;  // std dev = 1.139, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.01817136585461293;  // std dev = 1.285, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1799485180723981;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04974442918633434;  // std dev = 1.941, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.043', 'seconds']
Parameter learned model CLL:-0.111435 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 197, 0], 'true,false,false': [0.242, 60, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.458, 54, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 151, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.784, 46, 4], 'false,false,false,true': [0.145, 0, 8], 'false,false,false,false': [5.153, 138, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.35, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.198, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.613, 228, 34], 'false,false,false,false': [4.099, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.981, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 180, 0], 'false,true,false,false': [0.008, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 90, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.431, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.981, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.365, 0, 39], 'false,false,true,false': [1.814, 243, 5], 'false,false,false': [0.314, 54, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.064, 157, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [1.11, 0, 52], 'false,false,false,true': [0.163, 75, 0], 'false,false,false,false': [0.171, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.472, 1, 121], 'true,false': [1.69, 252, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.226, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.394, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 163, 19], 'false,false,false,true': [2.318, 82, 28], 'false,false,false,false': [2.537, 61, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 2, 78], 'false,true,true,true': [1.163, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.114, 208, 0], 'false,false,true': [1.15, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.203, 77, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.698, 0, 85], 'true,true,false': [0.345, 0, 19], 'true,false,true': [0.024, 169, 0], 'true,false,false,true': [0.27, 37, 0], 'true,false,false,false': [1.139, 28, 4], 'false,true': [1.285, 49, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.941, 41, 21]}]
{'': [0.2080085998387549, 0.228373702422146], 'false': [0.24418270611893264, 0.2094788328554572], 'false,true': [7.105427357601002e-16, 3.2653618371328135e-17], 'true': [0.009433106575965852, 0.01509079432186838], 'true,false': [-2.366972945901349e-16, 0.0585937499999999], 'false,true,true': [0.0, 0.0]}
{'': [0.033629568278431374, 0.11635290393343668], 'false': [0.07119206109666278, 0.14516606817531225], 'false,false': [0.06366389041368756, 0.1620201333316966], 'false,false,false': [0.0026324623620238574, 0.149161674881974], 'false,true': [nan, 0.07119206109666278], 'false,false,true': [nan, 0.06366389041368756]}
{'': [0.003628529001992603, 0.1166913767062037], 'false': [nan, 0.11669137670620221], 'false,false': [0.0018448888188671085, 0.10579862468812978], 'false,false,false': [0.08122924009604264, 0.16308626601590545], 'true': [0.0018284481112492916, 0.012314330343665329], 'true,false': [0.016433739263010727, 0.004901686649267878], 'false,false,true': [0.005649972007781612, 1.7763568394002506e-16], 'true,true': [0.0018284481112492916, nan]}
{'': [0.05555693973296187, 0.0004328294043116263], 'false': [1.5966670361272256e-05, 0.0006299218222433882], 'false,false': [nan, 0.0006299218222433882], 'false,false,false': [nan, 0.0006299218222433882], 'false,true': [nan, 1.5966670361274303e-05], 'false,true,false': [5.72992383493324e-06, 1.8691180859101078e-06]}
{'': [0.026019059253288745, 0.08269283369208001], 'false': [0.04673507581553651, 0.0809652038090901], 'false,false': [0.07663004009755463, 0.09875703640355386], 'false,false,true': [0.0034194305253524323, 0.01326508046650149], 'false,true': [0.045841357280783014, 0.0], 'true': [0.0259114361208715, 0.0]}
{'': [0.03928813259263774, 0.08340860138198658], 'false': [0.0014137952614011638, 0.08805130391653838], 'false,false': [0.023693442774670448, 0.0004002603329047784], 'true': [nan, 0.03928813259263808], 'true,false': [nan, 0.03928813259263774], 'false,false,false': [0.00035572899997113436, 0.00041147550414541553]}
{'': [0.04327350854231484, 0.06353997389537461], 'false': [nan, 0.06353997389537477], 'false,false': [nan, 0.06353997389537461], 'false,false,false': [nan, 0.06353997389537461], 'true': [0.017763605197599106, 0.011032673407622833]}
{'': [0.022547832758369333, 0.043040378282846584], 'false': [nan, 0.04304037828284625], 'false,false': [0.021985436912775935, 0.06096915887116199], 'false,false,false': [0.048845017726846705, 0.07571497673191567], 'true': [0.02287650717460764, 9.690995962852167e-05], 'true,false': [9.690995962852167e-05, nan]}
{'': [0.024659165780138388, 0.038291429883862534], 'false': [0.022258216960610193, 0.06530898612633382], 'false,false': [0.03227080138240857, 0.0005342851976888618], 'false,true': [0.03469192418006138, 6.302339802418805e-05], 'false,true,true': [0.03469192418006138, nan], 'false,false,false': [nan, 0.0005342851976888618]}
{'': [0.02037292970370613, 0.03983122855063583], 'false': [0.022316115045356036, 0.059401877457873134], 'false,false': [0.0, 0.06078828252945563], 'false,false,false': [nan, 0.060788282529455576], 'true': [0.005889383752501651, 0.006007256856342119], 'true,false': [3.370499619829639e-06, 0.02067783871429377], 'true,false,false': [0.0019675507486850144, 0.040522736519046094], 'true,true': [0.005737579346055831, 0.006274455579427174]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 42.766
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8232652141692794;  // std dev = 0.183, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.12475704780647133;  // std dev = 0.130, 234.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7306372211546014;  // std dev = 0.204, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.6639598462513631;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11543223464394788;  // std dev = 0.100, 144.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7107360799233505;  // std dev = 0.883, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.1273320321353277;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17276173232078948;  // std dev = 1.665, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.23381055943503057;  // std dev = 2.239, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5612157466489983;  // std dev = 1.79e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.49454907998233183;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.606180102441437;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.594784905663668;  // std dev = 0.082, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5827139298910297;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6047285857860117;  // std dev = 0.274, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11462289898601867;  // std dev = 0.008, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0812853478803745;  // std dev = 3.147, 100.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=29 */
%   | | | else return 0.21033122262044007;  // std dev = 2.386, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(A, G) )
%   | | | then return 0.42493732425178793;  // std dev = 0.057, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.37707112664205134;  // std dev = 1.510, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else return 0.5714852622432156;  // std dev = 0.190, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.44189442401144746;  // std dev = 0.220, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11473420643845376;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5395626296378014;  // std dev = 0.111, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.6995179689494636;  // std dev = 0.219, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(L, A) )
%   | then return -0.10346564426469493;  // std dev = 0.000535, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return -0.14145919408476482;  // std dev = 0.409, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.25163144823761874;  // std dev = 1.923, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   | | | else return 0.15382073896931836;  // std dev = 1.209, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.3281122203449649;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.17135111748525503;  // std dev = 0.902, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34445390276711424;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3663338833069507;  // std dev = 0.271, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0942355260350884;  // std dev = 0.007, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03381574132803307;  // std dev = 2.020, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.05794194609697639;  // std dev = 2.415, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2757754798780135;  // std dev = 0.029, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return -0.29072380153470007;  // std dev = 0.717, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.26859560491040757;  // std dev = 0.178, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08654615795148445;  // std dev = 0.005, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.07358929150455468;  // std dev = 0.074, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2865994287880784;  // std dev = 0.074, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.36202679325084447;  // std dev = 0.355, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.4965152511258643;  // std dev = 0.404, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11667719552958589;  // std dev = 0.040, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.22578090051952865;  // std dev = 0.042, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.15538004778823258;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.10071240567166005;  // std dev = 0.947, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.24393029972155145;  // std dev = 0.298, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07947671477462201;  // std dev = 0.017, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.18979044029293277;  // std dev = 1.429, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.1022261081301858;  // std dev = 0.063, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.13160576255291132;  // std dev = 0.631, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.014970186646589312;  // std dev = 2.056, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18337489694165432;  // std dev = 0.015, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.13006271457584156;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.3837382591303613;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2717514293980427;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15522021532716568;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.039622990454350214;  // std dev = 0.667, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.055349567575483385;  // std dev = 0.069, 245.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0120790098809032;  // std dev = 1.623, 89.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=25 */
%   | | | else return 0.040310769758039926;  // std dev = 1.775, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.1366991265427892;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.08236986108607837;  // std dev = 0.888, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2002618915793229;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2716705059677225;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.04795335650997882;  // std dev = 0.325, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18312458123125885;  // std dev = 0.042, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07017867879982051;  // std dev = 0.014, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3208879212323108;  // std dev = 0.066, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.13032955731409113;  // std dev = 0.048, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1494845757464184;  // std dev = 0.028, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else return 0.09890523276447878;  // std dev = 0.203, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.0597737215357929;  // std dev = 0.043, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19197569327657238;  // std dev = 0.186, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08400279376429418;  // std dev = 0.064, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.0385281900024696;  // std dev = 0.175, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.34858960916474413;  // std dev = 1.062, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.012522331053783899;  // std dev = 1.041, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return -0.010965728926314498;  // std dev = 1.258, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.970', 'seconds']
Refined model CLL: -0.099024


******************************************
Best model found
******************************************
Results 

CLL : -0.096869 

AUC ROC : 0.994182 

AUC PR : 0.399381 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 42.766 

Total Inference Time : 20.24619460105896 

Total revision time: 75.50691040611267
Best scored revision CLL: -0.099024


Results 

CLL : -0.096869 

AUC ROC : 0.994182 

AUC PR : 0.399381 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 77.00600918388366 

Total Inference Time : 20.24619460105896 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.109
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10814893509951219;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6778611269218803;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.00228331069095764;  // std dev = 0.302, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11650715591283645;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.014500496317011013;  // std dev = 1.211, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5975813784068993;  // std dev = 0.145, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8524459602519462;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5868470741022171;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5868470741022171;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04942824454216104;  // std dev = 1.640, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | | else return 0.06381235446085332;  // std dev = 1.167, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4894314570774037;  // std dev = 1.281, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12442026960898163;  // std dev = 0.054, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.13495304628951504;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14590008519748926;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28982109317946947;  // std dev = 1.041, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32621990686741265;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.660566613219091;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09153981873892028;  // std dev = 0.722, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else return -0.12699829455556316;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04619368317327419;  // std dev = 1.588, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2589271897624712;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5081586167491062;  // std dev = 0.312, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10783595120214566;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.11942824696179968;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30687896176489254;  // std dev = 0.474, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.09375115857459214;  // std dev = 0.620, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0027407166849662454;  // std dev = 0.257, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1973985263984983;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04214393506669921;  // std dev = 0.153, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.013307019578286353;  // std dev = 0.729, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.0625866880708957;  // std dev = 0.429, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18959039112838766;  // std dev = 0.057, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2940136960525531;  // std dev = 0.324, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09395836304706062;  // std dev = 0.030, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47113160526015563;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09347488859386617;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1870257243295576;  // std dev = 0.362, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.14128813643950822;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08588628002422358;  // std dev = 0.020, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09290117916017464;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.032526010562139926;  // std dev = 0.354, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03992839799804941;  // std dev = 0.455, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.009443985506919605;  // std dev = 0.348, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.520', 'seconds']
Parameter learned model CLL:-0.107308 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.351, 2, 21], 'true,false,true': [4.47e-08, 42, 0], 'true,false,false': [0.258, 13, 1], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.433, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.97, 1, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.302, 30, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.866, 3, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.211, 9, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.145, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.64, 40, 4], 'false,false,false,false': [1.167, 7, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.281, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 38, 0], 'false,true,false,false': [0.022, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.073, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.041, 1, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.108, 0, 5], 'false,false,true,false': [0.722, 37, 1], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.588, 30, 18], 'false,true': [5.27e-09, 0, 3], 'false,false,true': [0.312, 0, 4], 'false,false,false,true': [0.023, 6, 0], 'false,false,false,false': [0.032, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.474, 0, 23], 'true,false': [0.62, 49, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.257, 2, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.049, 0, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 38, 5], 'false,false,false,true': [0.729, 13, 3], 'false,false,false,false': [0.429, 2, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.057, 0, 16], 'false,true,true,true': [0.324, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.03, 36, 0], 'false,false,true': [0.104, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.054, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.362, 0, 20], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.02, 30, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.354, 6, 1], 'false,true': [0.455, 4, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.348, 3, 1]}]
{'': [0.2009293382470767, 0.2222222222222221], 'false': [0.24000000000000005, 0.18750000000000003], 'false,true': [0.0, 0.0], 'true': [0.07939508506616269, 0.017538265306122524], 'true,false': [4.7580986769649563e-17, 0.06632653061224494], 'false,true,true': [0.0, nan]}
{'': [0.055363321799307814, 0.11657524785460584], 'false': [0.09101227604807914, 0.16737760559690204], 'false,false': [0.18749999999999997, 0.16020230732941698], 'false,false,true': [nan, 0.18749999999999997], 'false,false,false': [0.0, 0.13335058577160563], 'false,true': [nan, 0.09101227604807914]}
{'': [0.005305176069834661, 0.09336389182729135], 'false': [nan, 0.09336389182729134], 'false,false': [0.0, 0.07825156015658774], 'false,false,false': [0.06110764719706921, 0.15142037661282032], 'true': [0.0014979287557717364, 0.022064060821587905], 'true,false': [0.0, 0.0], 'true,true': [0.0014979287557717364, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.0631259770166271, 0.00022401541907746318], 'false': [9.002798674092617e-05, 0.0004895448987524521], 'false,false': [nan, 0.0004895448987524521], 'false,false,false': [nan, 0.0004895448987524521], 'false,true': [nan, 9.002798674092617e-05], 'false,true,false': [7.728687574181337e-05, 5.412811608030483e-05]}
{'': [0.06376839983318117, 0.07038381733966594], 'false': [-1.850371707708594e-17, 0.06802980085847211], 'false,false': [0.07052253165176382, 0.0], 'false,false,true': [0.0023219611642566916, 0.013721397322643927], 'true': [0.06376839983318117, nan], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.05254726742526598, 0.07432253835783069], 'false': [9.25185853854297e-18, 0.08208949871456014], 'false,false': [0.024308829560151346, 0.00017566423802051705], 'true': [nan, 0.05254726742526598], 'true,false': [nan, 0.05254726742526598], 'false,false,false': [8.751716319120122e-05, 0.00020814182546335103]}
{'': [0.04298065233106538, 0.02197990662052531], 'true': [0.0097538057933604, 0.007695092883145345], 'false': [nan, 0.02197990662052531], 'false,false': [nan, 0.02197990662052531], 'false,false,false': [nan, 0.02197990662052531]}
{'': [0.0001514611796812823, 0.028290742920329223], 'false': [nan, 0.02829074292032924], 'false,false': [0.02329202084924938, 0.0384479922020842], 'false,false,false': [0.03323475436272334, 0.061401523252087864], 'true': [0.0001514611796812823, nan]}
{'': [0.0032930061338584185, 0.028470788263828335], 'false': [0.022979596502835528, 0.04866349471257139], 'false,false': [0.005358002048501426, 0.00032684790823978016], 'false,true': [0.015011155603213326, 2.5382299349571087e-05], 'false,true,true': [0.015011155603213326, nan], 'false,false,false': [nan, 0.00032684790823978016]}
{'': [0.019716383960908773, 0.03337950018027673], 'false': [0.03445116155694174, 0.030309428763502153], 'false,false': [nan, 0.030309428763502153], 'false,false,false': [nan, 0.030309428763502153], 'true': [0.006322301372247419, 0.0034139082233773667], 'true,true': [0.006538800872002637, 0.0], 'true,false': [1.3216199519797134e-05, 0.011347450603589875], 'true,false,false': [-1.3877787807814458e-18, 0.017933955386946466]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.64
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.022233190757733255;  // std dev = 0.283, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else return -0.045690337978337374;  // std dev = 0.252, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07306154134957943;  // std dev = 1.150, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5696957950162035;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then return 0.8443462976046685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7630861009244817;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12820921892778073;  // std dev = 0.068, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.15565370239533147;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.41403291529960823;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return 0.6176304990978511;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5542733025611444;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.10984811421414743;  // std dev = 3.73e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.1075753433037421;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.12699052436954433;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.318353008875816;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.31835300887581597;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.31835300887581597;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.44484147331903073;  // std dev = 0.194, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4704262113655493;  // std dev = 0.139, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09253457236857704;  // std dev = 0.491, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | else return -0.12385383095364362;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.046523183526535034;  // std dev = 0.211, 44.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38639125314188055;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10529437589442438;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11008322977950127;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, E) )
%   | then if ( tweets(C, F), follows(E, C) )
%   | | then if ( tweets(A, F), follows(C, A) )
%   | | | then return 0.24485802039958862;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3024701594285947;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21392706121408778;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.22477086719596565;  // std dev = 0.943, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2967343823910736;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05959620640780999;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, J) )
%   | | | then return -0.09508356009815863;  // std dev = 0.017, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.10340597681723555;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.13854349272021238;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.0774445612547296;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.19326954648767722;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2527993555684722;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), tweets(A, G) )
%   | then if ( follows(H, A), follows(F, H) )
%   | | then return -0.025401640411691573;  // std dev = 0.138, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | else if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.2148024458311404;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08332089183154151;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.03651396190845978;  // std dev = 0.370, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.02103613069011022;  // std dev = 0.403, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.11369739318213444;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then return 0.18460700770732985;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20860295024319142;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.23420170096803827;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.22016446572615714;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2237682581529502;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08539480309933933;  // std dev = 0.003, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.2936280959397972;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.08294800887422682;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08494005749194694;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.0329234751185353;  // std dev = 1.398, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.20320235033207426;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15917081731049298;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07886001417689231;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.07682209423834231;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07391819264519561;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.03889559521828112;  // std dev = 0.309, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, I) )
%   | then return -0.012876109209105212;  // std dev = 0.094, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else return -0.005123035700139084;  // std dev = 0.342, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.974', 'seconds']
Refined model CLL: -0.097594


******************************************
Best model found
******************************************
Results 

CLL : -0.096068 

AUC ROC : 0.994861 

AUC PR : 0.373386 

Precision : 0.347087 

Recall : 0.916667 

F1 : 0.503521 

Total Learning Time : 3.64 

Total Inference Time : 2.947869300842285 

Total revision time: 10.005325244903565
Best scored revision CLL: -0.097594


Results 

CLL : -0.096068 

AUC ROC : 0.994861 

AUC PR : 0.373386 

Precision : 0.347087 

Recall : 0.916667 

F1 : 0.503521 

Total Learning Time : 11.504424022674561 

Total Inference Time : 2.947869300842285 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.458
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8354216623722391;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.35814893509951223;  // std dev = 0.500, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240375275582284;  // std dev = 5.96e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -8.539208356873426E-4;  // std dev = 0.301, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021831872220983102;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.46509052155483177;  // std dev = 0.735, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 8.759383307317958E-4;  // std dev = 1.681, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5429497053001787;  // std dev = 1.036, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8695534534888735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.671723798839822;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5598469191003144;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5598469191003144;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04813814277950546;  // std dev = 2.435, 96.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=9 */
%   | | | else return -0.05255000286446335;  // std dev = 1.530, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5222328757185263;  // std dev = 0.999, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12065919110735616;  // std dev = 0.011, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.12040182447221805;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14736892372827315;  // std dev = 0.143, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33229701682399493;  // std dev = 0.407, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.4459134242738041;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30121075505532935;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6304432300504131;  // std dev = 0.100, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09380296969411869;  // std dev = 1.100, 93.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=2 */
%   | | else return -0.11246423048817315;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013822869345958404;  // std dev = 2.377, 126.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=39 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24181586323921211;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.36330022153122604;  // std dev = 1.170, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1038785074004546;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12058550635724388;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2750293035723793;  // std dev = 1.243, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.08503533856177349;  // std dev = 1.068, 102.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03291836494310696;  // std dev = 0.369, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15951783709351264;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04276506426505414;  // std dev = 0.187, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.034106103963992315;  // std dev = 0.881, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | | else return 0.002652415270739978;  // std dev = 0.943, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13813911331213313;  // std dev = 0.231, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3013664270013173;  // std dev = 0.450, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08877154035979071;  // std dev = 0.015, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5018850139354891;  // std dev = 0.283, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09480017786023318;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14520283297518027;  // std dev = 1.535, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.1403324490456882;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.082506936786458;  // std dev = 0.001, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07909848687804631;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.010202347894671365;  // std dev = 0.393, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.0015945158217313652;  // std dev = 0.576, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25309634639092793;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02265514138049022;  // std dev = 0.706, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.623', 'seconds']
Parameter learned model CLL:-0.1069 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.989, 1, 43], 'true,false,true': [6.66e-08, 66, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.5, 3, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.301, 64, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.943, 8, 1], 'false,false,false,true': [0.735, 1, 2], 'false,false,false,false': [1.681, 20, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.036, 1, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.077, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.435, 87, 9], 'false,false,false,false': [1.53, 27, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.999, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.011, 60, 0], 'false,true,false,false': [0.008, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.143, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.407, 0, 31], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.1, 0, 10], 'false,false,true,false': [1.1, 91, 2], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.377, 87, 39], 'false,true': [0.0, 0, 4], 'false,false,true': [1.17, 1, 7], 'false,false,false,true': [0.05, 14, 0], 'false,false,false,false': [0.108, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.243, 1, 45], 'true,false': [1.068, 99, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.369, 8, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.985, 1, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.187, 70, 11], 'false,false,false,true': [0.881, 30, 4], 'false,false,false,false': [0.943, 12, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.231, 2, 32], 'false,true,true,true': [0.45, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.015, 107, 0], 'false,false,true': [0.283, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.103, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.535, 2, 41], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.001, 82, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.393, 4, 1], 'false,true': [0.576, 11, 3], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.706, 6, 2]}]
{'': [0.228096000000001, 0.24000000000000007], 'false': [0.2222222222222221, 0.24999999999999992], 'true': [0.022210743801654168, 0.01219326322206984], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'true,false': [6.728624391667616e-17, 0.06222222222222227], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [1.1102230246251565e-16, 0.10512673382544961], 'false': [0.09031474580470196, 0.13516971058785626], 'false,false': [0.0987654320987654, 0.1459248227405665], 'false,false,false': [0.18015015756237143, 0.11770274707918259], 'false,false,true': [nan, 0.0987654320987654], 'false,true': [nan, 0.09031474580470196]}
{'': [0.03660505021544844, 0.07876413279950993], 'false': [nan, 0.07876413279951003], 'false,false': [-3.700743415417188e-17, 0.06565461278746927], 'false,false,false': [0.06176891121509498, 0.07807402771666025], 'true': [0.035749277752221136, 0.010694746213648262], 'true,true': [0.035749277752221136, nan], 'true,false': [0.0, 0.0029965952342846935], 'false,false,true': [0.0, 0.0]}
{'': [0.019968173829077146, 0.0003195040483307358], 'false': [2.3849949747096122e-06, 0.0009733121288035115], 'false,false': [nan, 0.0009733121288035115], 'false,false,false': [nan, 0.0009733121288035115], 'false,true': [nan, 2.3849949747096122e-06], 'false,true,false': [2.174141330518742e-06, 2.9383690804592653e-06]}
{'': [0.005571364191549827, 0.05796931359002081], 'false': [0.0, 0.055499243061871824], 'false,false': [0.05782686235461601, -2.7755575615628915e-18], 'false,false,true': [0.001004575031767363, 0.013011294669810373], 'true': [0.005347689115777464, 0.0], 'false,true': [0.0, nan]}
{'': [0.04482733791292859, 0.06769428503189599], 'false': [0.0, 0.06805032911371775], 'false,false': [0.17102538385677746, 0.00048088882064218616], 'true': [nan, 0.04482733791292841], 'true,false': [nan, 0.04482733791292859], 'false,false,false': [0.00017554315033475876, 0.000579697454622366]}
{'': [0.04591414882914239, 0.013594989796272005], 'true': [0.033579323433605604, 0.011181364981998593], 'false': [nan, 0.013594989796272005], 'false,false': [nan, 0.013594989796272005], 'false,false,false': [nan, 0.013594989796272005]}
{'': [0.029405267231521502, 0.034765753618786754], 'false': [nan, 0.03476575361878674], 'false,false': [0.03490330632066919, 0.0342913389309825], 'false,false,false': [0.02284998417170234, 0.059287516854019576], 'true': [0.029405267231521502, nan]}
{'': [0.05327300475361739, 0.023387257103915624], 'false': [0.0172471432456604, 0.05147888292457474], 'false,false': [0.020001827269302275, 0.0005091976758704161], 'false,true': [0.014451410210455293, 2.1395122708671223e-06], 'false,true,true': [0.014451410210455293, nan], 'false,false,false': [nan, 0.0005091976758704161]}
{'': [0.029861693508548417, 0.0386463926840587], 'false': [0.023689766375456087, 0.06058673506722682], 'false,false': [0.0, 0.062259727065445455], 'false,false,false': [nan, 0.062259727065445455], 'true': [0.05233531648626964, 0.0021629462509724405], 'true,true': [0.054768463002423065, 0.0], 'true,false': [1.3971378904746488e-08, 0.02113756898707052], 'true,false,false': [0.0, 0.03082962072014876]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.52
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.7891834178581324;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7321239857666587;  // std dev = 0.059, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7415751295889941;  // std dev = 0.129, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2616705277902999;  // std dev = 0.921, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.126250320197416;  // std dev = 0.040, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.24811816884741303;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.5104021380097179;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.575555506683639;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5880459562825194;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6887975366665602;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5522404251383309;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3840653035225129;  // std dev = 1.239, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.11315205378042575;  // std dev = 0.042, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11174561968023201;  // std dev = 0.982, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.04708131507594806;  // std dev = 1.119, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.43428996434682976;  // std dev = 0.084, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.1245847960703289;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.484009313991017;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6113844469962885;  // std dev = 0.338, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.10262504143514882;  // std dev = 0.038, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.10144661333624856;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( tweets(A, H) )
%   | | then return -0.1239494380342636;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.22400632898049913;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.33615941120162357;  // std dev = 0.061, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.41241036812976395;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.09725179671513011;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.491245765645829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3150092544658001;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2989915079361766;  // std dev = 1.047, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.08274109450916459;  // std dev = 0.920, 93.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=2 */
%   | | else return -0.09246696850533474;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.20969363487681367;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.2559145490164019;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3036104563731328;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05325458376395737;  // std dev = 0.143, 75.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=8 */
%   | | else return -0.08312544207739206;  // std dev = 0.172, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.05127711430746902;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3759955631309422;  // std dev = 0.221, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5394353799405992;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11614962949249871;  // std dev = 0.038, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(C, D), tweets(A, D) )
%   | | then return 0.2293734273601373;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.21332399846722577;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.27127864867005863;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.28155856987452693;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0812659731558188;  // std dev = 0.007, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.024106404163022392;  // std dev = 0.197, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.24175354391100612;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07985186273064182;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.021450295045182293;  // std dev = 0.956, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.18681259519060353;  // std dev = 0.007, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.22277555559793963;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.05082090012626512;  // std dev = 0.643, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return -0.02859584470023322;  // std dev = 0.494, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.15201335711123937;  // std dev = 0.471, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08204959968427146;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20023228317521213;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07634244288007853;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.011793417996512432;  // std dev = 0.953, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1597727658188459;  // std dev = 0.007, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.21122087527195713;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1262457041261075;  // std dev = 0.664, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.25906731404500566;  // std dev = 0.149, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.17007786716349782;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07358452377933361;  // std dev = 0.005, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3998157367175769;  // std dev = 0.238, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08812919506640242;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.15828749486747432;  // std dev = 0.032, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16164860525742977;  // std dev = 0.228, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.045504699756824404;  // std dev = 0.966, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.14739838525718518;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.06348810437248113;  // std dev = 0.036, 89.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return -0.08319075897672693;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.004762468586191078;  // std dev = 0.274, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.013260642392613209;  // std dev = 0.295, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.2731021474709155;  // std dev = 0.659, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.02217440342780134;  // std dev = 0.245, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.645', 'seconds']
Refined model CLL: -0.101747


******************************************
Best model found
******************************************
Results 

CLL : -0.102997 

AUC ROC : 0.993806 

AUC PR : 0.321941 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 6.52 

Total Inference Time : 6.317601919174194 

Total revision time: 18.521440580368044
Best scored revision CLL: -0.101747


Results 

CLL : -0.102997 

AUC ROC : 0.993806 

AUC PR : 0.321941 

Precision : 0.335498 

Recall : 0.99359 

F1 : 0.501618 

Total Learning Time : 20.02053935813904 

Total Inference Time : 6.317601919174194 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.701
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.08302753548872309;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7033854175697434;  // std dev = 0.990, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.034580978671723175;  // std dev = 0.262, 112.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06954151144396656;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7911576721241949;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.05762996640309644;  // std dev = 2.503, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.575062444353576;  // std dev = 0.278, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8757265001370336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6340870986069489;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5631830911923846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3631830911923847;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.022606247357920467;  // std dev = 2.788, 102.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=12 */
%   | | | else return 0.004878421132230767;  // std dev = 2.137, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4801864602241393;  // std dev = 2.129, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12000831283559296;  // std dev = 0.025, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.12234512368271044;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15041617291232615;  // std dev = 0.129, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28499994527726463;  // std dev = 1.474, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return -0.07847624351919524;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.327149123870727;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6489735821213073;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08382117735190911;  // std dev = 1.799, 140.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=5 */
%   | | else return -0.10956583119795775;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02165290662800641;  // std dev = 2.698, 172.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.14605683506862993;  // std dev = 0.921, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.495136205235903;  // std dev = 1.242, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10520240535881618;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12164129635557552;  // std dev = 0.102, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28182536894128957;  // std dev = 1.259, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.07625307652555953;  // std dev = 1.657, 158.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0493575029646297;  // std dev = 0.536, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11262508224016772;  // std dev = 2.115, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   | else if ( follows(A, E) )
%   | | then return -0.2026374275692479;  // std dev = 0.562, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05406552478302263;  // std dev = 0.148, 127.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.032847153704752864;  // std dev = 1.260, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | | else return 0.1102871115924477;  // std dev = 1.320, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14884690758886895;  // std dev = 0.211, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28884341631711097;  // std dev = 0.487, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09078637700856557;  // std dev = 0.012, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.49577990910271474;  // std dev = 0.418, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10736655241528234;  // std dev = 0.136, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17740571042518982;  // std dev = 1.166, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.17830045249827392;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08339738921681;  // std dev = 0.008, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0831218666543304;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.008658980681920394;  // std dev = 0.403, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.08950331477066918;  // std dev = 0.677, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2857609175842303;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.058494509294816366;  // std dev = 1.040, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.720', 'seconds']
Parameter learned model CLL:-0.110332 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 63], 'true,false,true': [7.6e-08, 113, 0], 'true,false,false': [0.235, 16, 1], 'false,true,true,true': [0.913, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.478, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 100, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.056, 0, 2], 'false,false,false,false': [2.503, 33, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.278, 0, 42], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.078, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.894, 1, 4], 'false,false,false,true': [2.788, 90, 12], 'false,false,false,false': [2.137, 34, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.129, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 98, 0], 'false,true,false,false': [0.003, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.129, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.474, 2, 44], 'true,false': [0.707, 1, 1], 'false,true,true': [0.073, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.141, 0, 13], 'false,false,true,false': [1.799, 135, 5], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.698, 116, 56], 'false,true': [0.921, 1, 7], 'false,false,true': [1.242, 1, 12], 'false,false,false,true': [0.01, 14, 0], 'false,false,false,false': [0.102, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.259, 1, 64], 'true,false': [1.657, 151, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.536, 6, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.115, 5, 50], 'true,false,true': [0.562, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 115, 12], 'false,false,false,true': [1.26, 34, 6], 'false,false,false,false': [1.32, 11, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.211, 3, 45], 'false,true,true,true': [0.487, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.012, 105, 0], 'false,false,true': [0.418, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.166, 1, 58], 'true,true,false': [0.01, 0, 5], 'true,false,true': [0.008, 106, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.403, 5, 1], 'false,true': [0.677, 6, 5], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.04, 10, 5]}]
{'': [0.22106493782548645, 0.22222222222222174], 'false': [0.2148437499999998, 0.2283737024221454], 'true': [0.015380859374999223, 0.007633136094674502], 'false,true': [0.1388888888888887, -1.1102230246251566e-17], 'false,true,true': [0.1388888888888887, nan], 'true,false': [5.1089909097794814e-17, 0.055363321799308]}
{'': [0.018860946745562594, 0.0959801479546975], 'false': [0.06880170568790273, 0.14225441891000273], 'false,false': [0.05859374999999995, 0.1658059121598309], 'false,false,false': [0.0015448833867627298, 0.1491704615899995], 'false,true': [nan, 0.06880170568790273], 'false,false,true': [nan, 0.05859374999999995]}
{'': [0.003925808754303183, 0.10499977569613543], 'false': [nan, 0.10499977569613546], 'false,false': [0.07100591715976333, 0.08704976211087952], 'false,false,false': [0.07620295426158377, 0.11416650582936272], 'false,false,true': [0.0, 0.16], 'true': [0.0018345474098678764, 0.01502204283496722], 'true,false': [0.0, 0.003069864128511457], 'true,true': [0.0018345474098678764, nan]}
{'': [0.058094282779325275, 0.00025637847990705445], 'false': [5.937062112078063e-06, 0.0005924025211144728], 'false,false': [nan, 0.0005924025211144728], 'false,false,false': [nan, 0.0005924025211144728], 'false,true': [nan, 5.937062112076197e-06], 'false,true,false': [6.1807867957358936e-06, 3.0264560225384027e-07]}
{'': [0.06097378432311429, 0.06539322697507692], 'false': [0.0004395968431972948, 0.06161238046289162], 'false,false': [0.06302582524434042, 0.0], 'false,false,true': [0.001536683409759927, 0.023109086346030663], 'true': [0.047250464047477965, 0.25], 'false,true': [0.0004395968431972948, nan]}
{'': [0.04233117085316001, 0.10836675572936587], 'false': [0.10607434249563177, 0.10752037649437779], 'false,false': [0.11856561988084817, 0.0003730346028341772], 'true': [nan, 0.04233117085316003], 'true,false': [nan, 0.04233117085316001], 'false,false,false': [7.272880994066025e-06, 0.0005177936928032506]}
{'': [0.04589794841109814, 0.02869790814872199], 'true': [0.02437898378487072, 0.017377093964781584], 'false': [nan, 0.02869790814872199], 'false,false': [nan, 0.02869790814872199], 'false,false,false': [nan, 0.02869790814872199]}
{'': [0.08739922804145378, 0.035468865891410406], 'true': [0.08134970025133127, 0.15785817639222186], 'true,false': [0.15785817639222186, nan], 'false': [nan, 0.03546886589141037], 'false,false': [0.021984695633373748, 0.06269357597191316], 'false,false,false': [0.039660706851368334, 0.10251142676795746]}
{'': [0.044374783160222135, 0.033950380803456505], 'false': [0.021903231396864446, 0.07084696707462007], 'false,false': [0.019455683882025256, 0.0006362258286933628], 'false,true': [0.011313849479500617, 1.3111169211559622e-06], 'false,true,true': [0.011313849479500617, nan], 'false,false,false': [nan, 0.0006362258286933628]}
{'': [0.02344429695851005, 0.05891801569778224], 'false': [0.041671381352590235, 0.07066002641340748], 'false,false': [0.0, 0.07214256856991982], 'false,false,false': [nan, 0.07214256856991982], 'true': [0.021256670941972193, 0.001616415801126785], 'true,true': [0.023056456879244843, 1.845886279138731e-05], 'true,false': [6.152607546709317e-07, 0.01293513066813881], 'true,false,false': [0.0, 0.027013559337653353]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.817
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.7812258581764353;  // std dev = 1.922, 52.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7152849666578751;  // std dev = 0.145, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7347337483847239;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.056620045914368346;  // std dev = 2.359, 101.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=8 */
%   | | | else return -0.08448376296110019;  // std dev = 0.839, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return -0.008492844087163564;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.14480313206423145;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7781059814216418;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1138172349311653;  // std dev = 2.365, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5212813961878329;  // std dev = 0.233, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else return 0.5747665021342359;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A) )
%   | | then return 0.8674864902113992;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.621340177776543;  // std dev = 0.114, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5832748682075776;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6529356435903565;  // std dev = 0.957, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.1194192847892039;  // std dev = 0.040, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18692135334277876;  // std dev = 1.433, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.04769476319037044;  // std dev = 1.846, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.44710865037825215;  // std dev = 0.075, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.5940806336631486;  // std dev = 0.267, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.37708182971514403;  // std dev = 0.945, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.06400477262890439;  // std dev = 0.920, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return 0.6138145298915244;  // std dev = 0.255, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7621784771166626;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1084761164857391;  // std dev = 0.051, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.10472865230818407;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return -0.17690138197185448;  // std dev = 0.114, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.343287097466341;  // std dev = 0.008, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.20310710826674094;  // std dev = 0.735, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.05883006624005434;  // std dev = 1.121, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3263566477586742;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3451467711954215;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.360934055526667;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.5096052553787567;  // std dev = 0.230, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08424481077871537;  // std dev = 1.625, 164.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=5 */
%   | | else return -0.09594448492584058;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.270203580687189;  // std dev = 0.008, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3296316509973055;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09024794053464094;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return -0.04166340030571689;  // std dev = 0.151, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2577253825457417;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.08246918406010857;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4335403854819841;  // std dev = 0.243, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5960330277126022;  // std dev = 0.270, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12312320872732667;  // std dev = 0.026, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), follows(D, E) )
%   | | then return 0.2176237396056761;  // std dev = 0.005, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.22966136761738146;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.235341063485794;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2660580113529425;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.06808435068174207;  // std dev = 0.593, 72.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=3 */
%   | | | else return -0.12177760897806143;  // std dev = 0.459, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(G, J) )
%   | | | then return -0.011081611018345467;  // std dev = 1.036, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0.07719868923720209;  // std dev = 0.491, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.02505353813952095;  // std dev = 0.243, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then if ( follows(D, A), follows(A, D) )
%   | | | then return 0.13587512711771166;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.18697957590834072;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.3199474392124299;  // std dev = 0.248, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11997501831997921;  // std dev = 0.854, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), follows(E, F) )
%   | then return -0.03311361915395098;  // std dev = 0.132, 131.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=20 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.21160500323029127;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07376298766143051;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.002556179074291695;  // std dev = 0.650, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.01778457035915581;  // std dev = 1.071, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16216636804469145;  // std dev = 0.005, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.25588857505870294;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.1704514818677278;  // std dev = 1.021, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.26636926783170023;  // std dev = 0.260, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07678544037990707;  // std dev = 0.004, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3456470407525639;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4922571801982607;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.11476661151949835;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.1482721609556771;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12191677444276398;  // std dev = 0.997, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.25297073844770745;  // std dev = 0.231, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.0390978079953991;  // std dev = 0.634, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.06954648374712771;  // std dev = 0.035, 126.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0629719138012328;  // std dev = 0.104, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else return 0.003265493029274296;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.22694615169864474;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017314441651967855;  // std dev = 0.531, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.02915269047901944;  // std dev = 0.805, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.200', 'seconds']
Refined model CLL: -0.106045


******************************************
Best model found
******************************************
Results 

CLL : -0.106305 

AUC ROC : 0.994197 

AUC PR : 0.345508 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 7.817 

Total Inference Time : 9.344734191894531 

Total revision time: 24.33876406478882
Best scored revision CLL: -0.106045


Results 

CLL : -0.106305 

AUC ROC : 0.994197 

AUC PR : 0.345508 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 25.837862842559815 

Total Inference Time : 9.344734191894531 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.237
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7087525456193687;  // std dev = 1.005, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.026751283169748126;  // std dev = 0.274, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09602590266423366;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7587139135859727;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09891043621257516;  // std dev = 2.927, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.560972981635649;  // std dev = 1.080, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8181897134401653;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5992949265534999;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5610177686523663;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5610177686523663;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02706225249667004;  // std dev = 3.347, 156.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | | else return 0.013003298176263492;  // std dev = 2.445, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5037471318190387;  // std dev = 1.977, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11983275466047602;  // std dev = 0.005, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return -0.12406104988931221;  // std dev = 0.002, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14442723917165104;  // std dev = 0.104, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2835598801806581;  // std dev = 1.657, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | else return 0.3956794211735338;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3058759084052656;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6310482183828017;  // std dev = 0.205, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08724570370731156;  // std dev = 1.886, 176.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=6 */
%   | | else return -0.10863387497038263;  // std dev = 2.95e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018298545078356168;  // std dev = 2.973, 238.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16479187729995226;  // std dev = 0.971, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5238915421756409;  // std dev = 0.673, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11758758824826955;  // std dev = 0.087, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11876635425891698;  // std dev = 0.095, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25898319176368717;  // std dev = 1.942, 90.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=86 */
%   | else return -0.07817802064556997;  // std dev = 1.675, 194.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012947564483962164;  // std dev = 0.609, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15540742737323618;  // std dev = 1.694, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.23432434282139247;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044536202317292335;  // std dev = 0.158, 159.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.015420793382893119;  // std dev = 1.231, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0.08132530739716388;  // std dev = 1.392, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18437280076604645;  // std dev = 0.123, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2068601790759637;  // std dev = 1.606, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09125833274747006;  // std dev = 0.027, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4181372836524736;  // std dev = 0.550, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11334653487212824;  // std dev = 0.139, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12386455167284786;  // std dev = 2.438, 80.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=74 */
%   | | else return 0.1608402567562321;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.0838384467677626;  // std dev = 0.014, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08355000586097959;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.08597456134282895;  // std dev = 0.908, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.011618524193477735;  // std dev = 0.902, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2910628255469836;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10925226724510174;  // std dev = 1.040, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.700', 'seconds']
Parameter learned model CLL:-0.110931 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.46, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 135, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.096, 0, 3], 'false,false,false,false': [2.927, 40, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.08, 1, 55], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.131, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.347, 138, 18], 'false,false,false,false': [2.445, 40, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.977, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.005, 137, 0], 'false,true,false,false': [0.002, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.104, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.657, 3, 57], 'true,false': [0.136, 0, 3], 'false,true,true': [1.49e-08, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.205, 0, 20], 'false,false,true,false': [1.886, 170, 6], 'false,false,false': [2.95e-09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.973, 166, 72], 'false,true': [0.971, 1, 10], 'false,false,true': [0.673, 0, 18], 'false,false,false,true': [0.087, 22, 0], 'false,false,false,false': [0.095, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.942, 4, 86], 'true,false': [1.675, 186, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.609, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.694, 3, 62], 'true,false,true': [0.052, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 141, 18], 'false,false,false,true': [1.231, 31, 11], 'false,false,false,false': [1.392, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.123, 1, 60], 'false,true,true,true': [1.606, 2, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 148, 0], 'false,false,true': [0.55, 0, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 47, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.438, 6, 74], 'true,true,false': [0.012, 0, 7], 'true,false,true': [0.014, 158, 0], 'true,false,false,true': [6.45e-09, 14, 0], 'true,false,false,false': [0.908, 10, 2], 'false,true': [0.902, 23, 10], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.04, 8, 6]}]
{'': [0.22177600000000064, 0.22004437869822432], 'true': [0.012046400951813752, 0.011763038548752668], 'false': [0.22592152199762194, 0.21172022684310027], 'false,true': [-8.881784197001253e-17, 0.0], 'true,false': [-9.006004955001269e-17, 0.07360000000000004], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.015528194859161733, 0.09998729694629549], 'false': [0.07488725070234042, 0.14118460499399374], 'false,false': [0.03698224852071005, 0.1721929683612868], 'false,false,false': [0.0030796338963254843, 0.15867548893807565], 'false,true': [nan, 0.07488725070234042], 'false,false,true': [nan, 0.03698224852071005]}
{'': [0.02164066663358215, 0.09919593089019947], 'false': [nan, 0.09919593089019954], 'false,false': [6.344131569286608e-17, 0.08450006627949054], 'false,false,false': [0.07181009487130476, 0.12451493049965832], 'true': [0.02081842104340151, 0.01630290924383626], 'true,true': [0.02081842104340151, nan], 'true,false': [0.003377154993277953, 0.005754107653745066], 'false,false,true': [0.0, 0.0]}
{'': [0.03832006380592053, 0.00012910471777632598], 'false': [2.7938803353228724e-06, 0.00037243401030705793], 'false,false': [nan, 0.00037243401030705793], 'false,false,false': [nan, 0.00037243401030705793], 'false,true': [nan, 2.7938803353228724e-06], 'false,true,false': [1.6703036428592815e-07, 1.2305108529342412e-07]}
{'': [0.04443508234331345, 0.06395389361528366], 'false': [1.586032892321652e-17, 0.06156191997257968], 'false,false': [0.06563597201153916, 7.401486830834377e-18], 'false,false,true': [0.0020993994458919476, 0.02020846988075655], 'true': [0.04575028457796435, 0.006158855295578118], 'false,true': [1.586032892321652e-17, nan]}
{'': [0.0371432545788504, 0.0941154983558815], 'false': [0.08572714215910299, 0.09438925222216844], 'false,false': [0.0251574427957905, 0.00039524679514227996], 'true': [nan, 0.03714325457885042], 'true,false': [nan, 0.0371432545788504], 'false,false,false': [0.00034484803979552406, 0.0004499575982910314]}
{'': [0.04775809704225797, 0.02058049462717707], 'true': [0.041883276936872695, 0.014458911149223087], 'false': [nan, 0.02058049462717707], 'false,false': [nan, 0.02058049462717707], 'false,false,false': [nan, 0.02058049462717707]}
{'': [0.04303053962590961, 0.03516788532359925], 'true': [0.044126696743716866, 0.0013634606053779114], 'false': [nan, 0.03516788532359923], 'false,false': [0.025107628375235655, 0.05575100561245537], 'false,false,false': [0.03605553268771549, 0.09224634815029718], 'true,false': [0.0013634606053779114, nan]}
{'': [0.015122052436074087, 0.03445941986659949], 'false': [0.026551499176762527, 0.05523170613457254], 'false,false': [0.02162256722550279, 0.000412599805220594], 'false,true': [0.09213363173808496, 4.920291216739761e-06], 'false,true,true': [0.09213363173808496, nan], 'false,false,false': [nan, 0.000412599805220594]}
{'': [0.03469648639352763, 0.055102692053177256], 'false': [0.024679046478273573, 0.1163259028619758], 'false,false': [0.25, 0.07719808158118749], 'false,false,false': [nan, 0.07719808158118749], 'true': [0.06843135559088208, 0.004480742832410045], 'true,true': [0.07430740151920716, 1.9347035325531108e-05], 'true,false': [1.2166846953869719e-06, 0.031701886263957084], 'true,false,false': [2.9738116731030977e-18, 0.06868425490895895]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.112
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.12658388932796868;  // std dev = 0.123, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.08037115732173453;  // std dev = 0.416, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7218702467974666;  // std dev = 0.152, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.10316872369197364;  // std dev = 1.445, 106.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=3 */
%   | | | else return -0.12991335487096428;  // std dev = 0.104, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.7469102068166666;  // std dev = 0.158, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1271291742522529;  // std dev = 5.37e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.29701438684128156;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.18141435609293344;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.5309649733788249;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2214411638550157;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5821051018613073;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.6936378532717733;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5547744971883491;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5963904509844974;  // std dev = 0.287, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11490682150186947;  // std dev = 0.016, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.114555897703312;  // std dev = 1.665, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.09914887947636389;  // std dev = 1.762, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.42314082696817346;  // std dev = 0.114, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.18750739752952197;  // std dev = 0.794, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.6103132973075529;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.43890154512221924;  // std dev = 0.223, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4645648865251002;  // std dev = 0.197, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5283689471081255;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6295485971464283;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7810894931024921;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10974969574598724;  // std dev = 0.019, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.30601420904067317;  // std dev = 0.151, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.016137887761908623;  // std dev = 1.426, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3297555338792134;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4205524657708504;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3257473061156107;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17623773232767434;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3317144572888238;  // std dev = 0.943, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08237839567883253;  // std dev = 1.579, 199.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=6 */
%   | | else return -0.09269587230660095;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2738797200341475;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26221640314071426;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.060785549844559916;  // std dev = 1.136, 136.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=10 */
%   | | | else return -0.06770655919470243;  // std dev = 0.443, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3043948668315967;  // std dev = 0.126, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2778977214485377;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.23755326698951862;  // std dev = 1.055, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5289855370336426;  // std dev = 0.339, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11366487019889067;  // std dev = 0.030, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.2329854382715713;  // std dev = 0.043, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return -0.11535111151449673;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08249617314142538;  // std dev = 0.013, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.22246358629058754;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2731711392277229;  // std dev = 0.184, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.08738413580028721;  // std dev = 0.050, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.30404737177941454;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1255473479961982;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06335747962198264;  // std dev = 0.307, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1602723259762552;  // std dev = 0.999, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.01269066035269555;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.05760671209933099;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.27425213498958134;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then return 0.23394752319042278;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1415740404574188;  // std dev = 0.859, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.05592330289937478;  // std dev = 0.078, 192.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03975081240070599;  // std dev = 0.694, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.02061562655957568;  // std dev = 1.235, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.1570014001872832;  // std dev = 0.072, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.17492057947298076;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18373030463639964;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.0711901273759308;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.11768888487233464;  // std dev = 1.079, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.04059581060368983;  // std dev = 0.127, 189.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=26 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.22274793827444206;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41027326286287624;  // std dev = 0.323, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1142975183736918;  // std dev = 0.027, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12535684928779295;  // std dev = 1.008, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.2365811946150881;  // std dev = 0.244, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.07933518518246502;  // std dev = 0.329, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.0661008428926647;  // std dev = 0.029, 188.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.035208153831687204;  // std dev = 0.126, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.012954827116811575;  // std dev = 0.132, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.20387639564198412;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10943413185415826;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.0015458385485732327;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.746', 'seconds']
Refined model CLL: -0.100074


******************************************
Best model found
******************************************
Results 

CLL : -0.098117 

AUC ROC : 0.99516 

AUC PR : 0.407225 

Precision : 0.342163 

Recall : 0.99359 

F1 : 0.509031 

Total Learning Time : 14.112 

Total Inference Time : 9.120399475097656 

Total revision time: 32.073619626998905
Best scored revision CLL: -0.100074


Results 

CLL : -0.098117 

AUC ROC : 0.99516 

AUC PR : 0.407225 

Precision : 0.342163 

Recall : 0.99359 

F1 : 0.509031 

Total Learning Time : 33.5727184047699 

Total Inference Time : 9.120399475097656 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.389
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7250403421401838;  // std dev = 0.142, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03480182561828858;  // std dev = 0.262, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08651064053942854;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7483184063034612;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10458870527520617;  // std dev = 3.231, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5023137591243894;  // std dev = 2.163, 76.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=70 */
%   | | else return 0.7302124081927914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8166312174714222;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.41101295801023374;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5586927516897827;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5586927516897827;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03788959843900345;  // std dev = 3.652, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.04310716367297639;  // std dev = 2.780, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4842014388439182;  // std dev = 2.758, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11807551342431301;  // std dev = 0.026, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.12667083853831043;  // std dev = 0.005, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1567608611530455;  // std dev = 0.179, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31331419316773024;  // std dev = 1.519, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.2353179422297525;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3085224977926849;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6357339656898661;  // std dev = 0.187, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08635039248680342;  // std dev = 2.330, 264.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=9 */
%   | | else return -0.10837929673285675;  // std dev = 2.95e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02322333599323089;  // std dev = 3.680, 273.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2587879739605196;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5448306624342576;  // std dev = 0.722, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11809134498940779;  // std dev = 0.121, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.1137048423824956;  // std dev = 0.111, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27665403055249815;  // std dev = 1.740, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.0774698847658377;  // std dev = 2.072, 249.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008166143736620871;  // std dev = 0.671, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15468150817221654;  // std dev = 1.919, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23897853042285844;  // std dev = 0.062, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051031092832383156;  // std dev = 0.149, 224.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0013294819612434618;  // std dev = 1.383, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.09444002680878597;  // std dev = 1.634, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13193976134573268;  // std dev = 0.250, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20242936069013606;  // std dev = 1.725, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08997847053329416;  // std dev = 0.039, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44171804156756245;  // std dev = 0.612, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10919903072097256;  // std dev = 0.167, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17558453857774758;  // std dev = 1.767, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.15060633980980365;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08333681903181507;  // std dev = 0.031, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08221467576577737;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.018475948723986304;  // std dev = 0.476, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.007806514201440662;  // std dev = 1.018, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.27844886444816797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06435272616194539;  // std dev = 1.306, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.643', 'seconds']
Parameter learned model CLL:-0.109944 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.266, 24, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.142, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [3.231, 47, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.163, 6, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.801, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.652, 182, 21], 'false,false,false,false': [2.78, 47, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.758, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 157, 0], 'false,true,false,false': [0.005, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.179, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.519, 2, 73], 'true,false': [0.891, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.187, 0, 23], 'false,false,true,false': [2.33, 255, 9], 'false,false,false': [2.95e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.68, 182, 91], 'false,true': [0.149, 0, 13], 'false,false,true': [0.722, 0, 22], 'false,false,false,true': [0.121, 37, 0], 'false,false,false,false': [0.111, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.74, 3, 107], 'true,false': [2.072, 238, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.671, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.919, 4, 80], 'true,false,true': [0.062, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 202, 22], 'false,false,false,true': [1.383, 47, 13], 'false,false,false,false': [1.634, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.25, 6, 77], 'false,true,true,true': [1.725, 3, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 203, 0], 'false,false,true': [0.612, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 47, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.767, 3, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.031, 172, 0], 'true,false,false,true': [1.29e-08, 20, 0], 'true,false,false,false': [0.476, 10, 2], 'false,true': [1.018, 31, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.306, 15, 8]}]
{'': [0.2250421755138008, 0.2204589843750001], 'true': [0.01868480725623786, 0.009802960494069042], 'false': [0.22222222222222174, 0.21811224489795927], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true,false': [-1.8924256101565169e-16, 0.07100591715976336], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.0002448528440258262, 0.0979692056612223], 'false': [0.06871663608795735, 0.15507296408585164], 'false,false': [0.045351473922902466, 0.17658751858670438], 'false,false,false': [0.0024961010525902383, 0.16309247171282612], 'false,true': [nan, 0.06871663608795735], 'false,false,true': [nan, 0.045351473922902466]}
{'': [0.0668802087445909, 0.09605202723345445], 'false': [nan, 0.09605202723345445], 'false,false': [-1.0449157878825003e-16, 0.0818374540600769], 'false,false,false': [0.06570339621951309, 0.13320406446778607], 'true': [0.0614509487023311, 0.12617318422705323], 'true,false': [0.003477721248512533, 0.12824389158751975], 'true,true': [0.06158499700843025, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.05763646584655754, 0.0003568863296230126], 'false': [1.4818421572505667e-05, 0.0007088914862021234], 'false,false': [nan, 0.0007088914862021234], 'false,false,false': [nan, 0.0007088914862021234], 'false,true': [nan, 1.4818421572505667e-05], 'false,true,false': [4.2568292355423034e-06, 7.797388030528207e-07]}
{'': [0.039130407029045314, 0.05847491658931679], 'false': [-1.3061447348531253e-17, 0.055573666342800546], 'false,false': [0.05746803798867682, 7.569702440626067e-18], 'false,false,true': [0.0015217207842336314, 0.02055701353063056], 'true': [0.03076382112495236, 0.15892599387758405], 'false,true': [-1.3061447348531253e-17, nan]}
{'': [0.0495954032911055, 0.08472515212432835], 'false': [0.0017141692719752077, 0.09253194644692356], 'false,false': [0.023718444252834568, 0.00045553460279560977], 'true': [nan, 0.04959540329110537], 'true,false': [nan, 0.0495954032911055], 'false,false,false': [0.00039735840114668125, 0.0005372568722906049]}
{'': [0.04703731496018168, 0.018769995629474158], 'true': [0.027521335019191958, 0.01723428564596734], 'false': [nan, 0.018769995629474158], 'false,false': [nan, 0.018769995629474158], 'false,false,false': [nan, 0.018769995629474158]}
{'': [0.04301917480502372, 0.03248765539336452], 'true': [0.04383292352741233, 0.001900996038338272], 'false': [nan, 0.032487655393364095], 'false,false': [0.022110583139296303, 0.054662221694888206], 'false,false,false': [0.03188955591065604, 0.09894276717015732], 'true,false': [0.001900996038338272, nan]}
{'': [0.0624293163954225, 0.033364947192609615], 'false': [0.0232267271803889, 0.06549044375112409], 'false,false': [0.022018234590655335, 0.0005946913428636589], 'false,true': [0.08497049910877222, 7.3757674681787145e-06], 'false,true,true': [0.08497049910877222, nan], 'false,false,false': [nan, 0.0005946913428636589]}
{'': [0.02536811784056912, 0.042548756060797506], 'false': [0.024090613027047104, 0.07286893511189686], 'false,false': [0.0, 0.07412726816410128], 'false,false,false': [nan, 0.07412726816410128], 'true': [0.029514484713844952, 0.0013482708482252374], 'true,true': [0.03219881697222943, 1.2411263256545402e-05], 'true,false': [5.4430794380920875e-06, 0.008037990069945506], 'true,false,false': [8.326672684688674e-18, 0.018895499358453898]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.022
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8287371703936304;  // std dev = 1.393, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.1314343982338216;  // std dev = 0.102, 192.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7284984775119246;  // std dev = 0.169, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6677679412691462;  // std dev = 0.231, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.03818570004919587;  // std dev = 3.222, 154.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=16 */
%   | | | else return -0.020833735030874004;  // std dev = 0.791, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.04174945889979426;  // std dev = 0.255, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.016265243934579048;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.1265918989225638;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5797501051346149;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07635737992674503;  // std dev = 3.289, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.581942929689146;  // std dev = 0.051, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7336092450035896;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5040813935641265;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6695288540577258;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5557764359384232;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10447392590909918;  // std dev = 1.464, 142.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=3 */
%   | | | else return -0.015226804115507695;  // std dev = 2.751, 95.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07550073959377411;  // std dev = 2.187, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.20074161597777282;  // std dev = 2.190, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.420438747214214;  // std dev = 0.108, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else return 0.47895971575615087;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.633766349956827;  // std dev = 1.084, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.46262186095869795;  // std dev = 1.095, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5689958472778774;  // std dev = 0.276, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.72776326213841;  // std dev = 0.232, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.11395402112882341;  // std dev = 0.006, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( tweets(A, K) )
%   | | then return -0.15071717447056518;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.21385216988711075;  // std dev = 0.009, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.30683496062492677;  // std dev = 0.140, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.3749752123251239;  // std dev = 0.246, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.24114999642198087;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.03810327084151488;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20806330289329625;  // std dev = 0.884, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3196361926751416;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5893552837857281;  // std dev = 0.205, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08752767935387769;  // std dev = 2.058, 245.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=9 */
%   | | else return -0.09309187471182753;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.258150238630254;  // std dev = 0.126, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return -0.10421686838074276;  // std dev = 1.046, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3397549455229349;  // std dev = 1.165, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09531557678608357;  // std dev = 0.044, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.04180070866990238;  // std dev = 0.160, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27041763759888043;  // std dev = 0.060, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.12720241288087894;  // std dev = 1.050, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5099640629061062;  // std dev = 0.461, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12111933249109931;  // std dev = 0.028, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(C, A) )
%   | | then return 0.20215300586398297;  // std dev = 0.125, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.3838063764318085;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.06803078462828338;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F), tweets(E, G) )
%   | | then return -0.05811205571817066;  // std dev = 0.115, 223.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=17 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.31992747151641693;  // std dev = 0.271, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10384670389226014;  // std dev = 0.124, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20435103189909218;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07794409375452174;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.03949282200506291;  // std dev = 1.653, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17388250110351797;  // std dev = 0.113, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return -0.09343336261859543;  // std dev = 0.890, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07247625078897665;  // std dev = 0.060, 188.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.29197077860098597;  // std dev = 1.162, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08903428970689675;  // std dev = 0.028, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1585831012708833;  // std dev = 1.013, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10985381689702968;  // std dev = 0.089, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16061577209802064;  // std dev = 0.645, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.10687170363596853;  // std dev = 1.254, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.14775007305223412;  // std dev = 1.016, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return -0.04153466407670353;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.04088025013401134;  // std dev = 0.818, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.28307987626990133;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.24586100009393885;  // std dev = 0.099, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07669611094156771;  // std dev = 0.065, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2222650463165383;  // std dev = 0.167, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3362959051465947;  // std dev = 0.913, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.12012030778059236;  // std dev = 0.036, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10980014496359898;  // std dev = 1.666, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.2380934746347712;  // std dev = 0.396, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.1209583489330246;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06809753406694541;  // std dev = 0.038, 212.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.154501620787521;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07936693489161165;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.03074968449841716;  // std dev = 0.191, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2645187327340479;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.02254080448255032;  // std dev = 0.241, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.997', 'seconds']
Refined model CLL: -0.104642


******************************************
Best model found
******************************************
Results 

CLL : -0.103392 

AUC ROC : 0.99549 

AUC PR : 0.43832 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 10.022 

Total Inference Time : 13.343451023101807 

Total revision time: 33.67046807861328
Best scored revision CLL: -0.104642


Results 

CLL : -0.103392 

AUC ROC : 0.99549 

AUC PR : 0.43832 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 35.16956685638428 

Total Inference Time : 13.343451023101807 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.256
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.030739953789376676;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.734188710389037;  // std dev = 0.131, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.056262182436685716;  // std dev = 0.233, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13815014721646235;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8480810227596002;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10303556029090855;  // std dev = 1.837, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5620113432449035;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7496133549259124;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7050676650285173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.29121201380523976;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5620113432449034;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021611763018538434;  // std dev = 2.080, 55.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=7 */
%   | | | else return -0.008736926402440127;  // std dev = 1.226, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48869336923906825;  // std dev = 1.388, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11838053187497954;  // std dev = 0.031, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.11951438968039152;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15021038286134922;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31663164355599394;  // std dev = 0.107, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.05762158976943893;  // std dev = 0.739, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33399178158294474;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.629969496685516;  // std dev = 0.149, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11731064847921525;  // std dev = 0.116, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06237669312874784;  // std dev = 0.189, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06092198280368995;  // std dev = 1.299, 44.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.30021104903217516;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.38599082657360106;  // std dev = 0.706, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11496951312906396;  // std dev = 0.060, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.10813683146957671;  // std dev = 0.056, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2650100954448209;  // std dev = 0.998, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.09282759285851541;  // std dev = 0.336, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.027157410699950948;  // std dev = 0.731, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1950826999260768;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, E) )
%   | | then return 0.34313489332345415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03908779012577006;  // std dev = 0.154, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.001848032323237635;  // std dev = 0.982, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.0398968102763542;  // std dev = 0.611, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17247659055613362;  // std dev = 0.028, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26601067767309555;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08908768907202776;  // std dev = 0.023, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.23103412832573328;  // std dev = 0.853, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1016233059059047;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17555646907727057;  // std dev = 0.333, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.14189723958258654;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08206199865475625;  // std dev = 0.001, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08308031287970599;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.029679129227239382;  // std dev = 0.255, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.027574407561727857;  // std dev = 0.716, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1942816138728144;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04298222414852639;  // std dev = 0.488, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.188', 'seconds']
Parameter learned model CLL:-0.100737 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.979, 1, 23], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.314, 8, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 11, 0], 'false,false': [0.416, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.131, 0, 21], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.233, 34, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.837, 16, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.663, 1, 2], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [2.08, 48, 7], 'false,false,false,false': [1.226, 11, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.388, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 40, 0], 'false,true,false,false': [0.003, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.071, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.107, 0, 16], 'true,false': [0.739, 1, 1], 'false,true,true': [0.066, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.149, 0, 8], 'false,false,true,false': [0.116, 52, 0], 'false,false,false': [0.189, 12, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.299, 26, 18], 'false,true': [0.204, 0, 6], 'false,false,true': [0.706, 1, 7], 'false,false,false,true': [0.06, 20, 0], 'false,false,false,false': [0.056, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.998, 1, 26], 'true,false': [0.336, 50, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.731, 15, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.062, 0, 20], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 25, 3], 'false,false,false,true': [0.982, 14, 5], 'false,false,false,false': [0.611, 11, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.028, 0, 17], 'false,true,true,true': [0.327, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 38, 0], 'false,false,true': [0.853, 1, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.333, 0, 18], 'true,true,false': [0.04, 0, 5], 'true,false,true': [0.001, 42, 0], 'true,false,false,true': [0.002, 7, 0], 'true,false,false,false': [0.255, 2, 1], 'false,true': [0.716, 12, 5], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.488, 8, 1]}]
{'': [0.2314049586776871, 0.2016000000000001], 'true': [0.039930555555556024, 0.023242630385487566], 'false': [0.2148437499999998, 0.17283950617283952], 'false,true': [0.0, -1.0092936587501423e-17], 'true,false': [3.027880976250427e-17, 0.09876543209876548], 'false,true,true': [0.0, 0.0]}
{'': [0.0008148683638731754, 0.09826200139263068], 'false': [0.05424373861664884, 0.14352366822733403], 'false,false': [-3.96508223080413e-18, 0.16974084329166414], 'false,false,false': [0.0, 0.15332186916224563], 'false,true': [nan, 0.05424373861664884], 'false,false,true': [nan, -3.96508223080413e-18]}
{'': [0.0028957740772446693, 0.10105860134937578], 'false': [nan, 0.10105860134937576], 'false,false': [0.09166534603121435, 0.08577629679373222], 'false,false,true': [0.146664553649943, 3.700743415417188e-17], 'false,false,false': [0.07867264380362837, 0.11569614155526603], 'true': [-1.1842378929335003e-16, 0.000496079622108736], 'true,false': [0.0, 0.0], 'true,true': [-1.1842378929335003e-16, nan]}
{'': [0.06018458700477314, 0.00032082344046966283], 'false': [2.2448821831855e-05, 0.00022185545028499313], 'false,false': [nan, 0.00022185545028499313], 'false,false,false': [nan, 0.00022185545028499313], 'false,true': [nan, 2.2448821831852418e-05], 'false,true,false': [2.3884018157901977e-05, 2.116932657010573e-06]}
{'': [0.04477255916493111, 0.06415549082066543], 'false': [0.0008828548417571635, 0.06019879528781099], 'false,false': [0.06512275682568476, 0.035830303561704996], 'false,false,true': [0.0027718899252548446, 0.00025818250629978197], 'true': [0.0007142165437137443, 0.2727366488861894], 'false,true': [0.0008828548417571635, nan]}
{'': [0.03832430740661705, 0.053562258301092444], 'false': [0.006957934580012685, 0.04746111583144854], 'false,false': [0.062310491536350515, 0.0001925293324280819], 'true': [nan, 0.03832430740661705], 'true,false': [nan, 0.03832430740661705], 'false,false,false': [0.0001773835653912065, 0.00018511245558059484]}
{'': [0.043191756512322356, 0.028107439333297856], 'true': [0.0368752104872717, 0.002211567962118011], 'false': [nan, 0.028107439333297853], 'false,false': [nan, 0.028107439333297856], 'false,false,false': [nan, 0.028107439333297856]}
{'': [0.0011779625582921036, 0.0336085467687046], 'false': [nan, 0.033608546768704554], 'false,false': [0.023593720962696574, 0.04215009779010074], 'false,false,false': [0.05077673649230017, 0.028682356015202977], 'true': [0.0001930772590745977, 0.0], 'true,false': [0.0, nan]}
{'': [0.0007988270642044607, 0.032558098374533974], 'false': [0.020454106845507622, 0.057192926149800254], 'false,false': [0.10401015735230022, 0.0001345767471016594], 'false,true': [0.01338227103937005, 1.3375241893293088e-05], 'false,true,true': [0.01338227103937005, nan], 'false,false,false': [nan, 0.0001345767471016594]}
{'': [0.015554624882676735, 0.030206362554244245], 'false': [0.030171228425034214, 0.028885267387778607], 'false,false': [0.0, 0.026465328658714524], 'false,false,false': [nan, 0.026465328658714524], 'true': [0.005083010693701327, 0.0019298326579202918], 'true,true': [0.0061601497889761225, 0.00031865833579182434], 'true,false': [5.2318868445261084e-08, 0.009165457987312275], 'true,false,false': [4.841282863210505e-07, 0.021650112742717484]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 3.673
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.11859525094699931;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7335355046813892;  // std dev = 0.161, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.06021895933136048;  // std dev = 0.230, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.03385255063186189;  // std dev = 0.266, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return -0.12801829598721398;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.8444674378357556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.08826623191042667;  // std dev = 1.895, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5518913718516484;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(E, A) )
%   | | then return 0.7658563397146165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7000180106933265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5518913718516483;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6126145042133565;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.11880144195990462;  // std dev = 0.017, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.0019098580681415306;  // std dev = 1.114, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.2922726765641628;  // std dev = 1.355, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.06481450637473266;  // std dev = 1.260, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.324032041098151;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.4149411320072419;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.5519396513603435;  // std dev = 0.402, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.29326901484963896;  // std dev = 0.545, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.6367560935655957;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7092128808212234;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.11284130151197373;  // std dev = 0.007, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( tweets(A, K) )
%   | | then return -0.17345844173686256;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.14224556090331242;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.33217203972870135;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3336856089760298;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5314420543759094;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32544491525791397;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5622070447534225;  // std dev = 0.252, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11592564159519682;  // std dev = 0.134, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05052728127564047;  // std dev = 0.671, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.10858432153371164;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.04569993020134435;  // std dev = 0.188, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | else return 0.063193255841825;  // std dev = 0.216, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2820751349739455;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.3457777310003284;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4997362451031199;  // std dev = 0.257, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12444208273078121;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.09881974783887576;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2613210267430697;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.23014041901448526;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.4620579358680689;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29988981808868914;  // std dev = 0.209, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.09630245614296896;  // std dev = 0.041, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.11773496712173977;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.0401052008643561;  // std dev = 0.258, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return 0.015660928972202563;  // std dev = 0.187, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.1406623782175652;  // std dev = 0.248, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.20065440801159987;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2791053251706703;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.08534446171270123;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I), follows(G, I) )
%   | | | then return 0.01460423151251909;  // std dev = 0.665, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.09325280529601032;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.2679561296324554;  // std dev = 0.228, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11457722476369343;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.010193405824653275;  // std dev = 0.170, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.11909783508615814;  // std dev = 0.262, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.16856890908180133;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.08584490735464734;  // std dev = 1.077, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.20678078117841475;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return -0.08516402544380458;  // std dev = 0.045, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.07815699881749556;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.25346238000022;  // std dev = 0.272, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10751125685004781;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.09609562962965418;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19589650868836098;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1506602512024493;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07196008155530124;  // std dev = 0.041, 48.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.5719896715304157;  // std dev = 0.874, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.024223260297420963;  // std dev = 0.287, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.00412593214236695;  // std dev = 0.395, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14383638718941638;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0026853495530382134;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.08395253467673305;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.352', 'seconds']
Refined model CLL: -0.095369


******************************************
Best model found
******************************************
Results 

CLL : -0.101912 

AUC ROC : 0.993177 

AUC PR : 0.361729 

Precision : 0.339888 

Recall : 0.960317 

F1 : 0.502075 

Total Learning Time : 3.673 

Total Inference Time : 3.1902503967285156 

Total revision time: 10.816329816818238
Best scored revision CLL: -0.095369


Results 

CLL : -0.101912 

AUC ROC : 0.993177 

AUC PR : 0.361729 

Precision : 0.339888 

Recall : 0.960317 

F1 : 0.502075 

Total Learning Time : 10.849201539993286 

Total Inference Time : 3.1902503967285156 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.519
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8359267128772897;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7315893577693074;  // std dev = 0.195, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03603608674430244;  // std dev = 0.261, 76.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09156623889846081;  // std dev = 0.837, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8348533885809816;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1500933992115769;  // std dev = 3.003, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5711851837440478;  // std dev = 0.235, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7558871929850274;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6868791405696308;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6073672548949216;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5578606088648863;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013922890195381952;  // std dev = 2.730, 91.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=12 */
%   | | | else return 0.05863397367135529;  // std dev = 2.676, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5366007615943179;  // std dev = 1.496, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12116106191244008;  // std dev = 0.032, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.1284040646100391;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17370195301565278;  // std dev = 0.152, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3110409944101264;  // std dev = 0.257, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.45953214980053203;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29413633334531125;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.49657347630337845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6406747419757572;  // std dev = 0.155, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.11238400268569529;  // std dev = 0.848, 108.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=1 */
%   | | else return 0.0852149566871499;  // std dev = 0.344, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022611190988369088;  // std dev = 1.971, 100.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25837137849862163;  // std dev = 0.162, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5051812099019498;  // std dev = 0.941, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12456794699647249;  // std dev = 0.106, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.13913634918860027;  // std dev = 0.152, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29620622959552945;  // std dev = 0.609, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0944578304552792;  // std dev = 0.785, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06458568815961388;  // std dev = 1.555, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18207380213799146;  // std dev = 0.042, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, E) )
%   | | then return 0.24604696344291765;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0470790339355916;  // std dev = 0.166, 68.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03188962330661039;  // std dev = 1.060, 45.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=7 */
%   | | | else return 0.06665818753605302;  // std dev = 1.525, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11476640501410323;  // std dev = 0.213, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24834683901366197;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09338689659295807;  // std dev = 0.104, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39909318156247936;  // std dev = 0.420, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1246141296792319;  // std dev = 0.216, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18598675380975827;  // std dev = 0.459, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.15000437557278223;  // std dev = 0.238, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08109379045313347;  // std dev = 0.013, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09947124578785314;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.03721133553193343;  // std dev = 0.335, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.004291831314036874;  // std dev = 0.789, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1503621063762861;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00753337757074614;  // std dev = 1.307, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.080', 'seconds']
Parameter learned model CLL:-0.110266 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.989, 1, 44], 'true,false,true': [6.14e-08, 59, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [0.0, 12, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.195, 0, 37], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 68, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.837, 19, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [3.003, 33, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.235, 0, 26], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.171, 0, 4], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [2.73, 79, 12], 'false,false,false,false': [2.676, 33, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.496, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 76, 0], 'false,true,false,false': [0.004, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.257, 0, 27], 'true,false': [0.0, 0, 1], 'false,true,true': [0.015, 0, 11], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.155, 0, 14], 'false,false,true,false': [0.848, 107, 1], 'false,false,false': [0.344, 18, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.971, 67, 33], 'false,true': [0.162, 0, 12], 'false,false,true': [0.941, 1, 17], 'false,false,false,true': [0.106, 24, 0], 'false,false,false,false': [0.152, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.609, 0, 45], 'true,false': [0.785, 114, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.555, 20, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.042, 0, 35], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 60, 8], 'false,false,false,true': [1.06, 38, 7], 'false,false,false,false': [1.525, 18, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.213, 2, 28], 'false,true,true,true': [0.499, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.104, 86, 0], 'false,false,true': [0.42, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.216, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.459, 0, 33], 'true,true,false': [0.238, 0, 11], 'true,false,true': [0.013, 53, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.335, 9, 2], 'false,true': [0.789, 20, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.307, 21, 8]}]
{'': [0.2294333273240799, 0.22222222222222174], 'true': [0.0217283950617295, 0.023242630385487593], 'false': [0.2275000000000001, 0.21811224489795927], 'false,true': [0.10937499999999978, -1.1564823173178714e-17], 'false,true,true': [0.15999999999999986, 1.4802973661668753e-16], 'true,false': [6.39789539614497e-17, 0.07360000000000004]}
{'': [0.0010248813596674025, 0.11616019136057387], 'false': [0.06794805762308925, 0.16094123682166173], 'false,false': [0.035002362412117335, 0.19340314552824128], 'false,false,false': [0.0, 0.18786306664427352], 'false,true': [nan, 0.06794805762308925], 'false,false,true': [nan, 0.035002362412117335]}
{'': [0.0035596774222937783, 0.12544707769214583], 'false': [nan, 0.12544707769214664], 'false,false': [0.0029955542236194863, 0.11017497846856954], 'false,false,false': [0.08187569009697027, 0.16648902563892218], 'true': [0.0021305315485248364, 0.001190527824541432], 'false,false,true': [0.007352724003429567, 0.0], 'true,true': [0.0021305315485248364, nan], 'true,false': [0.0, 0.0]}
{'': [0.03553854637710328, 0.0007259981881817312], 'false': [1.7806556059573646e-05, 0.0007245207201017657], 'false,false': [nan, 0.0007245207201017657], 'false,false,false': [nan, 0.0007245207201017657], 'false,true': [nan, 1.780655605957617e-05], 'false,true,false': [1.3297864499089107e-05, 1.0542992698199065e-06]}
{'': [0.003115407609597054, 0.07640139408124003], 'false': [0.0031495057984760413, 0.07474602203466955], 'false,false': [0.06370298598473767, 0.11837681554091374], 'false,false,true': [0.0017146806316895738, 0.006661747862504086], 'false,true': [2.0758103343010426e-05, 0.0], 'true': [0.0024433065327199863, 0.0]}
{'': [0.038861573273228596, 0.08584787638228435], 'false': [0.0021965270821198333, 0.09353241544639815], 'false,false': [0.049172393125871655, 0.000753059700993427], 'true': [nan, 0.0388615732732286], 'true,false': [nan, 0.038861573273228596], 'false,false,false': [0.0004720008272887308, 0.0009189227459059146]}
{'': [0.036860893079699676, 0.0691302423147717], 'false': [nan, 0.06913024231477165], 'false,false': [nan, 0.0691302423147717], 'false,false,false': [nan, 0.0691302423147717], 'true': [0.00824168908654667, 0.005305851536226677]}
{'': [0.0002632630634440474, 0.0396851857920424], 'false': [nan, 0.03968518579204245], 'false,false': [0.027660561647415448, 0.04953209470415361], 'false,false,false': [0.02495103305770257, 0.08305072582989785], 'true': [5.0982969864340634e-05, 0.00010681908332896284], 'true,false': [0.00010681908332896284, nan]}
{'': [0.04551549323878609, 0.03337181765391629], 'false': [0.01978658822521336, 0.05709911213415164], 'false,false': [0.011779109046798108, 0.0011086833519598494], 'false,true': [0.01312710461890246, 0.000125898296773198], 'false,true,true': [0.01312710461890246, nan], 'false,false,false': [nan, 0.0011086833519598494]}
{'': [0.018683180384956016, 0.04132506282812383], 'false': [0.023037047630407387, 0.057763879575687314], 'false,false': [0.0, 0.05892470469706135], 'false,false,false': [nan, 0.05892470469706141], 'true': [0.00632779951064895, 0.0018732324084537015], 'true,true': [0.006392820547121106, 0.005161687743540908], 'true,false': [3.153204937976416e-06, 0.006859992347116972], 'true,false,false': [0.0, 0.010216952879916806]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.455
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8359267128772897;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.22178529873587588;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.729843029788622;  // std dev = 0.150, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.03927552702633462;  // std dev = 0.256, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | | else return -0.004104461107127695;  // std dev = 0.297, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.0444316098613778;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.21947341221095445;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.04491335654638498;  // std dev = 3.067, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5716316996324068;  // std dev = 0.236, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(E, A) )
%   | | then return 0.7065475114830068;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.0064637106999727205;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5953553534615326;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5582913007877081;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.12038230349435072;  // std dev = 0.031, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.024651901841227536;  // std dev = 2.051, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04594070180806439;  // std dev = 2.287, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.18233909774013907;  // std dev = 1.816, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.41644083556780304;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08355916443219702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return 0.4174046360283879;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.48510343983543414;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.6954472841488767;  // std dev = 0.145, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6714164872425593;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.6991038164966176;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.781692259917111;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12608256342643212;  // std dev = 0.025, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32906740733312273;  // std dev = 0.033, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.4576987921184148;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4223884368516144;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3191789172301698;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4497244498443582;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.551382531069628;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10105577979799292;  // std dev = 0.786, 113.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=1 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.08998971051831071;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.08029042965552813;  // std dev = 1.593, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.26249608979362304;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.28678312441462606;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.29818853796204514;  // std dev = 0.698, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09367784857700456;  // std dev = 0.048, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.04945809363627531;  // std dev = 0.150, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26766784742732325;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4007250265643896;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5664290035386835;  // std dev = 0.212, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1169530461847508;  // std dev = 0.032, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.20622304125334012;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.23823410297700223;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( follows(E, G), follows(G, A) )
%   | | then return -0.0804260757031289;  // std dev = 0.016, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.02160944282594842;  // std dev = 1.239, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | | | else return -0.11637541468375334;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.09224535586309121;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.008180870921005591;  // std dev = 1.312, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.013174460711403721;  // std dev = 0.705, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.05579969175772808;  // std dev = 1.002, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.17976878435075697;  // std dev = 0.109, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.06169988441426269;  // std dev = 0.792, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.06570641537229288;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.23167685844488167;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2808810788760762;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07558065008265033;  // std dev = 0.051, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.006754949649414171;  // std dev = 1.122, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0426142765522868;  // std dev = 0.979, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.025905217066404626;  // std dev = 1.467, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.1575036357585925;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.096642010735704;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.22780434606467606;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16919805439781596;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.37675816336140705;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07832119746974898;  // std dev = 0.014, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3104608687012058;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.423745934473044;  // std dev = 0.198, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11730667407833723;  // std dev = 0.033, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14081861995129227;  // std dev = 0.016, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.26885489117091166;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06557403490629635;  // std dev = 0.043, 80.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2549117428975254;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08731819244417303;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.038928193266238344;  // std dev = 0.188, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2044874549511928;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0034095733430081596;  // std dev = 0.759, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.024858276019627774;  // std dev = 0.730, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.359', 'seconds']
Refined model CLL: -0.102468


******************************************
Best model found
******************************************
Results 

CLL : -0.102668 

AUC ROC : 0.992655 

AUC PR : 0.346061 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 5.455 

Total Inference Time : 6.519006729125977 

Total revision time: 17.776782773971558
Best scored revision CLL: -0.102468


Results 

CLL : -0.102668 

AUC ROC : 0.992655 

AUC PR : 0.346061 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 17.809654497146607 

Total Inference Time : 6.519006729125977 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.109
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.842019902841448;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.324815601766179;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6934829608908879;  // std dev = 1.316, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03424444033025512;  // std dev = 0.263, 93.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07543610871476414;  // std dev = 1.286, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3572216914839008;  // std dev = 1.083, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.138002117354449;  // std dev = 3.904, 81.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5568989640651154;  // std dev = 0.881, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8155241655229885;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4200016019939532;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6044357151692888;  // std dev = 0.173, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5657414643960103;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021712755368571354;  // std dev = 3.386, 148.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=19 */
%   | | | else return 0.03242557641062037;  // std dev = 3.300, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5507090152878881;  // std dev = 1.632, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12088381373652494;  // std dev = 0.028, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return -0.12795720614103226;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1692373371618086;  // std dev = 0.309, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30757412568631287;  // std dev = 1.128, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.4457481507676889;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2968773784447387;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.498305849871425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6147704269419277;  // std dev = 0.208, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10914394678010114;  // std dev = 1.083, 152.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=2 */
%   | | else return 0.1475572686188226;  // std dev = 0.372, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011817669149522047;  // std dev = 2.369, 154.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=46 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25406943870679877;  // std dev = 0.160, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4609882161577993;  // std dev = 1.440, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1240087960048554;  // std dev = 0.202, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.14988531885958178;  // std dev = 0.222, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2794616056240725;  // std dev = 1.248, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return -0.0868786880284185;  // std dev = 1.101, 142.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029064861175821497;  // std dev = 2.012, 61.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1901669232042296;  // std dev = 0.058, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E) )
%   | | then return 0.24670061439678947;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05395361512910511;  // std dev = 0.136, 114.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.025975284732046747;  // std dev = 1.722, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.022277371795316664;  // std dev = 2.004, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14865704112688752;  // std dev = 0.194, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.211579490203183;  // std dev = 1.002, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0940878953734358;  // std dev = 0.142, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.32639934704121926;  // std dev = 1.308, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12361725585452905;  // std dev = 0.271, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16638126260737163;  // std dev = 1.030, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.1547236648714853;  // std dev = 0.253, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08001954353973659;  // std dev = 0.012, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10299460442749113;  // std dev = 0.031, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.02325053515540828;  // std dev = 0.589, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.03128609237562589;  // std dev = 1.094, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.244921265930651;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020794246301806738;  // std dev = 1.579, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.842', 'seconds']
Parameter learned model CLL:-0.112405 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 61], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false': [0.3, 27, 3], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.499, 16, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.316, 2, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 83, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.286, 26, 2], 'false,false,false,true': [1.083, 2, 3], 'false,false,false,false': [3.904, 55, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.881, 1, 38], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.903, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.173, 0, 5], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [3.386, 129, 19], 'false,false,false,false': [3.3, 55, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.632, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 109, 0], 'false,true,false,false': [0.013, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.309, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.128, 1, 42], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.208, 0, 21], 'false,false,true,false': [1.083, 150, 2], 'false,false,false': [0.372, 19, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.369, 108, 46], 'false,true': [0.16, 0, 16], 'false,false,true': [1.44, 2, 31], 'false,false,false,true': [0.202, 56, 0], 'false,false,false,false': [0.222, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.248, 1, 67], 'true,false': [1.101, 138, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.012, 39, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.058, 0, 50], 'true,false,true': [0.021, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.136, 104, 10], 'false,false,false,true': [1.722, 61, 16], 'false,false,false,false': [2.004, 34, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.194, 2, 43], 'false,true,true,true': [1.002, 1, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.142, 133, 0], 'false,false,true': [1.308, 2, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.271, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.03, 1, 47], 'true,true,false': [0.253, 0, 14], 'true,false,true': [0.012, 81, 0], 'true,false,false,true': [0.031, 20, 0], 'true,false,false,false': [0.589, 14, 3], 'false,true': [1.094, 28, 15], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.579, 28, 13]}]
{'': [0.2222222222222224, 0.24161872644316748], 'false': [0.23200475907198043, 0.2488888888888884], 'false,true': [-2.3684757858670006e-16, 1.708035422500241e-17], 'true': [0.01586888657648215, 0.02254437869822481], 'true,false': [7.993605777301127e-17, 0.08999999999999984], 'false,true,true': [-1.6148698540002277e-16, 0.0]}
{'': [0.03207643835750857, 0.12874599796000175], 'false': [0.06903505205644883, 0.16993030850384477], 'false,false': [0.05903590976001118, 0.19347009356575434], 'false,false,false': [0.23458774302751326, 0.18813794253940241], 'false,true': [nan, 0.06903505205644883], 'false,false,true': [nan, 0.05903590976001118]}
{'': [0.040151139784222974, 0.11788096805544995], 'false': [nan, 0.11788096805544983], 'false,false': [0.002193230043318173, 0.1031982762028812], 'false,false,false': [0.07747125014675428, 0.15560273451009723], 'true': [0.01991493008666062, 0.17166434365215544], 'true,false': [0.0031709790925816828, 0.20376499317841582], 'true,true': [0.01991493008666062, nan], 'false,false,true': [0.005988980171621572, -1.6148698540002277e-16]}
{'': [0.028341132207303565, 0.0010110333601187898], 'false': [1.3373450349516002e-05, 0.0013445643122909298], 'false,false': [nan, 0.0013445643122909298], 'false,false,false': [nan, 0.0013445643122909298], 'false,true': [nan, 1.3373450349516002e-05], 'false,true,false': [7.070062490902309e-06, 1.0506877991880175e-05]}
{'': [0.02936682120910353, 0.07846213583937006], 'false': [0.0023892211285523324, 0.07762657495260722], 'false,false': [0.06291993494882356, 0.13814444786110763], 'false,false,true': [0.0020506444931428767, 0.007716256931216259], 'true': [0.029615860057566203, 0.0], 'false,true': [1.2663218291756687e-05, 0.0]}
{'': [0.03643704398095514, 0.08200832133846354], 'false': [0.001595840114929914, 0.08624117410130554], 'false,false': [0.06283279155561336, 0.0011365366273650387], 'true': [nan, 0.036437043980955104], 'true,false': [nan, 0.03643704398095514], 'false,false,false': [0.0007281997647645263, 0.0013641480811859656]}
{'': [0.042574008942357196, 0.06634135409048954], 'false': [nan, 0.0663413540904895], 'false,false': [nan, 0.06634135409048954], 'false,false,false': [nan, 0.06634135409048954], 'true': [0.022909683641326586, 0.008533802713784329]}
{'': [0.0001902592538648141, 0.038689926252196756], 'false': [nan, 0.03868992625219693], 'false,false': [0.018453089577191745, 0.055961602618179715], 'false,false,false': [0.03852253448821654, 0.08194299100994742], 'true': [6.628071505159206e-05, 0.00021658980125716792], 'true,false': [0.00021658980125716792, nan]}
{'': [0.037555962637902625, 0.03696642398183644], 'false': [0.018927877519808765, 0.0683849944548471], 'false,false': [0.06112091328473384, 0.0014161927685755428], 'false,true': [0.04016360247206486, 0.00015256847232364383], 'false,true,true': [0.04016360247206486, nan], 'false,false,false': [nan, 0.0014161927685755428]}
{'': [0.021491819443945657, 0.050426914104741795], 'false': [0.02782994474240276, 0.07276280605941542], 'false,false': [0.25, 0.060833148191548836], 'false,false,false': [nan, 0.060833148191548836], 'true': [0.018172002855283722, 0.003481360450549864], 'true,true': [0.022111864417995356, 0.004558693486930344], 'true,false': [1.8567221532086426e-06, 0.010970488571233632], 'true,false,false': [4.8078935945813916e-05, 0.020383021944093624]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 13.673
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7781489350995122;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return -0.11785106490048769;  // std dev = 0.153, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.32481560176617896;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7299108030215705;  // std dev = 0.211, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return -0.12810139218590588;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7427485754421382;  // std dev = 0.137, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12810139218590577;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7304786216933956;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.08814313333125419;  // std dev = 2.769, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.3316233203838232;  // std dev = 2.233, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.5111209507565502;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.5527876174232168;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.6239825713912738;  // std dev = 0.174, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return 0.18860704580116677;  // std dev = 0.998, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.6157522255125831;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5845899124609343;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then return -0.07593872478252524;  // std dev = 0.158, 142.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18518990269116348;  // std dev = 2.355, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.061556354086669346;  // std dev = 2.861, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3867550788889844;  // std dev = 0.980, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.24893699230059715;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.49521738119217323;  // std dev = 0.309, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.41573302202560397;  // std dev = 0.898, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.46961744182378323;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6845972681201978;  // std dev = 0.241, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10698725077749331;  // std dev = 8.16e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.10698725077749358;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.182532609567068;  // std dev = 0.299, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.3404825297779173;  // std dev = 0.035, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.05762541374207322;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5235675853037296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32807490433219827;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.47969943620240796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5052467456146849;  // std dev = 0.108, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10138442928296254;  // std dev = 0.943, 156.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.08657703562508208;  // std dev = 0.616, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | | else return 0.08322545127228084;  // std dev = 1.854, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26144494918438943;  // std dev = 0.013, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.23372287257565202;  // std dev = 0.982, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.08864742459049801;  // std dev = 5.87e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.057742486156078014;  // std dev = 0.111, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3026006065772896;  // std dev = 0.141, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17850075160092663;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.33576696296918634;  // std dev = 0.858, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5183008867919804;  // std dev = 0.276, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13261275156372074;  // std dev = 0.047, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21621469806524016;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.07335755520809725;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.20555527759193812;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22654287597526;  // std dev = 0.028, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(F, A) )
%   | then return -0.04557556299998928;  // std dev = 0.114, 128.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=12 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.29939784078702364;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12258431060855958;  // std dev = 0.804, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.019627161554685666;  // std dev = 1.082, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.015428411207947865;  // std dev = 1.493, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.11507932515664195;  // std dev = 1.339, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.16922623585920935;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1868967083614394;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.26440293217479016;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.050373672410918495;  // std dev = 0.119, 149.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=12 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.1648023011205371;  // std dev = 1.036, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10006517866492275;  // std dev = 0.023, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.04761055638191205;  // std dev = 1.021, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.0833239757029367;  // std dev = 1.341, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.16196163048997064;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.11563286730834857;  // std dev = 0.958, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.28600890623317476;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06971964599717392;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16230690647987706;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.33943883070865255;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07445592961595543;  // std dev = 0.001, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.31303803051078;  // std dev = 0.081, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.1320621522595937;  // std dev = 0.054, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.11342623485807733;  // std dev = 0.964, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.1384405397517966;  // std dev = 0.046, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.2558291146067511;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.063236876379046;  // std dev = 0.043, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.19305409510673896;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09826540282254487;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), follows(J, I) )
%   | | | then return 0.2433116294208646;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.13148158033576018;  // std dev = 0.667, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.0302632451479008;  // std dev = 0.257, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.211', 'seconds']
Refined model CLL: -0.100901


******************************************
Best model found
******************************************
Results 

CLL : -0.100697 

AUC ROC : 0.994329 

AUC PR : 0.427379 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 13.673 

Total Inference Time : 10.348316669464111 

Total revision time: 32.46511285972595
Best scored revision CLL: -0.100901


Results 

CLL : -0.100697 

AUC ROC : 0.994329 

AUC PR : 0.427379 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 32.497984582901 

Total Inference Time : 10.348316669464111 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.244
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.04661296966239252;  // std dev = 0.294, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.21000078695136415;  // std dev = 0.478, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7113928988164818;  // std dev = 1.016, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04290832596923676;  // std dev = 0.251, 154.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04965896583647737;  // std dev = 1.578, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.44723019291390553;  // std dev = 1.044, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.13685624328337267;  // std dev = 4.571, 113.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5544482932376161;  // std dev = 1.055, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8131349789164662;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.44859304308350534;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5996541166781273;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5603674064308365;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.002826473902686112;  // std dev = 4.105, 188.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=28 */
%   | | | else return 0.06208668119614223;  // std dev = 3.791, 86.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5507813675644121;  // std dev = 2.059, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12378955803854033;  // std dev = 0.072, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | | else return -0.12883589879881563;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16363055660303913;  // std dev = 0.250, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27377403083042423;  // std dev = 1.768, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return 0.4430738277381988;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.293539063064147;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.49619622003460584;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6214717679433487;  // std dev = 0.313, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10171154040454744;  // std dev = 1.773, 208.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=5 */
%   | | else return 0.054885943316226475;  // std dev = 0.346, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022078897716295762;  // std dev = 2.777, 202.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=65 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20498201873237715;  // std dev = 0.820, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5324153241116479;  // std dev = 0.786, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12342089024510317;  // std dev = 0.155, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.13292862351525478;  // std dev = 0.153, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2416785328480975;  // std dev = 2.356, 100.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=94 */
%   | else return -0.08851417710878529;  // std dev = 1.636, 214.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023380838911034534;  // std dev = 2.022, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1818746032198429;  // std dev = 0.993, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.26178341924505033;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05373727600041844;  // std dev = 0.154, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007182157271876474;  // std dev = 1.842, 99.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=22 */
%   | | | else return 0.032708226662342466;  // std dev = 2.268, 68.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14517073789419155;  // std dev = 0.210, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2842427300945554;  // std dev = 0.779, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09426680917666366;  // std dev = 0.118, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3542232228835138;  // std dev = 1.240, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12342642172618627;  // std dev = 0.262, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19155382309223262;  // std dev = 0.631, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return 0.08501171893939694;  // std dev = 1.024, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.0817781474801867;  // std dev = 0.018, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09960304918272166;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.02466521429705095;  // std dev = 0.884, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.011794107551391864;  // std dev = 1.449, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.24693886530729747;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02620741119496722;  // std dev = 1.813, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.787', 'seconds']
Parameter learned model CLL:-0.112155 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 133, 0], 'true,false,false': [0.294, 38, 4], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.478, 35, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 139, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.578, 30, 3], 'false,false,false,true': [1.044, 2, 4], 'false,false,false,false': [4.571, 78, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.055, 1, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.933, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.176, 0, 5], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.105, 160, 28], 'false,false,false,false': [3.791, 66, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.059, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.072, 145, 0], 'false,true,false,false': [0.016, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.25, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.768, 3, 58], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.313, 0, 32], 'false,false,true,false': [1.773, 203, 5], 'false,false,false': [0.346, 32, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.777, 137, 65], 'false,true': [0.82, 1, 17], 'false,false,true': [0.786, 0, 42], 'false,false,false,true': [0.155, 58, 0], 'false,false,false,false': [0.153, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.356, 6, 94], 'true,false': [1.636, 207, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.022, 49, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 65], 'true,false,true': [0.022, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 135, 15], 'false,false,false,true': [1.842, 77, 22], 'false,false,false,false': [2.268, 48, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 3, 59], 'false,true,true,true': [0.779, 0, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 147, 0], 'false,false,true': [1.24, 1, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.262, 84, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.631, 0, 66], 'true,true,false': [1.024, 1, 15], 'true,false,true': [0.018, 121, 0], 'true,false,false,true': [0.039, 23, 0], 'true,false,false,false': [0.884, 12, 4], 'false,true': [1.449, 37, 20], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.813, 38, 18]}]
{'': [0.22135081530379036, 0.22127262280953883], 'true': [0.012046400951813752, 0.022334693877550924], 'false': [0.21484374999999956, 0.22805212620027385], 'false,true': [-8.881784197001253e-17, 4.794144879063176e-17], 'true,false': [-5.0085249231210067e-17, 0.08616780045351458], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.015186286204326356, 0.12274329694608038], 'false': [0.06312678412199128, 0.17158963748754744], 'false,false': [0.07542276646894852, 0.18938458013639453], 'false,false,false': [0.1816700952575894, 0.1849371237465967], 'false,false,true': [nan, 0.07542276646894852], 'false,true': [nan, 0.06312678412199128]}
{'': [0.03573529858028735, 0.12518502628733846], 'false': [nan, 0.12518502628733788], 'false,false': [0.0021362568886564718, 0.1148653832417102], 'false,false,false': [0.08964650470116788, 0.16710386072973718], 'true': [0.02062654031396552, 0.15228601703588143], 'true,false': [0.0031735219501024536, 0.1739622085042379], 'true,true': [0.02062654031396552, nan], 'false,false,true': [0.006173782408218464, -1.8503717077085943e-16]}
{'': [0.03364334905397431, 0.0006070410276134067], 'false': [3.5740590932242734e-05, 0.0008093451419525121], 'false,false': [nan, 0.0008093451419525121], 'false,false,false': [nan, 0.0008093451419525121], 'false,true': [nan, 3.5740590932245364e-05], 'false,true,false': [3.616500511976235e-05, 1.1327277001256056e-05]}
{'': [0.05087498762032252, 0.08170055882005145], 'false': [0.0022853844509107676, 0.08131639060165864], 'false,false': [0.07393328235936975, 0.11945379768781407], 'false,false,true': [0.0030547418883848376, 0.015105126871325265], 'true': [0.0512467066941581, 0.0], 'false,true': [1.234313960157829e-05, 0.0]}
{'': [0.03818667190182531, 0.08881255426782286], 'false': [0.03737826953821152, 0.09270764414665834], 'false,false': [0.014711556754914227, 0.0004655651106705097], 'true': [nan, 0.03818667190182548], 'true,false': [nan, 0.03818667190182531], 'false,false,false': [0.0004150371766239638, 0.0004763734470446897]}
{'': [0.04986022828782409, 0.056789803562898505], 'false': [nan, 0.05678980356289855], 'false,false': [nan, 0.056789803562898505], 'false,false,false': [nan, 0.056789803562898505], 'true': [0.05549774585577882, 0.012503827880072142]}
{'': [0.014692651217064815, 0.039354244284236596], 'false': [nan, 0.0393542442842368], 'false,false': [0.023757686113029836, 0.05149708274571857], 'false,false,false': [0.0342713062840524, 0.07563247515321625], 'true': [0.01494281424195312, 0.0002396589548050998], 'true,false': [0.0002396589548050998, nan]}
{'': [0.044236558558532105, 0.03947501719267811], 'false': [0.023671089050158328, 0.06129703707488513], 'false,false': [0.04270979130297703, 0.000818244649828339], 'false,true': [0.02021108271502358, 9.425155146138509e-05], 'false,true,true': [0.02021108271502358, nan], 'false,false,false': [nan, 0.000818244649828339]}
{'': [0.02394601832055638, 0.05245781347037619], 'false': [0.036850191500589116, 0.06778397461692526], 'false,false': [0.25000000000000006, 0.058703539136153574], 'false,false,false': [nan, 0.05870353913615357], 'true': [0.019425284758263925, 0.00601319486123636], 'true,true': [0.006024440098591108, 0.0655674212088935], 'true,false': [2.6500908061626817e-06, 0.02382988665794656], 'true,false,false': [6.691631290377676e-05, 0.04888198139842258]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 18.085
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.821785298735876;  // std dev = 0.187, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.11987304292246614;  // std dev = 0.147, 182.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7002541982574071;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7293546393875825;  // std dev = 0.207, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7403748747017431;  // std dev = 0.200, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.38856688495896496;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12787572435079883;  // std dev = 1.05e-07, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5379168489653932;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.11246863435789359;  // std dev = 3.357, 76.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=21 */
%   | | | else return 0.2307117917835063;  // std dev = 2.633, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.56911482827959;  // std dev = 0.283, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.29112792253784553;  // std dev = 1.166, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5957068371124233;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5529251045236762;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1142800535387658;  // std dev = 1.08e-07, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | | else return 0.031240691549660686;  // std dev = 2.236, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10663115287017991;  // std dev = 3.294, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
%   | | | else return 0.17812941678781735;  // std dev = 2.656, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), follows(D, E) )
%   | | | then return 0.42599954938098367;  // std dev = 1.093, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.3052773149913294;  // std dev = 1.271, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.6041911849845268;  // std dev = 0.256, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5761008808267721;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6825314196706317;  // std dev = 0.122, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.7059102934268889;  // std dev = 0.196, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.10898385244329466;  // std dev = 0.007, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else if ( follows(A, K) )
%   | | then return -0.15435747889166498;  // std dev = 0.060, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.21579456059363836;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3216380138429447;  // std dev = 9.42e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.12459588796824257;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.26411741588972587;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5113237369990524;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3412459013534344;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3983859461974085;  // std dev = 0.955, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09880325471160027;  // std dev = 0.087, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08159750933314718;  // std dev = 2.503, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
%   | | | else return 0.033880879736107275;  // std dev = 2.225, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25859552396316154;  // std dev = 0.071, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05088437340918642;  // std dev = 0.122, 120.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=11 */
%   | | else return -0.045984405087998385;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.3151858558020586;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.26673521849299936;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.028603988579365622;  // std dev = 1.455, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4849550485456405;  // std dev = 1.087, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1330984862745504;  // std dev = 0.132, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.13356454444057037;  // std dev = 0.321, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.20888612397620246;  // std dev = 0.065, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(F, A), follows(F, C) )
%   | | then return 0.2220625344001028;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2860731111079844;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.24223481989560602;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3757843274168812;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08599848232788841;  // std dev = 0.623, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return -0.019842782091118418;  // std dev = 1.511, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.01871992698394039;  // std dev = 2.239, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return -0.005128357564494659;  // std dev = 1.610, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.12505857473344453;  // std dev = 1.364, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.17666903813408527;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1798592604525702;  // std dev = 0.045, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.2594806173701014;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.2310957706490946;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.07941115186752341;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.0486097755870283;  // std dev = 0.114, 189.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.006014992342681352;  // std dev = 1.919, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | | else return 0.03507078760354569;  // std dev = 1.930, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.13261409642596952;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.15899354797604606;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2601518719536083;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.10383608196420593;  // std dev = 0.974, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.37958387181647824;  // std dev = 0.099, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07709996884855584;  // std dev = 0.091, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.3977770667517586;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.34191330171209916;  // std dev = 0.929, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.14108772588709084;  // std dev = 0.021, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14085687060765176;  // std dev = 0.058, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14519569561522383;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29134774422859716;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.06302823409699762;  // std dev = 0.050, 159.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.21510857507380607;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.29676927217131327;  // std dev = 0.088, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1176578943852465;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.011269389948881384;  // std dev = 1.184, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.06622929011736614;  // std dev = 1.037, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.074', 'seconds']
Refined model CLL: -0.10931


******************************************
Best model found
******************************************
Results 

CLL : -0.106565 

AUC ROC : 0.99286 

AUC PR : 0.355159 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 18.085 

Total Inference Time : 11.567382097244263 

Total revision time: 39.82518077278137
Best scored revision CLL: -0.10931


Results 

CLL : -0.106565 

AUC ROC : 0.99286 

AUC PR : 0.355159 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 39.85805249595642 

Total Inference Time : 11.567382097244263 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.569
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.07835900140842422;  // std dev = 0.244, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.1867203636709402;  // std dev = 0.470, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149903121686678;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03468209600350662;  // std dev = 0.264, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05525067527532216;  // std dev = 1.783, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5423519743759803;  // std dev = 1.309, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.11757872674888979;  // std dev = 4.957, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5588475897924807;  // std dev = 1.069, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.26984658310036336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7322392026103636;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5361915228921019;  // std dev = 0.858, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5945948016283978;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611249051014361;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01512155067931389;  // std dev = 4.577, 256.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=34 */
%   | | | else return 0.009274744777422017;  // std dev = 4.227, 135.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5207837249634844;  // std dev = 3.162, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12188840948802394;  // std dev = 0.054, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | | else return -0.12341730233860447;  // std dev = 0.010, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1610568005124028;  // std dev = 0.223, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31583073243712956;  // std dev = 1.021, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47760144148867756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3005867462257011;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5119952386084312;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6382737811509234;  // std dev = 0.373, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10132775440254936;  // std dev = 1.804, 245.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=5 */
%   | | else return 0.022193415273604924;  // std dev = 0.314, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02967325215516624;  // std dev = 3.041, 241.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2522350716690879;  // std dev = 0.184, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.531005174244175;  // std dev = 1.033, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12445373636362894;  // std dev = 0.180, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return -0.12770217756631996;  // std dev = 0.172, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23745564729258312;  // std dev = 2.834, 128.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=121 */
%   | else return -0.09250198086907567;  // std dev = 1.815, 271.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05445301140244359;  // std dev = 2.196, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1925956671542343;  // std dev = 0.082, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26801780483775334;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04372378361410409;  // std dev = 0.146, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.018385088054118526;  // std dev = 2.331, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | | | else return 0.03528113352623441;  // std dev = 2.688, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15976041219661405;  // std dev = 0.158, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2848035347043897;  // std dev = 0.904, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09205360166931094;  // std dev = 0.098, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3799305460698465;  // std dev = 1.141, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11112204626745183;  // std dev = 0.246, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15250260810605645;  // std dev = 1.836, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11871888409379269;  // std dev = 0.814, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08249892612950124;  // std dev = 0.009, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09534518660130306;  // std dev = 0.037, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.021607681299666618;  // std dev = 0.960, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.012340203528668681;  // std dev = 1.317, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22004902793635372;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0068818785537375195;  // std dev = 2.060, 83.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.952', 'seconds']
Parameter learned model CLL:-0.109759 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 139, 0], 'true,false,false': [0.244, 59, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.16e-08, 49, 0], 'false,false': [0.47, 47, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.783, 44, 4], 'false,false,false,true': [1.309, 2, 8], 'false,false,false,false': [4.957, 102, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.069, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.858, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.577, 222, 34], 'false,false,false,false': [4.227, 112, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.162, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 190, 0], 'false,true,false,false': [0.01, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.223, 89, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.021, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.373, 0, 39], 'false,false,true,false': [1.804, 240, 5], 'false,false,false': [0.314, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.041, 159, 82], 'false,true': [0.184, 0, 22], 'false,false,true': [1.033, 0, 52], 'false,false,false,true': [0.18, 85, 0], 'false,false,false,false': [0.172, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.834, 7, 121], 'true,false': [1.815, 264, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.196, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.082, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 163, 19], 'false,false,false,true': [2.331, 97, 28], 'false,false,false,false': [2.688, 56, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.158, 2, 78], 'false,true,true,true': [0.904, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.098, 226, 0], 'false,false,true': [1.141, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 91, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.836, 3, 85], 'true,true,false': [0.814, 1, 19], 'true,false,true': [0.009, 180, 0], 'true,false,false,true': [0.037, 32, 0], 'true,false,false,false': [0.96, 25, 4], 'false,true': [1.317, 54, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.06, 62, 21]}]
{'': [0.22769438353854188, 0.22222222222222296], 'true': [0.01851192595229848, 0.01940986177825693], 'false': [0.22370343316289376, 0.22061224489796016], 'false,true': [7.105427357601002e-16, 5.437827059388522e-17], 'true,false': [-7.348238724137727e-17, 0.05946082136558317], 'false,true,true': [0.0, 0.0]}
{'': [0.012042707590816788, 0.12369214175994776], 'false': [0.06965287245226214, 0.16308825920244527], 'false,false': [0.06620671603521368, 0.18400788557467307], 'false,false,false': [0.17124513929296645, 0.17303612368858473], 'false,true': [nan, 0.06965287245226214], 'false,false,true': [nan, 0.06620671603521368]}
{'': [0.03342796914776184, 0.11055918277921081], 'false': [nan, 0.11055918277921188], 'false,false': [0.0018289534261639808, 0.09940651887613361], 'false,false,false': [0.08181688227883142, 0.13237199904256824], 'true': [0.026366404272982664, 0.07277808953551006], 'true,false': [0.016719687005669465, 0.08185555053139515], 'true,true': [0.01680147837915288, 0.0], 'false,false,true': [0.005601169867627635, 1.7763568394002506e-16]}
{'': [0.06171019159128157, 0.0004801619219716768], 'false': [1.4005224108369617e-05, 0.0005600976946983997], 'false,false': [nan, 0.0005600976946983997], 'false,false,false': [nan, 0.0005600976946983997], 'false,true': [nan, 1.4005224108361616e-05], 'false,true,false': [1.5537559386141473e-05, 2.9064089091292156e-06]}
{'': [0.01351306743923507, 0.08163537459368117], 'false': [0.0020357003591305613, 0.08110645405603337], 'false,false': [0.07675814847899078, 0.09887807881958315], 'false,false,true': [0.0035716631333900825, 0.013290612401486693], 'true': [0.013355049079571052, 0.0], 'false,true': [9.221060347153199e-06, 0.0]}
{'': [0.038361657717000355, 0.08365063146694271], 'false': [0.0015425368922981379, 0.08836316258892252], 'false,false': [0.020520181982620914, 0.0004190724047975171], 'true': [nan, 0.03836165771700041], 'true,false': [nan, 0.038361657717000355], 'false,false,false': [0.00038319509820757496, 0.0004607021440818683]}
{'': [0.05210555216074281, 0.06180016342214451], 'false': [nan, 0.061800163422144595], 'false,false': [nan, 0.06180016342214451], 'false,false,false': [nan, 0.06180016342214451], 'true': [0.06274976305168115, 0.012151660636330861]}
{'': [0.00021176411921809086, 0.04357000453073426], 'false': [nan, 0.04357000453073423], 'false,false': [0.021182332244153255, 0.062438546215381044], 'false,false,false': [0.043482517685822626, 0.09030120461067416], 'true': [8.054988830375322e-05, 0.00010250288124123708], 'true,false': [0.00010250288124123708, nan]}
{'': [0.02510519300169638, 0.03579854277990214], 'false': [0.020631942844728215, 0.06194883376513154], 'false,false': [0.03173545885223698, 0.0006641912155594038], 'false,true': [0.02150443948073058, 4.277984416986495e-05], 'false,true,true': [0.02150443948073058, nan], 'false,false,false': [nan, 0.0006641912155594038]}
{'': [0.02519100117393737, 0.03701061429890797], 'false': [0.021971003718525957, 0.05098851093331165], 'false,false': [0.0, 0.051147967784489844], 'false,false,false': [nan, 0.051147967784489795], 'true': [0.03751125988148928, 0.004263873707478963], 'true,true': [0.03828783974872238, 0.03316432771829343], 'true,false': [4.848649064273205e-07, 0.016475961473797564], 'true,false,false': [4.279489447017726e-05, 0.031756798835178054]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 18.115
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8010060779566556;  // std dev = 1.942, 70.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=66 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12407328712271058;  // std dev = 0.132, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7355473307023003;  // std dev = 0.211, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return 0.33086072572117453;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7217508749129985;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15488578405833398;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7284803861974877;  // std dev = 0.149, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12740803001797574;  // std dev = 1.79e-07, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.07646969714627845;  // std dev = 2.864, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.1575452373620417;  // std dev = 3.634, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5584490808636736;  // std dev = 0.112, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.7287724266160055;  // std dev = 0.209, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4584012445517196;  // std dev = 0.273, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5872410388766433;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5082416375986883;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.565764658877651;  // std dev = 0.208, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11390278797682371;  // std dev = 1.26e-07, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.062366767086355836;  // std dev = 3.633, 104.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=25 */
%   | | | else return 0.1734017165193647;  // std dev = 2.779, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.40879189733922766;  // std dev = 0.997, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return -0.09064857088043432;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(D, G), recursion_accounttype(E, B) )
%   | | | then return 0.43246844534189266;  // std dev = 0.196, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.5990938178278024;  // std dev = 0.244, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, I) )
%   | | | then return 0.44070507150678795;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6755634592037106;  // std dev = 0.097, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6481470144308907;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7724179966369046;  // std dev = 4.21e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12313895977122503;  // std dev = 0.033, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.331162670946175;  // std dev = 0.094, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.26359606075214576;  // std dev = 1.096, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.048320135476668614;  // std dev = 0.706, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.44625594521666745;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34423331653301537;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.33186533757555836;  // std dev = 0.216, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09207794674741868;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07729197638128799;  // std dev = 2.347, 59.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=19 */
%   | | | else return 0.061536599472916634;  // std dev = 2.675, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.2412687696354457;  // std dev = 0.145, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.2687867534393162;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04820767447191296;  // std dev = 0.137, 147.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=18 */
%   | | else return -0.07431139272602823;  // std dev = 0.058, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.28013371089129363;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19749992353547902;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.24932222227221504;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.46878856426240484;  // std dev = 0.099, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.1302619700845035;  // std dev = 0.041, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22077241267527983;  // std dev = 0.088, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, C), tweets(A, F) )
%   | | | then return 0.06871301101545764;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2254876743571775;  // std dev = 0.157, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10445893039172376;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.048206452078112486;  // std dev = 0.112, 249.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=23 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3369648143596049;  // std dev = 0.410, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12295614145274217;  // std dev = 0.026, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.011036277335268796;  // std dev = 1.557, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.03495498106535054;  // std dev = 1.803, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18824875966711468;  // std dev = 0.020, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3462597008244376;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.26135813444362554;  // std dev = 0.168, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return -0.08034975810550093;  // std dev = 0.596, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | | else return -0.0629043184158247;  // std dev = 0.645, 73.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=2 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2683946288108652;  // std dev = 0.350, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10994150375371475;  // std dev = 0.021, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1367612838749855;  // std dev = 0.652, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.0736537519543629;  // std dev = 2.090, 53.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15789778271712535;  // std dev = 0.086, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.30341899531557653;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1424448971988311;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17132619852285166;  // std dev = 0.129, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.22193653898970683;  // std dev = 0.191, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07078929406902976;  // std dev = 0.034, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.26144902017865085;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.34238431133199226;  // std dev = 0.940, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.13421001515953987;  // std dev = 0.036, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.14153588559202449;  // std dev = 0.098, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | else return 0.09414686540548542;  // std dev = 0.185, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.06048850276233953;  // std dev = 0.045, 227.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.13350984237469962;  // std dev = 1.079, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08841901513276333;  // std dev = 0.020, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.011223498252817593;  // std dev = 0.195, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1941526304251111;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -5.205230023050588E-4;  // std dev = 1.272, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return -0.004378642879349801;  // std dev = 1.213, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.570', 'seconds']
Refined model CLL: -0.104837


******************************************
Best model found
******************************************
Results 

CLL : -0.099982 

AUC ROC : 0.993624 

AUC PR : 0.383797 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 18.115 

Total Inference Time : 15.332281351089478 

Total revision time: 45.97889207267761
Best scored revision CLL: -0.104837


Results 

CLL : -0.099982 

AUC ROC : 0.993624 

AUC PR : 0.383797 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 46.01176379585266 

Total Inference Time : 15.332281351089478 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.129
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.050941973991396876;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6668418332635858;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01982988218597315;  // std dev = 0.279, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030904330262195443;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5252142463189259;  // std dev = 0.842, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8605706439259567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5683222482962708;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5683222482962708;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06072700923635009;  // std dev = 1.414, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | | else return -0.035837761896204814;  // std dev = 0.801, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4323365074415558;  // std dev = 1.412, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12008499004087632;  // std dev = 0.031, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.11946368791811346;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10680114665663754;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3615916184585294;  // std dev = 0.320, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.326150134474934;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6419488423525281;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10481647580190155;  // std dev = 0.034, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.11911374381478203;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05179029458600172;  // std dev = 1.678, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25887966674856033;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3930104969090693;  // std dev = 0.210, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09732067342079843;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.10054154549419983;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30310429058246374;  // std dev = 0.448, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.09720107753036901;  // std dev = 0.051, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08825423756104736;  // std dev = 0.340, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14527730500257627;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03264455152860861;  // std dev = 0.158, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.086761690786885;  // std dev = 0.817, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.0750828318060558;  // std dev = 0.000293, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19645235457425253;  // std dev = 0.062, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2908443041728135;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09021964981236566;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06865923508858138;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1147517649015077;  // std dev = 1.247, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.13763715892369877;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08240367589951346;  // std dev = 0.005, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09036124854183143;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13385599957715527;  // std dev = 0.299, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.16191942566147707;  // std dev = 0.673, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0656057093032582;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.795', 'seconds']
Parameter learned model CLL:-0.105363 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true': [4.08e-08, 39, 0], 'true,false,false': [0.287, 10, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.973, 1, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 35, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.913, 5, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.842, 1, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [1.414, 36, 3], 'false,false,false,false': [0.801, 9, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.412, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 24, 0], 'false,true,false,false': [5.27e-09, 13, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.002, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.32, 0, 17], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.005, 0, 4], 'false,false,true,false': [0.034, 47, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.678, 31, 20], 'false,true': [0.0, 0, 3], 'false,false,true': [0.21, 0, 2], 'false,false,false,true': [0.026, 7, 0], 'false,false,false,false': [0.027, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.448, 0, 22], 'true,false': [0.051, 44, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.34, 2, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.973, 1, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 35, 5], 'false,false,false,true': [0.817, 10, 2], 'false,false,false,false': [0.000293, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.062, 0, 17], 'false,true,true,true': [0.326, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.018, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.003, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.247, 2, 20], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.005, 33, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.299, 1, 1], 'false,true': [0.673, 4, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.86e-09, 3, 0]}]
{'': [0.22067930193282148, 0.10937500000000004], 'true': [3.089316242435218e-16, 0.019600000000000072], 'false': [0.13888888888888892, 0.0], 'false,true': [0.0, -2.7755575615628915e-18], 'true,false': [4.2700885562506023e-17, 0.0826446280991736], 'false,true,true': [0.0, nan]}
{'': [0.04986149584487564, 0.08787037057588548], 'false': [0.07808133730087875, 0.11908018643942232], 'false,false': [0.13888888888888892, 0.09915090450905223], 'false,false,true': [nan, 0.13888888888888892], 'false,false,false': [0.0, 0.0], 'false,true': [nan, 0.07808133730087875]}
{'': [0.045226701118660104, 0.0770988028690233], 'false': [nan, 0.07709880286902329], 'false,false': [0.0, 0.05400855738206997], 'false,false,false': [0.05128828228763607, 0.06412457901172613], 'true': [0.044258098841351345, 0.02328740202004298], 'true,true': [0.044258098841351345, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 3.700743415417188e-17]}
{'': [0.07382479803782639, 4.260158891358068e-05], 'false': [2.5561529385358143e-05, 7.932073915218699e-07], 'false,true': [nan, 2.5561529385358143e-05], 'false,true,false': [3.9271730444008966e-05, 2.135044278125301e-18], 'false,false': [nan, 7.932073915218699e-07], 'false,false,false': [nan, 7.932073915218699e-07]}
{'': [0.006010917751121092, 0.04482143080185744], 'false': [0.0, 0.03836837796104576], 'false,false': [0.0403303628255831, -2.3129646346357427e-18], 'false,false,true': [6.1578609211743185e-06, 2.429316263493418e-05], 'true': [0.006010917751121092, nan], 'false,true': [0.0, nan]}
{'': [0.055181565386093784, 0.03282058029602378], 'true': [nan, 0.05518156538609392], 'true,false': [nan, 0.055181565386093784], 'false': [0.0, 0.0252107093752253], 'false,false': [0.021986950678510447, 8.616045877963046e-05], 'false,false,false': [9.510878710834725e-05, 7.562497492643871e-05]}
{'': [0.03869071213008505, 0.023108271761500793], 'true': [0.009123325723793364, 5.960941991393026e-05], 'false': [nan, 0.023108271761500793], 'false,false': [nan, 0.023108271761500793], 'false,false,false': [nan, 0.023108271761500793]}
{'': [0.049855089921446716, 0.028786666992978976], 'true': [0.049855089921446716, nan], 'false': [nan, 0.028786666992978965], 'false,false': [0.024940357862480098, 0.03520180422429795], 'false,false,false': [0.05568593180710133, 1.2257116904779153e-08]}
{'': [0.0038490275486605468, 0.019331847562784287], 'false': [0.023177197912460524, 1.0974445300314383e-06], 'false,true': [0.013274735488911213, 8.059534722087103e-06], 'false,true,true': [0.013274735488911213, nan], 'false,false': [nan, 1.0974445300314383e-06], 'false,false,false': [nan, 1.0974445300314383e-06]}
{'': [0.03611897612295337, 0.05876490742337532], 'false': [0.09054522739287624, 1.1564823173178713e-18], 'true': [0.06229315418812515, 0.0047019390627070145], 'true,true': [0.07072482626263246, 0.0], 'true,false': [6.29482212721239e-07, 0.029929805101795263], 'true,false,false': [-1.1564823173178713e-18, 0.04466048814205742], 'false,false': [nan, 1.1564823173178713e-18], 'false,false,false': [nan, 1.1564823173178713e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,false;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 3.098
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.723756292478832;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04367837555361599;  // std dev = 1.391, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.12697363951453602;  // std dev = 0.399, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.29701438684128156;  // std dev = 0.597, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5060825743039425;  // std dev = 0.250, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(E, A) )
%   | | then return 0.8523832062781437;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6558459784192016;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6030272558733973;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5543085963753527;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7296463954344341;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12421312456127645;  // std dev = 0.048, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.12016877169156676;  // std dev = 0.057, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then return 0.4261431414854195;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.45347066073867776;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.6005084391953653;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5641999436627329;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.1103239429890941;  // std dev = 0.042, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.12574780314841136;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.1008818449578521;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3281411146695566;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3417405880433706;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22263257395516708;  // std dev = 0.883, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3250029717802235;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4186914093381331;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09955423238005301;  // std dev = 0.047, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.12090272837070128;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.25990738535506597;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3179265858276681;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08917180728463917;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.03115636840556992;  // std dev = 0.204, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25211574535042525;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.1267729078696521;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0841000053126955;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09636500437424106;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, G) )
%   | | | then return 0.21341894541765527;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2551207287903924;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.39837076772298197;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27131670417968023;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then return -0.08237535956078351;  // std dev = 0.023, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.09947714746575706;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.20759629559234605;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09964484737040484;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.04584602453510832;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.1972466741369431;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.0711642272068345;  // std dev = 0.132, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else return 0.0022432629321068563;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.03102242282444388;  // std dev = 0.468, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.09105492202899676;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07019206947459028;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.1732630311061345;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.23930794515759934;  // std dev = 0.176, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2460023302882907;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22217740749801687;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14876521580800284;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07562096618662538;  // std dev = 0.048, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.0970474385392635;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06999202460535811;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.08829810353420585;  // std dev = 0.953, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.2101066763504266;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13089324845923833;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06673540713365746;  // std dev = 1.24e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.08886946716561005;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07816835601490926;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.052296378656897013;  // std dev = 0.338, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, I) )
%   | then return 0.04920613073873065;  // std dev = 0.168, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return -0.061779752703045525;  // std dev = 0.000852, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.646', 'seconds']
Refined model CLL: -0.100962


******************************************
Best model found
******************************************
Results 

CLL : -0.089792 

AUC ROC : 0.994631 

AUC PR : 0.416215 

Precision : 0.334218 

Recall : 0.807692 

F1 : 0.472795 

Total Learning Time : 3.098 

Total Inference Time : 4.210277318954468 

Total revision time: 10.721198083877564
Best scored revision CLL: -0.100962


Results 

CLL : -0.089792 

AUC ROC : 0.994631 

AUC PR : 0.416215 

Precision : 0.334218 

Recall : 0.807692 

F1 : 0.472795 

Total Learning Time : 10.754069807052613 

Total Inference Time : 4.210277318954468 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.52
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.35814893509951223;  // std dev = 0.500, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724143121387306;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03290293977336717;  // std dev = 0.268, 81.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08420093849270657;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.16461643453823166;  // std dev = 1.832, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5730831359108156;  // std dev = 0.232, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.872811792070048;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.15098002949938547;  // std dev = 0.572, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5599511384589139;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5599511384589139;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04972256108099327;  // std dev = 2.266, 88.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=8 */
%   | | | else return 0.025368348249274662;  // std dev = 1.824, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48433772721063667;  // std dev = 1.557, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11748159008864464;  // std dev = 0.015, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.1255221542370776;  // std dev = 0.009, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17350786001913887;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2989629769084257;  // std dev = 1.087, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3093146956576018;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6239152499852433;  // std dev = 0.095, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09612037737077786;  // std dev = 1.137, 82.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=2 */
%   | | else return -0.1097540172654724;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02006946469251422;  // std dev = 2.052, 116.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1362679640328608;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4349624953473434;  // std dev = 0.778, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12665755887676858;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.12535272723229937;  // std dev = 0.144, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2604337896558499;  // std dev = 1.489, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return -0.08543418030925454;  // std dev = 1.050, 98.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0021091247670419287;  // std dev = 0.974, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20352290969613918;  // std dev = 0.067, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.0483632391716767;  // std dev = 0.188, 75.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.04586196887562371;  // std dev = 0.944, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return 0.05654224651287726;  // std dev = 1.021, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16252409457779435;  // std dev = 0.165, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2237885484040496;  // std dev = 1.167, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08789371026366555;  // std dev = 0.031, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4042649032115379;  // std dev = 0.366, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12777374767540392;  // std dev = 0.153, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1270191352801993;  // std dev = 1.643, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | else return 0.1590250247697827;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08104288647706678;  // std dev = 0.016, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07870965165739315;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.023760075512254168;  // std dev = 0.419, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.0084225956129436;  // std dev = 0.463, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14483501997667228;  // std dev = 0.729, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.560', 'seconds']
Parameter learned model CLL:-0.112784 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [6.66e-08, 66, 0], 'true,false,false': [0.3, 9, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.5, 3, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 72, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.973, 18, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.832, 11, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.232, 0, 26], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.572, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [2.266, 80, 8], 'false,false,false,false': [1.824, 23, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.557, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.015, 62, 0], 'false,true,false,false': [0.009, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.143, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.087, 1, 28], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.095, 0, 11], 'false,false,true,false': [1.137, 80, 2], 'false,false,false': [1.86e-09, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.052, 82, 34], 'false,true': [0.943, 1, 8], 'false,false,true': [0.778, 1, 8], 'false,false,false,true': [0.107, 11, 0], 'false,false,false,false': [0.144, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.489, 2, 41], 'true,false': [1.05, 95, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.974, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.067, 0, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.188, 66, 9], 'false,false,false,true': [0.944, 22, 5], 'false,false,false,false': [1.021, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.165, 1, 28], 'false,true,true,true': [1.167, 1, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 89, 0], 'false,false,true': [0.366, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.643, 3, 35], 'true,true,false': [0.011, 0, 7], 'true,false,true': [0.016, 72, 0], 'true,false,false,true': [1.86e-09, 5, 0], 'true,false,false,false': [0.419, 7, 1], 'false,true': [0.463, 9, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.729, 3, 3]}]
{'': [0.23077466280630002, 0.24609375000000003], 'false': [0.23999999999999985, 0.24999999999999992], 'false,true': [0.0, -6.938893903907228e-18], 'true': [0.022714981070850387, 0.01298476454293633], 'true,false': [6.728624391667616e-17, 0.09000000000000005], 'false,true,true': [0.0, nan]}
{'': [-3.2297397080004555e-16, 0.09596674837583337], 'false': [0.07191526977121752, 0.1436902308424507], 'false,false': [0.049861495844875335, 0.20257487878832986], 'false,false,false': [0.0, 0.1973873667025916], 'false,true': [nan, 0.07191526977121752], 'false,false,true': [nan, 0.049861495844875335]}
{'': [0.028166125869637685, 0.09202326754552677], 'false': [nan, 0.09202326754552681], 'false,false': [4.9343245538895844e-17, 0.07396808700167515], 'false,false,false': [0.05835581037004361, 0.11875764962590066], 'true': [0.002069392284921329, 0.22480582056756307], 'true,false': [0.0, 0.1635283663660549], 'true,true': [0.002069392284921329, nan], 'false,false,true': [3.700743415417188e-17, -3.700743415417188e-17]}
{'': [0.046625307428130716, 0.0005688890763701613], 'false': [1.492922152618037e-05, 0.0017058690407495969], 'false,false': [nan, 0.0017058690407495969], 'false,false,false': [nan, 0.0017058690407495969], 'false,true': [nan, 1.492922152618037e-05], 'false,true,false': [3.5366152573175356e-06, 4.0661502323791066e-06]}
{'': [0.040717025503691724, 0.06582085460734458], 'false': [-1.2335811384723961e-17, 0.06285296584623247], 'false,false': [0.06807422231967626, 1.5419764230904951e-18], 'false,false,true': [0.0008178143351996232, 0.01577422606515424], 'true': [0.040717025503691724, nan], 'false,true': [-1.2335811384723961e-17, nan]}
{'': [0.036303288047645044, 0.08223743918665455], 'false': [0.09876543209876544, 0.07512494299311277], 'false,false': [0.06723110874638355, 0.0011554699740207591], 'true': [nan, 0.03630328804764513], 'true,false': [nan, 0.036303288047645044], 'false,false,false': [0.0010467799921993809, 0.001225129912865242]}
{'': [0.048910028411682537, 0.07301805868227576], 'false': [nan, 0.07301805868227576], 'false,false': [nan, 0.07301805868227576], 'false,false,false': [nan, 0.07301805868227576], 'true': [0.05159113720198145, 0.011252346485691924]}
{'': [0.00013632448037169102, 0.04172881932401666], 'false': [nan, 0.041728819324016626], 'false,false': [0.03520446508251005, 0.0543440066851474], 'false,false,false': [0.03301729778753974, 0.1042737199007954], 'true': [0.00013632448037169102, nan]}
{'': [0.027129655625348865, 0.032258614027205604], 'false': [0.025936314696591096, 0.05790762814553148], 'false,false': [0.022275339817656687, 0.0012242994737317661], 'false,true': [0.0800991357938144, 1.0615633172081893e-05], 'false,true,true': [0.0800991357938144, nan], 'false,false,false': [nan, 0.0012242994737317661]}
{'': [0.03209434788602532, 0.04333325585576653], 'false': [0.01652552209914131, 0.08868465037563322], 'false,false': [nan, 0.08868465037563322], 'false,false,false': [nan, 0.08868465037563322], 'true': [0.06012922928037844, 0.002346520848856611], 'true,true': [0.07104309409780503, 1.750512261131495e-05], 'true,false': [3.5943547527058885e-06, 0.014215874115318454], 'true,false,false': [6.938893903907229e-19, 0.02193946623795771]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.269
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.5766162693538117;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0.02365854689619907;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.09354295879156346;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13371461257640344;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.135735672364036;  // std dev = 1.844, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.507747389127237;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5819176432357333;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return 0.8197972980220196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5786601703675699;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10276142970228415;  // std dev = 0.666, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   | | | else return 0.06426564483828388;  // std dev = 1.551, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16058322326545849;  // std dev = 1.384, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.011673299289277798;  // std dev = 1.220, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.4253738743996349;  // std dev = 0.036, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.2989901985058755;  // std dev = 0.958, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.41185976051590134;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5242636113564592;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5882960545293549;  // std dev = 0.153, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7355531388851599;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11055978114794894;  // std dev = 0.157, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.1280556522897152;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.17577742524301632;  // std dev = 0.118, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3294345502040779;  // std dev = 3.65e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.33723211646258866;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3828357020336184;  // std dev = 0.196, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.21037006921213272;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3553786550423406;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.32884658778863357;  // std dev = 1.229, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.10565854610878393;  // std dev = 1.088, 93.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=2 */
%   | | else return -0.09204753576773281;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.26883020723962553;  // std dev = 0.143, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.15674822952121814;  // std dev = 1.002, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.0870272909482995;  // std dev = 0.046, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0.05121061629504673;  // std dev = 0.208, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2831248059879899;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.23361411078728253;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5900971434079131;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.14628242164274421;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1213593684145301;  // std dev = 0.179, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.12174373639181142;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.2126528273009024;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2566743470484663;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2746398636702804;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( follows(H, A), follows(G, I) )
%   | | | then return -0.061128754719054344;  // std dev = 1.190, 65.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=6 */
%   | | | else return -0.12527031269108185;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(J, F), recursion_accounttype(J, B) )
%   | | | then return 0.3582758233407182;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.14121678665115153;  // std dev = 0.409, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.0597390915877312;  // std dev = 0.156, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.13747683809018657;  // std dev = 0.977, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.16820302668269682;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20664613407154636;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2295846238657968;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, F), follows(G, F) )
%   | | | then return -0.06671767896095306;  // std dev = 0.410, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return -0.07917154977149114;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.30358365433490037;  // std dev = 0.226, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10051096153259992;  // std dev = 0.096, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.0429635876753948;  // std dev = 0.225, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.17082746828931086;  // std dev = 0.023, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07292497904571393;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.1925175772260217;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17871657568741173;  // std dev = 0.089, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.27121086558887036;  // std dev = 0.175, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07850024711795796;  // std dev = 0.013, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.31998307553412725;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.10142181484479344;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.16141025447508034;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14842033564683177;  // std dev = 0.106, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21302170422044941;  // std dev = 0.174, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.15714884146511138;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07101256615301778;  // std dev = 0.076, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06912384475193974;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06804049526689508;  // std dev = 0.367, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.2083239785961027;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10639642667382421;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.03796030572305874;  // std dev = 0.171, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.866', 'seconds']
Refined model CLL: -0.107925


******************************************
Best model found
******************************************
Results 

CLL : -0.107167 

AUC ROC : 0.993985 

AUC PR : 0.33093 

Precision : 0.343681 

Recall : 0.99359 

F1 : 0.510708 

Total Learning Time : 6.269 

Total Inference Time : 8.191455364227295 

Total revision time: 19.703563179016115
Best scored revision CLL: -0.107925


Results 

CLL : -0.107167 

AUC ROC : 0.993985 

AUC PR : 0.33093 

Precision : 0.343681 

Recall : 0.99359 

F1 : 0.510708 

Total Learning Time : 19.736434902191164 

Total Inference Time : 8.191455364227295 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.735
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7975428744934521;  // std dev = 1.938, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7315414044636409;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029064226781395686;  // std dev = 0.273, 123.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.054744353466881654;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7449302194874545;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09371246731858261;  // std dev = 2.230, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5433996070359771;  // std dev = 1.345, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8744663388409977;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5832375275419506;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673176993197507;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5673176993197507;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044346037630360546;  // std dev = 2.685, 114.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=11 */
%   | | | else return -0.016595359065449292;  // std dev = 2.120, 44.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4924054409616522;  // std dev = 1.940, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11824065141680974;  // std dev = 0.022, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return -0.12070886825835056;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1648687225632151;  // std dev = 0.155, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32432217254465984;  // std dev = 1.030, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.36006388665567046;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31242479697553716;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5760032682379204;  // std dev = 0.983, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.09512250031678077;  // std dev = 1.377, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   | | else return -0.10874483892485892;  // std dev = 1.32e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02238243643686591;  // std dev = 2.724, 164.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16617575207277688;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4075505546374531;  // std dev = 1.172, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11076401425085428;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11348959942046166;  // std dev = 0.104, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27448889204001375;  // std dev = 1.693, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return -0.08485228528680583;  // std dev = 1.485, 128.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024729721581680377;  // std dev = 0.649, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18060895030866272;  // std dev = 0.993, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.19811722272782517;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043452319927929375;  // std dev = 0.162, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.019711196876391973;  // std dev = 0.952, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.013646345394140969;  // std dev = 1.348, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15410501478463487;  // std dev = 0.216, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23255058519769958;  // std dev = 1.246, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08900191368555307;  // std dev = 0.019, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.32209052836173685;  // std dev = 1.171, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10684651001528835;  // std dev = 0.111, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1174922642472337;  // std dev = 2.289, 59.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | else return 0.04430875395472116;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08167008591622486;  // std dev = 0.007, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08545615406895729;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.040374217912833826;  // std dev = 0.413, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.017243319702920194;  // std dev = 0.702, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24123833931340677;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03814671621193761;  // std dev = 1.042, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.039', 'seconds']
Parameter learned model CLL:-0.111091 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.938, 4, 62], 'true,false,true': [8.69e-08, 96, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,false': [0.493, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 109, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [0.088, 0, 4], 'false,false,false,false': [2.23, 23, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.345, 2, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.118, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 7], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [2.685, 103, 11], 'false,false,false,false': [2.12, 38, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.94, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 101, 0], 'false,true,false,false': [0.004, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.155, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.03, 1, 42], 'true,false': [0.094, 0, 2], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.983, 1, 14], 'false,false,true,false': [1.377, 134, 3], 'false,false,false': [1.32e-09, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.724, 113, 51], 'false,true': [0.957, 1, 11], 'false,false,true': [1.172, 1, 13], 'false,false,false,true': [0.081, 22, 0], 'false,false,false,false': [0.104, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.693, 2, 63], 'true,false': [1.485, 123, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.649, 12, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 47], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 115, 14], 'false,false,false,true': [0.952, 19, 8], 'false,false,false,false': [1.348, 15, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.216, 2, 44], 'false,true,true,true': [1.246, 1, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.019, 106, 0], 'false,false,true': [1.171, 1, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.111, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.289, 5, 54], 'true,true,false': [0.945, 1, 8], 'true,false,true': [0.007, 104, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.413, 10, 1], 'false,true': [0.702, 14, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.042, 11, 4]}]
{'': [0.22750000000000015, 0.2469135802469131], 'false': [0.24888888888888888, 0.24305555555555536], 'false,true': [-2.5376526277146434e-16, -6.938893903907228e-18], 'true': [0.05693296602387436, 0.008694983071714363], 'true,false': [7.864079757761526e-17, 0.052469135802469175], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [-2.9605947323337506e-16, 0.10340537603640645], 'false': [0.07447019901410552, 0.16408321014255445], 'false,false': [0.07100591715976332, 0.1852007903235177], 'false,false,false': [0.0019441471101385721, 0.16038000186096305], 'false,true': [nan, 0.07447019901410552], 'false,false,true': [nan, 0.07100591715976332]}
{'': [0.04205811434900235, 0.09545908413690697], 'false': [nan, 0.09545908413690704], 'false,false': [2.5376526277146434e-16, 0.07422948042575887], 'false,false,false': [0.06322586375667273, 0.1021832089983914], 'true': [0.044144895351508215, 0.016371797914956864], 'true,true': [0.044144895351508215, nan], 'true,false': [0.0, 0.0035019032875649447], 'false,false,true': [1.2688263138573217e-16, 1.2688263138573217e-16]}
{'': [0.04889908331504332, 0.00045332504463938965], 'false': [4.918578791641621e-06, 0.0008622782448771919], 'false,false': [nan, 0.0008622782448771919], 'false,false,false': [nan, 0.0008622782448771919], 'false,true': [nan, 4.918578791635042e-06], 'false,true,false': [4.848862933703133e-06, 5.678867725658457e-07]}
{'': [0.023831930588016782, 0.05807551879234427], 'false': [-1.586032892321652e-17, 0.053549688700984935], 'false,false': [0.05889739377323919, 3.2653618371328133e-18], 'false,false,true': [0.06442529960268087, 0.013843813357641517], 'true': [0.02467717935943117, 0.004438388325129161], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.04524111862274348, 0.07882602050290802], 'false': [0.07638888888888884, 0.07546535629538542], 'false,false': [0.09812101307005063, 0.0004141918453828222], 'true': [nan, 0.045241118622743624], 'true,false': [nan, 0.04524111862274348], 'false,false,false': [0.0003002640218890053, 0.000535621167431502]}
{'': [0.05511793164497783, 0.0221747818424649], 'true': [0.04408104155873926, 0.0172345437806495], 'false': [nan, 0.0221747818424649], 'false,false': [nan, 0.0221747818424649], 'false,false,false': [nan, 0.0221747818424649]}
{'': [0.02013792707423364, 0.0355149506433275], 'false': [nan, 0.03551495064332752], 'false,false': [0.026359791079479788, 0.05795280287243166], 'false,false,false': [0.03358256617029858, 0.0908314920919168], 'true': [0.020551211311346084, 0.0], 'true,false': [0.0, nan]}
{'': [0.04672098572929974, 0.03731855283927029], 'false': [0.02750055796167803, 0.07124133628300972], 'false,false': [0.15228834699084148, 0.0004369209795302757], 'false,true': [0.06463933495999252, 3.2841953807981668e-06], 'false,true,true': [0.06463933495999252, nan], 'false,false,false': [nan, 0.0004369209795302757]}
{'': [0.0410590969677646, 0.04398751290272812], 'false': [0.023444140165796632, 0.07031005733480024], 'false,false': [0.0, 0.07241950652957925], 'false,false,false': [nan, 0.07241950652957925], 'true': [0.0908051852822065, 0.0015146703013316587], 'true,true': [0.08882297910109709, 0.099152681193486], 'true,false': [4.505019742091242e-07, 0.009018425305182133], 'true,false,false': [0.0, 0.01548256548309982]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.791
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.7812258581764345;  // std dev = 1.664, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.0793510649004878;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.034619523334806335;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7055371559369372;  // std dev = 0.156, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.6194734122109542;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5773659784984696;  // std dev = 1.296, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return 0.015375036594832907;  // std dev = 0.315, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.01039371350983248;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.1324634293473104;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5672072276357607;  // std dev = 0.839, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.03196987519971694;  // std dev = 2.351, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.4969203712169886;  // std dev = 1.355, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.578890676879378;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6301475736342694;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6824558176020068;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5646740479238818;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6263860894380774;  // std dev = 0.146, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11663066822932856;  // std dev = 0.081, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09935094080318714;  // std dev = 1.733, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.03540539914735598;  // std dev = 1.482, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(D, F), follows(D, E) )
%   | | | then return 0.46113718516578234;  // std dev = 0.358, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.12087449872479177;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.33381278441773293;  // std dev = 0.614, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.43723923949336646;  // std dev = 0.146, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.47427312809560307;  // std dev = 0.175, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.695585904882556;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8245617937973653;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.10526326631045954;  // std dev = 0.007, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return -0.14387004952484664;  // std dev = 0.062, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.34464788828985254;  // std dev = 0.087, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.22154476623821676;  // std dev = 0.931, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.3693252668478378;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3956719008072469;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3429276269533714;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19243181695289938;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.0646891322971344;  // std dev = 1.350, 133.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=9 */
%   | | | else return 0.07184703596235059;  // std dev = 1.780, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else return -0.0967640364680814;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.20152332432290088;  // std dev = 1.365, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.3038853399946932;  // std dev = 0.178, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.0867579605312701;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.26927461307198064;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.04468356206263155;  // std dev = 0.163, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27544376412046245;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.0421877077959254;  // std dev = 1.287, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5864036436141434;  // std dev = 0.213, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11977842278147653;  // std dev = 0.027, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.23038697080757545;  // std dev = 0.058, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.10128271747779005;  // std dev = 0.970, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.29018162184353524;  // std dev = 0.110, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0574845716549659;  // std dev = 0.921, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.22360290829331486;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.0780722456553335;  // std dev = 0.376, 78.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=1 */
%   | | | else return -0.0120854653319821;  // std dev = 1.117, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.038707315967424626;  // std dev = 0.895, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.0321045417653911;  // std dev = 1.138, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.19359208613814113;  // std dev = 0.013, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.07090131774565067;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.19593229216118058;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return -0.07288660392848081;  // std dev = 1.242, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3528799559012739;  // std dev = 0.295, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07942364856741059;  // std dev = 0.007, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25403248258814265;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.007747687824272825;  // std dev = 1.095, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return -0.027061709312312724;  // std dev = 1.060, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16858399148569442;  // std dev = 0.012, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(E, A) )
%   | | then return 0.2641132028862869;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21092693624335115;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16191462009938826;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.26492675862126647;  // std dev = 0.227, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.0741317909830982;  // std dev = 0.082, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.18618901976993865;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5141019943447421;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12659785713014593;  // std dev = 0.021, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14477685640569526;  // std dev = 0.010, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.20843630166016153;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.06649461991834625;  // std dev = 0.037, 134.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23577011805547934;  // std dev = 0.247, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10198284615896909;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.004806386805825541;  // std dev = 0.402, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.30919399311371343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.014717396671440749;  // std dev = 0.584, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.05523312664233003;  // std dev = 0.871, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.647', 'seconds']
Refined model CLL: -0.106232


******************************************
Best model found
******************************************
Results 

CLL : -0.104275 

AUC ROC : 0.99406 

AUC PR : 0.341594 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 9.791 

Total Inference Time : 12.737675189971924 

Total revision time: 29.48944518661499
Best scored revision CLL: -0.106232


Results 

CLL : -0.104275 

AUC ROC : 0.99406 

AUC PR : 0.341594 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 29.52231690979004 

Total Inference Time : 12.737675189971924 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.135
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6942014464299223;  // std dev = 1.403, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04110907307909095;  // std dev = 0.255, 169.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0903077909499258;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7613893674887603;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11291604198316073;  // std dev = 2.843, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5118444606992937;  // std dev = 1.917, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8176146631706932;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6005631515167724;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645981251767972;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4534870140656861;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04664629275338879;  // std dev = 3.232, 176.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=16 */
%   | | | else return 0.03572525406691444;  // std dev = 2.506, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5192878552356157;  // std dev = 1.763, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11702465801669266;  // std dev = 0.032, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.12518584383176998;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16548388529912403;  // std dev = 0.147, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33712175374503955;  // std dev = 0.488, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.3956905042437911;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3169291016043904;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5841011067904327;  // std dev = 1.013, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08660967323966605;  // std dev = 1.891, 182.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=6 */
%   | | else return -0.10861947283856327;  // std dev = 2.28e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033854948201402946;  // std dev = 2.898, 203.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=69 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26410366614774233;  // std dev = 0.105, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4560019420604899;  // std dev = 1.344, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11715046254323155;  // std dev = 0.112, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11885251839989416;  // std dev = 0.159, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2837842686207318;  // std dev = 1.377, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else return -0.07707494370292102;  // std dev = 1.708, 187.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0018292667511860192;  // std dev = 1.036, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1638923032558603;  // std dev = 1.397, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.2169991066471511;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051157767076008685;  // std dev = 0.162, 160.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.007617498280670546;  // std dev = 1.300, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | | else return 0.03911462203573155;  // std dev = 1.450, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10918024411835145;  // std dev = 0.275, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27571317734143574;  // std dev = 0.639, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0899518081823471;  // std dev = 0.033, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3716250128095527;  // std dev = 1.226, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10871998399052506;  // std dev = 0.128, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18082580137106197;  // std dev = 1.246, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.14986250989307429;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08315998045722203;  // std dev = 0.028, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08191887848109981;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.009388620988614493;  // std dev = 0.463, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0288059808453232;  // std dev = 1.025, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23225263368341698;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10110606765040649;  // std dev = 1.099, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.144', 'seconds']
Parameter learned model CLL:-0.111031 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 149, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.953, 1, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.471, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.403, 2, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 152, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.083, 0, 4], 'false,false,false,false': [2.843, 34, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.917, 4, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.115, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 8], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.232, 160, 16], 'false,false,false,false': [2.506, 40, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.763, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 128, 0], 'false,true,false,false': [0.006, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.488, 0, 56], 'true,false': [0.119, 0, 3], 'false,true,true': [0.048, 0, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.013, 1, 19], 'false,false,true,false': [1.891, 176, 6], 'false,false,false': [2.28e-09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.898, 134, 69], 'false,true': [0.105, 0, 13], 'false,false,true': [1.344, 1, 18], 'false,false,false,true': [0.112, 28, 0], 'false,false,false,false': [0.159, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.377, 1, 84], 'true,false': [1.708, 179, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.036, 12, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.397, 2, 63], 'true,false,true': [0.04, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 143, 17], 'false,false,false,true': [1.3, 36, 11], 'false,false,false,false': [1.45, 20, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.275, 5, 59], 'false,true,true,true': [0.639, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 151, 0], 'false,false,true': [1.226, 1, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.128, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.246, 1, 72], 'true,true,false': [0.004, 0, 9], 'true,false,true': [0.028, 131, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.463, 8, 2], 'false,true': [1.025, 18, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.099, 9, 6]}]
{'': [0.22043775094127452, 0.2243999999999995], 'false': [0.22592152199762194, 0.22222222222222232], 'false,true': [0.0826446280991734, -3.0839528461809902e-18], 'true': [0.012046400951813752, 0.011559112205464756], 'false,true,true': [0.0826446280991734, nan], 'true,false': [-1.1027718633860615e-16, 0.0826446280991736]}
{'': [0.029384243580938458, 0.0969049990843026], 'false': [0.06525429686244182, 0.15868091246103183], 'false,false': [0.0433884297520661, 0.1889588099304484], 'false,false,false': [0.0017191852098132898, 0.17191232036484932], 'false,true': [nan, 0.06525429686244182], 'false,false,true': [nan, 0.0433884297520661]}
{'': [0.06187312762043943, 0.0927263881748258], 'false': [nan, 0.09272638817482587], 'false,false': [0.05536332179930818, 0.0754815625810545], 'false,false,false': [0.05934508732363806, 0.12813371329600937], 'true': [0.0644686544688276, 0.013743126172288456], 'true,true': [0.0644686544688276, nan], 'false,false,true': [1.6653345369377348e-16, 0.09876543209876558], 'true,false': [0.0032347333038518222, 0.003293536369422867]}
{'': [0.030785777531760886, 0.000423519879937084], 'false': [1.671500996580359e-05, 0.0007495691323371927], 'false,false': [nan, 0.0007495691323371927], 'false,false,false': [nan, 0.0007495691323371927], 'false,true': [nan, 1.671500996580359e-05], 'false,true,false': [8.105749809479701e-06, 1.421409231887922e-06]}
{'': [0.00443810084499832, 0.06254663762940564], 'false': [0.00014454317016464324, 0.05905733642189769], 'false,false': [0.06290239980968372, 5.551115123125783e-18], 'false,false,true': [0.05126314123168498, 0.019641543129840885], 'true': [0.004250233497636091, 0.0046890814201813], 'false,true': [0.00014454317016464324, nan]}
{'': [0.04135786887009716, 0.0749706061440126], 'false': [0.0008547410240670781, 0.07746800764195347], 'false,false': [0.09506683692730891, 0.0005576408507330458], 'true': [nan, 0.041357868870097465], 'true,false': [nan, 0.04135786887009716], 'false,false,false': [0.0004503948048122375, 0.0006315202029379297]}
{'': [0.045675894981066556, 0.05362036451492006], 'false': [nan, 0.05362036451492006], 'false,false': [nan, 0.05362036451492006], 'false,false,false': [nan, 0.05362036451492006], 'true': [0.022307482572297622, 0.015604347146776385]}
{'': [0.02921892544960057, 0.03540414296637321], 'false': [nan, 0.035404142966373266], 'false,false': [0.026395184022406298, 0.051506893924591624], 'false,false,false': [0.03597446756063956, 0.07791472354445211], 'true': [0.0300091043648025, 0.0008019671709306175], 'true,false': [0.0008019671709306175, nan]}
{'': [0.07579199733618612, 0.03306042098781498], 'false': [0.019927816334550614, 0.07808699058014129], 'false,false': [0.10731812646536852, 0.0004713030972313522], 'false,true': [0.014562523412283004, 7.0364522197862675e-06], 'false,true,true': [0.014562523412283004, nan], 'false,false,false': [nan, 0.0004713030972313522]}
{'': [0.022794013456268056, 0.05321617159254455], 'false': [0.03753891341019465, 0.07652791121635287], 'false,false': [0.0, 0.08055480810271905], 'false,false,false': [nan, 0.08055480810271905], 'true': [0.019015586766607362, 0.001769233651922888], 'true,true': [0.021254498916739976, 2.0220903529254307e-06], 'true,false': [5.842412396799669e-06, 0.012570597378223152], 'true,false,false': [0.0, 0.02139225374139578]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 21.235
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.10814893509951232;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7217881163891916;  // std dev = 0.124, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.6361400788776209;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.0387863769140995;  // std dev = 0.256, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.011134104502422276;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7507219186171548;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07020828558316307;  // std dev = 2.904, 54.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5493460017079859;  // std dev = 0.111, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return 0.6053266505577232;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3632120770672525;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.560055591899941;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.554794783287755;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10591975664841569;  // std dev = 0.665, 96.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=1 */
%   | | | else return 0.004818285016207043;  // std dev = 2.199, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09238186762657262;  // std dev = 1.896, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.19600551771139346;  // std dev = 1.923, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( recursion_accounttype(F, B), follows(E, A) )
%   | | | then return 0.37590518462892747;  // std dev = 1.384, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.48073668318254786;  // std dev = 0.808, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.09998449837602433;  // std dev = 1.244, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3480085538761699;  // std dev = 1.024, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.48419983727658833;  // std dev = 0.200, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.685520801630158;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7851915527806662;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then return -0.10887948168059722;  // std dev = 0.013, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else return -0.17112991427926197;  // std dev = 0.190, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.331036626590229;  // std dev = 0.028, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.0610651210208058;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3414373862861857;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4178891197510053;  // std dev = 0.323, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.35874790846285654;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3271755725927907;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.05538820000502838;  // std dev = 2.063, 158.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=12 */
%   | | | else return 0.026916220631263862;  // std dev = 2.278, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | else return -0.09261674623033135;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2602532409150174;  // std dev = 0.056, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.1030738419516402;  // std dev = 0.395, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4446444789181022;  // std dev = 0.299, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09097474518771669;  // std dev = 0.042, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.020569624010355246;  // std dev = 0.213, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2690302222626775;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3165565887338557;  // std dev = 0.296, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.564062960590108;  // std dev = 0.198, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13829354772627658;  // std dev = 0.037, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.2135217114763775;  // std dev = 0.056, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.2637623354095527;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.11243500483648687;  // std dev = 1.267, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.44370934539616175;  // std dev = 0.429, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, F), tweets(I, J) )
%   | | | then return -0.08322384555837083;  // std dev = 0.579, 155.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=1 */
%   | | | else return -0.25142747874421145;  // std dev = 0.513, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.20157747014144112;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.05900176856127781;  // std dev = 1.047, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return -0.02625474339516836;  // std dev = 1.406, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16947125367482535;  // std dev = 0.119, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.254226619285634;  // std dev = 0.017, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.012831904805302401;  // std dev = 1.120, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3447994863575819;  // std dev = 0.411, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.08031188773359019;  // std dev = 0.051, 182.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.29844115715335356;  // std dev = 0.319, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.118912775229168;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.029004181877733348;  // std dev = 0.907, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.06902309931260993;  // std dev = 0.988, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.12804021004661645;  // std dev = 0.986, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.1706415365241857;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.2168482386511028;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.37828435178475645;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.04447246479482543;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2088836776899235;  // std dev = 0.093, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.07479135038817408;  // std dev = 0.010, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3801727438324261;  // std dev = 0.090, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12686313504646204;  // std dev = 0.029, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.04940209072075896;  // std dev = 2.291, 59.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=53 */
%   | | | else return 0.19988885317156582;  // std dev = 0.414, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13176146558789606;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06449166656147891;  // std dev = 0.043, 167.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.011034966701460048;  // std dev = 0.138, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else return 7.671642504688992E-4;  // std dev = 0.147, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.27047229320439387;  // std dev = 0.733, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.011891781795015145;  // std dev = 0.766, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.07953521920509218;  // std dev = 1.017, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.264', 'seconds']
Refined model CLL: -0.104561


******************************************
Best model found
******************************************
Results 

CLL : -0.107358 

AUC ROC : 0.994563 

AUC PR : 0.372565 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 21.235 

Total Inference Time : 14.800888061523438 

Total revision time: 44.77023279190063
Best scored revision CLL: -0.104561


Results 

CLL : -0.107358 

AUC ROC : 0.994563 

AUC PR : 0.372565 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 44.80310451507568 

Total Inference Time : 14.800888061523438 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.432
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7231829461104766;  // std dev = 0.144, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04215140553794703;  // std dev = 0.255, 220.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09474665508429864;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7589043494606603;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09803117480806112;  // std dev = 3.273, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.57165096667849;  // std dev = 0.405, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7298019239143407;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8184065763363023;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.597900544604253;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5568243144376291;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5568243144376291;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04781062909089157;  // std dev = 3.705, 235.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=21 */
%   | | | else return 0.0032936527020015513;  // std dev = 2.858, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47631888845537;  // std dev = 2.876, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11649522540577645;  // std dev = 0.033, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.12124329779104484;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14985343947556243;  // std dev = 0.177, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3118045992290467;  // std dev = 1.149, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4146914986080932;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2534313873511832;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.645034174351277;  // std dev = 0.170, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08394075469996076;  // std dev = 2.374, 267.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=9 */
%   | | else return -0.10603114574020965;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030289309998084754;  // std dev = 3.456, 261.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19377740762857784;  // std dev = 0.977, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5086911527807143;  // std dev = 1.175, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10919176071561071;  // std dev = 0.079, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.11669195882523026;  // std dev = 0.147, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23268592201613697;  // std dev = 2.706, 114.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=107 */
%   | else return -0.07685199398591755;  // std dev = 2.113, 256.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008392707204923227;  // std dev = 0.727, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20145196184304903;  // std dev = 0.077, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24113770203514706;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044598605829244284;  // std dev = 0.156, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.012503288780057685;  // std dev = 1.451, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return 0.061430394917962025;  // std dev = 1.774, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13875172786392315;  // std dev = 0.225, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29429911844322715;  // std dev = 0.689, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08956272978298373;  // std dev = 0.027, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4700482932465688;  // std dev = 0.598, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11076114130617214;  // std dev = 0.138, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1825813269240178;  // std dev = 1.314, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.14849089946789318;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08314415768438135;  // std dev = 0.020, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08141103757549463;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 4.1652027843366857E-4;  // std dev = 0.474, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.014935033145404543;  // std dev = 1.236, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21684643949597593;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07400556758126797;  // std dev = 1.334, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.679', 'seconds']
Parameter learned model CLL:-0.11003 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.144, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 198, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.084, 0, 4], 'false,false,false,false': [3.273, 49, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.405, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.115, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.705, 214, 21], 'false,false,false,false': [2.858, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.876, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.033, 181, 0], 'false,true,false,false': [0.0, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.149, 1, 73], 'true,false': [0.126, 0, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.17, 0, 23], 'false,false,true,false': [2.374, 258, 9], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.456, 170, 91], 'false,true': [0.977, 1, 13], 'false,false,true': [1.175, 1, 22], 'false,false,false,true': [0.079, 30, 0], 'false,false,false,false': [0.147, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.706, 7, 107], 'true,false': [2.113, 245, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.727, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.077, 0, 80], 'true,false,true': [0.043, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 182, 22], 'false,false,false,true': [1.451, 42, 13], 'false,false,false,false': [1.774, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.225, 4, 77], 'false,true,true,true': [0.689, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 201, 0], 'false,false,true': [0.598, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.138, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.314, 1, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.02, 153, 0], 'true,false,false,true': [9.13e-09, 25, 0], 'true,false,false,false': [0.474, 7, 2], 'false,true': [1.236, 40, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.334, 15, 8]}]
{'': [0.2275000000000023, 0.21869822485207113], 'true': [0.009522928994084868, 0.01009995835068705], 'false': [0.21301775147928945, 0.22633136094674564], 'false,true': [0.07100591715976314, 1.708035422500241e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.6753066000331702e-16, 0.06420927467300835]}
{'': [0.00025461116999203344, 0.09344580208423461], 'false': [0.06499172840633598, 0.14936420350488164], 'false,false': [0.03698224852071011, 0.17671138402667522], 'false,false,false': [0.0017526538691163829, 0.16235760897442625], 'false,true': [nan, 0.06499172840633598], 'false,false,true': [nan, 0.03698224852071011]}
{'': [0.004240290495689842, 0.08549743944960496], 'false': [nan, 0.0854974394496049], 'false,false': [-2.0898315757650005e-16, 0.07180290618446879], 'false,false,false': [0.05842317609771639, 0.11347371460916619], 'true': [0.002659139360119912, 0.014180740005512357], 'true,false': [0.003475100686842647, 0.0033259229881087427], 'true,true': [0.0023448492444952, 0.0], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.06314382798880072, 0.00027959275119963185], 'false': [8.453636664333306e-06, 0.0006279881653680297], 'false,false': [nan, 0.0006279881653680297], 'false,false,false': [nan, 0.0006279881653680297], 'false,true': [nan, 8.453636664329323e-06], 'false,true,false': [6.169262811054693e-06, -1.586032892321652e-17]}
{'': [0.01763998839485374, 0.06029577025020536], 'false': [0.05246913580246918, 0.05626578221758852], 'false,false': [0.058340316371228926, -2.3129646346357427e-18], 'false,false,true': [0.0012527402923605837, 0.021112102788397438], 'false,true': [0.05246913580246918, nan], 'true': [0.01783775120381078, 0.003938519496795939]}
{'': [0.04575765356530329, 0.08951881660466343], 'false': [0.06815285950541282, 0.08996950600046884], 'false,false': [0.060019353765160766, 0.00043380251930208447], 'true': [nan, 0.04575765356530378], 'true,false': [nan, 0.04575765356530329], 'false,false,false': [0.0002081970881511667, 0.0005962375126777531]}
{'': [0.05228163492156902, 0.020344186138420046], 'true': [0.06422997700968977, 0.01743990439088495], 'false': [nan, 0.020344186138420046], 'false,false': [nan, 0.020344186138420046], 'false,false,false': [nan, 0.020344186138420046]}
{'': [0.00013184507931332997, 0.03672070243182525], 'false': [nan, 0.036720702431825285], 'false,false': [0.024430728136234325, 0.062312448299404855], 'false,false,false': [0.03826240565450525, 0.10485522380336806], 'true': [7.342555349625912e-05, 0.00093208174653793], 'true,false': [0.00093208174653793, nan]}
{'': [0.0504790567509335, 0.03239585628663965], 'false': [0.019496416949671903, 0.07720175541061386], 'false,false': [0.02100465189416087, 0.0004754684838246592], 'false,true': [0.01482231497024096, 3.653906829677498e-06], 'false,true,true': [0.01482231497024096, nan], 'false,false,false': [nan, 0.0004754684838246592]}
{'': [0.022297115115871968, 0.045716234660220956], 'false': [0.029383653483410824, 0.07494248645682991], 'false,false': [0.0, 0.07735070898782408], 'false,false,false': [nan, 0.07735070898782408], 'true': [0.016701185729619913, 0.001523730642974654], 'true,true': [0.018181693706755774, 1.2015582351834445e-05], 'true,false': [2.4934228330753057e-06, 0.007921548865494997], 'true,false,false': [3.3306690738754695e-18, 0.025002506251752175]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.873
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.098, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6393772379540308;  // std dev = 0.281, 47.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=43 */
%   | | else return 0.7214099972173459;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.7214099972173458;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6658544416617904;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12544463852839108;  // std dev = 7.60e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.032691733653972675;  // std dev = 0.271, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.0924630214918095;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7852336541112657;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11402719890097596;  // std dev = 3.121, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.570474293076961;  // std dev = 0.077, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.47292467607576877;  // std dev = 0.817, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.727932511155141;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6925087287085674;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.557261782616102;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6023237358662441;  // std dev = 0.243, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1169706474160918;  // std dev = 0.096, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07606030783919278;  // std dev = 2.157, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.12396448398022229;  // std dev = 2.224, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), follows(D, F) )
%   | | | then return 0.40566916069962833;  // std dev = 1.410, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | | else return 0.6579220028325533;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.11492181336085483;  // std dev = 1.192, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B), follows(A, H) )
%   | | | then return 0.31892076430491273;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.44313219708849444;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5795628481821365;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.7540457473486725;  // std dev = 0.186, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10427604925232141;  // std dev = 0.005, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.15802450764440207;  // std dev = 0.124, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(D, G), recursion_accounttype(E, B) )
%   | | | then return 0.338276517724329;  // std dev = 0.060, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.44767584576013036;  // std dev = 0.245, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H), tweets(D, I) )
%   | | | then return 0.10291702695736298;  // std dev = 0.558, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.27691967141067364;  // std dev = 1.008, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.43760686221392364;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.33094212729438444;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.37346478042602177;  // std dev = 1.002, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.07548040951861847;  // std dev = 2.115, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.10168529966867797;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.208988893290069;  // std dev = 1.628, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.2553298502513176;  // std dev = 0.079, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.0859575999086424;  // std dev = 6.14e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.28372450427950024;  // std dev = 0.183, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.0788677741165524;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.04685880516252444;  // std dev = 0.137, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2656053435314709;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4963645833894735;  // std dev = 0.125, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11502264242592876;  // std dev = 0.024, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.22836220244457273;  // std dev = 0.017, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.09201247694710178;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.21003252683430093;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.38942191962002176;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08196342571241468;  // std dev = 0.061, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2498274940130606;  // std dev = 1.125, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.10906852931169429;  // std dev = 1.05e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08557163658813666;  // std dev = 0.488, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07478891003071077;  // std dev = 1.346, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.16935097615835445;  // std dev = 0.988, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.19686753222801776;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18897309498899403;  // std dev = 0.015, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.24845726726546496;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.2212283219601017;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07022730947468644;  // std dev = 0.419, 138.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=3 */
%   | | | else return -0.02581842809337021;  // std dev = 0.911, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.006602128373057942;  // std dev = 0.907, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.07534414244095892;  // std dev = 1.535, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14356252560496954;  // std dev = 0.988, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.081593791152789;  // std dev = 0.958, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.17149363582509683;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1657459109141932;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18594757139451426;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then return -0.038407442674813726;  // std dev = 0.088, 244.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=32 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2737502198908772;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4508510828581215;  // std dev = 0.243, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12052036986115595;  // std dev = 0.027, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08226069316423454;  // std dev = 2.165, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.15559149263824948;  // std dev = 1.023, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.1663560835822461;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06644538480615235;  // std dev = 0.029, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12006783291770506;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.01257885481020525;  // std dev = 0.155, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20546788442438058;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.011838087331445228;  // std dev = 0.448, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05073699320029052;  // std dev = 1.006, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.560', 'seconds']
Refined model CLL: -0.104554


******************************************
Best model found
******************************************
Results 

CLL : -0.104722 

AUC ROC : 0.993363 

AUC PR : 0.29438 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 12.873 

Total Inference Time : 22.019197940826416 

Total revision time: 45.24831502914429
Best scored revision CLL: -0.104554


Results 

CLL : -0.104722 

AUC ROC : 0.993363 

AUC PR : 0.29438 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 45.281186752319336 

Total Inference Time : 22.019197940826416 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.234
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -2.7159397441421396E-4;  // std dev = 0.300, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.060450942317672465;  // std dev = 0.812, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.754967719201899;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07810594024665582;  // std dev = 2.141, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5772546751989438;  // std dev = 0.216, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5945433576595645;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02779163070695092;  // std dev = 1.933, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | | | else return 0.031000617319530903;  // std dev = 1.746, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5131555278480094;  // std dev = 1.195, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12156790019309216;  // std dev = 0.021, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.12885484908931913;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1582119927664798;  // std dev = 0.145, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3201908757432632;  // std dev = 0.249, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3002423010556473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6205035070958581;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08779088314121589;  // std dev = 1.171, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.01953279614036412;  // std dev = 0.263, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026221838733773473;  // std dev = 1.347, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24114970170285355;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5016659067040059;  // std dev = 0.608, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11390508118432305;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11222115354342181;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2706706600386447;  // std dev = 0.436, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.08353677406550387;  // std dev = 1.028, 60.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025239124153501446;  // std dev = 0.886, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1842102934432629;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04729722375535397;  // std dev = 0.142, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -5.686449323458803E-4;  // std dev = 0.797, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.06400268048574287;  // std dev = 1.235, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1744567236771368;  // std dev = 0.056, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1666016742213697;  // std dev = 0.901, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09345365056519057;  // std dev = 0.012, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43212905501880844;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12541064824129985;  // std dev = 0.127, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17874990476599098;  // std dev = 0.338, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.24185455704708503;  // std dev = 0.269, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08553663666855414;  // std dev = 0.008, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08427975656700906;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08459888036806297;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then return -0.014591206870334057;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16295308662687646;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027125858977476155;  // std dev = 1.018, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.280', 'seconds']
Parameter learned model CLL:-0.108003 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false': [0.0, 12, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.487, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.3, 23, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.812, 12, 1], 'false,false,false,true': [0.087, 0, 3], 'false,false,false,false': [2.141, 22, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.216, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.117, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.933, 45, 6], 'false,false,false,false': [1.746, 17, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.195, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 40, 0], 'false,true,false,false': [5.27e-09, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.249, 0, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.109, 0, 6], 'false,false,true,false': [1.171, 50, 2], 'false,false,false': [0.263, 14, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.347, 35, 18], 'false,true': [0.0, 0, 2], 'false,false,true': [0.608, 0, 11], 'false,false,false,true': [0.081, 15, 0], 'false,false,false,false': [0.075, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.436, 0, 26], 'true,false': [1.028, 58, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.886, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.028, 0, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 32, 4], 'false,false,false,true': [0.797, 17, 6], 'false,false,false,false': [1.235, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.056, 0, 18], 'false,true,true,true': [0.901, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.012, 42, 0], 'false,false,true': [0.437, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.127, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.338, 0, 18], 'true,true,false': [0.269, 0, 3], 'true,false,true': [0.008, 33, 0], 'true,false,false,true': [0.012, 5, 0], 'true,false,false,false': [0.016, 7, 0], 'false,true': [0.456, 13, 5], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.018, 11, 4]}]
{'': [0.21869822485207113, 0.22959183673469394], 'false': [0.22222222222222202, 0.2366863905325442], 'false,true': [0.0, -1.1102230246251566e-17], 'true': [0.0, 4.794144879063176e-17], 'true,false': [2.7755575615628914e-17, -1.1564823173178714e-17], 'false,true,true': [0.0, nan]}
{'': [2.220446049250313e-16, 0.1308537125818321], 'false': [0.09009267372674386, 0.152697363319499], 'false,false': [0.05069016656557465, 0.1823484854956864], 'false,false,false': [0.0025196916575348136, 0.1580006640613684], 'false,true': [nan, 0.09009267372674386], 'false,false,true': [nan, 0.05069016656557465]}
{'': [0.003403268946826188, 0.10348015451250946], 'false': [nan, 0.10348015451250948], 'false,false': [3.700743415417188e-17, 0.09497711994091763], 'false,false,false': [0.07330238497341704, 0.14516738770167611], 'true': [0.003114117386642808, 0.004599944630056567], 'true,false': [nan, 0.004599944630056567], 'true,true': [0.003114117386642808, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.04459958759931498, 0.0005879309445696261], 'false': [1.613971238527264e-05, 0.0008706727766804497], 'false,false': [nan, 0.0008706727766804497], 'false,false,false': [nan, 0.0008706727766804497], 'false,true': [nan, 1.613971238527264e-05], 'false,true,false': [1.1055707382195968e-05, 3.96508223080413e-18]}
{'': [0.003440968758950342, 0.07114376266832619], 'false': [0.0, 0.07014128150048472], 'false,false': [0.07039565842651449, 0.0691994626583062], 'false,false,true': [0.001974765744445698, 0.026392348201737255], 'true': [0.003440968758950342, nan], 'false,true': [0.0, nan]}
{'': [0.03423595168733722, 0.08239891812136152], 'false': [0.0, 0.08488586942496552], 'false,false': [0.03357569762221837, 0.0004182944043922468], 'true': [nan, 0.03423595168733721], 'true,false': [nan, 0.03423595168733722], 'false,false,false': [0.00043685791651210115, 0.00039693823110384586]}
{'': [0.040962987112504554, 0.06547592582256188], 'false': [nan, 0.06547592582256191], 'false,false': [nan, 0.06547592582256188], 'false,false,false': [nan, 0.06547592582256188], 'true': [0.007311441318087637, 0.01761467751015384]}
{'': [4.809033185761147e-05, 0.040287292497404294], 'false': [nan, 0.0402872924974043], 'false,false': [0.020081630530802953, 0.056365355593301546], 'false,false,false': [0.027596774087458704, 0.09526128152016289], 'true': [4.809033185761147e-05, nan]}
{'': [0.0031630915640066815, 0.042555495812541436], 'false': [0.024845538112118974, 0.07284423774690293], 'false,false': [0.02727195224989051, 0.0009445612734840889], 'false,true': [0.11593147496963217, 3.295500174860244e-06], 'false,true,true': [0.11593147496963217, nan], 'false,false,false': [nan, 0.0009445612734840889]}
{'': [0.019162654603895893, 0.037738023049550484], 'false': [0.011573368634710757, 0.06583878728182614], 'false,false': [0.0, 0.0690749750315986], 'false,false,false': [nan, 0.0690749750315986], 'true': [0.00938112129240866, 1.082374788313868e-05], 'true,true': [0.006353147477961816, 0.02413565234521735], 'true,false': [2.1492657241750983e-06, 3.3837843040084026e-05], 'true,false,false': [2.727791835342025e-05, 3.848107019705742e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.212
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7518526675222027;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15619471171805724;  // std dev = 1.690, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03149495616534052;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.41250929388914176;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6048609765952763;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08896473555176271;  // std dev = 0.689, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return -0.02474771828669259;  // std dev = 0.927, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.002744553089510524;  // std dev = 1.309, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.10466501646003576;  // std dev = 1.482, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.447596026592239;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4227020871733691;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.46692752841505225;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5993424286284789;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6988207875729605;  // std dev = 0.152, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(H, A) )
%   | then return -0.10557209776069817;  // std dev = 0.003, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( tweets(A, I) )
%   | | then return -0.14034169306726535;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.1597810485241431;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.34202069384969025;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3229136905905964;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3242608644102453;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3544784930421489;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49501041319916034;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08338007815351339;  // std dev = 0.842, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04927077064000465;  // std dev = 0.520, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.03863727218275373;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26300294399782786;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3091330391217633;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08881978003838596;  // std dev = 0.011, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08978577362533127;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3441232923076808;  // std dev = 0.153, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5504924540041243;  // std dev = 0.192, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12039036250959412;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11438037913469414;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21736328453961193;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(C, A), tweets(A, E) )
%   | | then return -0.1262350019756492;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21263090320491418;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2381605954405741;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3151824897453927;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08986470009948971;  // std dev = 0.013, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( tweets(A, I) )
%   | | then return -0.005350449641129389;  // std dev = 0.149, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21565183996027817;  // std dev = 0.405, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.056872960089997995;  // std dev = 0.613, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1909569744723793;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1725083268636578;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.18298860412015927;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( tweets(G, H), follows(G, F) )
%   | | | then return -0.06774431876839351;  // std dev = 0.304, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | | else return 0.022035744922054488;  // std dev = 0.244, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.024872656095099515;  // std dev = 0.766, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.02788889774833801;  // std dev = 0.762, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.1567702811628761;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.18438771743058038;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15279460942803996;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2112701843516155;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07459711475303751;  // std dev = 0.007, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.24677048996046946;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41073809266638506;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.0999131438258921;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.11522877669368314;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13900587811091827;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1914955513605991;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06889138823646984;  // std dev = 0.005, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17938086804942105;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09133700810289647;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.09510414857100132;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1362929830972267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.09016577876627926;  // std dev = 0.374, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07703000010764416;  // std dev = 0.491, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.743', 'seconds']
Refined model CLL: -0.098598


******************************************
Best model found
******************************************
Results 

CLL : -0.102805 

AUC ROC : 0.990995 

AUC PR : 0.288197 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 5.212 

Total Inference Time : 3.6723380088806152 

Total revision time: 12.721393962860107
Best scored revision CLL: -0.098598


Results 

CLL : -0.102805 

AUC ROC : 0.990995 

AUC PR : 0.288197 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 12.748092552185058 

Total Inference Time : 3.6723380088806152 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.511
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.0918510649004878;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287644022461034;  // std dev = 1.58e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04536254095578247;  // std dev = 0.249, 64.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004946239614684678;  // std dev = 1.452, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7561377795328412;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08082231443233413;  // std dev = 3.299, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5812891465105836;  // std dev = 0.285, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5960128144318156;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645375401624761;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5645375401624761;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011519103378564275;  // std dev = 2.963, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
%   | | | else return 0.015016722817944384;  // std dev = 2.634, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5301521411292336;  // std dev = 1.753, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12220003583328433;  // std dev = 0.046, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.12281019144833302;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16039217719608045;  // std dev = 0.149, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31770901464519535;  // std dev = 0.322, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3025695998711746;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6260216275797694;  // std dev = 0.199, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09287512345262107;  // std dev = 1.489, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   | | else return 0.1473723989300194;  // std dev = 0.372, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015987959424408484;  // std dev = 2.009, 107.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24275006473020766;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5287450964112941;  // std dev = 0.744, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12113449035441927;  // std dev = 0.119, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.13879803460068382;  // std dev = 0.128, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2560981525060413;  // std dev = 1.191, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return -0.08687125645701654;  // std dev = 1.441, 106.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03220300440838163;  // std dev = 1.452, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16062534256089872;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.047718516545225714;  // std dev = 0.138, 62.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.04848195910843586;  // std dev = 1.303, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.06646934906007868;  // std dev = 1.638, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18091166988379093;  // std dev = 0.054, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3291243073343729;  // std dev = 0.584, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09401750211646524;  // std dev = 0.121, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33798107646904874;  // std dev = 1.000, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12091300545852443;  // std dev = 0.157, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12286607421223017;  // std dev = 1.370, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else return 0.21104846923310522;  // std dev = 0.244, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08142392539897383;  // std dev = 0.005, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1142620834543001;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.045941089925546054;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.016375487675207627;  // std dev = 0.783, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16105692890690815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05305407302330789;  // std dev = 1.313, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.933', 'seconds']
Parameter learned model CLL:-0.112352 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.381, 2, 41], 'true,false,true': [6.14e-08, 59, 0], 'true,false,false': [0.218, 19, 1], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 14, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.58e-07, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.249, 58, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.452, 17, 3], 'false,false,false,true': [0.09, 0, 3], 'false,false,false,false': [3.299, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.285, 0, 31], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.122, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.963, 90, 14], 'false,false,false,false': [2.634, 41, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.753, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 75, 0], 'false,true,false,false': [0.011, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.149, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.322, 0, 34], 'true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.199, 0, 13], 'false,false,true,false': [1.489, 104, 3], 'false,false,false': [0.372, 13, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.009, 72, 35], 'false,true': [0.0, 0, 4], 'false,false,true': [0.744, 0, 23], 'false,false,false,true': [0.119, 38, 0], 'false,false,false,false': [0.128, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.191, 1, 50], 'true,false': [1.441, 103, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.452, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.985, 1, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.138, 56, 6], 'false,false,false,true': [1.303, 23, 13], 'false,false,false,false': [1.638, 21, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.054, 0, 34], 'false,true,true,true': [0.584, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.121, 90, 0], 'false,false,true': [1.0, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.157, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.37, 2, 36], 'true,true,false': [0.244, 0, 5], 'true,false,true': [0.005, 72, 0], 'true,false,false,true': [0.032, 12, 0], 'true,false,false,false': [0.91, 4, 1], 'false,true': [0.783, 19, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.313, 16, 8]}]
{'': [0.2257457672668649, 0.23999999999999966], 'false': [0.24639999999999954, 0.23040000000000005], 'false,true': [-1.6148698540002277e-16, -1.1895246692412391e-17], 'true': [0.044348296376420925, 0.012497997115846858], 'true,false': [6.39789539614497e-17, 0.04750000000000004], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [7.536059318667729e-16, 0.12321823725475212], 'false': [0.0619937093990791, 0.15910765834750312], 'false,false': [0.10543474806168047, 0.17183084097198886], 'false,false,false': [0.0026885516622285888, 0.1600232411858622], 'false,false,true': [nan, 0.10543474806168047], 'false,true': [nan, 0.0619937093990791]}
{'': [0.0028416350687258053, 0.10881711361772103], 'false': [nan, 0.10881711361772137], 'false,false': [-4.4408920985006264e-17, 0.10222468333987957], 'false,false,false': [0.0844186424199472, 0.13878571853463217], 'true': [0.0026190856089249727, 0.004943654634450197], 'true,false': [nan, 0.004943654634450197], 'true,true': [0.0026190856089249727, nan], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.047992306470692525, 0.00047997405312726564], 'false': [2.4017924551285137e-05, 0.0006549780817812865], 'false,false': [nan, 0.0006549780817812865], 'false,false,false': [nan, 0.0006549780817812865], 'false,true': [nan, 2.4017924551292378e-05], 'false,true,false': [2.7827386408271574e-05, 6.907978001928249e-06]}
{'': [0.0030489567586689885, 0.08195241715687346], 'false': [1.1102230246251566e-17, 0.08189125199293985], 'false,false': [0.06873774012131229, 0.13821541807140508], 'false,false,true': [0.003054964888137809, 0.020729865363419583], 'true': [0.0030489567586689885, nan], 'false,true': [1.1102230246251566e-17, nan]}
{'': [0.03772260912206916, 0.080887052657288], 'false': [0.0, 0.08219797081181619], 'false,false': [0.02403941976699383, 0.00047027724207677357], 'true': [nan, 0.03772260912206905], 'true,false': [nan, 0.03772260912206916], 'false,false,false': [0.00037544197754796045, 0.0004083703559059293]}
{'': [0.04804638889266666, 0.06589058798407538], 'false': [nan, 0.06589058798407538], 'false,false': [nan, 0.06589058798407538], 'false,false,false': [nan, 0.06589058798407538], 'true': [0.02780079798348568, 0.019576817609213565]}
{'': [0.028520551923595143, 0.04584381790317652], 'false': [nan, 0.04584381790317662], 'false,false': [0.019002130406032484, 0.06543159161371329], 'false,false,false': [0.047126623111665135, 0.0865151286723478], 'true': [0.028520551923595143, nan]}
{'': [0.0029596077781449356, 0.03852677903782616], 'false': [0.020901436979516748, 0.06817065807679124], 'false,false': [0.05551942618961466, 0.0007476435111982149], 'false,true': [0.031042440937563708, 0.00016159579209473998], 'false,true,true': [0.031042440937563708, nan], 'false,false,false': [nan, 0.0007476435111982149]}
{'': [0.03170417967285887, 0.043090422567513706], 'false': [0.020424714438498713, 0.06937242139458609], 'false,false': [0.0, 0.07179635427753331], 'false,false,false': [nan, 0.0717963542775333], 'true': [0.045864811746885135, 0.009526042532546906], 'true,true': [0.049422528368999075, 0.011954232347157135], 'true,false': [4.179905683228248e-07, 0.04973848182437092], 'true,false,false': [8.296017759604896e-05, 0.16561684566597923]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.618
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.31269438964496676;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6824363751739175;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, G) )
%   | | | then return -0.11646043971313967;  // std dev = 0.858, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | | else return 0.11478894725002525;  // std dev = 1.322, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.732300092580541;  // std dev = 0.127, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.031564855112908505;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.10166441613181024;  // std dev = 1.937, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5644924041338336;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2281170816713173;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5614504150046508;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5540080547010626;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5590168237013042;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5908961953891819;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.11926673911762864;  // std dev = 0.111, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.049760025912338295;  // std dev = 1.827, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0.1863767824224149;  // std dev = 1.872, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.42694918138483656;  // std dev = 0.113, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42023755482995906;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5485337324773856;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6792404169962396;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10654892179050952;  // std dev = 0.086, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return -0.10178211753347338;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.130198377332994;  // std dev = 0.218, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.324750096778114;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.34080552634405936;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3427216779665027;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.31776341126844526;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32256616216262096;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4555998131810484;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09758371605392252;  // std dev = 0.082, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03290634106323707;  // std dev = 1.374, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0.06647374738400957;  // std dev = 1.584, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2604663705356779;  // std dev = 0.016, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.12648530916718376;  // std dev = 0.850, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.08625546249761527;  // std dev = 0.038, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.08494780663161385;  // std dev = 5.89e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2553801071023935;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3628112275323984;  // std dev = 0.219, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4787913484629366;  // std dev = 0.337, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1047519544182277;  // std dev = 0.038, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.15226771005004278;  // std dev = 0.258, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.21430292992496222;  // std dev = 0.012, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.20817558582489512;  // std dev = 0.000429, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.22248046889763884;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2849070592211101;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08257923961425626;  // std dev = 0.008, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2070632450357388;  // std dev = 1.078, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10347651797146186;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.024994369961922818;  // std dev = 0.833, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return -0.036384026497698015;  // std dev = 1.047, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(C, D) )
%   | then return 0.1809345296969648;  // std dev = 0.014, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E), follows(C, A) )
%   | | then return -0.02412659892827922;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.17218345922797526;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.21210279947083324;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07611429255076807;  // std dev = 0.007, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.28204095396246004;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09948176114774514;  // std dev = 0.123, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09638297089518229;  // std dev = 0.437, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.06995140278148289;  // std dev = 0.948, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.15936087339450947;  // std dev = 0.014, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.14931798420283768;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.20191701263147321;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14380275163535394;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.06958908741278517;  // std dev = 0.006, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.23642791216615203;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.40893854906247584;  // std dev = 0.209, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.08544006567772941;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.17744724473289208;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1399674232127404;  // std dev = 0.017, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.06589939855474289;  // std dev = 0.006, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.054838358872753845;  // std dev = 0.063, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.1676778608005054;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07555524604333559;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.051706022563106746;  // std dev = 0.331, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14203659444390082;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.03000163118215612;  // std dev = 0.621, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.24541958018401305;  // std dev = 0.484, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.392', 'seconds']
Refined model CLL: -0.097704


******************************************
Best model found
******************************************
Results 

CLL : -0.09752 

AUC ROC : 0.992505 

AUC PR : 0.332354 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 6.618 

Total Inference Time : 9.84161114692688 

Total revision time: 22.8413498916626
Best scored revision CLL: -0.097704


Results 

CLL : -0.09752 

AUC ROC : 0.992505 

AUC PR : 0.332354 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 22.86804848098755 

Total Inference Time : 9.84161114692688 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.084
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8264029033534809;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.1155352754268035;  // std dev = 0.160, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.2528857772047755;  // std dev = 0.489, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7258358945582697;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04645984679870134;  // std dev = 0.247, 97.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02419133320537931;  // std dev = 1.476, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5614826653580954;  // std dev = 0.829, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17357134644182873;  // std dev = 3.871, 78.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=27 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5734452647892915;  // std dev = 0.290, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4476668560728336;  // std dev = 0.813, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5616253799291703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5616253799291703;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008243172477155806;  // std dev = 3.557, 148.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=21 */
%   | | | else return 0.04372279462950301;  // std dev = 3.302, 68.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5332037208481961;  // std dev = 2.107, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12291712710586618;  // std dev = 0.077, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | | else return -0.12628504025850393;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17099291432292602;  // std dev = 0.233, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2835794318815755;  // std dev = 1.202, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3000482941775476;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6186314115025644;  // std dev = 0.271, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.09743381802642286;  // std dev = 1.623, 139.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=4 */
%   | | else return 0.0028782051897950803;  // std dev = 0.289, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02952225774656428;  // std dev = 2.328, 146.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15080552320822754;  // std dev = 0.765, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5191504914531759;  // std dev = 0.771, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.128460688900987;  // std dev = 0.170, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.13378567871321492;  // std dev = 0.192, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25082302299993475;  // std dev = 1.722, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return -0.08950859285243636;  // std dev = 1.410, 159.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01807913469790444;  // std dev = 1.779, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19551998842566143;  // std dev = 0.049, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.058080067655319936;  // std dev = 0.146, 104.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.002418194541064285;  // std dev = 1.611, 76.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=18 */
%   | | | else return 0.0957550208291193;  // std dev = 1.963, 37.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.138121631620091;  // std dev = 0.204, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3172615137788556;  // std dev = 0.691, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09150136405866349;  // std dev = 0.074, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3618208830548277;  // std dev = 0.636, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12699305353053983;  // std dev = 0.297, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1597017187814154;  // std dev = 1.122, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.19097750055804114;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08176944999225365;  // std dev = 0.014, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09341548023014881;  // std dev = 0.032, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.0335714486217979;  // std dev = 0.744, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.026811942352329976;  // std dev = 0.965, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21709630811618208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033189883331355904;  // std dev = 1.525, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.607', 'seconds']
Parameter learned model CLL:-0.112079 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [7.6e-08, 78, 0], 'true,false,false': [0.16, 37, 1], 'false,true,true,true': [0.0, 0, 14], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.489, 23, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 88, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.476, 23, 3], 'false,false,false,true': [0.829, 1, 4], 'false,false,false,false': [3.871, 51, 27]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.29, 0, 44], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.813, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [1.49e-08, 0, 6], 'false,false,false,true': [3.557, 127, 21], 'false,false,false,false': [3.302, 53, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.107, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.077, 99, 0], 'false,true,false,false': [0.01, 19, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.233, 54, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.202, 2, 48], 'true,false': [0.0, 0, 0], 'false,true,true': [2.11e-08, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.271, 0, 24], 'false,false,true,false': [1.623, 135, 4], 'false,false,false': [0.289, 39, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.328, 95, 51], 'false,true': [0.765, 1, 8], 'false,false,true': [0.771, 0, 34], 'false,false,false,true': [0.17, 49, 0], 'false,false,false,false': [0.192, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.722, 3, 75], 'true,false': [1.41, 155, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.779, 34, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.049, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 95, 9], 'false,false,false,true': [1.611, 58, 18], 'false,false,false,false': [1.963, 21, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 2, 48], 'false,true,true,true': [0.691, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.074, 125, 0], 'false,false,true': [0.636, 0, 27], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.297, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.122, 1, 52], 'true,true,false': [0.318, 0, 9], 'true,false,true': [0.014, 106, 0], 'true,false,false,true': [0.032, 17, 0], 'true,false,false,false': [0.744, 13, 1], 'false,true': [0.965, 26, 16], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.525, 25, 14]}]
{'': [0.2263974282949972, 0.23624447492760392], 'false': [0.23363980530016176, 0.2389196675900272], 'false,true': [-2.220446049250313e-16, 2.05596856412066e-17], 'true': [0.030738221214411016, 0.008546373365041604], 'true,false': [7.401486830834377e-17, 0.025623268698061006], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [-1.0658141036401502e-15, 0.13257119552663363], 'false': [0.0609996182848071, 0.17914782835898277], 'false,false': [0.08373737789120964, 0.19737149476758264], 'false,false,false': [0.13744161413668615, 0.19214838321952984], 'false,false,true': [nan, 0.08373737789120964], 'false,true': [nan, 0.0609996182848071]}
{'': [0.01664405119066482, 0.11704157605904497], 'false': [nan, 0.11704157605904496], 'false,false': [-4.9343245538895844e-17, 0.10966342447258776], 'false,false,false': [0.08550661122951492, 0.16038970162605062], 'true': [0.0019093656007884506, 0.13210338323123533], 'true,false': [nan, 0.13210338323123533], 'true,true': [0.0019093656007884506, nan], 'false,false,true': [-1.1102230246251565e-16, 3.700743415417188e-17]}
{'': [0.04673549573516678, 0.0008374973481156755], 'false': [5.23888068387956e-05, 0.0010030285997788917], 'false,false': [nan, 0.0010030285997788917], 'false,false,false': [nan, 0.0010030285997788917], 'false,true': [nan, 5.238880683880124e-05], 'false,true,false': [5.968090741518082e-05, 4.876675215627711e-06]}
{'': [0.02889365664022227, 0.08161347080292969], 'false': [4.9343245538895844e-17, 0.08157844506901837], 'false,false': [0.0809833545566788, 0.08362191513777201], 'false,false,true': [0.0030706301792791844, 0.018939065206597574], 'true': [0.02889365664022227, nan], 'false,true': [4.9343245538895844e-17, nan]}
{'': [0.03712374832251045, 0.08844572129660341], 'false': [0.06510375323039885, 0.08941562228620867], 'false,false': [0.017469853499378123, 0.0007351684356268157], 'true': [nan, 0.0371237483225105], 'true,false': [nan, 0.03712374832251045], 'false,false,false': [0.0005874278084315301, 0.0008962984988469488]}
{'': [0.04646423873298769, 0.06591679126131351], 'false': [nan, 0.06591679126131347], 'false,false': [nan, 0.06591679126131351], 'false,false,false': [nan, 0.06591679126131351], 'true': [0.03799991354832024, 0.012496728600104288]}
{'': [4.8455446096675736e-05, 0.04299142900720385], 'false': [nan, 0.042991429007204], 'false,false': [0.02136740880565991, 0.05919802654409381], 'false,false,false': [0.03415337107387451, 0.10415892126079161], 'true': [4.8455446096675736e-05, nan]}
{'': [0.04155153814898458, 0.033757307930113035], 'false': [0.02176547486414451, 0.04872977905920695], 'false,false': [0.014977571890294679, 0.0010607332238159702], 'false,true': [0.026554689262000924, 4.3886554740010905e-05], 'false,true,true': [0.026554689262000924, nan], 'false,false,false': [nan, 0.0010607332238159702]}
{'': [0.022447806352815885, 0.04015178202537056], 'false': [0.0221929878701367, 0.058946814902036904], 'false,false': [0.0, 0.05961273236746846], 'false,false,false': [nan, 0.05961273236746841], 'true': [0.02206173677957452, 0.004296296251547976], 'true,true': [0.023764029125668776, 0.011200944847597268], 'true,false': [1.842780827504658e-06, 0.018797529454045708], 'true,false,false': [6.084127711636356e-05, 0.03958527907820727]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.436
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.7748156017661789;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.13495451317635;  // std dev = 0.083, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.7497627834073223;  // std dev = 0.131, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4485864163436366;  // std dev = 0.704, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12620320383832248;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07652346536870305;  // std dev = 2.693, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return 0.20543403353473877;  // std dev = 2.625, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.55625668534991;  // std dev = 0.022, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6063321064038513;  // std dev = 0.191, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11292980186499739;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14598369347042503;  // std dev = 3.083, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
%   | | | else return 0.3074823794046066;  // std dev = 1.678, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.41733606319491373;  // std dev = 8.32e-05, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(D, E), follows(E, A) )
%   | | | then return -0.07586591883249877;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4576532630277361;  // std dev = 0.213, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.45470590928508814;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.6586539733990169;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7360011204186235;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.10210169229582697;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, I) )
%   | | then return -0.15958033661412077;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.21651657268638555;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3205565951848927;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(E, A) )
%   | | then return 0.13613557715943944;  // std dev = 0.800, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.34606523123960387;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3207505223550653;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.09239867436957451;  // std dev = 0.708, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   | | | else return -0.018143779164208326;  // std dev = 1.179, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.026888601840318903;  // std dev = 1.896, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.06556965019395392;  // std dev = 2.289, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2550663035581493;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.1962427741463844;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.3347090994650201;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05601324175324517;  // std dev = 0.111, 92.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=7 */
%   | | else return -0.08934571976146848;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2551986324056968;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.1134176649568475;  // std dev = 1.204, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.4966681089104175;  // std dev = 0.248, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.1312245069731573;  // std dev = 0.043, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.21480046776263567;  // std dev = 0.009, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.20977635687065632;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.1272300460725382;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3421663916301922;  // std dev = 0.178, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08154882270570224;  // std dev = 0.004, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2803668324113004;  // std dev = 1.403, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.13001111115059474;  // std dev = 0.061, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03538272398352863;  // std dev = 0.854, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.01350019721082446;  // std dev = 1.180, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1808018515072003;  // std dev = 0.008, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.17711017008706065;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.3040041556377694;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.255629046638638;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07595281062755072;  // std dev = 0.003, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21012159205406986;  // std dev = 1.380, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.11503137412285275;  // std dev = 0.047, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.023537288063998605;  // std dev = 0.766, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.03568184684506732;  // std dev = 1.337, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1545697783488754;  // std dev = 0.004, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.21660369791463932;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.22217474899749845;  // std dev = 0.138, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15727892049938372;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07060385328802762;  // std dev = 0.003, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2695043211858684;  // std dev = 0.098, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4467349799372608;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.10481305320814616;  // std dev = 0.054, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.15762128693376967;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.049983650372146256;  // std dev = 1.649, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0.18056757910355425;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1349315563503554;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.288846817217814;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.0641357708593978;  // std dev = 0.026, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   else if ( tweets(A, H) )
%   | then return 0.03636356486921303;  // std dev = 0.161, 40.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.3286543141642396;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.009897077176468457;  // std dev = 0.711, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.09499635042615556;  // std dev = 0.814, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.139', 'seconds']
Refined model CLL: -0.099994


******************************************
Best model found
******************************************
Results 

CLL : -0.098103 

AUC ROC : 0.994242 

AUC PR : 0.429693 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 7.436 

Total Inference Time : 9.580784559249878 

Total revision time: 25.19079186439514
Best scored revision CLL: -0.099994


Results 

CLL : -0.098103 

AUC ROC : 0.994242 

AUC PR : 0.429693 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 25.217490453720092 

Total Inference Time : 9.580784559249878 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.324
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.994, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.0974066204560433;  // std dev = 0.206, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.13939893509951237;  // std dev = 0.450, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7218417570428316;  // std dev = 2.38e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04840197564198871;  // std dev = 0.247, 161.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05158338040410263;  // std dev = 1.778, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7396142889037286;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.09441260858700215;  // std dev = 4.536, 125.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5554242587072212;  // std dev = 0.896, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8753364699211283;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.272006091482831;  // std dev = 1.313, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5576854994671;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5576854994671;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021851217593875105;  // std dev = 4.124, 219.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=27 */
%   | | | else return 0.08112031487566178;  // std dev = 3.696, 78.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5355636024856163;  // std dev = 2.456, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11896313833732912;  // std dev = 0.029, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | | else return -0.1305400702081748;  // std dev = 0.012, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15671309288216106;  // std dev = 0.233, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2563484016794231;  // std dev = 2.025, 69.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.230364582944966;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6351836397797702;  // std dev = 0.317, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10197636309458098;  // std dev = 1.664, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   | | else return 0.04338892419668045;  // std dev = 0.327, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.036943618606582455;  // std dev = 2.886, 189.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=69 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2512720146382631;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5356051327980692;  // std dev = 0.901, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11980714568019492;  // std dev = 0.153, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.12890137746007363;  // std dev = 0.169, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2835918110155152;  // std dev = 1.363, 99.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=98 */
%   | else return -0.08509645000833155;  // std dev = 1.532, 190.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047404407709353086;  // std dev = 1.996, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14927938182155384;  // std dev = 1.691, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04745220017113333;  // std dev = 0.140, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.001152800806998989;  // std dev = 1.805, 96.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=23 */
%   | | | else return 0.03236406473531014;  // std dev = 2.285, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14581971536533422;  // std dev = 0.196, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25971506378683074;  // std dev = 1.344, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09308274936293273;  // std dev = 0.108, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39112632525753516;  // std dev = 0.755, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11320929468018769;  // std dev = 0.241, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15046634765041586;  // std dev = 1.665, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.17753992728905607;  // std dev = 0.323, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08274087115935913;  // std dev = 0.032, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0977791516089799;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.001617972774961153;  // std dev = 0.870, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 5.052797788659082E-4;  // std dev = 1.137, 69.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24226307402886338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06930673497679508;  // std dev = 1.691, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.234', 'seconds']
Parameter learned model CLL:-0.109967 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 84], 'true,false,true': [0.0, 124, 0], 'true,false,false': [0.206, 43, 2], 'false,true,true,true': [0.0, 0, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.34e-08, 41, 0], 'false,false': [0.45, 46, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.38e-07, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 146, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.778, 43, 4], 'false,false,false,true': [0.11, 0, 6], 'false,false,false,false': [4.536, 93, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.896, 1, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.313, 3, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [2.98e-08, 0, 10], 'false,false,false,true': [4.124, 192, 27], 'false,false,false,false': [3.696, 59, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.456, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 148, 0], 'false,true,false,false': [0.012, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.233, 84, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.025, 5, 64], 'true,false': [0.0, 0, 0], 'false,true,true': [0.966, 1, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.317, 0, 31], 'false,false,true,false': [1.664, 216, 4], 'false,false,false': [0.327, 40, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.886, 120, 69], 'false,true': [0.0, 0, 13], 'false,false,true': [0.901, 0, 42], 'false,false,false,true': [0.153, 62, 0], 'false,false,false,false': [0.169, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.363, 1, 98], 'true,false': [1.532, 185, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.996, 42, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.691, 3, 67], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 135, 15], 'false,false,false,true': [1.805, 73, 23], 'false,false,false,false': [2.285, 50, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.196, 3, 64], 'false,true,true,true': [1.344, 1, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.108, 177, 0], 'false,false,true': [0.755, 0, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.241, 94, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.665, 3, 71], 'true,true,false': [0.323, 0, 13], 'true,false,true': [0.032, 141, 0], 'true,false,false,true': [5.27e-09, 21, 0], 'true,false,false,false': [0.87, 14, 2], 'false,true': [1.137, 49, 20], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.691, 28, 17]}]
{'': [0.2239444478888966, 0.21158400000000135], 'true': [0.01162629757785438, 0.0116942684079688], 'false': [0.2203708680462237, 0.20214843749999947], 'false,true': [-8.881784197001253e-17, 4.603363760640893e-17], 'true,false': [-7.162729191130042e-18, 0.04246913580246911], 'false,true,true': [-2.0898315757650005e-16, 1.4802973661668753e-16]}
{'': [8.484092367284778e-16, 0.11327442040592678], 'false': [0.06123869164665352, 0.15279890539774177], 'false,false': [0.06724800267804819, 0.17535571435125627], 'false,false,false': [0.0020282745697677296, 0.1646089333714455], 'false,false,true': [nan, 0.06724800267804819], 'false,true': [nan, 0.06123869164665352]}
{'': [0.048233485551141944, 0.11370095362141011], 'false': [nan, 0.11370095362140924], 'false,false': [1.2688263138573217e-16, 0.10531946958415085], 'false,false,false': [0.07766776763903094, 0.17513846604182173], 'true': [0.01384730347188074, 0.20522503944698514], 'true,false': [0.0, 0.19162706705311136], 'true,true': [0.01384730347188074, nan], 'false,false,true': [0.0, 8.881784197001253e-17]}
{'': [0.04750917256566766, 0.0005045022369698257], 'false': [2.3954709273860213e-05, 0.0006453427536346664], 'false,false': [nan, 0.0006453427536346664], 'false,false,false': [nan, 0.0006453427536346664], 'false,true': [nan, 2.3954709273860213e-05], 'false,true,false': [5.759177199825459e-06, 4.748270426063547e-06]}
{'': [0.05943566475112104, 0.078581217802228], 'false': [0.06222222222222219, 0.07684415571242693], 'false,false': [0.070263726251913, 0.10677767274872028], 'false,false,true': [0.003246473429001926, 0.012593317557995103], 'false,true': [0.06222222222222219, nan], 'true': [0.05943566475112104, nan]}
{'': [0.04408001020155804, 0.08522248747536493], 'false': [-3.416070845000482e-17, 0.08895731197118269], 'false,false': [0.01934544068338139, 0.0004538909667339441], 'true': [nan, 0.044080010201558176], 'true,false': [nan, 0.04408001020155804], 'false,false,false': [0.0003799766705169185, 0.000490171857260281]}
{'': [0.04516550884257146, 0.06323366522140828], 'false': [nan, 0.06323366522140825], 'false,false': [nan, 0.06323366522140828], 'false,false,false': [nan, 0.06323366522140828], 'true': [0.018762837477612163, 0.012358080037782998]}
{'': [0.0408557909788688, 0.03727742245955248], 'true': [0.0408557909788688, nan], 'false': [nan, 0.03727742245955275], 'false,false': [0.019542393355631175, 0.05166781202665872], 'false,false,false': [0.03393060770270625, 0.07569205845130808]}
{'': [0.03840790985187097, 0.03580156709775726], 'false': [0.02388530161466184, 0.05317527346661051], 'false,false': [0.01781090557077719, 0.0006162599071538529], 'false,true': [0.06231966706495314, 6.619126656141117e-05], 'false,true,true': [0.06231966706495314, nan], 'false,false,false': [nan, 0.0006162599071538529]}
{'': [0.02598488235446382, 0.03763090548401887], 'false': [0.01873564481621323, 0.06281470454729483], 'false,false': [0.0, 0.06356028480060522], 'false,false,false': [nan, 0.06356028480060515], 'true': [0.03316307612524712, 0.004846274255326235], 'true,true': [0.03746645658388503, 0.008043457278199068], 'true,false': [7.1418899736528e-06, 0.022729127516010313], 'true,false,false': [1.32169407693471e-18, 0.04731282579672761]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.481
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else return -0.13175005479947818;  // std dev = 0.100, 198.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.17393840878372288;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then return 0.6497059703504899;  // std dev = 0.255, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 4.21e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.03682650354913489;  // std dev = 0.261, 132.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=14 */
%   | | else return -0.08810107410914099;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.09566522019307667;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.07821240692971121;  // std dev = 1.162, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5861091021700818;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.10278262562374448;  // std dev = 4.297, 122.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5149674205110986;  // std dev = 0.224, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.7268457382226009;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.8624850093961192;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.45662900645764815;  // std dev = 0.349, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11486917866673739;  // std dev = 0.858, 112.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=1 */
%   | | | else return 0.01755676641130028;  // std dev = 2.851, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08219849200964395;  // std dev = 3.247, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | | | else return 0.14747718391953527;  // std dev = 2.691, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.4386123318712016;  // std dev = 0.069, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.10218703522692474;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5952691477193668;  // std dev = 0.146, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.486357491880484;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7208944487434353;  // std dev = 0.330, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11576285317294242;  // std dev = 0.118, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else return -0.11382277583927444;  // std dev = 0.043, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.16537453125425822;  // std dev = 0.228, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3383635819305534;  // std dev = 0.013, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.4149747539316797;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36798042793572733;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.08627293974702861;  // std dev = 0.933, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3245592225728994;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09216681998694876;  // std dev = 0.688, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return 0.011169744669800993;  // std dev = 2.261, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.050132488521475345;  // std dev = 2.123, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.11355312233682056;  // std dev = 2.443, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.23989530332843267;  // std dev = 0.170, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5343411433467625;  // std dev = 0.303, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09831354474150573;  // std dev = 0.103, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.07501864225666331;  // std dev = 0.127, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.250460022413896;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1693746193462304;  // std dev = 0.290, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1981307142763274;  // std dev = 1.007, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5390277717509804;  // std dev = 0.422, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.13248191615473084;  // std dev = 0.031, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22413785125355265;  // std dev = 0.013, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.3729648002763223;  // std dev = 0.495, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.19508849605334258;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.09906845559535925;  // std dev = 0.016, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.28380639497149807;  // std dev = 0.092, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10617907753064634;  // std dev = 0.018, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, I) )
%   | | then return 0.18592741771982568;  // std dev = 0.687, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.0576625564066928;  // std dev = 0.531, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07919837516631552;  // std dev = 1.306, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1854369371982582;  // std dev = 0.017, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return -0.07061968939942916;  // std dev = 0.465, 92.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
%   | | | else return -0.049630953685029504;  // std dev = 0.265, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.005396784471471383;  // std dev = 1.491, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | | | else return -0.06786629768130509;  // std dev = 0.928, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.017217186103527047;  // std dev = 1.261, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | | else return -0.03132420258434981;  // std dev = 1.543, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.011478240434492786;  // std dev = 0.612, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.08114228847800119;  // std dev = 1.264, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16282192531670087;  // std dev = 0.009, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.21656698000799374;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07560599306270095;  // std dev = 0.254, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1593635086786047;  // std dev = 0.093, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.31551827782584657;  // std dev = 0.977, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.07943114022172694;  // std dev = 0.012, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2933022430438674;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2310413881175469;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.12968770260116463;  // std dev = 0.035, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1253371903781824;  // std dev = 0.194, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | else return 0.17574635758752344;  // std dev = 0.095, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0677464540432414;  // std dev = 0.056, 160.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.12153622209050186;  // std dev = 0.435, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0034887693105827753;  // std dev = 0.921, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | | else return -0.017811670446063476;  // std dev = 0.597, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18520943132517897;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.031767219113810134;  // std dev = 0.827, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.10030166154207579;  // std dev = 1.210, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.946', 'seconds']
Refined model CLL: -0.107251


******************************************
Best model found
******************************************
Results 

CLL : -0.107184 

AUC ROC : 0.993387 

AUC PR : 0.393298 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 10.481 

Total Inference Time : 13.766793727874756 

Total revision time: 34.41952913284302
Best scored revision CLL: -0.107251


Results 

CLL : -0.107184 

AUC ROC : 0.993387 

AUC PR : 0.393298 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 34.44622772216797 

Total Inference Time : 13.766793727874756 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.24797944357408774;  // std dev = 0.488, 59.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266428197085572;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.045218284746497125;  // std dev = 0.248, 201.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06830961558748633;  // std dev = 1.804, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6452448152358835;  // std dev = 0.970, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13424768112736232;  // std dev = 4.938, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5443957090255473;  // std dev = 1.349, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7305202183074394;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6241340656080604;  // std dev = 0.144, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.591681746237979;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5582533021135827;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018157143686122153;  // std dev = 4.658, 266.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=34 */
%   | | | else return 0.04892038369965984;  // std dev = 4.079, 106.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5235297427412228;  // std dev = 3.089, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1203079877034505;  // std dev = 0.054, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.12708350456469447;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17172610267477417;  // std dev = 0.322, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31281610209889327;  // std dev = 0.999, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47307426514592366;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2981712274768394;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5077571872787613;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6370398637969892;  // std dev = 0.269, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10363996209542652;  // std dev = 1.815, 254.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=5 */
%   | | else return 0.01991062505626588;  // std dev = 0.315, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023980845609130316;  // std dev = 3.097, 255.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2504455793759337;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5239740388675053;  // std dev = 1.020, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12930280437033018;  // std dev = 0.235, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return -0.1310628909314939;  // std dev = 0.214, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26781972727179426;  // std dev = 2.023, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.0909413087653451;  // std dev = 1.846, 246.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029227958004099837;  // std dev = 2.417, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17837854994702607;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2599135654863105;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043977614487516005;  // std dev = 0.154, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.010512733599591402;  // std dev = 2.053, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
%   | | | else return 0.026380375568951595;  // std dev = 2.649, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17972278142381515;  // std dev = 0.058, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20213338538036177;  // std dev = 1.916, 42.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09167427553881799;  // std dev = 0.112, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3926468196633101;  // std dev = 0.783, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12117197791221394;  // std dev = 0.265, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1860532597848008;  // std dev = 0.789, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16996592931034482;  // std dev = 0.382, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08140466179135149;  // std dev = 0.021, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09460628585500412;  // std dev = 0.034, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.01214015163942834;  // std dev = 0.933, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.017483894897788434;  // std dev = 1.349, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17485514096762178;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03326705853336438;  // std dev = 1.885, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.701', 'seconds']
Parameter learned model CLL:-0.112235 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [1.351, 2, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.488, 36, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 182, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.804, 51, 4], 'false,false,false,true': [0.97, 1, 8], 'false,false,false,false': [4.938, 93, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.349, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.144, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.658, 232, 34], 'false,false,false,false': [4.079, 83, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.089, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 167, 0], 'false,true,false,false': [0.011, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.322, 101, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.999, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.269, 0, 39], 'false,false,true,false': [1.815, 249, 5], 'false,false,false': [0.315, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.097, 173, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.02, 0, 52], 'false,false,false,true': [0.235, 85, 0], 'false,false,false,false': [0.214, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.023, 3, 121], 'true,false': [1.846, 239, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.417, 56, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 155, 19], 'false,false,false,true': [2.053, 82, 28], 'false,false,false,false': [2.649, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 78], 'false,true,true,true': [1.916, 4, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.112, 224, 0], 'false,false,true': [0.783, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.789, 0, 85], 'true,true,false': [0.382, 0, 19], 'true,false,true': [0.021, 184, 0], 'true,false,false,true': [0.034, 32, 0], 'true,false,false,false': [0.933, 15, 4], 'false,true': [1.349, 50, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.885, 42, 21]}]
{'': [0.22187928994083064, 0.23215430336227555], 'false': [0.2266589506172851, 0.23786268313703063], 'false,true': [0.09566326530612335, 4.794144879063176e-17], 'true': [0.01851192595229848, 0.01793123579575061], 'false,true,true': [0.07939508506616269, 0.15999999999999986], 'true,false': [-1.5170749404815803e-16, 0.06420927467300819]}
{'': [0.00047329490327444664, 0.11931033307589306], 'false': [0.0616526708993176, 0.1673352943460594], 'false,false': [0.05920080941375132, 0.1938075120421476], 'false,false,false': [0.10449118145884888, 0.18330173736344957], 'false,true': [nan, 0.0616526708993176], 'false,false,true': [nan, 0.05920080941375132]}
{'': [0.025365712838127673, 0.11477395829901789], 'false': [nan, 0.11477395829901961], 'false,false': [0.0018244259209433452, 0.1039805529042797], 'false,false,false': [0.08157787296023689, 0.15698128970231953], 'true': [0.026382654855396172, 0.008785784640340825], 'true,true': [0.026382654855396172, nan], 'true,false': [0.017067462078130962, 0.002593424650394305], 'false,false,true': [0.00558730438288942, -5.921189464667501e-17]}
{'': [0.05926463362755482, 0.0009439994676987311], 'false': [2.101476915623614e-05, 0.0010250547097295946], 'false,false': [nan, 0.0010250547097295946], 'false,false,false': [nan, 0.0010250547097295946], 'false,true': [nan, 2.101476915624308e-05], 'false,true,false': [1.7463432398331708e-05, 4.8076257874063446e-06]}
{'': [0.012963363549336067, 0.08012108765071711], 'false': [0.0020008003037175416, 0.07943347351627972], 'false,false': [0.07479049580005875, 0.09893352251840486], 'false,false,true': [0.0018558799591791725, 0.012966395818803248], 'true': [0.012804463317623508, 0.0], 'false,true': [9.11295956564917e-06, 0.0]}
{'': [0.03762478661951116, 0.0836025397489895], 'false': [0.0015113027381294033, 0.08830498100555535], 'false,false': [0.020018600238389188, 0.000689162671520526], 'true': [nan, 0.037624786619511186], 'true,false': [nan, 0.03762478661951116], 'false,false,false': [0.000652023268875355, 0.0007382882890614173]}
{'': [0.0489492719669857, 0.06954993963925042], 'false': [nan, 0.06954993963925057], 'false,false': [nan, 0.06954993963925042], 'false,false,false': [nan, 0.06954993963925042], 'true': [0.032989234136382294, 0.013859099783968112]}
{'': [0.011693956412492474, 0.04380725617377904], 'false': [nan, 0.04380725617377909], 'false,false': [0.02385898021812183, 0.060770465206113296], 'false,false,false': [0.0383205217609409, 0.09354734067281556], 'true': [0.011815392738162678, 0.0001002756674220312], 'true,false': [0.0001002756674220312, nan]}
{'': [0.003419766275590107, 0.03868979756519014], 'false': [0.02532915627418247, 0.06148796778819135], 'false,false': [0.015308225530559749, 0.0007785263752543884], 'false,true': [0.08742707953532498, 5.585751301313141e-05], 'false,true,true': [0.08742707953532498, nan], 'false,false,false': [nan, 0.0007785263752543884]}
{'': [0.019576738616605915, 0.03875049310384435], 'false': [0.02427261108307863, 0.05523845141662359], 'false,false': [0.0, 0.05637521658466926], 'false,false,false': [nan, 0.05637521658466935], 'true': [0.00743245117982043, 0.0044109858988060115], 'true,true': [0.0073258563000089105, 0.007697801980243689], 'true,false': [2.4762159636214305e-06, 0.019763580910312762], 'true,false,false': [3.545677793787699e-05, 0.045840215603854706]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.146
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 0.165, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.12262029566971908;  // std dev = 0.137, 208.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6796427171126673;  // std dev = 0.208, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | else return 0.7384911792303227;  // std dev = 0.199, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.739128984785709;  // std dev = 0.198, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3917639292338801;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12756965413858626;  // std dev = 6.66e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7259605474657732;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.09591584783785101;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12764686981752227;  // std dev = 3.160, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.09062262504009025;  // std dev = 3.620, 82.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.5773121284492821;  // std dev = 0.273, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4427111918633857;  // std dev = 0.362, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5072697506329997;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5946859946561601;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5575925648880612;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5226874892821252;  // std dev = 1.018, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11403318931565125;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06005822491518401;  // std dev = 3.679, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return 0.1682405414438021;  // std dev = 2.961, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.4137492076855575;  // std dev = 0.992, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | | else return 0.5784106251668809;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4403702710116007;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.06930944171823097;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, G), follows(G, H) )
%   | | | then return 0.44574364567237973;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5707739088942;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.6241553911350275;  // std dev = 0.989, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.6935264957027063;  // std dev = 0.950, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.12120638284609939;  // std dev = 0.029, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then return 0.3343521248735184;  // std dev = 0.184, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.21867144068430777;  // std dev = 0.948, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.019683631480857625;  // std dev = 0.608, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.024379098899141027;  // std dev = 0.754, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32889954831837853;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.46551744722871463;  // std dev = 0.599, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09045174313710605;  // std dev = 1.551, 243.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=5 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return -0.07395030058687381;  // std dev = 0.414, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.07160293397419906;  // std dev = 2.244, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.23894982998421646;  // std dev = 0.988, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.2620834592415524;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2699612797289479;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then return -0.054853662018837415;  // std dev = 0.094, 150.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=14 */
%   | | else return -0.07334479054175462;  // std dev = 0.073, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2722684276267264;  // std dev = 0.062, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.24108753862892146;  // std dev = 0.841, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4678659879758635;  // std dev = 1.015, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12047878144718024;  // std dev = 0.033, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2085272944561445;  // std dev = 0.121, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else if ( recursion_accounttype(C, B), follows(D, C) )
%   | | | then return 0.22068006206629676;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.4590352037669556;  // std dev = 0.999, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.08061763757701791;  // std dev = 0.006, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.25679685109736466;  // std dev = 0.093, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.003390096723187267;  // std dev = 0.171, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return 0.023393250167858468;  // std dev = 0.137, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.26692701006716646;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.03969286407348294;  // std dev = 2.738, 130.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=43 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.1853841727473544;  // std dev = 0.047, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.01477247771617359;  // std dev = 0.813, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.19325216876048665;  // std dev = 0.058, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.33774756576353065;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04440330041201826;  // std dev = 0.098, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), tweets(H, I) )
%   | | | then return -0.006945303718549353;  // std dev = 1.440, 66.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
%   | | | else return 0.026803807084348118;  // std dev = 0.734, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.06463931422824316;  // std dev = 1.385, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | | else return 0.039280788372393606;  // std dev = 1.777, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.16016507000895588;  // std dev = 0.053, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return -0.0023022940202337048;  // std dev = 0.872, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.23462112088251308;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.17343883963638712;  // std dev = 0.074, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2594067961894746;  // std dev = 0.370, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07268979467149585;  // std dev = 0.033, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.29678839668453866;  // std dev = 0.077, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.47060731379288817;  // std dev = 0.253, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.133712082725796;  // std dev = 0.029, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1520115596245583;  // std dev = 0.037, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.06706689670831183;  // std dev = 0.006, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.050733567662447965;  // std dev = 0.085, 71.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.1816906220873246;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.001346505341388635;  // std dev = 1.077, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0.010095528099799456;  // std dev = 0.834, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.30370327105227646;  // std dev = 0.956, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.016330166038521284;  // std dev = 0.976, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.07940180659767813;  // std dev = 1.298, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.205', 'seconds']
Refined model CLL: -0.104836


******************************************
Best model found
******************************************
Results 

CLL : -0.102655 

AUC ROC : 0.993325 

AUC PR : 0.384965 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 17.146 

Total Inference Time : 13.512877702713013 

Total revision time: 43.043765487670896
Best scored revision CLL: -0.104836


Results 

CLL : -0.102655 

AUC ROC : 0.993325 

AUC PR : 0.384965 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 43.07046407699585 

Total Inference Time : 13.512877702713013 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.103
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7285554015677006;  // std dev = 8.43e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.003444632800378208;  // std dev = 0.299, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04558874149362914;  // std dev = 1.226, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5152059255593288;  // std dev = 0.993, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8579187544440545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5643290406600243;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03633352490316422;  // std dev = 1.404, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | | else return 0.030993085105349098;  // std dev = 1.452, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5298568809073458;  // std dev = 0.711, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12379558285922015;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.12849824718120864;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1649243923921346;  // std dev = 0.094, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3377085050466636;  // std dev = 0.320, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30249694554601947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6178180276360445;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07379822203441876;  // std dev = 1.122, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else return -0.12365770414776789;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.004654545504348529;  // std dev = 1.833, 70.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24270012958794596;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5438006041656638;  // std dev = 0.394, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11320059854007848;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.12988667902877216;  // std dev = 0.095, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24565549236393522;  // std dev = 1.201, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.08391463687537808;  // std dev = 1.025, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03877634215294475;  // std dev = 0.268, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20366152693278677;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03359345212737412;  // std dev = 0.162, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.06960527525090557;  // std dev = 0.342, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.37272018719843786;  // std dev = 0.582, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1870308631555559;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3668707136338336;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09395771283618054;  // std dev = 0.034, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5191417464568149;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12438714376936001;  // std dev = 0.164, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.09702388280420492;  // std dev = 1.451, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.12871273342504153;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08467663695145644;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09322210851832828;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.02803171133246515;  // std dev = 0.301, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.03684497754639765;  // std dev = 0.153, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05307859580737424;  // std dev = 0.617, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.638', 'seconds']
Parameter learned model CLL:-0.117994 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.977, 1, 21], 'true,false,true': [2.58e-08, 29, 0], 'true,false,false': [0.35, 6, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [8.43e-08, 0, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.299, 30, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.926, 6, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.226, 7, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.993, 1, 16], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.404, 25, 3], 'false,false,false,false': [1.452, 12, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.711, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 25, 0], 'false,true,false,false': [0.0, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.094, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.32, 0, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.014, 0, 4], 'false,false,true,false': [1.122, 39, 2], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.833, 50, 20], 'false,true': [0.0, 0, 1], 'false,false,true': [0.394, 0, 4], 'false,false,false,true': [0.059, 6, 0], 'false,false,false,false': [0.095, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.201, 1, 22], 'true,false': [1.025, 44, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.268, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.004, 0, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 35, 5], 'false,false,false,true': [0.342, 2, 2], 'false,false,false,false': [0.582, 1, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.054, 0, 18], 'false,true,true,true': [0.214, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 54, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.451, 2, 20], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.011, 30, 0], 'true,false,false,true': [1.86e-09, 3, 0], 'true,false,false,false': [0.301, 2, 1], 'false,true': [0.153, 3, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.617, 3, 2]}]
{'': [0.2354340071343648, 0.1983471074380164], 'true': [0.04338842975206614, 0.027006172839506234], 'false': [0.12244897959183677, 0.25], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [2.2970131543968756e-17, 0.12244897959183677], 'false,true,true': [0.0, nan]}
{'': [4.440892098500626e-16, 0.11545221904482611], 'false': [0.08930400838581161, 0.16596361499134082], 'false,false': [0.12244897959183668, 0.1912500424123821], 'false,false,false': [0.0, 0.16708799218208922], 'false,false,true': [nan, 0.12244897959183668], 'false,true': [nan, 0.08930400838581161]}
{'': [0.05776429195269064, 0.10110656261614123], 'false': [nan, 0.10110656261614107], 'false,false': [0.0, 0.09588667900400857], 'false,false,false': [0.07035919423547328, 0.14058634605349127], 'true': [0.05801011561727729, 0.022884476236073037], 'true,true': [0.05801011561727729, nan], 'true,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.02024799185832599, 0.00040188358237793024], 'false': [2.872794661673988e-05, 0.001479237377138375], 'false,false': [nan, 0.001479237377138375], 'false,false,false': [nan, 0.001479237377138375], 'false,true': [nan, 2.872794661673988e-05], 'false,true,false': [3.6876860205308226e-05, -1.982541115402065e-18]}
{'': [0.005688457355745709, 0.06514889729134443], 'false': [0.0, 0.06440762806317214], 'false,false': [0.06674270793838788, 0.0], 'false,false,true': [4.774571649207582e-05, 0.030731041360279758], 'true': [0.005688457355745709, nan], 'false,true': [0.0, nan]}
{'': [0.04801830160308563, 0.07580812395198587], 'false': [0.0, 0.07681079472884], 'false,false': [0.03885361009892396, 0.0007982258703900595], 'true': [nan, 0.04801830160308561], 'true,false': [nan, 0.04801830160308563], 'false,false,false': [0.0005880449444150953, 0.0008146022652161824]}
{'': [0.06027906255790483, 0.014362072920592866], 'true': [0.06274480074190969, 0.02284070343696313], 'false': [nan, 0.014362072920592866], 'false,false': [nan, 0.014362072920592866], 'false,false,false': [nan, 0.014362072920592866]}
{'': [8.370482018418834e-07, 0.0423064543674035], 'false': [nan, 0.04230645436740349], 'false,false': [0.026271068046773434, 0.0876921302470562], 'false,false,false': [0.029291039155021563, 0.11305816607741083], 'true': [8.370482018418834e-07, nan]}
{'': [0.0029203503227542716, 0.02412942111832247], 'false': [0.017268642097869567, 0.05263535924071042], 'false,false': [0.0, 0.0022465716062004073], 'false,true': [0.009173070445675146, 2.138133322218066e-05], 'false,true,true': [0.009173070445675146, nan], 'false,false,false': [nan, 0.0022465716062004073]}
{'': [0.045063416860791336, 0.0469241225946459], 'false': [0.005850935720878545, 0.0761887836293437], 'false,false': [nan, 0.0761887836293437], 'false,false,false': [nan, 0.0761887836293437], 'true': [0.0915333907502139, 0.0035176959319835836], 'true,true': [0.09565033927921428, 0.0], 'true,false': [4.331459952448361e-06, 0.018824121440895226], 'true,false,false': [1.1564823173178713e-18, 0.030296998467586114]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.348
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6425503352878774;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return 0.03549213304100783;  // std dev = 1.520, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06509334918986669;  // std dev = 0.218, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.08320549123154841;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04515179375143457;  // std dev = 1.187, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5793507878687204;  // std dev = 0.140, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(E, A) )
%   | | then return 0.8213194034071188;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return -0.06421074232194775;  // std dev = 1.400, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | | else return -0.12594097557283152;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.01211354531444488;  // std dev = 0.796, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.2738242807654912;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.26060884082227526;  // std dev = 1.185, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.463401680864832;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4718323026489797;  // std dev = 0.221, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0.7276220387223569;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6621266789503316;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1227096445984233;  // std dev = 0.057, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.11721643502242717;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1704435042376271;  // std dev = 0.186, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.22517717600470855;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.33689846871357026;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32843480247877666;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4442434692755655;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3786892378650345;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5634168479199609;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09875617183474936;  // std dev = 1.019, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | else return -0.09498641353110475;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.20206356230095718;  // std dev = 0.936, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2637512979179789;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28909217152288963;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.043328440565301087;  // std dev = 0.161, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else return -0.021067201197094848;  // std dev = 0.185, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29446324007987656;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.46599263510100547;  // std dev = 0.306, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10398044098105066;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.16079193976435016;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(C, F), follows(E, C) )
%   | | then return 0.2725592294384007;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.207502166282961;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19314691251372185;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A), follows(G, A) )
%   | | | then return -0.09620528842099763;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.0652051777210373;  // std dev = 0.513, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.4333027995029061;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09530214964756793;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, I) )
%   | | then return 8.787777298382531E-4;  // std dev = 0.273, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.005233806425516819;  // std dev = 0.308, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2066406103067288;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.17685138965062994;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.33668730570324945;  // std dev = 0.146, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07827715514377069;  // std dev = 0.699, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.08788250115705142;  // std dev = 0.046, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.1497635977138573;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H) )
%   | | then return -0.07697396374853063;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2556245258538839;  // std dev = 0.557, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.18699929606110524;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15807310659476106;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1493078083094457;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20619770658711975;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2704549274019397;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07928739651110601;  // std dev = 0.007, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.41981191694355;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.07150089204837101;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1584796542743549;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08896762603479724;  // std dev = 0.956, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.23600570711550148;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.3383825336624289;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.07524637377326447;  // std dev = 0.016, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06504755640351857;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.024678577733200483;  // std dev = 0.281, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.0061107772604479344;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.06373249324790434;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.0669391635836563;  // std dev = 0.512, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.129', 'seconds']
Refined model CLL: -0.112


******************************************
Best model found
******************************************
Results 

CLL : -0.114985 

AUC ROC : 0.99375 

AUC PR : 0.325617 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 5.348 

Total Inference Time : 2.75899338722229 

Total revision time: 11.459023262023926
Best scored revision CLL: -0.112


Results 

CLL : -0.114985 

AUC ROC : 0.99375 

AUC PR : 0.325617 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 11.485721851348877 

Total Inference Time : 2.75899338722229 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.457
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7899671169176937;  // std dev = 1.672, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7330265844616978;  // std dev = 1.58e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.00784584085851624;  // std dev = 0.295, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0670570166679058;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.06084889146392482;  // std dev = 2.176, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5525941002734442;  // std dev = 1.036, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8591353990536266;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5688121258703648;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3188121258703648;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03745784052830509;  // std dev = 2.280, 75.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=8 */
%   | | | else return 0.05398029854293077;  // std dev = 2.045, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5257381359709463;  // std dev = 1.304, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12303677236525107;  // std dev = 0.045, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.132004942975216;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15010795691394999;  // std dev = 0.126, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24710855580282357;  // std dev = 1.744, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.13959634402467225;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.615340168109356;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08190331036334829;  // std dev = 1.644, 96.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=4 */
%   | | else return -0.12253697522200022;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038211887455060774;  // std dev = 2.147, 112.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3302310353877811;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43144817177588024;  // std dev = 1.347, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12561862134368287;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.12518253593274462;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2830393830298203;  // std dev = 1.188, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return -0.07616593548171803;  // std dev = 1.474, 93.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055971743111490765;  // std dev = 0.471, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15172151726532163;  // std dev = 1.277, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03814678288664876;  // std dev = 0.159, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.02324387701847324;  // std dev = 0.750, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.11927955682554892;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09317031534230284;  // std dev = 0.311, 36.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3346985416582304;  // std dev = 0.300, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09619967000882336;  // std dev = 0.033, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48435991627572555;  // std dev = 0.454, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11908940789165226;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18144748255634777;  // std dev = 1.121, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.17082902912879616;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08741781650041129;  // std dev = 0.022, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09280867036769762;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0022989922340022366;  // std dev = 0.391, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.0030163340011821324;  // std dev = 0.433, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06817834721523307;  // std dev = 1.074, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.573', 'seconds']
Parameter learned model CLL:-0.114076 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.672, 3, 41], 'true,false,true': [6.32e-08, 62, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.481, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.58e-07, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.295, 63, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.894, 4, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.176, 24, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.036, 1, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.866, 1, 3], 'false,false,false,true': [2.28, 67, 8], 'false,false,false,false': [2.045, 22, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.304, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 63, 0], 'false,true,false,false': [0.016, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.744, 3, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.933, 1, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.046, 0, 10], 'false,false,true,false': [1.644, 92, 4], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.147, 74, 38], 'false,true': [0.0, 0, 3], 'false,false,true': [1.347, 1, 9], 'false,false,false,true': [0.067, 8, 0], 'false,false,false,false': [0.076, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.188, 1, 43], 'true,false': [1.474, 89, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.471, 4, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.277, 2, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 69, 10], 'false,false,false,true': [0.75, 21, 5], 'false,false,false,false': [1.301, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.311, 4, 32], 'false,true,true,true': [0.3, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 71, 0], 'false,false,true': [0.454, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.121, 1, 38], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.022, 63, 0], 'true,false,false,true': [1.86e-09, 3, 0], 'true,false,false,false': [0.391, 4, 1], 'false,true': [0.433, 9, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.074, 9, 4]}]
{'': [0.2266238644901316, 0.21301775147929003], 'true': [0.06353305785124083, 0.012818350480688185], 'false': [0.1955555555555554, 0.2314049586776858], 'false,true': [0.0, -1.0092936587501423e-17], 'true,false': [6.446456272017038e-17, 0.06222222222222227], 'false,true,true': [0.0, nan]}
{'': [8.022256694065647e-16, 0.11366409490560732], 'false': [0.08712570644442182, 0.16096187417109248], 'false,false': [0.15999999999999998, 0.16108424690972117], 'false,false,false': [0.0, 0.15272469233502778], 'false,false,true': [nan, 0.15999999999999998], 'false,true': [nan, 0.08712570644442182]}
{'': [0.03531328881982268, 0.10226650516275149], 'false': [nan, 0.10226650516275146], 'false,false': [0.16000000000000003, 0.09272891416208658], 'false,false,true': [0.0, 0.1875], 'false,false,false': [0.06932752453984727, 0.14932314958181458], 'true': [0.03465362959667395, 0.023068895615319884], 'true,true': [0.03465362959667395, nan], 'true,false': [0.0, 0.0]}
{'': [0.03332247782134673, 0.00030809169863515654], 'false': [4.1678009363952386e-05, 0.0008353480512475606], 'false,false': [nan, 0.0008353480512475606], 'false,false,false': [nan, 0.0008353480512475606], 'false,true': [nan, 4.167800936396126e-05], 'false,true,false': [3.257729533441137e-05, 2.1897167383898297e-05]}
{'': [0.08690336848849711, 0.06883220620797713], 'true': [0.08690336848849711, nan], 'false': [0.17406418720131292, 0.06309782767237292], 'false,true': [0.17406418720131292, nan], 'false,false': [0.06706530501584723, -5.204170427930421e-18], 'false,false,true': [0.00021159451045065224, 0.028166170148896944]}
{'': [0.04114913440017475, 0.12638254813389344], 'false': [0.0, 0.1329427730041964], 'false,false': [0.18138950988555905, 0.0005333904788195941], 'true': [nan, 0.0411491344001746], 'true,false': [nan, 0.04114913440017475], 'false,false,false': [0.0005538676256481717, 0.0005184179366153921]}
{'': [0.05430443246735809, 0.03172997710040142], 'true': [0.03208379045298324, 0.023377626743853557], 'false': [nan, 0.03172997710040142], 'false,false': [nan, 0.03172997710040142], 'false,false,false': [nan, 0.03172997710040142]}
{'': [0.04938109733790049, 0.03845189421369714], 'true': [0.04938109733790049, nan], 'false': [nan, 0.038451894213697164], 'false,false': [0.025379911366552037, 0.06232330411133112], 'false,false,false': [0.021628242868910248, 0.13017147379971197]}
{'': [0.09655981944144597, 0.03902732195247833], 'false': [0.02267778021583613, 0.0913169009169292], 'false,false': [0.029447479664863958, 0.0008679159302734782], 'false,true': [0.008185217723015342, 1.571707976116128e-05], 'false,true,true': [0.008185217723015342, nan], 'false,false,false': [nan, 0.0008679159302734782]}
{'': [0.028840837505969955, 0.05265695988984969], 'false': [0.01439710421338401, 0.08879377158326131], 'false,false': [nan, 0.08879377158326131], 'false,false,false': [nan, 0.08879377158326131], 'true': [0.029901521530767066, 0.002696470923369779], 'true,true': [0.03219358488922438, 0.0], 'true,false': [7.764933459721387e-06, 0.02127766253514227], 'true,false,false': [1.1564823173178713e-18, 0.030652209749143088]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.176
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6694734122109542;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.020729285693577494;  // std dev = 0.283, 55.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=7 */
%   | | else return 0.001293069082510498;  // std dev = 0.302, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10092203251355424;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12839880464814818;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1104468296074607;  // std dev = 2.064, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5798424679656723;  // std dev = 0.262, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(E, A) )
%   | | then return 0.837661311372887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12212122571017887;  // std dev = 0.032, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.07120253689197208;  // std dev = 1.968, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14016987285985635;  // std dev = 1.180, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.1806034871585938;  // std dev = 1.555, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.3488307352672151;  // std dev = 0.960, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.4206796069050466;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4183610701654732;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.6749134977060508;  // std dev = 0.168, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6040594914479371;  // std dev = 0.215, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7696536040886407;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.11764120445824278;  // std dev = 0.015, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.1569603727023675;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.21166319153886462;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3338027464610419;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.323008856331879;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.31505344762783055;  // std dev = 0.000408, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4181149157705387;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3204010598209028;  // std dev = 0.000437, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5431784383536788;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08846029665829565;  // std dev = 1.441, 99.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=4 */
%   | | else return -0.09029713435525921;  // std dev = 1.32e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.04177528096382925;  // std dev = 0.207, 103.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2550702513631824;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3593785874528037;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6283542528234551;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.1293478248113769;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.12365945357406308;  // std dev = 0.182, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.2530769639642008;  // std dev = 1.001, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.20968566786884568;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09879748068544918;  // std dev = 0.054, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.03798991589252816;  // std dev = 0.405, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.26820247232510946;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.1140958999550576;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10764576417396714;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.048387998839361186;  // std dev = 0.260, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, C), follows(C, A) )
%   | | | then return 0.18140994951525713;  // std dev = 0.805, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.3042759451356853;  // std dev = 0.258, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09632582690745065;  // std dev = 0.011, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( tweets(A, F), tweets(C, F) )
%   | | then return -0.05231351525181122;  // std dev = 0.250, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return -0.11760609529275871;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17704365232947727;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07785612217983916;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0977337183316734;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1910096413118438;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return -0.040862163024699624;  // std dev = 1.777, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.17578693269700393;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18465765881384139;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.21650461826706388;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.24514679726637253;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.087094238524878;  // std dev = 0.012, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.26283774683543326;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4151807404910104;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12537111027797246;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18724153248427236;  // std dev = 0.035, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.12360810060616545;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08074269024460493;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06140405750852902;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.014450362963262835;  // std dev = 0.299, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.18752310442872433;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08561255743884955;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0797485860520093;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.023865432897209014;  // std dev = 0.226, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.186', 'seconds']
Refined model CLL: -0.113188


******************************************
Best model found
******************************************
Results 

CLL : -0.109592 

AUC ROC : 0.994012 

AUC PR : 0.34166 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 11.176 

Total Inference Time : 10.183706998825073 

Total revision time: 26.487349613189696
Best scored revision CLL: -0.113188


Results 

CLL : -0.109592 

AUC ROC : 0.994012 

AUC PR : 0.34166 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 26.514048202514648 

Total Inference Time : 10.183706998825073 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.898
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7956489350995126;  // std dev = 1.936, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.3025933795439568;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.711913189379813;  // std dev = 0.990, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.041005602756587434;  // std dev = 0.258, 110.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06682617742049689;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7683303882208612;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1371524408317026;  // std dev = 2.671, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.540024777279631;  // std dev = 1.427, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8740495697186212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6089370876432955;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5725928601908183;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5725928601908183;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05004102091809758;  // std dev = 2.667, 126.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=11 */
%   | | | else return 0.024090582002157187;  // std dev = 2.540, 48.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5329779075941399;  // std dev = 1.230, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11674358279596263;  // std dev = 0.041, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return -0.1238399724709465;  // std dev = 0.005, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1639269119855697;  // std dev = 0.188, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2732165795072854;  // std dev = 1.670, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else return 0.39823163476918944;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3072232974517366;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6293885623532623;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08321108996571061;  // std dev = 2.036, 166.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=7 */
%   | | else return -0.10870542587307612;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024429206016654853;  // std dev = 2.752, 160.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2459452199934634;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5462649774005489;  // std dev = 0.586, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12253462780622351;  // std dev = 0.125, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11737738377769186;  // std dev = 0.137, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2644261115417431;  // std dev = 1.599, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return -0.07114006229578872;  // std dev = 1.756, 142.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015582627365143358;  // std dev = 0.523, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20510467028905277;  // std dev = 0.046, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.048786885160296674;  // std dev = 0.141, 119.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.013621155759076228;  // std dev = 1.014, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0.049987187681777095;  // std dev = 1.552, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1700574897463036;  // std dev = 0.155, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23994876105562812;  // std dev = 1.000, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08932844909650757;  // std dev = 0.028, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44454467819857935;  // std dev = 0.497, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13564375211119184;  // std dev = 0.148, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17248758290085056;  // std dev = 1.195, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.13860351218726275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08319770793464012;  // std dev = 0.024, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08184920418899566;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.039919822971780004;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.0630495435958364;  // std dev = 0.616, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18149669502973986;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06667452356600849;  // std dev = 1.183, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.588', 'seconds']
Parameter learned model CLL:-0.111414 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.936, 4, 60], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false': [0.258, 13, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.497, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 99, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [0.069, 0, 2], 'false,false,false,false': [2.671, 27, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.427, 2, 44], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.093, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.667, 115, 11], 'false,false,false,false': [2.54, 39, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.23, 0, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 104, 0], 'false,true,false,false': [0.005, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.67, 3, 46], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.124, 0, 13], 'false,false,true,false': [2.036, 159, 7], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.752, 106, 54], 'false,true': [7.45e-09, 0, 6], 'false,false,true': [0.586, 0, 15], 'false,false,false,true': [0.125, 22, 0], 'false,false,false,false': [0.137, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.599, 2, 62], 'true,false': [1.756, 134, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.523, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.046, 0, 49], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 108, 11], 'false,false,false,true': [1.014, 30, 7], 'false,false,false,false': [1.552, 18, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.155, 1, 47], 'false,true,true,true': [1.0, 1, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.028, 134, 0], 'false,false,true': [0.497, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.148, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.195, 1, 55], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.024, 114, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.39, 9, 1], 'false,true': [0.616, 7, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.183, 12, 7]}]
{'': [0.22525564953919977, 0.23268698060941778], 'false': [0.2100000000000001, 0.2469135802469136], 'true': [0.058593749999999445, 0.008694983071714363], 'false,true': [0.12244897959183662, -1.2810265668751807e-17], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [7.993605777301127e-17, 0.06632653061224494]}
{'': [0.019599999999999652, 0.10570897359932634], 'false': [0.06656126455692156, 0.16846900946946144], 'false,false': [0.06222222222222221, 0.19257659416500134], 'false,false,false': [0.002387004104832502, 0.18289646251137046], 'false,true': [nan, 0.06656126455692156], 'false,false,true': [nan, 0.06222222222222221]}
{'': [0.04408809198157927, 0.09082889571611677], 'false': [nan, 0.09082889571611676], 'false,false': [0.0, 0.07906536285831703], 'false,false,false': [0.056459964164822116, 0.13442503837418762], 'true': [0.04424273791900275, 0.018493439398117466], 'true,true': [0.04424273791900275, nan], 'true,false': [0.0, 0.0043119497131295925], 'false,false,true': [0.0, 0.0]}
{'': [0.020178705167106445, 0.0005646932563782138], 'false': [2.074005178690719e-05, 0.001264963811840206], 'false,false': [nan, 0.001264963811840206], 'false,false,false': [nan, 0.001264963811840206], 'false,true': [nan, 2.0740051786908964e-05], 'false,true,false': [1.623636866288294e-05, 1.1455292852201645e-06]}
{'': [0.056084103383728934, 0.05632307848584734], 'false': [-1.3877787807814457e-17, 0.05393886500825104], 'true': [0.056916101641329646, 0.0], 'false,false': [0.05745218640819761, -2.135044278125301e-18], 'false,false,true': [0.0011872712288467989, 0.024979271380381272], 'false,true': [-1.3877787807814457e-17, nan]}
{'': [0.04734016929067124, 0.08621954767064742], 'false': [9.25185853854297e-18, 0.09162325930054137], 'false,false': [0.022857427857536076, 0.0008017781760112364], 'true': [nan, 0.04734016929067125], 'true,false': [nan, 0.04734016929067124], 'false,false,false': [0.0007063867321351134, 0.0008881042172390793]}
{'': [0.051498678078417695, 0.019559476704093113], 'true': [0.03995637667030372, 0.021716870979102104], 'false': [nan, 0.019559476704093113], 'false,false': [nan, 0.019559476704093113], 'false,false,false': [nan, 0.019559476704093113]}
{'': [4.328512391375063e-05, 0.03315410855284177], 'false': [nan, 0.03315410855284175], 'false,false': [0.019993704976994837, 0.05554632635978244], 'false,false,false': [0.027781117290463408, 0.09268211988651881], 'true': [4.328512391375063e-05, nan]}
{'': [0.023994004942581127, 0.03105078913833861], 'false': [0.017458060516327086, 0.07398372790797846], 'false,false': [0.02060473410829163, 0.0007064857062836324], 'false,true': [0.05880522324506187, 5.907865901183943e-06], 'false,true,true': [0.05880522324506187, nan], 'false,false,false': [nan, 0.0007064857062836324]}
{'': [0.021606036144947306, 0.05434435219345132], 'false': [0.02920061663963186, 0.07065322251586346], 'false,false': [0.0, 0.07371260662161079], 'false,false,false': [nan, 0.07371260662161079], 'true': [0.02348037526577271, 0.0012675250926693596], 'true,true': [0.02548272830634243, 0.0], 'true,false': [5.203231094980791e-06, 0.008039191306470652], 'true,false,false': [0.0, 0.015199346108311996]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.383
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7227774178549596;  // std dev = 0.069, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3194734122109543;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.054043113113798814;  // std dev = 1.980, 71.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=6 */
%   | | | else return -0.0650933491898667;  // std dev = 1.151, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.02744791171126317;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1268220501710926;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7734038257145313;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.16831663392793303;  // std dev = 2.620, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.48558489779927944;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.5545504150406589;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.6507591152298267;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.695077794559957;  // std dev = 0.128, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5799919352382387;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11883988505308213;  // std dev = 0.020, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.0036098995414442165;  // std dev = 2.229, 54.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10782591446577092;  // std dev = 1.667, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.2635181423466403;  // std dev = 1.836, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.42935716266692153;  // std dev = 0.079, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.520069337575921;  // std dev = 0.274, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7190229988663802;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.11428053410871497;  // std dev = 0.108, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.11235214683056503;  // std dev = 0.035, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.2008379720998584;  // std dev = 0.169, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3287235716237314;  // std dev = 0.039, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.1982718890519054;  // std dev = 0.925, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.3988299892541267;  // std dev = 0.280, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.39611005232284957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31210952783651846;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3489611353918124;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.48544177455462584;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.08164318383840034;  // std dev = 1.782, 145.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=7 */
%   | | else return -0.09097453017557823;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2600131911584544;  // std dev = 0.006, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.05241008927687071;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2818565350388531;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.05276851505728763;  // std dev = 1.512, 85.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=8 */
%   | | | else return -0.10081442409312825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.05881411922650516;  // std dev = 0.131, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2701893473226306;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.47788054362714;  // std dev = 0.131, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.14432755820428578;  // std dev = 0.039, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then return 0.21372848505669365;  // std dev = 0.030, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, E), follows(C, E) )
%   | | | then return 0.261315114576235;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22357339737431825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2724596915018087;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21621077166778596;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.46129361400920765;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08924633612116495;  // std dev = 0.074, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.01699408321911955;  // std dev = 0.856, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.09085425835379447;  // std dev = 1.292, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18251564411871252;  // std dev = 0.033, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.08653141188498217;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A) )
%   | | then return -0.04142869300408831;  // std dev = 0.120, 94.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=9 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.26208544637651776;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1169791997310777;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.31517851633273125;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08380638093572178;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.051055970727168255;  // std dev = 0.596, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.044730853862469624;  // std dev = 1.229, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16070766665097638;  // std dev = 0.014, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.2144310298812657;  // std dev = 0.215, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.3059866341278798;  // std dev = 0.260, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09162736020175266;  // std dev = 0.869, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.07718795751518245;  // std dev = 0.007, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.24330271745129778;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3197318580161588;  // std dev = 0.916, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10061565443145802;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.18707962166068787;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10027798291421691;  // std dev = 1.385, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.24153807152098955;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1501898204170653;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0699983032024702;  // std dev = 0.035, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0011516150930403707;  // std dev = 0.120, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.05926103515480555;  // std dev = 0.344, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.13855879429190998;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.021818118601300875;  // std dev = 0.530, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.06675818218460626;  // std dev = 0.955, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.258', 'seconds']
Refined model CLL: -0.109577


******************************************
Best model found
******************************************
Results 

CLL : -0.112247 

AUC ROC : 0.993763 

AUC PR : 0.314735 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 4.383 

Total Inference Time : 6.9888916015625 

Total revision time: 18.404857736587523
Best scored revision CLL: -0.109577


Results 

CLL : -0.112247 

AUC ROC : 0.993763 

AUC PR : 0.314735 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 18.431556325912474 

Total Inference Time : 6.9888916015625 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.167
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.221785298735876;  // std dev = 0.481, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7140627123130873;  // std dev = 1.004, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.044559888885810084;  // std dev = 0.250, 158.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08448744112577214;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4226327839803095;  // std dev = 0.865, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09619719649727694;  // std dev = 2.971, 53.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.51096179538691;  // std dev = 1.984, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8170767813558177;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6937469778090639;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5653938797214466;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5653938797214466;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04422463710466337;  // std dev = 3.212, 170.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=16 */
%   | | | else return 0.00829212145685502;  // std dev = 2.599, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46632800366480076;  // std dev = 2.858, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11677139545218863;  // std dev = 0.029, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return -0.12165523698115005;  // std dev = 0.004, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15457777766672567;  // std dev = 0.139, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32995919053338874;  // std dev = 1.115, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.1546337437874733;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25010683531904804;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.642427129506361;  // std dev = 0.154, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08136687795188632;  // std dev = 2.110, 193.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=7 */
%   | | else return -0.10838598410689614;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.034233674549922585;  // std dev = 2.908, 222.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.281538781349577;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5713796177491962;  // std dev = 0.585, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11573580497069139;  // std dev = 0.122, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.12203562941439976;  // std dev = 0.145, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2573350849174106;  // std dev = 2.050, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | else return -0.07559679993274139;  // std dev = 1.847, 189.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07465814498602506;  // std dev = 0.543, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20675333422106312;  // std dev = 0.051, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.258132227653266;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047056713657912676;  // std dev = 0.146, 157.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010935050429026285;  // std dev = 1.140, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0.06991527421182663;  // std dev = 1.663, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1630857754612282;  // std dev = 0.187, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21945520461247556;  // std dev = 1.326, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09079061740907335;  // std dev = 0.031, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3883684713504143;  // std dev = 0.986, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10696764176736112;  // std dev = 0.134, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18066213516968674;  // std dev = 1.268, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.14171092537983654;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08329125298384991;  // std dev = 0.017, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08589469766830705;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.034805533488752996;  // std dev = 0.491, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.014281989264466579;  // std dev = 0.809, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.29154117877521957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053402650051407895;  // std dev = 1.331, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.897', 'seconds']
Parameter learned model CLL:-0.108874 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [0.0, 132, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.481, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.25, 143, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.865, 1, 2], 'false,false,false,false': [2.971, 39, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.984, 4, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.094, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.212, 154, 16], 'false,false,false,false': [2.599, 46, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.858, 7, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 139, 0], 'false,true,false,false': [0.004, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.115, 1, 59], 'true,false': [0.803, 1, 2], 'false,true,true': [0.966, 1, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.154, 0, 18], 'false,false,true,false': [2.11, 186, 7], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.908, 149, 73], 'false,true': [0.154, 0, 10], 'false,false,true': [0.585, 0, 17], 'false,false,false,true': [0.122, 38, 0], 'false,false,false,false': [0.145, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.05, 4, 85], 'true,false': [1.847, 181, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.543, 6, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.051, 0, 66], 'true,false,true': [0.065, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 142, 15], 'false,false,false,true': [1.14, 37, 9], 'false,false,false,false': [1.663, 18, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.187, 2, 61], 'false,true,true,true': [1.326, 2, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 148, 0], 'false,false,true': [0.986, 1, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.268, 1, 75], 'true,true,false': [0.0, 0, 7], 'true,false,true': [0.017, 137, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.491, 13, 2], 'false,true': [0.809, 19, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.331, 16, 7]}]
{'': [0.22662386449013114, 0.21301775147928942], 'true': [0.03404844290657402, 0.012576575114608964], 'false': [0.19555555555555568, 0.23140495867768604], 'false,true': [-2.220446049250313e-16, 5.046468293750712e-18], 'true,false': [-4.37360585458395e-17, 0.07360000000000004], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.014616934540838948, 0.09331657972378542], 'false': [0.06237033397588286, 0.15005201738270446], 'false,false': [0.04749999999999999, 0.1763429368260399], 'false,false,false': [0.24921412734210469, 0.16650957070138142], 'false,true': [nan, 0.06237033397588286], 'false,false,true': [nan, 0.04749999999999999]}
{'': [0.06446015169558893, 0.0915413264177633], 'false': [nan, 0.09154132641776333], 'false,false': [2.5376526277146434e-16, 0.07637502481085126], 'false,false,false': [0.060691481076227315, 0.12276760299312686], 'true': [0.06450401053581255, 0.0077127434059443], 'true,true': [0.06450401053581255, nan], 'true,false': [0.0033605281650856966, 0.00445983842536235], 'false,false,true': [0.0, 0.0]}
{'': [0.07631208033200913, 0.0002613988615657399], 'false': [8.763430180441303e-06, 0.0007415413309951282], 'false,false': [nan, 0.0007415413309951282], 'false,false,false': [nan, 0.0007415413309951282], 'false,true': [nan, 8.763430180441303e-06], 'false,true,false': [6.185933185145742e-06, 5.710396362209463e-07]}
{'': [0.03137155416742132, 0.06311946918643656], 'false': [0.062222222222222165, 0.05845083284854775], 'false,true': [0.062222222222222165, nan], 'false,false': [0.06208315300731559, -5.551115123125783e-18], 'false,false,true': [0.0013186387391043535, 0.023059315587996822], 'true': [0.020717011500686812, 0.21518715771482155]}
{'': [0.03810445384976207, 0.07727933719598647], 'false': [0.0023815649147188476, 0.0785215724966657], 'false,false': [0.02012387235738653, 0.0005186570081755977], 'true': [nan, 0.038104453849762084], 'true,false': [nan, 0.03810445384976207], 'false,false,false': [0.0003938139653893359, 0.0006411743121697835]}
{'': [0.051517191635877445, 0.022690250817064803], 'true': [0.04721204109832355, 0.018058571237021082], 'false': [nan, 0.022690250817064803], 'false,false': [nan, 0.022690250817064803], 'false,false,false': [nan, 0.022690250817064803]}
{'': [0.00017441333851732273, 0.033664500003129566], 'false': [nan, 0.033664500003129275], 'false,false': [0.021184469922379354, 0.05795290619796048], 'false,false,false': [0.028243781147768585, 0.10633893145051185], 'true': [3.877540007298079e-05, 0.0020883155195192127], 'true,false': [0.0020883155195192127, nan]}
{'': [0.035105855967326946, 0.03504986273835096], 'false': [0.022608510241630787, 0.0744024367132792], 'false,false': [0.06487833007785844, 0.0005611601160926526], 'false,true': [0.06509920840196379, 6.4477221499684686e-06], 'false,true,true': [0.06509920840196379, nan], 'false,false,false': [nan, 0.0005611601160926526]}
{'': [0.022778887921447947, 0.04925905302214474], 'false': [0.024257434627673807, 0.07611251898282027], 'false,false': [0.0, 0.07705884398598083], 'false,false,false': [nan, 0.07705884398598083], 'true': [0.019500452067943295, 0.001750835801233599], 'true,true': [0.021168589985447676, 0.0], 'true,false': [2.1436692666269823e-06, 0.0131096479564683], 'true,false,false': [0.0, 0.01605605877365309]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.035
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12776655785823438;  // std dev = 0.118, 142.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.704574776443196;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.7536997115235933;  // std dev = 0.133, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.02756808069966099;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6802221634497436;  // std dev = 0.847, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.12699799452597238;  // std dev = 1.37e-07, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5194734122109542;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3360209778826002;  // std dev = 1.006, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.49987215789821504;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5659409890324564;  // std dev = 0.057, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.4841293156005731;  // std dev = 0.967, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.7011393818403504;  // std dev = 0.170, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14100817535728072;  // std dev = 1.079, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5592861580045281;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10432460600201854;  // std dev = 0.837, 91.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=1 */
%   | | | else return 0.028406728920814982;  // std dev = 1.918, 48.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06060014162333768;  // std dev = 1.651, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.12947068913458556;  // std dev = 2.108, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.4254682968715744;  // std dev = 0.062, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.29866625598997243;  // std dev = 1.263, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.43527379512475334;  // std dev = 0.083, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5382317215660367;  // std dev = 0.203, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.5904730866915072;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4298834460687438;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6922889945880979;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.10823125716639861;  // std dev = 0.006, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.1831891963185691;  // std dev = 0.071, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.32937908044381814;  // std dev = 0.095, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.17012196973282986;  // std dev = 0.716, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4911074259877398;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.33536563474838116;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4741984999746766;  // std dev = 0.397, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08342556343967503;  // std dev = 1.712, 195.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=7 */
%   | | else return -0.09386587659400825;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.20030651860993584;  // std dev = 1.366, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.2706126785006108;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2723294071232536;  // std dev = 0.084, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0549970353496216;  // std dev = 0.116, 182.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2827522261762438;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.058408358240929256;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.25937866849406405;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5679090385798191;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11442042297618128;  // std dev = 0.046, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.22808813478022513;  // std dev = 0.150, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.10174944716221442;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22712848951977882;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07544736701354196;  // std dev = 0.067, 101.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=1 */
%   | | else return -0.015815907117314038;  // std dev = 0.158, 78.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3121120366572828;  // std dev = 0.192, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11897516381506112;  // std dev = 0.186, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06926550045437659;  // std dev = 0.531, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.06669172325433534;  // std dev = 1.177, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1664452111508164;  // std dev = 0.995, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.06084862662126592;  // std dev = 0.810, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2155756909839533;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.22905868578226024;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return -0.0359048540437634;  // std dev = 0.135, 188.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=24 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return -0.018034877142395527;  // std dev = 0.926, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12806787301212025;  // std dev = 0.531, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.07235570309385951;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.042780627596772966;  // std dev = 1.430, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.0984354751173743;  // std dev = 1.370, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.18243806077563904;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16765744930279414;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2645022901108652;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.18105496372640154;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3658166709794137;  // std dev = 0.265, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07885197875506327;  // std dev = 0.089, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.34296354870695284;  // std dev = 0.094, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.13234554487911288;  // std dev = 0.058, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13013207152105052;  // std dev = 0.997, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.2655003966498392;  // std dev = 0.292, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.1645902837433948;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06907213570295882;  // std dev = 0.034, 167.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.0059175965398126935;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | else return 0.001374879080421626;  // std dev = 0.144, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.25500745214660725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.07609890943667894;  // std dev = 0.424, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.009159140757281354;  // std dev = 0.985, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.248', 'seconds']
Refined model CLL: -0.102942


******************************************
Best model found
******************************************
Results 

CLL : -0.104861 

AUC ROC : 0.995207 

AUC PR : 0.402498 

Precision : 0.346756 

Recall : 0.99359 

F1 : 0.514096 

Total Learning Time : 15.035 

Total Inference Time : 11.177070140838623 

Total revision time: 35.013895847320555
Best scored revision CLL: -0.102942


Results 

CLL : -0.104861 

AUC ROC : 0.995207 

AUC PR : 0.402498 

Precision : 0.346756 

Recall : 0.99359 

F1 : 0.514096 

Total Learning Time : 35.040594436645506 

Total Inference Time : 11.177070140838623 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.496
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6915359656721325;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02697260150782584;  // std dev = 0.275, 187.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09755875282327686;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7661403998756338;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18315006772516282;  // std dev = 3.083, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.507237224527807;  // std dev = 2.296, 76.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=70 */
%   | | else return 0.7304930528744453;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8228756855334178;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6049286887360467;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5692071270752613;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5692071270752613;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040070713755734656;  // std dev = 3.688, 207.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=21 */
%   | | | else return -0.00617735386817391;  // std dev = 2.846, 70.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4683631240449842;  // std dev = 3.167, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11846174692953158;  // std dev = 0.044, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return -0.12175249622271192;  // std dev = 0.002, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16799147517821622;  // std dev = 0.210, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3509110029509913;  // std dev = 0.516, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.41713540559845563;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3188735668145074;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5995967410544102;  // std dev = 0.998, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08665753214646853;  // std dev = 2.335, 240.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=9 */
%   | | else return -0.10535242144521112;  // std dev = 2.95e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03525054721298976;  // std dev = 3.419, 268.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2631224099624413;  // std dev = 0.115, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5398338797788508;  // std dev = 0.740, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11925162526925814;  // std dev = 0.108, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.12199534989059069;  // std dev = 0.190, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27373758300031653;  // std dev = 2.012, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07738402700329494;  // std dev = 2.024, 230.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008032539600889637;  // std dev = 0.684, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1672952749096648;  // std dev = 1.699, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22921188813463939;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045010337911251364;  // std dev = 0.158, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0075248809784104346;  // std dev = 1.671, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.06426903588444895;  // std dev = 1.638, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16025869848103658;  // std dev = 0.189, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2908372238840289;  // std dev = 0.716, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09062785925253126;  // std dev = 0.044, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3844174204604338;  // std dev = 1.266, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1146109650660217;  // std dev = 0.177, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17735276361849353;  // std dev = 1.561, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14217229328732273;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08430943023486794;  // std dev = 0.014, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07895820735965597;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.001173602262822855;  // std dev = 0.448, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.047989774825959;  // std dev = 1.033, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19611026296478984;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05185066375057381;  // std dev = 1.335, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.986', 'seconds']
Parameter learned model CLL:-0.11233 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 192, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [1.309, 2, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.492, 13, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 165, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.065, 0, 4], 'false,false,false,false': [3.083, 31, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.296, 6, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.09, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.688, 186, 21], 'false,false,false,false': [2.846, 59, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.167, 9, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 173, 0], 'false,true,false,false': [0.002, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.21, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.516, 0, 73], 'true,false': [0.118, 0, 4], 'false,true,true': [4.21e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.998, 1, 23], 'false,false,true,false': [2.335, 231, 9], 'false,false,false': [2.95e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.419, 177, 91], 'false,true': [0.115, 0, 13], 'false,false,true': [0.74, 0, 22], 'false,false,false,true': [0.108, 26, 0], 'false,false,false,false': [0.19, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.012, 3, 107], 'true,false': [2.024, 219, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.684, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.699, 3, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 179, 22], 'false,false,false,true': [1.671, 43, 13], 'false,false,false,false': [1.638, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.189, 3, 77], 'false,true,true,true': [0.716, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 191, 0], 'false,false,true': [1.266, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.561, 2, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.014, 192, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.448, 7, 2], 'false,true': [1.033, 19, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.335, 16, 8]}]
{'': [0.2162414719117453, 0.22574576726686382], 'false': [0.21301775147928945, 0.24173553719008264], 'true': [0.027500889996442155, 0.00877124285378635], 'false,true': [0.1224489795918365, 1.3322676295501878e-17], 'false,true,true': [0.1224489795918365, nan], 'true,false': [-2.266705341943028e-16, 0.05536332179930797]}
{'': [0.03440414804752809, 0.10796513188996973], 'false': [0.07566096149452979, 0.16917634135983095], 'false,false': [0.03329369797859686, 0.20701159994052742], 'false,false,false': [0.0010554150955619512, 0.19803017477651175], 'false,true': [nan, 0.07566096149452979], 'false,false,true': [nan, 0.03329369797859686]}
{'': [0.06691584953688377, 0.09367801488656238], 'false': [nan, 0.09367801488656237], 'false,false': [1.5673736818237505e-16, 0.07856139636996631], 'false,false,false': [0.06569495290472468, 0.11575084823727665], 'true': [0.06909476514674248, 0.012943333404086413], 'true,true': [0.06935659296366023, 0.0], 'true,false': [0.003121229107978296, 0.0020207544144763556], 'false,false,true': [9.868649107779169e-17, 5.551115123125783e-17]}
{'': [0.07430861370852614, 0.0005104996163002864], 'false': [1.0687318120651901e-05, 0.0009599537641986043], 'false,false': [nan, 0.0009599537641986043], 'false,false,false': [nan, 0.0009599537641986043], 'false,true': [nan, 1.0687318120645926e-05], 'false,true,false': [1.1314704247065194e-05, 1.155650492323801e-07]}
{'': [0.003851729331178645, 0.06317551936897861], 'false': [1.0449157878825003e-16, 0.06008815499640405], 'false,false': [0.06335419092705677, 8.673617379884035e-18], 'false,false,true': [0.04153300371423466, 0.02272313442229649], 'true': [0.0036439608999172656, 0.003485658786907042], 'false,true': [1.0449157878825003e-16, nan]}
{'': [0.04362336907747357, 0.08272576794714613], 'false': [0.0010167668833169603, 0.0886316822513043], 'false,false': [0.024905440172105588, 0.000726661340392035], 'true': [nan, 0.04362336907747408], 'true,false': [nan, 0.04362336907747357], 'false,false,false': [0.00045112785370908195, 0.0009027925212096333]}
{'': [0.05093901629236439, 0.018696020868130533], 'true': [0.03681798518923776, 0.017805781285526172], 'false': [nan, 0.018696020868130533], 'false,false': [nan, 0.018696020868130533], 'false,false,false': [nan, 0.018696020868130533]}
{'': [0.03405968988688841, 0.03791384355926188], 'false': [nan, 0.03791384355926209], 'false,false': [0.02491881396576874, 0.06634882710776067], 'false,false,false': [0.04987636646056156, 0.09585750406981793], 'true': [0.0347695216883865, 0.000858207060719908], 'true,false': [0.000858207060719908, nan]}
{'': [0.03560755340450963, 0.03327171296817303], 'false': [0.02019464691751838, 0.07588592859603864], 'false,false': [0.08908676485819347, 0.0006808850326461231], 'false,true': [0.016036960879858828, 1.0058871815556736e-05], 'false,true,true': [0.016036960879858828, nan], 'false,false,false': [nan, 0.0006808850326461231]}
{'': [0.022573334453839095, 0.05125750559146965], 'false': [0.03445092779512374, 0.07204631198851309], 'false,false': [0.0, 0.07421580837608328], 'false,false,false': [nan, 0.07421580837608328], 'true': [0.023291234971390067, 0.0011908539033602468], 'true,true': [0.02536764939570048, 1.1234566351846991e-05], 'true,false': [9.510889563424848e-07, 0.008794607579952887], 'true,false,false': [-1.5419764230904951e-18, 0.022350192879811798]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.323
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.098, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.693240983132838;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7313724614709003;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5790672654300592;  // std dev = 1.521, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.12544463852839116;  // std dev = 6.99e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -9.071920951947405E-4;  // std dev = 0.300, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.08214671830681058;  // std dev = 0.964, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return -0.12793235736608133;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7417903431046245;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1549588569158206;  // std dev = 3.008, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5666420008253344;  // std dev = 0.059, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.5040137553293323;  // std dev = 0.987, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.7215922858920302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6519845426731947;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5575664418000383;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10114300595372117;  // std dev = 1.249, 142.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=3 */
%   | | | else return -0.0054783514168699095;  // std dev = 2.390, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04822686213558607;  // std dev = 2.186, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.08540512836316932;  // std dev = 2.241, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.3971855023552377;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.353417428958316;  // std dev = 1.358, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.42889069842869015;  // std dev = 0.167, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.5086732276698793;  // std dev = 0.329, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16968177599138567;  // std dev = 0.907, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5112823827863808;  // std dev = 1.290, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7023431591298432;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.1093429775277928;  // std dev = 0.011, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.17912725413618102;  // std dev = 0.252, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.31297765004884454;  // std dev = 0.983, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.38277191438287417;  // std dev = 0.316, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(D, G), recursion_accounttype(D, B) )
%   | | | then return 0.3291558319582124;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.03413794807344033;  // std dev = 0.949, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.38552710597345996;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3236618805706445;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05401478613104494;  // std dev = 2.247, 197.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=15 */
%   | | | else return 0.01644967419167424;  // std dev = 2.539, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | | else return -0.09277027637692487;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2680462185271814;  // std dev = 0.032, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.0608337788552333;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.27561891201449423;  // std dev = 0.069, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.04419476537723524;  // std dev = 2.175, 150.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=16 */
%   | | | else return -0.010723602891706723;  // std dev = 0.530, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.0060573626310045535;  // std dev = 0.233, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.26210123420046993;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.49139958995361466;  // std dev = 0.113, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.13677878041043443;  // std dev = 0.043, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.20212407127253496;  // std dev = 0.121, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return 0.23399342107229842;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07253456371166052;  // std dev = 0.088, 136.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.34888625040690174;  // std dev = 1.522, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.10258510183489482;  // std dev = 0.078, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2438246757036017;  // std dev = 0.961, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11615547708300634;  // std dev = 0.009, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05124620271556487;  // std dev = 0.816, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.012042941923748936;  // std dev = 1.475, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17312935904185459;  // std dev = 0.112, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.22595487750887566;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.049091258191293265;  // std dev = 1.223, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.4283451496056182;  // std dev = 0.385, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08441854001685672;  // std dev = 0.126, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1472193646256927;  // std dev = 1.402, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.11040938979870019;  // std dev = 0.034, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0758609901349011;  // std dev = 0.560, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.07227676926041109;  // std dev = 1.234, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.14256315563638614;  // std dev = 0.133, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.181749881354429;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20710459573029816;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.04859019093811785;  // std dev = 1.332, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.35584402366548545;  // std dev = 0.234, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07764505004167825;  // std dev = 0.129, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18888375427107681;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.41531071276776943;  // std dev = 0.206, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14754266831184673;  // std dev = 0.045, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13820315169352354;  // std dev = 0.179, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.06459358580963497;  // std dev = 0.241, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06948759683554726;  // std dev = 0.034, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.19925767784109383;  // std dev = 0.219, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08224489670820087;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.0029164884824409857;  // std dev = 0.154, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.3491025597254848;  // std dev = 0.799, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05623223321585756;  // std dev = 0.480, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.02065145598344105;  // std dev = 1.043, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.939', 'seconds']
Refined model CLL: -0.104487


******************************************
Best model found
******************************************
Results 

CLL : -0.101913 

AUC ROC : 0.994541 

AUC PR : 0.353498 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 10.323 

Total Inference Time : 14.766814708709717 

Total revision time: 35.671533340454104
Best scored revision CLL: -0.104487


Results 

CLL : -0.101913 

AUC ROC : 0.994541 

AUC PR : 0.353498 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 35.698231929779055 

Total Inference Time : 14.766814708709717 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.219
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.32873717039363;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07716360705757162;  // std dev = 0.196, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7663613331214717;  // std dev = 0.066, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.18228247270959555;  // std dev = 2.409, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6065168923536248;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0451310542216667;  // std dev = 1.762, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return 0.08018381530507712;  // std dev = 2.188, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5112678645882659;  // std dev = 1.444, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11252099987815993;  // std dev = 0.031, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.12577635538169737;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1896258238057902;  // std dev = 0.207, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30547528500129134;  // std dev = 0.098, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30063904266613073;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.635729585338636;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11251316641737319;  // std dev = 0.159, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.06972534880553209;  // std dev = 0.352, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02335887969970938;  // std dev = 1.239, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2414226404643135;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49623261005383096;  // std dev = 0.440, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1251947941751048;  // std dev = 0.135, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.156664008534746;  // std dev = 0.172, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27725953070896536;  // std dev = 0.431, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.10167842893562407;  // std dev = 0.163, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043885440768788656;  // std dev = 1.103, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18652345165352213;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05842685016630115;  // std dev = 0.116, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.031647763830368304;  // std dev = 0.673, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.0519932393234608;  // std dev = 1.238, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10233166053304787;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.11595336494893023;  // std dev = 0.820, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518226688219832;  // std dev = 0.057, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37328842008873153;  // std dev = 0.316, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14352637627770393;  // std dev = 0.163, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17633027613630545;  // std dev = 0.325, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.1365291544612786;  // std dev = 0.019, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07508308866105075;  // std dev = 1.12e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08433674581464755;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08645746431200801;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then return -0.020588837008556325;  // std dev = 0.541, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16162650018615576;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08412158908351777;  // std dev = 0.903, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.248', 'seconds']
Parameter learned model CLL:-0.109392 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [2.58e-08, 29, 0], 'true,false,false': [0.0, 12, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 11, 0], 'false,false': [0.499, 9, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [7.3e-08, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.196, 33, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 8, 0], 'false,false,false,true': [0.066, 0, 2], 'false,false,false,false': [2.409, 17, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.089, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.762, 47, 5], 'false,false,false,false': [2.188, 19, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.444, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 41, 0], 'false,true,false,false': [0.0, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.207, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.098, 0, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.109, 0, 8], 'false,false,true,false': [0.159, 40, 0], 'false,false,false': [0.352, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.239, 34, 16], 'false,true': [0.0, 0, 3], 'false,false,true': [0.44, 0, 12], 'false,false,false,true': [0.135, 15, 0], 'false,false,false,false': [0.172, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.431, 0, 26], 'true,false': [0.163, 60, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.103, 13, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.041, 0, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.116, 32, 2], 'false,false,false,true': [0.673, 20, 4], 'false,false,false,false': [1.238, 13, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.235, 1, 16], 'false,true,true,true': [0.82, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.057, 55, 0], 'false,false,true': [0.316, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.325, 0, 17], 'true,true,false': [0.019, 0, 2], 'true,false,true': [1.12e-08, 21, 0], 'true,false,false,true': [2.63e-09, 7, 0], 'true,false,false,false': [0.03, 8, 0], 'false,true': [0.541, 15, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.903, 7, 7]}]
{'': [0.21638888888888838, 0.2343749999999995], 'false': [0.1955555555555554, 0.24913494809688583], 'true': [-2.8047739569477637e-16, 4.603363760640893e-17], 'false,true': [0.0, -1.0092936587501423e-17], 'true,false': [2.2970131543968756e-17, -1.1564823173178714e-17], 'false,true,true': [1.4802973661668753e-16, 0.0]}
{'': [3.134747363647501e-16, 0.1312962358858093], 'false': [0.03846245699812368, 0.194615710237603], 'false,false': [0.0, 0.2221168881672833], 'false,false,false': [0.002198477127310916, 0.2148796846175983], 'false,true': [nan, 0.03846245699812368], 'false,false,true': [nan, 0.0]}
{'': [0.0007784659114916659, 0.1119627905126955], 'false': [nan, 0.11196279051269566], 'false,false': [3.700743415417188e-17, 0.10470702963661875], 'false,false,false': [0.05972815567111078, 0.18419556655129826], 'true': [-2.5376526277146434e-16, 0.00393840432170095], 'true,false': [nan, 0.00393840432170095], 'false,false,true': [0.0, 0.0], 'true,true': [-2.5376526277146434e-16, nan]}
{'': [0.06517438252858992, 0.0019350835314281196], 'false': [3.594728972048501e-05, 0.0019477702080251326], 'false,false': [nan, 0.0019477702080251326], 'false,false,false': [nan, 0.0019477702080251326], 'false,true': [nan, 3.594728972048254e-05], 'false,true,false': [2.3836169085016293e-05, 0.0]}
{'': [0.0005972579896170033, 0.08905538495998024], 'false': [1.850371707708594e-17, 0.08986493632551262], 'false,false': [0.07853324518279302, 0.12360454925665026], 'false,false,true': [0.0014982380065350909, 0.0006290440254769991], 'true': [0.0005972579896170033, nan], 'false,true': [1.850371707708594e-17, nan]}
{'': [0.03071625289234197, 0.08626637417703559], 'false': [0.0, 0.08997310617279657], 'false,false': [0.016158669067724785, 0.0018972131941723076], 'true': [nan, 0.0307162528923419], 'true,false': [nan, 0.03071625289234197], 'false,false,false': [0.0012103344381932909, 0.0021209246568425926]}
{'': [0.032759965578404555, 0.06762211770134821], 'false': [nan, 0.06762211770134824], 'false,false': [nan, 0.06762211770134821], 'false,false,false': [nan, 0.06762211770134821], 'true': [0.007158651930120219, 0.0004417354994473192]}
{'': [9.947826714896233e-05, 0.032977492248013995], 'false': [nan, 0.032977492248013975], 'false,false': [0.013451721302492834, 0.04586625311583313], 'false,false,false': [0.018855927776828787, 0.07300409374250078], 'true': [9.947826714896233e-05, nan]}
{'': [0.05527289896307446, 0.03297620570800563], 'false': [0.014667772918054907, 0.06469787017277709], 'false,false': [0.00996925168664633, 0.001399808375598654], 'false,true': [0.11210015221526487, 5.955240771981658e-05], 'false,true,true': [0.11210015221526487, nan], 'false,false,false': [nan, 0.001399808375598654]}
{'': [0.016320691453488252, 0.03571045845069397], 'false': [0.015400863169525833, 0.05468924281323335], 'false,false': [0.0, 0.05819514988355766], 'false,false,false': [nan, 0.05819514988355767], 'true': [0.005727211064008607, 5.2101054016548566e-05], 'true,true': [0.0062121177874918335, 0.00018812507903094924], 'true,false': [5.9476233462061954e-18, 6.213461471701228e-05], 'true,false,false': [9.912705577010326e-19, 0.00011440359402004399]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 3.794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.03650589634530236;  // std dev = 0.259, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.17757295998003267;  // std dev = 2.197, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.35536643674628465;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.12114110663785671;  // std dev = 0.009, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.028674712808830723;  // std dev = 1.130, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.037864027124269235;  // std dev = 1.033, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.29542901420494766;  // std dev = 1.760, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.46680171834956063;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16197518636169433;  // std dev = 0.626, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5785109161047776;  // std dev = 0.281, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(H, A) )
%   | then return -0.1107094365033965;  // std dev = 0.006, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, I) )
%   | | then return -0.1608843178285027;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.18711760954052006;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.3276464713319538;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.34480336545937884;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5219132215612811;  // std dev = 0.155, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1142012715373566;  // std dev = 0.149, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.09915223785934356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07103649730406159;  // std dev = 1.164, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.27997333735643387;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.41110367231443384;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09058344646634355;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.25062049141822745;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08912151097876973;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.13107525170611323;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4107890154072197;  // std dev = 0.253, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1361895359842438;  // std dev = 0.059, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.22995433179387614;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20883241997724422;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.34308393969244094;  // std dev = 0.149, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2505068264244338;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08228206095848664;  // std dev = 0.002, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.10720794714683567;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.05104578646081376;  // std dev = 0.087, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return -0.027277313180230606;  // std dev = 0.443, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1397888529273018;  // std dev = 0.689, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18719824231604107;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.17394801779742644;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.07604948393489196;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.10856696664509108;  // std dev = 0.383, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.07855162248664078;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.04797348503877627;  // std dev = 0.980, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21000598938670717;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1073775510991071;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.017879069008463335;  // std dev = 0.290, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.16223118774008757;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1499581094896989;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.0036291133736325496;  // std dev = 0.500, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20528256371260928;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0713323021193036;  // std dev = 0.004, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.22465910776895517;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3830683508104729;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.09885485203161914;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.18733806440728953;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.004127941731238931;  // std dev = 1.354, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.13254231583282383;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14130099770472543;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.06936593718100896;  // std dev = 0.007, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return -0.0271269917242127;  // std dev = 0.127, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else return -0.04115375673032118;  // std dev = 0.369, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1589895448539882;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 7.49218195891943E-4;  // std dev = 0.388, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03229832135864543;  // std dev = 0.656, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.915', 'seconds']
Refined model CLL: -0.101494


******************************************
Best model found
******************************************
Results 

CLL : -0.09432 

AUC ROC : 0.993873 

AUC PR : 0.410258 

Precision : 0.342776 

Recall : 0.960317 

F1 : 0.505219 

Total Learning Time : 3.794 

Total Inference Time : 4.775846242904663 

Total revision time: 12.42772578048706
Best scored revision CLL: -0.101494


Results 

CLL : -0.09432 

AUC ROC : 0.993873 

AUC PR : 0.410258 

Precision : 0.342776 

Recall : 0.960317 

F1 : 0.505219 

Total Learning Time : 18.011346805572508 

Total Inference Time : 4.775846242904663 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.549
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.20189893509951234;  // std dev = 0.475, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6963653436095283;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0192461685389293;  // std dev = 0.281, 56.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7756131138088874;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10902911941056491;  // std dev = 3.359, 66.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5501246219148394;  // std dev = 0.864, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6181141254991722;  // std dev = 0.108, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5667839276552487;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5667839276552487;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04137176491071132;  // std dev = 2.737, 119.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=12 */
%   | | | else return 0.12735353685125492;  // std dev = 2.684, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553349894360778;  // std dev = 1.225, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11634076672828676;  // std dev = 0.041, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.13668937920129848;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15521470097706325;  // std dev = 0.186, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26042715236534564;  // std dev = 1.305, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2987248548754046;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5703229231039747;  // std dev = 1.004, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.12225924340512523;  // std dev = 0.283, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0.05131485621807527;  // std dev = 0.315, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02075918033906389;  // std dev = 2.095, 109.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24010531043784544;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5265886780893975;  // std dev = 0.520, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1250767769432741;  // std dev = 0.188, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.11890810872230327;  // std dev = 0.187, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2810469610921565;  // std dev = 1.082, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return -0.11200257462702298;  // std dev = 0.825, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05455912337686139;  // std dev = 1.490, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1954002111898616;  // std dev = 0.060, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05166024060832566;  // std dev = 0.157, 70.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.03315029997294303;  // std dev = 1.386, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | | else return 0.08046234039253586;  // std dev = 1.461, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17866386020466496;  // std dev = 0.045, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2607294760737568;  // std dev = 0.427, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08668217706759;  // std dev = 0.065, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3754973342691897;  // std dev = 0.407, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13063216186396506;  // std dev = 0.262, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1807923355758292;  // std dev = 0.456, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.12919610421889438;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.07970014983329242;  // std dev = 0.035, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08352299211659446;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.08008851914052165;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, G) )
%   | then return 0.01616054404343188;  // std dev = 0.822, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1573405741280418;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 9.280865044253098E-4;  // std dev = 1.269, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.715', 'seconds']
Parameter learned model CLL:-0.105954 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [7.6e-08, 79, 0], 'true,false,false': [0.0, 18, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.475, 21, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.986, 1, 35], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 49, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.079, 0, 2], 'false,false,false,false': [3.359, 48, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.864, 1, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.108, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.737, 107, 12], 'false,false,false,false': [2.684, 27, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.225, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 78, 0], 'false,true,false,false': [0.012, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.186, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.305, 2, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.004, 1, 16], 'false,false,true,false': [0.283, 106, 0], 'false,false,false': [0.315, 25, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.095, 74, 35], 'false,true': [0.0, 0, 7], 'false,false,true': [0.52, 0, 20], 'false,false,false,true': [0.188, 39, 0], 'false,false,false,false': [0.187, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.082, 1, 50], 'true,false': [0.825, 89, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49, 21, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.06, 0, 35], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 63, 7], 'false,false,false,true': [1.386, 38, 9], 'false,false,false,false': [1.461, 17, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.045, 0, 32], 'false,true,true,true': [0.427, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.065, 76, 0], 'false,false,true': [0.407, 0, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.262, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.456, 0, 36], 'true,true,false': [0.031, 0, 6], 'true,false,true': [0.035, 71, 0], 'true,false,false,true': [0.022, 8, 0], 'true,false,false,false': [0.055, 9, 0], 'false,true': [0.822, 21, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.269, 24, 10]}]
{'': [0.21000000000000119, 0.2185223725286156], 'false': [0.21000000000000008, 0.2255859374999995], 'true': [0.022714981070850387, 7.783006770568107e-17], 'false,true': [-2.9605947323337506e-16, 5.28677630773884e-18], 'true,false': [7.307797124114954e-17, -3.0839528461809902e-18], 'false,true,true': [-1.4802973661668753e-16, 1.4802973661668753e-16]}
{'': [0.027006172839505557, 0.12960810563824965], 'false': [0.07894680519671897, 0.16010958281563425], 'false,false': [2.3129646346357427e-18, 0.17868078141817967], 'false,false,false': [0.0031516660955049902, 0.17093119194274867], 'false,true': [nan, 0.07894680519671897], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.023254586795130882, 0.10774974761431409], 'false': [nan, 0.10774974761431463], 'false,false': [6.344131569286608e-17, 0.09881640222414222], 'false,false,false': [0.06294846444159476, 0.18956185261658723], 'true': [0.024095679376442133, 0.005875235102172971], 'true,true': [0.024095679376442133, nan], 'true,false': [nan, 0.005875235102172971], 'false,false,true': [0.0, 0.0]}
{'': [0.02421559568243332, 0.0005904606937904225], 'false': [6.479857499221252e-05, 0.0010800986601777057], 'false,false': [nan, 0.0010800986601777057], 'false,false,false': [nan, 0.0010800986601777057], 'false,true': [nan, 6.479857499221252e-05], 'false,true,false': [2.1042796194557183e-05, 1.2177495356250548e-05]}
{'': [0.05009526245903396, 0.07464175761694407], 'false': [-1.586032892321652e-17, 0.07388190972694897], 'false,false': [0.06598060957932905, 0.09944296677911224], 'false,false,true': [0.059303358963545154, 0.0007556278078367595], 'true': [0.05009526245903396, nan], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.0402608904236673, 0.07125729832786844], 'false': [-7.93016446160826e-18, 0.07294990872797523], 'false,false': [0.013497915467829812, 0.0009362610775290296], 'true': [nan, 0.04026089042366736], 'true,false': [nan, 0.0402608904236673], 'false,false,false': [0.0009056578475866603, 0.000948991611943314]}
{'': [0.04880002036870577, 0.06937706235585596], 'false': [nan, 0.0693770623558559], 'false,false': [nan, 0.06937706235585596], 'false,false,false': [nan, 0.06937706235585596], 'true': [0.02295184305352553, 0.00756870514530635]}
{'': [0.00010202270468039184, 0.04238290699555163], 'false': [nan, 0.0423829069955516], 'false,false': [0.024704197215554936, 0.05709108662323152], 'false,false,false': [0.04088638428582768, 0.07620292889012445], 'true': [0.00010202270468039184, nan]}
{'': [0.001987120730853338, 0.034123252335174395], 'false': [0.016335483947092947, 0.05827151215674317], 'false,false': [0.009182602544287452, 0.0016700763025468128], 'false,true': [0.015210260826540081, 5.4761200364458606e-05], 'false,true,true': [0.015210260826540081, nan], 'false,false,false': [nan, 0.0016700763025468128]}
{'': [0.01580682641786001, 0.03554113481177002], 'false': [0.02251200257037506, 0.04665549157181383], 'false,false': [0.0, 0.04732871573260102], 'false,false,false': [nan, 0.04732871573260106], 'true': [0.005307948238712327, 5.455565272005636e-05], 'true,true': [0.00578589402526523, 0.00015841258490502616], 'true,false': [1.687656097211518e-05, 0.00020867916219476744], 'true,false,false': [5.963894321691157e-05, 0.0003356084840778075]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.919
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.6639178566553987;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109544;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5766162693538117;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.048633906642996313;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09182000309029774;  // std dev = 2.185, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.2590310362100562;  // std dev = 2.238, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.5682798379099443;  // std dev = 0.013, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5786601703675699;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.40273968481330735;  // std dev = 0.686, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11290806715002011;  // std dev = 0.013, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.010668733377680553;  // std dev = 1.524, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.061592766143941206;  // std dev = 2.374, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | | else return 0.36811949424409796;  // std dev = 1.598, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.42231647810247913;  // std dev = 0.006, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.54420489397936;  // std dev = 0.169, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6557857830968868;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6777978308158504;  // std dev = 0.176, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10535444550321824;  // std dev = 0.007, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.1124575154472128;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.14326429973896454;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.1750771639886037;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.253827938338305;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.32711531285657003;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32901065798789597;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3195745149621269;  // std dev = 0.000195, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.16536786520936675;  // std dev = 0.637, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31966641129469675;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4995610220373172;  // std dev = 0.142, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10915955993863775;  // std dev = 0.177, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09556330497779283;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.3033700898653098;  // std dev = 1.097, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1842696731454295;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.26082716881821577;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2536647974278558;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06156756771988684;  // std dev = 0.099, 69.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=4 */
%   | | else return -0.05792127889747918;  // std dev = 0.137, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2544587596510927;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.384887786764529;  // std dev = 0.081, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.453506861124585;  // std dev = 0.162, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12692934255444496;  // std dev = 0.048, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(C, D) )
%   | then return 0.21867802193287195;  // std dev = 0.009, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(C, A), tweets(A, F) )
%   | | | then return -0.11958891868052908;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08837534275982263;  // std dev = 0.631, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21048626232922682;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), follows(H, A) )
%   | then return -0.05595760344883204;  // std dev = 0.138, 92.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.29875608995617414;  // std dev = 0.066, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11071038858948451;  // std dev = 0.054, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.20925359386248388;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.00883111278355145;  // std dev = 1.123, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.18916907696384605;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11077764244068186;  // std dev = 0.955, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.19638972206907385;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.19469952308167945;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then return -0.04987153246481321;  // std dev = 0.110, 96.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2464874634694319;  // std dev = 0.083, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09774245305892595;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013895404477277443;  // std dev = 0.630, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.016097666007831034;  // std dev = 0.978, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.16205257610726242;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.08521877548409924;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.1692221219968779;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07901667092195068;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.4013222615530843;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16604041303722944;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07535727755873116;  // std dev = 0.005, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.25481084412752375;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11402170946172818;  // std dev = 0.048, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17124498280088848;  // std dev = 0.060, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.141200480023689;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06981060636412717;  // std dev = 0.004, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1900294980328252;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07654338969212791;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.00844883602580454;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2307964857607353;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.019292132682002753;  // std dev = 0.488, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.05870535716501135;  // std dev = 0.931, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.266', 'seconds']
Refined model CLL: -0.099871


******************************************
Best model found
******************************************
Results 

CLL : -0.098253 

AUC ROC : 0.9938 

AUC PR : 0.414579 

Precision : 0.340909 

Recall : 0.952381 

F1 : 0.502092 

Total Learning Time : 5.919 

Total Inference Time : 6.472705602645874 

Total revision time: 18.307330196380615
Best scored revision CLL: -0.099871


Results 

CLL : -0.098253 

AUC ROC : 0.9938 

AUC PR : 0.414579 

Precision : 0.340909 

Recall : 0.952381 

F1 : 0.502092 

Total Learning Time : 23.890951221466064 

Total Inference Time : 6.472705602645874 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.978
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8258908705833835;  // std dev = 1.391, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.07935106490048778;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.2635543405049178;  // std dev = 0.491, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.635967383650176;  // std dev = 2.141, 54.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01902183666881239;  // std dev = 0.282, 88.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08600339920492163;  // std dev = 1.285, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7453419177891579;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14509996017736385;  // std dev = 3.953, 86.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=27 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5773292711538799;  // std dev = 0.750, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.16322555467300126;  // std dev = 0.595, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.5837444219778278;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6222217369600455;  // std dev = 0.172, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5837390602648242;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019868006750106904;  // std dev = 3.690, 171.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=22 */
%   | | | else return 0.12479810063586426;  // std dev = 3.103, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5595804077547218;  // std dev = 1.630, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12140466771303517;  // std dev = 0.026, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return -0.13740445961393322;  // std dev = 0.000943, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17651073446857346;  // std dev = 0.276, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27978284361270306;  // std dev = 1.453, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3052947680287518;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5153905206703917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6119778087341765;  // std dev = 0.233, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.11577473840173488;  // std dev = 0.976, 156.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=1 */
%   | | else return 0.06968617084402298;  // std dev = 0.353, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03833375253437405;  // std dev = 2.300, 140.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=49 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26634825917090044;  // std dev = 0.157, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4311142597430317;  // std dev = 1.656, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12388793893868359;  // std dev = 0.219, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.13288302989377543;  // std dev = 0.184, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2710042819641358;  // std dev = 1.636, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return -0.10096375901107142;  // std dev = 0.937, 141.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03426718677408236;  // std dev = 1.796, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1771851196609211;  // std dev = 0.991, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.2706827157187124;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048800107143016906;  // std dev = 0.139, 109.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006510987256913755;  // std dev = 1.684, 77.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=18 */
%   | | | else return 0.024402148250294887;  // std dev = 1.842, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1818585205746123;  // std dev = 0.043, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3032406902516144;  // std dev = 0.720, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0910270816220386;  // std dev = 0.088, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35915976696724483;  // std dev = 0.525, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1303002234753458;  // std dev = 0.283, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18253669595080166;  // std dev = 0.504, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.16542511237636953;  // std dev = 0.277, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08303284203227795;  // std dev = 0.037, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09630372219968118;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.0198483223932699;  // std dev = 0.806, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.028028651359273512;  // std dev = 0.965, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17647958408527442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004107033319199147;  // std dev = 1.669, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.786', 'seconds']
Parameter learned model CLL:-0.112048 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.391, 2, 60], 'true,false,true': [7.6e-08, 113, 0], 'true,false,false': [0.242, 30, 2], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [0.0, 19, 0], 'false,false': [0.491, 22, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.141, 5, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.282, 77, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.285, 38, 2], 'false,false,false,true': [0.09, 0, 4], 'false,false,false,false': [3.953, 59, 27]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.75, 1, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.595, 1, 1], 'true,false,false': [0.12, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.172, 0, 5], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.69, 149, 22], 'false,false,false,false': [3.103, 36, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.63, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 93, 0], 'false,true,false,false': [0.000943, 19, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.276, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.453, 2, 46], 'true,false': [0.0, 0, 0], 'false,true,true': [0.012, 0, 9], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.233, 0, 27], 'false,false,true,false': [0.976, 155, 1], 'false,false,false': [0.353, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.3, 91, 49], 'false,true': [0.157, 0, 11], 'false,false,true': [1.656, 2, 33], 'false,false,false,true': [0.219, 55, 0], 'false,false,false,false': [0.184, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.636, 2, 77], 'true,false': [0.937, 139, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.796, 30, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 48], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.139, 98, 11], 'false,false,false,true': [1.684, 59, 18], 'false,false,false,false': [1.842, 32, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.043, 0, 46], 'false,true,true,true': [0.72, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 140, 0], 'false,false,true': [0.525, 0, 27], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.283, 62, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.504, 0, 52], 'true,true,false': [0.277, 0, 8], 'true,false,true': [0.037, 109, 0], 'true,false,false,true': [0.029, 19, 0], 'true,false,false,false': [0.806, 12, 2], 'false,true': [0.965, 26, 16], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.669, 30, 14]}]
{'': [0.2098065299073494, 0.24517746913580396], 'false': [0.24816326530612198, 0.24105186267348383], 'false,true': [-2.220446049250313e-16, 0.0], 'true': [0.031217481789801747, 0.01360285374554092], 'true,false': [5.1089909097794814e-17, 0.05859375000000002], 'false,true,true': [-2.7328566760003855e-16, 1.4802973661668753e-16]}
{'': [0.08486922137383877, 0.12905277849420355], 'false': [0.07928068928950287, 0.15772774664962005], 'false,false': [0.04126278134765786, 0.18904351332946087], 'false,false,false': [0.0020075387425486646, 0.18172995397677008], 'false,true': [nan, 0.07928068928950287], 'false,false,true': [nan, 0.04126278134765786]}
{'': [0.02625176711241502, 0.11821109666233492], 'false': [nan, 0.1182110966623351], 'false,false': [0.0033320619126651963, 0.10840112872001216], 'false,false,false': [0.07960494773241449, 0.18883259576364522], 'true': [0.013385721095827283, 0.10065933264294573], 'true,false': [0.17683160838512413, 0.0036278221854118], 'true,true': [0.013385721095827283, nan], 'false,false,true': [0.0059236656225156725, 0.0]}
{'': [0.028274405986573523, 0.0010827846362146316], 'false': [4.2262754809902335e-05, 0.0015892373322990705], 'false,false': [nan, 0.0015892373322990705], 'false,false,false': [nan, 0.0015892373322990705], 'false,true': [nan, 4.2262754809902335e-05], 'false,true,false': [7.460076798223449e-06, 4.680596056645158e-08]}
{'': [0.04398165260792102, 0.08171157159001105], 'false': [0.003987397579213492, 0.08068740969706407], 'false,false': [0.07211147225391316, 0.12454094166007439], 'false,false,true': [0.002014085340952076, 0.0061025003495695064], 'true': [0.04398165260792102, nan], 'false,true': [1.6419226875933706e-05, 0.0]}
{'': [0.03778529044856817, 0.08443646482755807], 'false': [0.002241413886185968, 0.0874232967386272], 'false,false': [0.07835422051561616, 0.0009712513935148433], 'true': [nan, 0.03778529044856794], 'true,false': [nan, 0.03778529044856817], 'false,false,false': [0.0008754000576900133, 0.0010895643852444348]}
{'': [0.04799868264697837, 0.07329686490281978], 'false': [nan, 0.07329686490281975], 'false,false': [nan, 0.07329686490281978], 'false,false,false': [nan, 0.07329686490281978], 'true': [0.03386639991374497, 0.00623287169468502]}
{'': [0.01980999185331535, 0.036639396463117854], 'false': [nan, 0.03663939646311787], 'false,false': [0.01936304442971382, 0.05046141682911879], 'false,false,false': [0.03684027772784948, 0.07218348963507878], 'true': [0.02003944139197047, 0.0], 'true,false': [0.0, nan]}
{'': [0.0018135636534639676, 0.03338575229130044], 'false': [0.020288182699126876, 0.05462399005446857], 'false,false': [0.01019703266389013, 0.0012923457871619963], 'false,true': [0.02590317315138929, 5.51567136695495e-05], 'false,true,true': [0.02590317315138929, nan], 'false,false,false': [nan, 0.0012923457871619963]}
{'': [0.019146601855834142, 0.0432979667395597], 'false': [0.022160522615317972, 0.0626444421564226], 'false,false': [0.0, 0.06334347889181303], 'false,false,false': [nan, 0.06334347889181303], 'true': [0.005549691814922457, 0.004992225357908009], 'true,true': [0.004891762617313918, 0.009572466145943277], 'true,false': [1.2298327707087039e-05, 0.021159143358624972], 'true,false,false': [4.335698104528911e-05, 0.046450732467499325]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.532
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.8381489350995122;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.7748156017661789;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.12622606490048777;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7290887650549847;  // std dev = 0.149, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6325831751363271;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1271688863778309;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.0771299950588163;  // std dev = 0.200, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07283111362216903;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.09634209663452928;  // std dev = 0.848, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15372156713552546;  // std dev = 3.725, 82.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=27 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.558328204776634;  // std dev = 0.015, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(E, A) )
%   | | then return 0.18158123248860428;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5553664367462843;  // std dev = 2.11e-08, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6123932552144474;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5734877856096927;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5737877503995082;  // std dev = 0.788, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.11662113529243587;  // std dev = 0.073, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11127688272707596;  // std dev = 3.016, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | | | else return 0.2912369614841388;  // std dev = 1.881, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.42752158360204556;  // std dev = 0.030, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.08538445891401973;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( tweets(A, H), follows(G, A) )
%   | | | then return 0.2965936790446829;  // std dev = 0.726, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4857340685039072;  // std dev = 0.396, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6619919924100297;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.597834084393952;  // std dev = 0.914, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.1045547660525312;  // std dev = 0.004, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( follows(A, K) )
%   | | then return -0.1575126844679134;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.2345351703955325;  // std dev = 0.100, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.23799002596553473;  // std dev = 1.279, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.3615284205949269;  // std dev = 0.151, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.11290130429604944;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.32529760495822063;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.3200433001710328;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18659267303720872;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.48069761060869787;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, J) )
%   | | then return -0.03098463626134051;  // std dev = 0.211, 194.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=28 */
%   | | else return -0.006039126652836405;  // std dev = 0.282, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27392023902923657;  // std dev = 0.029, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.33197425491267857;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09066390177020028;  // std dev = 4.34e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.06168102998384125;  // std dev = 0.137, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2821150409887496;  // std dev = 0.107, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.310604815476166;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4664069909067907;  // std dev = 0.471, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5777450044991581;  // std dev = 0.246, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12873367104705052;  // std dev = 0.028, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.23658826190413615;  // std dev = 0.049, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(A, E), follows(D, E) )
%   | | then return -0.08561360037847487;  // std dev = 0.037, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.0608889143695645;  // std dev = 0.122, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.2697447680712326;  // std dev = 0.290, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.39080232163790735;  // std dev = 0.092, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11982550618732042;  // std dev = 2.98e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.33790429153542584;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1339819682794666;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.15025004609039597;  // std dev = 0.335, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18020506461680455;  // std dev = 0.116, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.20686529122983038;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22603043005791112;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.24014734849806485;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13919888683419157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.07843849907713822;  // std dev = 0.020, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.01611759588324767;  // std dev = 1.133, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.009932456529563526;  // std dev = 1.166, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.040864046133032315;  // std dev = 1.615, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.06990192426188048;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.16140309674399148;  // std dev = 0.085, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.16121365623383416;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1479822149763579;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.25247577645640695;  // std dev = 0.225, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15253950673407454;  // std dev = 0.858, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07624393046806376;  // std dev = 0.064, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.32721292857502754;  // std dev = 0.056, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13027285354202617;  // std dev = 0.042, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15544801548786605;  // std dev = 0.042, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.06889697957657866;  // std dev = 0.028, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.052018107890219344;  // std dev = 0.147, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.21623225157431894;  // std dev = 0.218, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09499515361618018;  // std dev = 9.13e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.029757553822658517;  // std dev = 0.133, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10821154998928217;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.026960258691938372;  // std dev = 0.800, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return -0.009713994169115099;  // std dev = 1.012, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.410', 'seconds']
Refined model CLL: -0.102615


******************************************
Best model found
******************************************
Results 

CLL : -0.099954 

AUC ROC : 0.993153 

AUC PR : 0.359617 

Precision : 0.338983 

Recall : 0.952381 

F1 : 0.5 

Total Learning Time : 12.532 

Total Inference Time : 11.805832624435425 

Total revision time: 32.59755087852478
Best scored revision CLL: -0.102615


Results 

CLL : -0.099954 

AUC ROC : 0.993153 

AUC PR : 0.359617 

Precision : 0.338983 

Recall : 0.952381 

F1 : 0.5 

Total Learning Time : 38.18117190361023 

Total Inference Time : 11.805832624435425 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.238
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8458032560871667;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.06021841183926325;  // std dev = 0.274, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.26631220040563447;  // std dev = 0.491, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7109849783459891;  // std dev = 1.017, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03607229490822091;  // std dev = 0.262, 150.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06326851977774797;  // std dev = 1.790, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5871640223798388;  // std dev = 0.957, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.14095300775538017;  // std dev = 4.531, 111.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5545876094692007;  // std dev = 1.054, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7308008753608819;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.640818444504598;  // std dev = 0.145, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6002781632824956;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5605049859547413;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0014328763347445808;  // std dev = 4.239, 194.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=30 */
%   | | | else return 0.07620649343738949;  // std dev = 3.735, 78.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5551164575582502;  // std dev = 2.077, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12341901888643907;  // std dev = 0.050, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return -0.13184604809901027;  // std dev = 0.015, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16700628653746125;  // std dev = 0.283, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2851824849172917;  // std dev = 1.511, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return 0.4658821258437603;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2917714073385407;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.49845970803561535;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6120348430635376;  // std dev = 0.284, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10767976393110541;  // std dev = 1.640, 215.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=4 */
%   | | else return 0.030060554551216402;  // std dev = 0.318, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028189092017004105;  // std dev = 2.793, 193.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2520121391109219;  // std dev = 0.176, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5138803503608685;  // std dev = 0.864, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12559240215789164;  // std dev = 0.215, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.13071799548207108;  // std dev = 0.179, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28956647477295094;  // std dev = 0.854, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | else return -0.09363511437772531;  // std dev = 1.676, 218.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008831461601858742;  // std dev = 2.222, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18535299798856417;  // std dev = 0.088, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.2507578900370343;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040581978480355003;  // std dev = 0.155, 130.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.023687319445005323;  // std dev = 1.773, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
%   | | | else return 0.015767913921497925;  // std dev = 2.265, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12456222128346571;  // std dev = 0.216, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2753126740915357;  // std dev = 1.114, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09365957341424251;  // std dev = 0.092, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34168684934819715;  // std dev = 1.153, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1292232846082361;  // std dev = 0.269, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18315826683953207;  // std dev = 0.629, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.17740604854360773;  // std dev = 0.343, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08355576400496213;  // std dev = 0.022, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09781429389800339;  // std dev = 0.028, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.009000597395342999;  // std dev = 0.935, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.002525836556540137;  // std dev = 1.184, 71.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18567366121388984;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03546450344173047;  // std dev = 1.766, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.869', 'seconds']
Parameter learned model CLL:-0.114465 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [2.98e-08, 121, 0], 'true,false,false': [0.274, 45, 4], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.491, 29, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 134, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.79, 48, 4], 'false,false,false,true': [0.957, 1, 5], 'false,false,false,false': [4.531, 76, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.054, 1, 54], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.145, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 5], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [4.239, 164, 30], 'false,false,false,false': [3.735, 58, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.077, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.05, 142, 0], 'false,true,false,false': [0.015, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.283, 72, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.511, 2, 61], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 11], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.284, 0, 34], 'false,false,true,false': [1.64, 211, 4], 'false,false,false': [0.318, 43, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.793, 127, 66], 'false,true': [0.176, 0, 14], 'false,false,true': [0.864, 0, 44], 'false,false,false,true': [0.215, 74, 0], 'false,false,false,false': [0.179, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.854, 0, 99], 'true,false': [1.676, 212, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.222, 44, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.088, 0, 62], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 114, 16], 'false,false,false,true': [1.773, 55, 23], 'false,false,false,false': [2.265, 54, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.216, 4, 62], 'false,true,true,true': [1.114, 1, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.092, 163, 0], 'false,false,true': [1.153, 1, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.269, 74, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.629, 0, 69], 'true,true,false': [0.343, 0, 11], 'true,false,true': [0.022, 127, 0], 'true,false,false,true': [0.028, 22, 0], 'true,false,false,false': [0.935, 19, 4], 'false,true': [1.184, 51, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.766, 34, 18]}]
{'': [0.2226631323312335, 0.2286788315451497], 'false': [0.21484374999999956, 0.241566014160766], 'true': [0.01219326322206907, 0.022975778546712705], 'false,true': [-8.881784197001253e-17, 4.794144879063176e-17], 'true,false': [7.340317518182853e-18, 0.0749687630154101], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.01589660691384963, 0.12318828499370703], 'false': [0.06876429227177494, 0.16354326152746623], 'false,false': [0.06158632913112056, 0.19298782537406728], 'false,false,false': [0.15270215944384855, 0.1849549535751858], 'false,true': [nan, 0.06876429227177494], 'false,false,true': [nan, 0.06158632913112056]}
{'': [0.02061204208216547, 0.12604081963404], 'false': [nan, 0.12604081963403996], 'false,false': [0.0030210003441309974, 0.11849043201795392], 'false,false,false': [0.09262704222029167, 0.17882955915032067], 'true': [0.020215030126516677, 0.010775466075921725], 'true,true': [0.020215030126516677, nan], 'true,false': [0.01663438773429256, 0.004223798882347207], 'false,false,true': [0.006327622538980027, 6.344131569286608e-17]}
{'': [0.03452628515925153, 0.0007275138972782091], 'false': [2.5624434680679564e-05, 0.0011137545088199098], 'false,false': [nan, 0.0011137545088199098], 'false,false,false': [nan, 0.0011137545088199098], 'false,true': [nan, 2.5624434680679564e-05], 'false,true,false': [1.7788480493340536e-05, 8.396367526684558e-06]}
{'': [0.036189623170185495, 0.07841025621955192], 'false': [0.0032775996973744745, 0.07769690979438323], 'false,false': [0.07220036473504482, 0.10130549725767912], 'false,false,true': [0.0023777001739142675, 0.01251265097232386], 'true': [0.03625386850459564, 0.0], 'false,true': [1.5558835806314423e-05, 0.0]}
{'': [0.040422390526234295, 0.08208832727134491], 'false': [0.0022029656538214426, 0.0854651594249993], 'false,false': [0.01694772225837465, 0.0006537485172606511], 'true': [nan, 0.040422390526234434], 'true,false': [nan, 0.040422390526234295], 'false,false,false': [0.0006262879205247136, 0.0006809173561017741]}
{'': [0.04269940210006745, 0.07835063488915797], 'false': [nan, 0.07835063488915796], 'false,false': [nan, 0.07835063488915797], 'false,false,false': [nan, 0.07835063488915797], 'true': [0.007373422215761145, 0.012882305432855264]}
{'': [0.00025276083786671816, 0.04116234644341356], 'false': [nan, 0.04116234644341357], 'false,false': [0.02397173661046094, 0.054093621932057696], 'false,false,false': [0.04029669409313081, 0.06841045352022805], 'true': [0.0001245042224268925, 8.459725962522979e-05], 'true,false': [8.459725962522979e-05, nan]}
{'': [0.0468546245890064, 0.03842087239451248], 'false': [0.023578690213674203, 0.06155550150676006], 'false,false': [0.036900545154078285, 0.0009749977475890566], 'false,true': [0.04435743618568465, 5.156259557146285e-05], 'false,true,true': [0.04435743618568465, nan], 'false,false,false': [nan, 0.0009749977475890566]}
{'': [0.020388559834412047, 0.036981294018974716], 'false': [0.019750444259829986, 0.058559220139847816], 'false,false': [0.0, 0.059975838908696434], 'false,false,false': [nan, 0.05997583890869644], 'true': [0.00642337755583996, 0.005789032782918375], 'true,true': [0.0057405070760017714, 0.010678299425244201], 'true,false': [3.963869498082112e-06, 0.021400007306177856], 'true,false,false': [3.5424713951059695e-05, 0.037979401689706725]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 35.18
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8064247971684779;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12057446915580732;  // std dev = 0.144, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.21109011157010057;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7324700260741588;  // std dev = 0.203, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.329793513194305;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7380486026861064;  // std dev = 0.202, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12779751924192706;  // std dev = 1.15e-07, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.08578487415644509;  // std dev = 1.636, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.2221724198114392;  // std dev = 3.081, 54.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=22 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15619471171805724;  // std dev = 1.543, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.11967815271786489;  // std dev = 2.391, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5872959245128114;  // std dev = 0.053, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(E, A) )
%   | | then return 0.5649079492960382;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3559137542860777;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5950042611008634;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.42715485788094554;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.565083434751535;  // std dev = 0.207, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11421698618268081;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08547583445157375;  // std dev = 3.590, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.23335982744364167;  // std dev = 2.235, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.4225526839413289;  // std dev = 0.072, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.3781287636868268;  // std dev = 0.999, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.566324081709317;  // std dev = 0.198, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.6488051930799633;  // std dev = 0.176, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6413801494328532;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7850289832347153;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10316067706754997;  // std dev = 3.33e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.10316067706755024;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.17099073443469792;  // std dev = 0.192, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3223433654228107;  // std dev = 0.002, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.4226985760663922;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.48800313436284715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32904913948625447;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07932048798989655;  // std dev = 0.800, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.44287241865007226;  // std dev = 0.518, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.09243203896837364;  // std dev = 1.417, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07016340357795418;  // std dev = 0.573, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return 0.13958446858289228;  // std dev = 1.833, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.20974191490368496;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.25711368494647124;  // std dev = 0.013, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.10988656763658484;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.06255465852322287;  // std dev = 0.110, 133.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.3097848840193798;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15749115486336207;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.19908565178296644;  // std dev = 0.902, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.45106325090272026;  // std dev = 0.558, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.12677428616163827;  // std dev = 0.038, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22023154898370165;  // std dev = 0.031, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.07125269244220352;  // std dev = 0.950, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.24604640936667985;  // std dev = 0.000141, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, D), tweets(A, H) )
%   | | | then return -0.07458614288677404;  // std dev = 0.663, 150.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=2 */
%   | | | else return -0.10165684156933343;  // std dev = 0.586, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2569210494502158;  // std dev = 1.035, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.12312630965229768;  // std dev = 0.641, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05194368365664142;  // std dev = 0.867, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.06554044242022138;  // std dev = 1.534, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15490445638336625;  // std dev = 0.985, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.17701995727761555;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.08134516154716787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.3160995132075636;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04888597615762824;  // std dev = 0.113, 198.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.17419085094734252;  // std dev = 1.384, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return -0.10170294771029956;  // std dev = 0.038, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10466643809668777;  // std dev = 0.758, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.05935779998242209;  // std dev = 1.518, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.15724012760297404;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.010611255513766182;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.16070375217397556;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.12979703346090937;  // std dev = 0.938, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.062439809924902806;  // std dev = 0.884, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.23757287096815136;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(J, A) )
%   | then return -0.03525016660350373;  // std dev = 0.096, 208.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=27 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.2872415965221836;  // std dev = 0.107, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.11854026231858056;  // std dev = 0.045, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1145491457800222;  // std dev = 0.176, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else return 0.22528594162595597;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06093343237033442;  // std dev = 0.059, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2025404899778821;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.009512201124213414;  // std dev = 0.821, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0.003276808184365115;  // std dev = 0.625, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2643577782199078;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.011162401989716837;  // std dev = 0.697, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0.04797593202038336;  // std dev = 1.278, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.953', 'seconds']
Refined model CLL: -0.103342


******************************************
Best model found
******************************************
Results 

CLL : -0.101585 

AUC ROC : 0.993206 

AUC PR : 0.351383 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 35.18 

Total Inference Time : 11.639668226242065 

Total revision time: 57.71990396308899
Best scored revision CLL: -0.103342


Results 

CLL : -0.101585 

AUC ROC : 0.993206 

AUC PR : 0.351383 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 63.30352498817444 

Total Inference Time : 11.639668226242065 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.561
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.06777699082641366;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.1456489350995117;  // std dev = 0.453, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7167508343023645;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03256937346622739;  // std dev = 0.265, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.056345135513383694;  // std dev = 1.785, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7494746197852904;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1832307654549208;  // std dev = 4.733, 113.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5184833358352785;  // std dev = 2.000, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.48285734194473584;  // std dev = 0.890, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5889473953027204;  // std dev = 0.201, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5957402358778999;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629486233108699;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020476139830559393;  // std dev = 4.558, 263.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=34 */
%   | | | else return 0.05441843078950452;  // std dev = 4.097, 104.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5520528836168832;  // std dev = 2.174, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12169456998843473;  // std dev = 0.071, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12851444744273224;  // std dev = 0.011, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1730639605561379;  // std dev = 0.253, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2572571612553937;  // std dev = 2.302, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   | else return 0.528996410394823;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2952500614876324;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5008082585532879;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6225316185679112;  // std dev = 0.370, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.1037622147642579;  // std dev = 1.778, 247.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=5 */
%   | | else return 0.024927544683550407;  // std dev = 0.314, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03214998364819247;  // std dev = 3.133, 244.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20860201277961893;  // std dev = 1.012, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4851265556492545;  // std dev = 1.667, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12991315906880938;  // std dev = 0.213, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.13422216765738082;  // std dev = 0.194, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28045586186557836;  // std dev = 1.825, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08840042589645103;  // std dev = 1.694, 246.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050781997877043634;  // std dev = 2.287, 74.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18527277114562632;  // std dev = 0.994, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2801149724310262;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05215928395708146;  // std dev = 0.154, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0069601419227498925;  // std dev = 2.013, 119.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=28 */
%   | | | else return 0.053038646660136426;  // std dev = 2.520, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12992379368808304;  // std dev = 0.233, 83.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22653354612705706;  // std dev = 1.768, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0929725039253537;  // std dev = 0.113, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38175661949831124;  // std dev = 0.802, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11717212177739014;  // std dev = 0.265, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15904618488272637;  // std dev = 1.899, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11510373574375068;  // std dev = 1.068, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08236939931278758;  // std dev = 0.025, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09801665047298103;  // std dev = 0.029, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.016599955724088164;  // std dev = 1.020, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.012454957536352541;  // std dev = 1.254, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1912472963516133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04263613761989644;  // std dev = 1.952, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.035', 'seconds']
Parameter learned model CLL:-0.112734 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 173, 0], 'true,false,false': [0.262, 50, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.453, 57, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 155, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.785, 44, 4], 'false,false,false,true': [0.147, 0, 8], 'false,false,false,false': [4.733, 73, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.0, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.89, 1, 3], 'true,false,false': [0.201, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.558, 229, 34], 'false,false,false,false': [4.097, 81, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.174, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.071, 172, 0], 'false,true,false,false': [0.011, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 101, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.302, 6, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.37, 0, 39], 'false,false,true,false': [1.778, 242, 5], 'false,false,false': [0.314, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.133, 162, 82], 'false,true': [1.012, 1, 22], 'false,false,true': [1.667, 1, 52], 'false,false,false,true': [0.213, 98, 0], 'false,false,false,false': [0.194, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.825, 2, 121], 'true,false': [1.694, 239, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.287, 46, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 167, 19], 'false,false,false,true': [2.013, 91, 28], 'false,false,false,false': [2.52, 47, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.233, 5, 78], 'false,true,true,true': [1.768, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.113, 200, 0], 'false,false,true': [0.802, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 89, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.899, 3, 85], 'true,true,false': [1.068, 1, 19], 'true,false,true': [0.025, 175, 0], 'true,false,false,true': [0.029, 31, 0], 'true,false,false,false': [1.02, 23, 4], 'false,true': [1.254, 48, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.952, 37, 21]}]
{'': [0.21879594105202982, 0.22145065398335392], 'false': [0.23668639053254564, 0.20484375000000096], 'false,true': [7.105427357601002e-16, 4.163336342344337e-17], 'true': [0.02725128832212642, 0.01731064061014176], 'true,false': [-1.8225626531418756e-16, 0.06858710562414251], 'false,true,true': [0.0, 0.0]}
{'': [0.012021272521041664, 0.1326454738754497], 'false': [0.07036848965036312, 0.18130739653693362], 'false,false': [0.0664051690515054, 0.2050934673630013], 'false,false,false': [0.0027002173677553865, 0.19822337632774262], 'false,true': [nan, 0.07036848965036312], 'false,false,true': [nan, 0.0664051690515054]}
{'': [0.058761669726555714, 0.114707881001312], 'false': [nan, 0.11470788100131074], 'false,false': [0.0017555752730550587, 0.10348927767077347], 'false,false,false': [0.07898685556522847, 0.16143246399654806], 'true': [0.05636252637506805, 0.0719026706134069], 'true,false': [0.19811808963072414, 0.005043261297581536], 'true,true': [0.05636252637506805, nan], 'false,false,true': [0.0053764492737310805, -5.921189464667501e-17]}
{'': [0.030096652075295383, 0.0007847322073697427], 'false': [3.156887730706201e-05, 0.000633582831125338], 'false,false': [nan, 0.000633582831125338], 'false,false,false': [nan, 0.000633582831125338], 'false,true': [nan, 3.156887730705343e-05], 'false,true,false': [2.9455965789879533e-05, 3.3057325363961e-06]}
{'': [0.06397102421944816, 0.07902787542094578], 'false': [0.0019245462429523467, 0.07841459129901845], 'false,false': [0.07365069550139622, 0.09865942568900776], 'false,false,true': [0.0035081466458434783, 0.012793644021240414], 'true': [0.06386268540906898, 0.0], 'false,true': [8.670108391273245e-06, 0.0]}
{'': [0.04021577408858112, 0.08460785318793992], 'false': [0.044508559576413635, 0.08567361470906804], 'false,false': [0.05244522007118343, 0.0005364539128254927], 'true': [nan, 0.04021577408858107], 'true,false': [nan, 0.04021577408858112], 'false,false,false': [0.0004639271609743473, 0.000647334880949667]}
{'': [0.04703056180941033, 0.07066717424241464], 'false': [nan, 0.07066717424241455], 'false,false': [nan, 0.07066717424241464], 'false,false,false': [nan, 0.07066717424241464], 'true': [0.027065813312428966, 0.011661282384039077]}
{'': [0.011704538615249825, 0.0410207776818989], 'false': [nan, 0.04102077768189884], 'false,false': [0.023810823716915928, 0.0556065235074882], 'false,false,false': [0.03406722214887616, 0.08945296027082394], 'true': [0.011772295664802222, 7.288643926416094e-05], 'true,false': [7.288643926416094e-05, nan]}
{'': [0.05452210816753793, 0.03963991517093668], 'false': [0.027262662126110372, 0.0587854222774397], 'false,false': [0.016086452955191823, 0.0007884078468325021], 'false,true': [0.07818398357074405, 6.437850050132088e-05], 'false,true,true': [0.07818398357074405, nan], 'false,false,false': [nan, 0.0007884078468325021]}
{'': [0.028641639127077997, 0.04110083620249322], 'false': [0.021551774017678438, 0.0642079676820056], 'false,false': [0.0, 0.06568585964978974], 'false,false,false': [nan, 0.06568585964978978], 'true': [0.044258196073738924, 0.004976658021006913], 'true,true': [0.04099264877945399, 0.05705324659824831], 'true,false': [3.6973890887814774e-06, 0.01960933142609041], 'true,false,false': [2.7880690029123285e-05, 0.03854882362504881]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.749
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12366924671867016;  // std dev = 0.134, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7230751447221544;  // std dev = 0.214, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7255846983139795;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4404912811306543;  // std dev = 0.878, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7440089614414075;  // std dev = 0.149, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12745295606301707;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.07901271355727511;  // std dev = 3.707, 104.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=25 */
%   | | | else return 0.15550079029480243;  // std dev = 2.938, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5620943661658668;  // std dev = 0.332, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5653438411368742;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.0853802668948785;  // std dev = 0.967, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5901691324217393;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.554476868089983;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5287329196831833;  // std dev = 0.948, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11393903803523775;  // std dev = 1.40e-07, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08079248440388252;  // std dev = 3.640, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.18777865360055912;  // std dev = 2.780, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.4181562644534865;  // std dev = 0.057, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return 0.5958286232627331;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D), follows(E, A) )
%   | | | then return 0.2900036127426525;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.38585195568903213;  // std dev = 0.522, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.45806491866277144;  // std dev = 0.222, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21395234232439422;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6250336527877418;  // std dev = 0.966, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7235789639359277;  // std dev = 0.205, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.11861078050784818;  // std dev = 0.026, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3215653919566526;  // std dev = 0.082, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.043004776237105934;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3870395235864017;  // std dev = 0.302, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.544986718787942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32754832585028826;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.29470744088381756;  // std dev = 1.009, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.0924842953466276;  // std dev = 4.94e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13789432250984324;  // std dev = 2.567, 62.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   | | | else return 0.03645923979893148;  // std dev = 2.424, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22344314056402592;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.25293113674612006;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.27881518753697876;  // std dev = 0.024, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05157053686628006;  // std dev = 0.103, 148.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=14 */
%   | | else return -0.07391193467245379;  // std dev = 0.068, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26732917839631787;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.12387548273461708;  // std dev = 1.299, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5073288777262368;  // std dev = 0.451, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13139645009138864;  // std dev = 0.034, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21167886914724635;  // std dev = 0.061, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(C, E), follows(C, D) )
%   | | | then return 0.057161038371390936;  // std dev = 1.590, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.21132626666761345;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21904348385352215;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.051512516050213494;  // std dev = 0.134, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3371755693592878;  // std dev = 0.336, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.13363390548590995;  // std dev = 0.030, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05400302892399195;  // std dev = 1.491, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | | | else return 0.08983643596945395;  // std dev = 1.506, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.16012530110667098;  // std dev = 0.993, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.17901116004208062;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18502694611603993;  // std dev = 0.086, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.010596109568474529;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2532132494641334;  // std dev = 0.090, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.28907044201185395;  // std dev = 0.140, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07582239898208379;  // std dev = 0.035, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0069311228354967955;  // std dev = 2.203, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.09812334062025348;  // std dev = 1.457, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16218734745348767;  // std dev = 0.021, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return -0.07000845309379483;  // std dev = 0.463, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.06414817895544231;  // std dev = 0.325, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16066766417257605;  // std dev = 0.157, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.23371311221602642;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07077904721996206;  // std dev = 0.030, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.24672938773256897;  // std dev = 0.967, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.39078373301226804;  // std dev = 0.226, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.13727183540840535;  // std dev = 0.029, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14246899586146908;  // std dev = 0.094, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.06004386135851579;  // std dev = 0.048, 240.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.16104630671680495;  // std dev = 1.098, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10229362914704349;  // std dev = 1.83e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.00977017024253486;  // std dev = 0.420, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.0064295072457460035;  // std dev = 0.560, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2877120342895769;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.012697948967088334;  // std dev = 1.172, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.045787848774722105;  // std dev = 1.181, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.442', 'seconds']
Refined model CLL: -0.105541


******************************************
Best model found
******************************************
Results 

CLL : -0.101298 

AUC ROC : 0.993516 

AUC PR : 0.383334 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 17.749 

Total Inference Time : 12.935964345932007 

Total revision time: 43.106144723892214
Best scored revision CLL: -0.105541


Results 

CLL : -0.101298 

AUC ROC : 0.993516 

AUC PR : 0.383334 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 48.68976574897766 

Total Inference Time : 12.935964345932007 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.13
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8181489350995119;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6798563060126168;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.061432874591131004;  // std dev = 0.231, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06509334918986667;  // std dev = 0.814, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6078406931593369;  // std dev = 0.255, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5749300796393682;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5749300796393682;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06585074422693242;  // std dev = 1.170, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return -0.11874917998783487;  // std dev = 0.000647, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4345323789918305;  // std dev = 1.137, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11131929148277274;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.10697369067568331;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10919687490070101;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3583826814494146;  // std dev = 0.275, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33015862723178385;  // std dev = 1.83e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6625329249969196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08632613373447696;  // std dev = 0.748, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   | | else return -0.09582790909171121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.048524549692998076;  // std dev = 1.342, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.11875111246699681;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6736167254689107;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09016187604086151;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.08835391841649788;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22936267484790615;  // std dev = 1.066, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.08308574327034553;  // std dev = 0.603, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025765982141857532;  // std dev = 0.453, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15729863642752648;  // std dev = 0.972, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, E) )
%   | | then return 0.2115656900091224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03605978913508632;  // std dev = 0.148, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.040121294257726266;  // std dev = 0.594, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.07470028733937434;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21283436410612117;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2176484658954491;  // std dev = 0.242, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0857437147284854;  // std dev = 0.025, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5434350492648261;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07494936956880606;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18277480396161436;  // std dev = 0.331, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.17406453439124847;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08071303487703776;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07386734756257572;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.067238439781669;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return -0.01192427754341335;  // std dev = 0.450, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06640877094919855;  // std dev = 0.000137, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.630', 'seconds']
Parameter learned model CLL:-0.097979 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.98, 1, 24], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.0, 3, 0], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0], 'false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.976, 1, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.231, 47, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.814, 13, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.255, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 5], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [1.17, 31, 2], 'false,false,false,false': [0.000647, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.137, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.012, 31, 0], 'false,true,false,false': [0.0, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.006, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.275, 0, 15], 'true,false': [0.0, 0, 0], 'false,true,true': [1.83e-08, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.748, 53, 1], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.342, 31, 18], 'false,true': [0.926, 1, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.009, 9, 0], 'false,false,false,false': [0.002, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.066, 1, 21], 'true,false': [0.603, 53, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.453, 6, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.972, 1, 19], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 30, 4], 'false,false,false,true': [0.594, 14, 1], 'false,false,false,false': [0.004, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.071, 0, 15], 'false,true,true,true': [0.242, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.025, 47, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.008, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.331, 0, 21], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.008, 30, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true': [0.45, 7, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000137, 6, 0]}]
{'': [0.23864552539640002, 0.13888888888888892], 'true': [0.0384000000000006, 3.700743415417188e-17], 'false': [0.22222222222222224, 0.0], 'false,true': [0.0, 0.0], 'true,false': [3.027880976250427e-17, 0.0], 'false,true,true': [0.0, nan]}
{'': [0.045351473922902584, 0.047372939125915926], 'false': [0.0533833289955119, 0.032375805553976254], 'false,true': [nan, 0.0533833289955119], 'false,false': [-1.982541115402065e-18, 0.04734961562269028], 'false,false,false': [nan, 0.04734961562269028], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [0.004332433929042819, 0.07896776191216691], 'false': [nan, 0.07896776191216684], 'false,false': [0.0, 0.02971208104633077], 'false,false,false': [0.041483674009478014, 2.9910175132287694e-08], 'true': [0.004332433929042819, nan], 'true,true': [0.004332433929042819, nan], 'false,false,true': [4.4408920985006264e-17, -3.700743415417188e-17]}
{'': [0.04971879931105109, 6.608512609509252e-06], 'false': [6.368871969947287e-06, 6.6170760374429744e-06], 'false,false': [nan, 6.6170760374429744e-06], 'false,false,false': [nan, 6.6170760374429744e-06], 'false,true': [nan, 6.3688719699487485e-06], 'false,true,false': [4.32832738652438e-06, 0.0]}
{'': [0.0050300035147758495, 0.035136726976121], 'false': [4.163336342344337e-17, 0.019826717766432387], 'false,false': [0.020177660438050127, 0.0], 'false,false,true': [0.0, 0.010355141001185715], 'true': [0.0050300035147758495, nan], 'false,true': [4.163336342344337e-17, nan]}
{'': [0.03674949362097266, 0.06645804604236413], 'false': [0.12244897959183675, 0.03412204967778336], 'true': [nan, 0.03674949362097266], 'true,false': [nan, 0.03674949362097266], 'false,false': [0.0, 6.004762060163315e-06], 'false,false,false': [8.348828418373095e-06, 5.274360599533586e-07]}
{'': [0.03979987717583834, 0.022803971859956182], 'true': [0.05161276965664345, 0.006727634280709662], 'false': [nan, 0.022803971859956182], 'false,false': [nan, 0.022803971859956182], 'false,false,false': [nan, 0.022803971859956182]}
{'': [0.045100327687700385, 0.02047780449069634], 'true': [0.04721511011473171, 0.0], 'false': [nan, 0.020477804490696336], 'false,false': [0.02196285245535219, 0.017851569955229418], 'false,false,false': [0.02350183440606317, 3.996530822703015e-06], 'true,false': [0.0, nan]}
{'': [0.005017573615327642, 0.01695243418869882], 'false': [0.013474989335898925, 0.03777553407651876], 'false,false': [0.0, 8.665896504831891e-06], 'false,true': [0.006521077583501265, 1.335129131069257e-05], 'false,true,true': [0.006521077583501265, nan], 'false,false,false': [nan, 8.665896504831891e-06]}
{'': [0.01789202152009196, 0.015171268620406117], 'true': [0.00457018111333619, 1.5350622969684113e-05], 'false': [0.025277477720597765, 3.141092468304333e-09], 'true,true': [0.005213580530028549, 0.0], 'true,false': [2.026043424061911e-06, 8.239203443954554e-06], 'true,false,false': [-1.1564823173178713e-18, 0.0], 'false,false': [nan, 3.141092468304333e-09], 'false,false,false': [nan, 3.141092468304333e-09]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
2;false,false;tweets(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(F, A), follows(A, F).;true;true
7;false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 7.726
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.7392070123615109;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.05031264581166803;  // std dev = 1.408, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.055034800966779235;  // std dev = 0.234, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5750887498568714;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7362499631907365;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.09456640064427639;  // std dev = 0.836, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return -0.011552787043957251;  // std dev = 0.755, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11746916095320273;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.14360609334012844;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.43230702413071775;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6307235405728434;  // std dev = 0.167, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return -0.10991560053152741;  // std dev = 0.010, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.1071988215274205;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10770939784937261;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.12311388572332857;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.21964844216391693;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4158752818831147;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.612066397241442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08663606104296427;  // std dev = 0.636, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | | else return -0.10101046103685918;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.28406217962235325;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3196461490618621;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05622152971151087;  // std dev = 0.126, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.03280875070528138;  // std dev = 0.315, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.5629446982516735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08510296831515801;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0957935510357145;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, C), tweets(A, D) )
%   | | | then return 0.23397664321849737;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21445772127858476;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3096189288570469;  // std dev = 0.192, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, D), follows(A, C) )
%   | | then if ( follows(A, F), follows(C, F) )
%   | | | then return -0.08790373021614634;  // std dev = 5.27e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.08790373021614636;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0872008201630924;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.003697394037339511;  // std dev = 0.460, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.09279441604227363;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.18906711500352363;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.17641258947095362;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22220490116931157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.26817942014732626;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0811506464919521;  // std dev = 0.001, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.05588033665199821;  // std dev = 0.079, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.07635804580831533;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.07794961283407431;  // std dev = 0.422, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.08886276130087697;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1636241448714605;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1505989265381864;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17667184614913822;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.23827069832748723;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15222484671248604;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07489677877183391;  // std dev = 0.002, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.40336346758015407;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08509374991067313;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07776878270360746;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1400000964426436;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.18581040117417863;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1336017153445226;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07034362956474076;  // std dev = 0.001, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06777966532649714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06420858982020894;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.07869860778118164;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.03138009951685771;  // std dev = 0.343, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.07004148498582716;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '44.619', 'seconds']
Refined model CLL: -0.096213


******************************************
Best model found
******************************************
Results 

CLL : -0.090067 

AUC ROC : 0.994377 

AUC PR : 0.417589 

Precision : 0.323671 

Recall : 0.858974 

F1 : 0.470175 

Total Learning Time : 7.726 

Total Inference Time : 8.08244800567627 

Total revision time: 19.17759185409546
Best scored revision CLL: -0.096213


Results 

CLL : -0.090067 

AUC ROC : 0.994377 

AUC PR : 0.417589 

Precision : 0.323671 

Recall : 0.858974 

F1 : 0.470175 

Total Learning Time : 24.76121287918091 

Total Inference Time : 8.08244800567627 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.416
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01712181151052668;  // std dev = 0.282, 78.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03736701807903785;  // std dev = 1.661, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5018896161036396;  // std dev = 1.416, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else return 0.7229161107482646;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4125092938891414;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04838791130038849;  // std dev = 2.129, 79.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=7 */
%   | | | else return -0.018821413300487377;  // std dev = 1.522, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4936362057068136;  // std dev = 1.213, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11651746067647967;  // std dev = 0.034, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.12155416434579557;  // std dev = 1.05e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1362917645965008;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26312680497739016;  // std dev = 1.419, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else return 0.43595882826856003;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24624275952547295;  // std dev = 0.979, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6406058046110963;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09278627045797147;  // std dev = 1.125, 94.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=2 */
%   | | else return -0.09689586039593802;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031648918237213844;  // std dev = 2.224, 111.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2735677418656073;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6255358230678556;  // std dev = 0.231, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10245956018091767;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.10828302975190814;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.300490728377087;  // std dev = 0.555, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.08910039715749447;  // std dev = 0.950, 105.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017836926728199587;  // std dev = 0.969, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1752998363438797;  // std dev = 0.991, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( follows(A, E) )
%   | | then return 0.1970227155240739;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03530237391372512;  // std dev = 0.153, 78.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04018465924934464;  // std dev = 0.644, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.007289846076503829;  // std dev = 0.849, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13420029929870256;  // std dev = 0.247, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2449578284611394;  // std dev = 0.451, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08962906421375823;  // std dev = 0.029, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3043239831235235;  // std dev = 0.768, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08804093562988459;  // std dev = 0.055, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19389036151524094;  // std dev = 0.491, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.16223755390185646;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835343032455464;  // std dev = 0.006, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07246971052997632;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then return -0.02613339348696197;  // std dev = 0.550, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0018527275240603491;  // std dev = 0.754, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.658', 'seconds']
Parameter learned model CLL:-0.107283 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.06e-07, 0, 46], 'true,false,true': [7.88e-08, 84, 0], 'true,false,false': [0.0, 6, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.433, 6, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 36], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.282, 68, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.661, 17, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.416, 2, 26], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.926, 1, 6], 'false,false,false,true': [2.129, 72, 7], 'false,false,false,false': [1.522, 21, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.213, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 68, 0], 'false,true,false,false': [1.05e-08, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.06, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.419, 2, 26], 'true,false': [0.0, 0, 1], 'false,true,true': [0.979, 1, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.133, 0, 8], 'false,false,true,false': [1.125, 92, 2], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.224, 74, 37], 'false,true': [0.04, 0, 9], 'false,false,true': [0.231, 0, 4], 'false,false,false,true': [0.047, 9, 0], 'false,false,false,false': [0.057, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.555, 0, 42], 'true,false': [0.95, 103, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.969, 6, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 35], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 68, 10], 'false,false,false,true': [0.644, 20, 2], 'false,false,false,false': [0.849, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.247, 2, 27], 'false,true,true,true': [0.451, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 77, 0], 'false,false,true': [0.768, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.055, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.491, 0, 40], 'true,true,false': [0.0, 0, 6], 'true,false,true': [0.006, 72, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.55, 14, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.754, 9, 2]}]
{'': [0.2238321799307967, 0.12620027434842235], 'true': [9.267948727305654e-16, 7.401486830834377e-17], 'false': [0.09418282548476457, 0.18750000000000003], 'false,true': [0.0, -3.2653618371328133e-18], 'true,false': [7.401486830834377e-17, -6.938893903907228e-18], 'false,true,true': [0.0, nan]}
{'': [-6.908054375445419e-16, 0.08275200086800609], 'false': [0.07979007700136756, 0.08973728717210139], 'false,false': [2.3129646346357427e-18, 0.13137659679300145], 'false,false,false': [nan, 0.13137659679300145], 'false,true': [nan, 0.07979007700136756], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.07073493948852358, 0.09571195867581982], 'false': [nan, 0.09571195867581982], 'false,false': [0.0663265306122447, 0.06667046075391751], 'true': [0.07073493948852358, nan], 'true,true': [0.07157661107447219, 0.0], 'false,false,false': [0.05738252951191286, 0.096572748537028], 'false,false,true': [0.0, 0.12244897959183672]}
{'': [0.0288406711018047, 9.496805022559247e-05], 'false': [1.7746905037402066e-05, 0.00026141771628196815], 'false,false': [nan, 0.00026141771628196815], 'false,false,false': [nan, 0.00026141771628196815], 'false,true': [nan, 1.7746905037402066e-05], 'false,true,false': [1.710995452623301e-05, 6.530723674265627e-18]}
{'': [0.07045182152379947, 0.05973202432879603], 'true': [0.07193792668696752, 0.0], 'false': [0.0684645525699099, 0.04923183401532938], 'false,true': [0.0684645525699099, nan], 'false,false': [0.051467667478926594, 1.3877787807814458e-18], 'false,false,true': [0.0022262604547405584, 0.013473018796156708]}
{'': [0.044552728237625364, 0.06897935110384518], 'false': [0.00017502534557091288, 0.07671657140016164], 'false,false': [0.01337394724070351, 0.00027660598017589246], 'true': [nan, 0.044552728237625225], 'true,false': [nan, 0.044552728237625364], 'false,false,false': [0.00024106575958200086, 0.00029042358345009303]}
{'': [0.039205610605085095, 0.07831705825937511], 'false': [nan, 0.07831705825937511], 'false,false': [nan, 0.07831705825937511], 'false,false,false': [nan, 0.07831705825937511], 'true': [0.007335553554406637, 0.008587563398127317]}
{'': [0.026540786548682603, 0.02662422790439992], 'false': [nan, 0.026624227904399906], 'false,false': [0.023408589554545153, 0.033903099370708074], 'false,false,false': [0.018829537926594638, 0.06007960229970385], 'true': [0.027265277011915095, 0.0], 'true,false': [0.0, nan]}
{'': [0.060949748457785086, 0.02528833760694182], 'false': [0.019897217273680344, 0.04374932675121035], 'false,false': [0.11793030821394009, 0.00013191402815983545], 'false,true': [0.01069673606935394, 1.1013942466941984e-05], 'false,true,true': [0.01069673606935394, nan], 'false,false,false': [nan, 0.00013191402815983545]}
{'': [0.019226402787600762, 0.03245245008947498], 'false': [0.01888045734411507, 0.05172939831643992], 'false,false': [nan, 0.05172939831643992], 'false,false,false': [nan, 0.05172939831643992], 'true': [0.005361488597287486, 1.0308553171813923e-05], 'true,true': [0.006035029248209705, 0.0], 'true,false': [4.6297002754948204e-07, 0.0], 'true,false,false': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true


Refining candidate
***************************
Model training time 7.031
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.6686911912464263;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109543;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5974028569698224;  // std dev = 0.926, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.0012930690825104757;  // std dev = 0.302, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.006956956418613246;  // std dev = 1.194, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.06759200583943209;  // std dev = 1.246, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.5155752242904813;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5583525983252693;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6346521571579472;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2192123561903182;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6075942589838069;  // std dev = 0.122, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11530684341985202;  // std dev = 0.047, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.025471084133926583;  // std dev = 1.209, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.024173838833494613;  // std dev = 1.268, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.39891716434249275;  // std dev = 0.968, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.42051282614750257;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.4347597163297197;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6104230670650058;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8082403612864772;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10132370123955009;  // std dev = 2.79e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.11118534744525668;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, I) )
%   | | then return -0.12342753078251034;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.16329960997556212;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3580018876034174;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.326316016802368;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3633720456747704;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08287444163453082;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then return 0.12383305500574093;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.32005879667584936;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.42269605008619304;  // std dev = 0.375, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08331663954404875;  // std dev = 1.074, 101.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=2 */
%   | | else return -0.092462960063214;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.27208298799922015;  // std dev = 0.011, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3505945768783575;  // std dev = 0.238, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.26552367779663544;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08570493902833654;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.027305841184053298;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.254726583089011;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.42599306037059276;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10606664830730443;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.09694015489829372;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.2272232707664593;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.2094428583280934;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.019162856255666355;  // std dev = 0.828, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2569821283505864;  // std dev = 0.254, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08152219475759183;  // std dev = 0.005, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0744798825558773;  // std dev = 0.411, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03181142108758528;  // std dev = 0.563, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.013883133810257704;  // std dev = 0.535, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.03345901027990453;  // std dev = 0.704, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18661799373486723;  // std dev = 0.015, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06415978749000698;  // std dev = 0.326, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return -0.08633768542816066;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.22936911427285003;  // std dev = 0.220, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0810296726025512;  // std dev = 0.033, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.029559894552499865;  // std dev = 0.456, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.06815060578657621;  // std dev = 0.490, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.111309634868704;  // std dev = 0.510, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.012669144871367555;  // std dev = 0.759, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1641090110642358;  // std dev = 0.000758, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.15128778230518297;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1477320856728315;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.014170254178269382;  // std dev = 0.956, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.16260466645225036;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.02163034067729987;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07124469259859424;  // std dev = 0.005, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.49789103980358107;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11164892441704743;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.11677331581535887;  // std dev = 0.867, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.19811513041688059;  // std dev = 0.190, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.023099343961400724;  // std dev = 0.266, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.06738180948197299;  // std dev = 0.005, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.06469216991327766;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H) )
%   | | then return -0.10356427717786332;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0449729868047767;  // std dev = 0.461, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then return 0.06141025387781618;  // std dev = 0.388, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.023132238955730515;  // std dev = 0.556, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.438', 'seconds']
Refined model CLL: -0.100181


******************************************
Best model found
******************************************
Results 

CLL : -0.096362 

AUC ROC : 0.995424 

AUC PR : 0.476795 

Precision : 0.34279 

Recall : 0.929487 

F1 : 0.500864 

Total Learning Time : 7.031 

Total Inference Time : 7.932155132293701 

Total revision time: 19.973947021484374
Best scored revision CLL: -0.100181


Results 

CLL : -0.096362 

AUC ROC : 0.995424 

AUC PR : 0.476795 

Precision : 0.34279 

Recall : 0.929487 

F1 : 0.500864 

Total Learning Time : 25.557568046569823 

Total Inference Time : 7.932155132293701 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8432235619651843;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.10814893509951232;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7069460510441562;  // std dev = 1.004, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.026138625959393546;  // std dev = 0.273, 111.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13166743038995857;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.040452406886599124;  // std dev = 2.346, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5739598595293763;  // std dev = 0.276, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.727686245670295;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7648308144748697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5621347529031518;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5621347529031518;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04765323627455477;  // std dev = 2.673, 124.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=11 */
%   | | | else return -0.0013221265520336834;  // std dev = 2.136, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48420051360821487;  // std dev = 1.798, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11709009542902749;  // std dev = 0.026, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return -0.12219932927861026;  // std dev = 0.005, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1349667164039829;  // std dev = 0.086, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29705701897594744;  // std dev = 1.041, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.4627962221976488;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24410698835536251;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6486205383458719;  // std dev = 0.177, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08910864482044153;  // std dev = 1.590, 145.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=4 */
%   | | else return -0.10131425675848536;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0270831416003303;  // std dev = 2.661, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27093260060239804;  // std dev = 0.104, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6237456040239066;  // std dev = 0.325, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1115326494966135;  // std dev = 0.077, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.10259319483371013;  // std dev = 0.078, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2769373718327673;  // std dev = 1.255, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.08044379786447067;  // std dev = 1.330, 137.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04245860211526531;  // std dev = 1.256, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16137714020564412;  // std dev = 1.393, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | else if ( follows(A, E) )
%   | | then return 0.23009472581872076;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04570802498013535;  // std dev = 0.143, 126.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03154957986810706;  // std dev = 1.096, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.12416648069592028;  // std dev = 1.073, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16483505083692282;  // std dev = 0.157, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20032939916942533;  // std dev = 1.283, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08894622645078044;  // std dev = 0.050, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44724966923361886;  // std dev = 0.408, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09828329562920268;  // std dev = 0.097, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15930702729658808;  // std dev = 1.477, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return 0.03872183849616441;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08312900372773781;  // std dev = 0.014, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07245550403189993;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.049333952550960736;  // std dev = 0.248, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.005269734549670535;  // std dev = 0.684, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005298111182858854;  // std dev = 0.963, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.580', 'seconds']
Parameter learned model CLL:-0.10704 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.993, 1, 66], 'true,false,true': [5.58e-08, 117, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.433, 12, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 54], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 98, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.346, 33, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.276, 0, 42], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 7], 'false,false,true,false': [3.65e-08, 0, 7], 'false,false,false,true': [2.673, 113, 11], 'false,false,false,false': [2.136, 35, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.798, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 93, 0], 'false,true,false,false': [0.005, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.086, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.041, 1, 42], 'true,false': [0.028, 0, 2], 'false,true,true': [0.966, 1, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 13], 'false,false,true,false': [1.59, 141, 4], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.661, 111, 56], 'false,true': [0.104, 0, 11], 'false,false,true': [0.325, 0, 8], 'false,false,false,true': [0.077, 23, 0], 'false,false,false,false': [0.078, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.255, 1, 64], 'true,false': [1.33, 133, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.256, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.393, 2, 52], 'true,false,true': [0.033, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 113, 13], 'false,false,false,true': [1.096, 20, 4], 'false,false,false,false': [1.073, 7, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 1, 44], 'false,true,true,true': [1.283, 2, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.05, 139, 0], 'false,false,true': [0.408, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.097, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.477, 2, 59], 'true,true,false': [0.935, 1, 7], 'true,false,true': [0.014, 108, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.248, 10, 1], 'false,true': [0.684, 14, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.963, 15, 4]}]
{'': [0.22166944417214016, 0.17632653061224507], 'true': [0.014702606371128416, 0.007352537722908046], 'false': [0.16620498614958432, 0.18749999999999983], 'false,true': [0.0, -1.4802973661668754e-17], 'true,false': [2.6569439905559303e-17, 0.052469135802469175], 'false,true,true': [0.0, nan]}
{'': [0.018327443926132697, 0.08398315949354615], 'false': [0.07434192653620648, 0.10253748875251022], 'false,false': [6.938893903907228e-18, 0.13423626212106562], 'false,false,false': [nan, 0.13423626212106562], 'false,true': [nan, 0.07434192653620648], 'false,false,true': [nan, 6.938893903907228e-18]}
{'': [0.0030389458738724947, 0.09159648012413675], 'false': [nan, 0.09159648012413675], 'false,false': [1.2688263138573217e-16, 0.07137350640292149], 'false,false,false': [0.057630773966643206, 0.11132371113026661], 'true': [0.002312351700464879, 0.0], 'true,true': [0.001817830907380868, 0.0], 'false,false,true': [1.9032394707859825e-16, 1.9032394707859825e-16], 'true,false': [0.0, nan]}
{'': [0.04199238328327743, 0.00010676557453713064], 'false': [1.0170970701577235e-05, 0.0002657371640180888], 'false,false': [nan, 0.0002657371640180888], 'false,false,false': [nan, 0.0002657371640180888], 'false,true': [nan, 1.0170970701577235e-05], 'false,true,false': [7.454361873520325e-06, 1.319156094767293e-06]}
{'': [0.025280733097648344, 0.0617773150054475], 'false': [0.06222222222222221, 0.055390864759266654], 'false,true': [0.06222222222222221, nan], 'false,false': [0.057299859821982733, -2.3129646346357427e-18], 'false,false,true': [0.0024227915043683133, 0.017440274615472692], 'true': [0.02521749855642397, 0.00039165818205355585]}
{'': [0.0423887551927903, 0.0689262051533725], 'false': [0.0009802286549301022, 0.07070470943240996], 'false,false': [0.013218728793082501, 0.0002865087194629412], 'true': [nan, 0.0423887551927901], 'true,false': [nan, 0.0423887551927903], 'false,false,false': [0.00025836961239779897, 0.0002750820203511523]}
{'': [0.0444158279808643, 0.09857732560544237], 'false': [nan, 0.09857732560544237], 'false,false': [nan, 0.09857732560544237], 'false,false,false': [nan, 0.09857732560544237], 'true': [0.024212978478503434, 0.012902683275424041]}
{'': [0.03482918732620029, 0.03237449385417737], 'true': [0.03593032504410744, 0.0005450090335199706], 'false': [nan, 0.0323744938541774], 'false,false': [0.02039052649908554, 0.0724009531335814], 'false,false,false': [0.050034976373512646, 0.10457259655648202], 'true,false': [0.0005450090335199706, nan]}
{'': [0.02450667524275594, 0.028529203554532364], 'false': [0.020868013048847927, 0.06264251364354087], 'false,false': [0.02076712178232548, 0.0004062632693608992], 'false,true': [0.06586852325441173, 1.823946241937241e-05], 'false,true,true': [0.06586852325441173, nan], 'false,false,false': [nan, 0.0004062632693608992]}
{'': [0.028259964512146015, 0.037749134850092854], 'false': [0.026000422224818867, 0.04882516367817334], 'false,false': [nan, 0.04882516367817334], 'false,false,false': [nan, 0.04882516367817334], 'true': [0.04578484480428971, 0.0005854173496120163], 'true,true': [0.03575926388389234, 0.10937500000000001], 'true,false': [1.7387928691367002e-06, 0.003725734489333249], 'true,false,false': [0.0, 0.00556926878067835]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.121
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7257854003080159;  // std dev = 0.134, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.49725118998873197;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05899040981855531;  // std dev = 2.146, 89.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=7 */
%   | | | else return -0.026042514911997782;  // std dev = 1.122, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06064337698947142;  // std dev = 1.494, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.20335509337126145;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5609286967778473;  // std dev = 0.116, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.3053664367462843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.72433460712733;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5770636331778635;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08904424984007697;  // std dev = 1.446, 88.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=3 */
%   | | | else return 0.0017424301775851284;  // std dev = 1.577, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.007906122962820936;  // std dev = 1.549, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.03616141015206504;  // std dev = 2.063, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.38913984082734465;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.48109471560545797;  // std dev = 0.085, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.21905060066758578;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26691447938477125;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7445600322635194;  // std dev = 0.148, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11142053845492456;  // std dev = 0.046, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.12655897907147487;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.16965339681272545;  // std dev = 0.140, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.25535142262720445;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.33707378524113385;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4134058796426472;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3974044995103364;  // std dev = 0.061, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.32949316395666484;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3881610961236867;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5768475504089756;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09157168924629001;  // std dev = 1.424, 151.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=4 */
%   | | else return -0.09382845257217963;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2729716433431646;  // std dev = 0.014, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.045958732248101875;  // std dev = 1.433, 100.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=10 */
%   | | | else return -0.09844166028049924;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.03763416759753916;  // std dev = 0.165, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2944934615265066;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.45868197029062774;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.620450178868313;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11609543219960579;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.10481243574099752;  // std dev = 0.122, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.21933725857006542;  // std dev = 0.007, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, D), follows(D, A) )
%   | | then return 0.26876420724578987;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, E), follows(F, C) )
%   | | | then return 0.209590728042207;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24773313299315078;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.25120354845660714;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.43471069385748495;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09135326153086479;  // std dev = 0.077, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05015649200103537;  // std dev = 0.747, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.021888191275207414;  // std dev = 1.047, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.12380478586387045;  // std dev = 1.673, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return -0.16017195552283456;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1930711254343259;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.23566647447117323;  // std dev = 0.000613, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.052796434468981274;  // std dev = 0.129, 136.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.34024611807227123;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0979464005501675;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21575106761624455;  // std dev = 0.447, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.03386393714519928;  // std dev = 0.874, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.09029569865968962;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.17428905653669258;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.166787559441636;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.03578316821038605;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1138510269124588;  // std dev = 0.954, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.34429229527474686;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08003741873563056;  // std dev = 0.005, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.35631815909548104;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11330125191845017;  // std dev = 0.032, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15434622367205403;  // std dev = 0.011, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20982242559311734;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2712606057252762;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0713731248732742;  // std dev = 0.024, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | then return -0.3362466434902416;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0810976787784343;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.01133515750419315;  // std dev = 0.475, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( tweets(A, K) )
%   | | then return 0.014176476082988039;  // std dev = 0.149, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -5.259823388602474E-4;  // std dev = 0.241, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.671', 'seconds']
Refined model CLL: -0.105894


******************************************
Best model found
******************************************
Results 

CLL : -0.105876 

AUC ROC : 0.995026 

AUC PR : 0.421993 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 6.121 

Total Inference Time : 6.649248838424683 

Total revision time: 19.633317747116088
Best scored revision CLL: -0.105894


Results 

CLL : -0.105876 

AUC ROC : 0.995026 

AUC PR : 0.421993 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 25.216938772201537 

Total Inference Time : 6.649248838424683 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.033
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8465210281227679;  // std dev = 0.994, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.0803711573217346;  // std dev = 0.416, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6960714872156738;  // std dev = 1.405, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.035488921979342676;  // std dev = 0.263, 149.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13166743038995857;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7413433124639606;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.0950885932156994;  // std dev = 2.806, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.56102305089418;  // std dev = 0.898, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.7288840138663533;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3247256682102744;  // std dev = 0.625, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.24394702476458777;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4528877765449049;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.563998887656016;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05177674590203724;  // std dev = 3.152, 176.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=15 */
%   | | | else return -6.956509686503256E-5;  // std dev = 2.474, 57.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4813577811328033;  // std dev = 2.351, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11590570662210728;  // std dev = 0.025, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return -0.12159525214196908;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1451355846144254;  // std dev = 0.093, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3264419451479124;  // std dev = 0.342, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0.479268711699728;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32560022249800535;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6500028466794527;  // std dev = 0.165, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07558790663271463;  // std dev = 2.243, 173.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=8 */
%   | | else return -0.10104696415580063;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027030275587013423;  // std dev = 3.139, 216.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=75 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27382646332687277;  // std dev = 0.215, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5508220696826325;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11153097598400473;  // std dev = 0.062, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.10351281250564022;  // std dev = 0.086, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23620079291891694;  // std dev = 2.244, 90.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=85 */
%   | else return -0.0754681317032254;  // std dev = 1.925, 209.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02642443741637943;  // std dev = 0.587, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17321943700782652;  // std dev = 1.374, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | else if ( follows(A, E) )
%   | | then return 0.28658229751777553;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05405626541849155;  // std dev = 0.144, 178.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.019897197182353114;  // std dev = 1.242, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.09679398012550831;  // std dev = 1.485, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17645353003537784;  // std dev = 0.120, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27906942402493945;  // std dev = 0.632, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08967580698266688;  // std dev = 0.029, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5089289828467484;  // std dev = 0.461, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11178825111989833;  // std dev = 0.096, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14236285929383033;  // std dev = 1.993, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   | | else return 0.00899488720820607;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08291591755038857;  // std dev = 0.017, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08064916606817545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.03233899971204403;  // std dev = 0.312, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 5.681477729146891E-4;  // std dev = 0.973, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0013912587629560152;  // std dev = 1.275, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.481', 'seconds']
Parameter learned model CLL:-0.108781 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 85], 'true,false,true': [0.0, 148, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.943, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.416, 21, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.405, 2, 70], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 133, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.29e-08, 25, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.806, 36, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.898, 1, 58], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.625, 1, 1], 'true,false,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.943, 1, 8], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.152, 161, 15], 'false,false,false,false': [2.474, 49, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.351, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 135, 0], 'false,true,false,false': [0.0, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.093, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.342, 0, 59], 'true,false': [0.145, 0, 3], 'false,true,true': [0.047, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.165, 0, 15], 'false,false,true,false': [2.243, 165, 8], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.139, 141, 75], 'false,true': [0.215, 0, 11], 'false,false,true': [0.973, 1, 14], 'false,false,false,true': [0.062, 18, 0], 'false,false,false,false': [0.086, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.244, 5, 85], 'true,false': [1.925, 201, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.587, 11, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.374, 2, 68], 'true,false,true': [0.094, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 162, 16], 'false,false,false,true': [1.242, 27, 8], 'false,false,false,false': [1.485, 14, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.12, 1, 62], 'false,true,true,true': [0.632, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 146, 0], 'false,false,true': [0.461, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.096, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.993, 4, 78], 'true,true,false': [0.935, 1, 7], 'true,false,true': [0.017, 149, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.312, 6, 1], 'false,true': [0.973, 27, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.275, 24, 6]}]
{'': [0.22480473670949944, 0.17683418435904272], 'true': [0.011492698756084153, 0.005987806648279714], 'false': [0.179930795847751, 0.1728395061728397], 'false,true': [0.09876543209876527, 1.3322676295501878e-17], 'false,true,true': [0.09876543209876527, nan], 'true,false': [-1.0802169969325848e-16, 0.052469135802469175]}
{'': [0.027413247143301414, 0.09062822294345092], 'false': [0.06914886084683078, 0.12983062362867107], 'false,false': [6.661338147750939e-18, 0.1734759692660927], 'false,false,false': [0.0, 0.16399832816615395], 'false,true': [nan, 0.06914886084683078], 'false,false,true': [nan, 6.661338147750939e-18]}
{'': [0.03508198513037159, 0.08629786497255926], 'false': [nan, 0.08629786497255927], 'false,false': [0.05859375, 0.06941945950481278], 'false,false,false': [0.056462203930929246, 0.10740825966023365], 'false,false,true': [0.0987654320987654, 0.0], 'true': [0.013889174538664584, 0.2130645905670983], 'true,false': [0.19541302954225714, 0.2222222222222222], 'true,true': [0.01365496256177564, 0.0]}
{'': [0.05313746820648793, 0.00015692518877473538], 'false': [8.57486623622363e-06, 0.0002888297448432812], 'false,false': [nan, 0.0002888297448432812], 'false,false,false': [nan, 0.0002888297448432812], 'false,true': [nan, 8.57486623622363e-06], 'false,true,false': [4.792706764341666e-06, -2.577303450022685e-17]}
{'': [0.003306650612087412, 0.06660782871471446], 'false': [0.00014767108493061917, 0.06314910795603847], 'false,false': [0.06555273075909279, -1.734723475976807e-18], 'false,false,true': [0.001822253503423236, 0.02907195681394324], 'true': [0.001986270415401549, 0.007048237266700008], 'false,true': [0.00014767108493061917, nan]}
{'': [0.045617050361268806, 0.08878297736815563], 'false': [0.004183185263261608, 0.09705376492000324], 'false,false': [0.06314149576569429, 0.0002674356772020264], 'true': [nan, 0.04561705036126841], 'true,false': [nan, 0.045617050361268806], 'false,false,false': [0.00021488824353738575, 0.000276750921418806]}
{'': [0.04967561118532707, 0.01913447061192509], 'true': [0.055960049676351244, 0.01773067568755084], 'false': [nan, 0.01913447061192509], 'false,false': [nan, 0.01913447061192509], 'false,false,false': [nan, 0.01913447061192509]}
{'': [0.026684487366112754, 0.034056213543754425], 'false': [nan, 0.03405621354375429], 'false,false': [0.020646951199536207, 0.06951843908075864], 'false,false,false': [0.044108581048966485, 0.11022279912829976], 'true': [0.026963260354664956, 0.0044332706833148244], 'true,false': [0.0044332706833148244, nan]}
{'': [0.014392461979902776, 0.03369468101844391], 'false': [0.019773490954111784, 0.08145677154640207], 'false,false': [0.017688137882603188, 0.0002909497494525317], 'false,true': [0.015357998846403277, 5.746465500621083e-06], 'false,true,true': [0.015357998846403277, nan], 'false,false,false': [nan, 0.0002909497494525317]}
{'': [0.03044439847663933, 0.0395781088574914], 'false': [0.02703509514261165, 0.054209557556814295], 'false,false': [nan, 0.054209557556814295], 'false,false,false': [nan, 0.054209557556814295], 'true': [0.055308137967342894, 0.0007075633917851251], 'true,true': [0.048452254072324834, 0.10937499999999999], 'true,false': [2.0142888953489517e-06, 0.008058665580958763], 'true,false,false': [0.0, 0.013888921449461907]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.925
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8268989350995126;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7217852987358758;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1355219509764375;  // std dev = 0.079, 158.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06867525088898598;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then return 0.6831839826129201;  // std dev = 0.202, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.7504242046911876;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7461559834740239;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7232316693457508;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07289827883512241;  // std dev = 2.474, 144.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=9 */
%   | | | else return -0.05260898544469676;  // std dev = 1.143, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1261406423642826;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.42995628564515437;  // std dev = 0.709, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08865591005971506;  // std dev = 2.796, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5499533642991282;  // std dev = 0.989, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.5794780092174576;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5544382011271398;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.4104037008132074;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5766273494069952;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09657607726205254;  // std dev = 1.468, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   | | | else return 0.013269048615909464;  // std dev = 2.227, 52.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.043802204804630054;  // std dev = 1.817, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.2369060806528637;  // std dev = 1.898, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4356009202403464;  // std dev = 0.099, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.26306222470135837;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.433525718074254;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6589366692774078;  // std dev = 1.004, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.7835764899639466;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11114018485398587;  // std dev = 0.063, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.11569825627121748;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.16191242272259193;  // std dev = 0.171, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.3057531979802742;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.3268826955034802;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3407556679591895;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4798278426905993;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3214889450519383;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.33668675662520176;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.525999038979854;  // std dev = 1.030, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.0813860335459148;  // std dev = 1.974, 205.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=8 */
%   | | else return -0.09369094214347794;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26622779405693364;  // std dev = 0.004, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04217422821634592;  // std dev = 1.711, 119.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=12 */
%   | | | else return -0.09768447301089657;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.04508965037108302;  // std dev = 0.144, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.33469268578945743;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2660452236002157;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.07309659200737745;  // std dev = 0.657, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5634965928361543;  // std dev = 0.312, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11319127040264913;  // std dev = 0.028, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, C), tweets(A, D) )
%   | | then return 0.21966525057377148;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.21407896470738183;  // std dev = 0.007, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.2626756524209586;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return 0.2615176485720262;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.304084932717362;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.47220657739216826;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09022243611267772;  // std dev = 0.073, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.016099015286519382;  // std dev = 0.798, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.06329874742104895;  // std dev = 1.429, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.16104545666530387;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return 0.18752194951028398;  // std dev = 0.036, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.1610148588300466;  // std dev = 1.366, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.358354987218757;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08529161604790027;  // std dev = 0.033, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1640748726629193;  // std dev = 0.959, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.11569224500103058;  // std dev = 0.078, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1468398004063559;  // std dev = 0.723, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.004871566886354015;  // std dev = 1.188, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.13430790420599914;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.15424241635114055;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.12984050841676478;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.18848178651639258;  // std dev = 0.147, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.23845245660838693;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.17382066716029615;  // std dev = 0.182, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return -0.07675822386479172;  // std dev = 0.005, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3960184013013621;  // std dev = 0.096, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12033645246500814;  // std dev = 0.026, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.07243966207416883;  // std dev = 0.264, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | | else return 0.1472551230049594;  // std dev = 0.180, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.06881102004889045;  // std dev = 0.029, 150.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.1423049674247382;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22445094526972723;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09179726012753814;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.28134267634548915;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1114434919330479;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06161125954710848;  // std dev = 0.348, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.745', 'seconds']
Refined model CLL: -0.102729


******************************************
Best model found
******************************************
Results 

CLL : -0.099842 

AUC ROC : 0.995573 

AUC PR : 0.462498 

Precision : 0.340708 

Recall : 0.987179 

F1 : 0.506579 

Total Learning Time : 7.925 

Total Inference Time : 8.901068687438965 

Total revision time: 25.294352825164793
Best scored revision CLL: -0.102729


Results 

CLL : -0.099842 

AUC ROC : 0.995573 

AUC PR : 0.462498 

Precision : 0.340708 

Recall : 0.987179 

F1 : 0.506579 

Total Learning Time : 30.877973850250243 

Total Inference Time : 8.901068687438965 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.546
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.13939893509951237;  // std dev = 0.450, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6896923529550962;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04125752126226181;  // std dev = 0.255, 220.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1102370301336752;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.45419287704282874;  // std dev = 1.067, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.08757577303653971;  // std dev = 3.319, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5266398391033086;  // std dev = 2.010, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7314823030371009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8219152548615941;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6705496199404758;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673890334620911;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45627792235098;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04115210573390253;  // std dev = 3.703, 214.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=21 */
%   | | | else return -0.0010378618700924986;  // std dev = 2.886, 77.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5026785373496083;  // std dev = 2.578, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11709581227982573;  // std dev = 0.038, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.12088475367136563;  // std dev = 0.000257, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15113240342794346;  // std dev = 0.130, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3162587576620302;  // std dev = 1.317, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4417539430680112;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2668459036769846;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6418417070625619;  // std dev = 0.194, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0822227074623185;  // std dev = 2.371, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.10537233952145081;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02919247156225662;  // std dev = 3.378, 277.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2774010775766831;  // std dev = 0.091, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5079096243559656;  // std dev = 1.329, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10897082126208112;  // std dev = 0.072, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.11894253439706104;  // std dev = 0.147, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27990945920426563;  // std dev = 1.737, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.0790292823492891;  // std dev = 2.257, 250.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0055424267865242394;  // std dev = 0.760, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17763728935429135;  // std dev = 1.403, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2218135687253187;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03680450531629226;  // std dev = 0.154, 181.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.002572833932430801;  // std dev = 1.458, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
%   | | | else return 0.031082808568162028;  // std dev = 2.023, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14800576445026078;  // std dev = 0.204, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2528769537984326;  // std dev = 1.250, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09053082533459633;  // std dev = 0.035, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4739942320333216;  // std dev = 0.638, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10489236605411985;  // std dev = 0.094, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1747504189432084;  // std dev = 1.485, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.159614129407433;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08382235634248404;  // std dev = 0.016, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07857495659439805;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.027046010154820704;  // std dev = 0.471, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.013012312402243825;  // std dev = 1.373, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2657013626375818;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1416696538839543;  // std dev = 1.251, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.707', 'seconds']
Parameter learned model CLL:-0.109381 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 170, 0], 'true,false,false': [0.258, 26, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.45, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 198, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.988, 42, 1], 'false,false,false,true': [1.067, 2, 4], 'false,false,false,false': [3.319, 52, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.01, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.114, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.703, 193, 21], 'false,false,false,false': [2.886, 66, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.578, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 181, 0], 'false,true,false,false': [0.000257, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.13, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.317, 2, 73], 'true,false': [0.114, 0, 4], 'false,true,true': [0.961, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.194, 0, 23], 'false,false,true,false': [2.371, 242, 9], 'false,false,false': [1.86e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.378, 186, 91], 'false,true': [0.091, 0, 13], 'false,false,true': [1.329, 1, 22], 'false,false,false,true': [0.072, 32, 0], 'false,false,false,false': [0.147, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.737, 2, 107], 'true,false': [2.257, 239, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.76, 23, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.403, 2, 80], 'true,false,true': [0.028, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 159, 22], 'false,false,false,true': [1.458, 51, 13], 'false,false,false,false': [2.023, 24, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 4, 77], 'false,true,true,true': [1.25, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 186, 0], 'false,false,true': [0.638, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.094, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.485, 2, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.016, 163, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.471, 11, 2], 'false,true': [1.373, 35, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.251, 10, 8]}]
{'': [0.226448387413001, 0.2049164946519049], 'true': [0.01868480725623786, 0.009998979695949227], 'false': [0.20701963117192096, 0.2021484375000001], 'false,true': [0.07100591715976314, 2.3790493384824782e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.750233944703188e-16, 0.06632653061224494]}
{'': [0.03440579766615206, 0.08885079269360859], 'false': [0.06505355350328013, 0.12951905767053745], 'false,false': [0.022714981070849155, 0.17195234965840417], 'false,false,false': [0.18981429160438087, 0.15964648923927915], 'false,true': [nan, 0.06505355350328013], 'false,false,true': [nan, 0.022714981070849155]}
{'': [0.053508772585667004, 0.09080852927034204], 'false': [nan, 0.09080852927034208], 'false,false': [0.05246913580246915, 0.0760441268589861], 'false,false,false': [0.06407081409028265, 0.10813724345031649], 'true': [0.054401117374085005, 0.008351224000768894], 'true,true': [0.05457679514179705, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.09876543209876537], 'true,false': [0.0032303530946962145, 0.0032744743087806394]}
{'': [0.05112176165587746, 0.0002194743778936138], 'false': [8.711971405805468e-06, 0.00042047654859801996], 'false,false': [nan, 0.00042047654859801996], 'false,false,false': [nan, 0.00042047654859801996], 'false,true': [nan, 8.711971405807515e-06], 'false,true,false': [8.062721406106332e-06, 1.8325636162873513e-09]}
{'': [0.02288568131000756, 0.06229834888301352], 'false': [0.051268295534336254, 0.05796856174146798], 'false,false': [0.06096495071782542, 3.469446951953614e-18], 'false,false,true': [0.0016367002989283246, 0.022393398991750225], 'false,true': [0.051268295534336254, nan], 'true': [0.023136605906388656, 0.003229223393607622]}
{'': [0.04120270698301896, 0.08122609436445094], 'false': [0.0006334966688458147, 0.08409529286621706], 'false,false': [0.07679780369016517, 0.0003552482161288371], 'true': [nan, 0.041202706983019144], 'true,false': [nan, 0.04120270698301896], 'false,false,false': [0.00016276540256399824, 0.000441668290257586]}
{'': [0.049839237663240894, 0.01862057756852515], 'true': [0.027695793675923144, 0.020376132443668867], 'false': [nan, 0.01862057756852515], 'false,false': [nan, 0.01862057756852515], 'false,false,false': [nan, 0.01862057756852515]}
{'': [0.02347258794775869, 0.03840608258136367], 'false': [nan, 0.03840608258136404], 'false,false': [0.023759059075551626, 0.0643784531299307], 'false,false,false': [0.033216377949486654, 0.12406664292107805], 'true': [0.023988898316264606, 0.0003987845051653949], 'true,false': [0.0003987845051653949, nan]}
{'': [0.04177780119918143, 0.03631385982172386], 'false': [0.022233124728264785, 0.08441275570601514], 'false,false': [0.023940801897986124, 0.00027593446103536985], 'false,true': [0.047350557683574115, 6.697341692725441e-06], 'false,true,true': [0.047350557683574115, nan], 'false,false,false': [nan, 0.00027593446103536985]}
{'': [0.022839472539393425, 0.05783468723679296], 'false': [0.040123187655356045, 0.08314027637610773], 'false,false': [0.0, 0.08694950352573298], 'false,false,false': [nan, 0.08694950352573298], 'true': [0.021027577649756685, 0.001344919997610931], 'true,true': [0.022979044126532552, 2.465735124607127e-06], 'true,false': [1.4870877056100707e-06, 0.007802768507310182], 'true,false,false': [-3.854941057726238e-18, 0.017064854025733586]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.606
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.6977342817761725;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.43375912649666887;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.5750968065965547;  // std dev = 0.945, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.7343334529124658;  // std dev = 0.126, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3416712651140009;  // std dev = 1.140, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.0708352544632876;  // std dev = 0.210, 227.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23031033020396494;  // std dev = 1.818, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.11299587904302166;  // std dev = 2.372, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5647081475826773;  // std dev = 0.147, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.40883688242250177;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.6456974405060061;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6713037387977415;  // std dev = 0.231, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5629895137086519;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7335455370723027;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11856908166083427;  // std dev = 0.053, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12914563159287573;  // std dev = 2.032, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return 0.09259499570694736;  // std dev = 2.244, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42525495333056984;  // std dev = 0.128, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.2648481694874219;  // std dev = 1.820, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4227036883095458;  // std dev = 0.054, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5592321440374192;  // std dev = 0.139, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5040383313035022;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6447534839798316;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7411234545688673;  // std dev = 0.196, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.10689716819910243;  // std dev = 0.004, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.17575366926739347;  // std dev = 0.111, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.3226090223359343;  // std dev = 0.127, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.3724085760061186;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.21779100829697462;  // std dev = 0.919, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.32634148010461594;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.016482792818902015;  // std dev = 1.201, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32476516345298373;  // std dev = 0.039, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45039970448799177;  // std dev = 0.132, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08073772554507318;  // std dev = 2.064, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.09637631068376723;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26893980958798325;  // std dev = 0.021, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.17172556057736488;  // std dev = 0.290, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.21269454300043183;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.08957051196465039;  // std dev = 2.58e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.04135758266009433;  // std dev = 0.137, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27102608506161674;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.05391691165617128;  // std dev = 1.137, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.49575070807985105;  // std dev = 0.519, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12319436967466398;  // std dev = 0.027, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.22761385687424013;  // std dev = 0.031, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.14920383016759314;  // std dev = 0.262, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.3726214263115003;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.21301054213187273;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.09683216687900781;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A), follows(H, A) )
%   | | | then return -0.07932005392133959;  // std dev = 0.857, 133.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=3 */
%   | | | else return -0.03223242120613195;  // std dev = 1.564, 119.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=20 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08017492558044083;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0746787978319956;  // std dev = 1.518, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.14902269370211985;  // std dev = 1.346, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.03716415218778092;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19145150729754243;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.22709382357094088;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.048180623085079775;  // std dev = 0.124, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.283603811673623;  // std dev = 0.246, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11943705833627845;  // std dev = 0.003, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08247772185470574;  // std dev = 0.486, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1327534951528462;  // std dev = 1.252, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14681737251494573;  // std dev = 0.131, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.21109526890643968;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.054370895610137276;  // std dev = 0.927, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.170299821079876;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.0984178857339415;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.033029793155731166;  // std dev = 0.110, 232.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.1639411795013578;  // std dev = 0.912, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4148102874520672;  // std dev = 0.329, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1287353657590067;  // std dev = 0.030, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11545599162400276;  // std dev = 1.635, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.2662730308996856;  // std dev = 0.346, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.16927222805554104;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06987710659467583;  // std dev = 0.032, 198.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12140332633050795;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.01211556664031368;  // std dev = 0.143, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.1791262639656831;  // std dev = 0.764, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.018666119317723162;  // std dev = 0.397, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0975767030537833;  // std dev = 0.923, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.504', 'seconds']
Refined model CLL: -0.10609


******************************************
Best model found
******************************************
Results 

CLL : -0.10602 

AUC ROC : 0.99484 

AUC PR : 0.383292 

Precision : 0.34292 

Recall : 0.99359 

F1 : 0.509868 

Total Learning Time : 16.606 

Total Inference Time : 13.183315515518188 

Total revision time: 40.51710157585144
Best scored revision CLL: -0.10609


Results 

CLL : -0.10602 

AUC ROC : 0.99484 

AUC PR : 0.383292 

Precision : 0.34292 

Recall : 0.99359 

F1 : 0.509868 

Total Learning Time : 46.10072260093689 

Total Inference Time : 13.183315515518188 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.262
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05197350368149175;  // std dev = 0.238, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07609994971105341;  // std dev = 2.360, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06070297411042033;  // std dev = 1.619, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | | else return 0.13004274959579068;  // std dev = 2.118, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5097933626756431;  // std dev = 1.436, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11554155373542797;  // std dev = 0.020, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.13586744592954156;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17171188478404173;  // std dev = 0.166, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30094915547747514;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33813595045057343;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6617978508622911;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10165982970816097;  // std dev = 0.731, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | else return 0.135783770907542;  // std dev = 0.379, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025612426671340862;  // std dev = 1.382, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.033676605316632635;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5501072949903251;  // std dev = 0.397, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12965133987426716;  // std dev = 0.131, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.14363965696252523;  // std dev = 0.099, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2767111185604867;  // std dev = 0.410, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.08948939716498734;  // std dev = 0.598, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07350647136294289;  // std dev = 1.138, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19914000718189628;  // std dev = 0.118, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.06656616369219734;  // std dev = 0.109, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.04268134297040451;  // std dev = 0.695, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.06366970167938776;  // std dev = 1.233, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15958614109201524;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28378081012622575;  // std dev = 0.277, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09019872658342759;  // std dev = 0.067, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41296365935041734;  // std dev = 0.285, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13196866096162319;  // std dev = 0.209, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16083255769225915;  // std dev = 0.278, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2298421791624329;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07682563273965266;  // std dev = 0.013, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10816178446214444;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09293800668143933;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return -0.058359548513902425;  // std dev = 0.943, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1395541936471303;  // std dev = 0.749, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.149', 'seconds']
Parameter learned model CLL:-0.110567 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [3.94e-08, 38, 0], 'true,false,false': [0.0, 13, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.484, 10, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.238, 21, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.771, 5, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.36, 25, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.816, 1, 2], 'false,false,false,true': [1.619, 48, 4], 'false,false,false,false': [2.118, 17, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.436, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.02, 32, 0], 'false,true,false,false': [0.01, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.166, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [0.074, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.099, 0, 6], 'false,false,true,false': [0.731, 55, 1], 'false,false,false': [0.379, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.382, 32, 18], 'false,true': [0.849, 1, 3], 'false,false,true': [0.397, 0, 10], 'false,false,false,true': [0.131, 17, 0], 'false,false,false,false': [0.099, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.41, 0, 24], 'true,false': [0.598, 52, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.138, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.118, 0, 19], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.109, 36, 2], 'false,false,false,true': [0.695, 20, 3], 'false,false,false,false': [1.233, 12, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.008, 0, 16], 'false,true,true,true': [0.277, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 33, 0], 'false,false,true': [0.285, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.209, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.278, 0, 19], 'true,true,false': [0.093, 0, 3], 'true,false,true': [0.013, 30, 0], 'true,false,false,true': [0.036, 10, 0], 'true,false,false,false': [0.046, 5, 0], 'false,true': [0.943, 9, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.749, 4, 6]}]
{'': [0.21054606868080405, 0.23818525519848777], 'false': [0.24489795918367335, 0.23437500000000006], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [1.6148698540002277e-16, 5.659960517696876e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [4.0902953538821554e-17, -1.2810265668751807e-17]}
{'': [1.8698493046318425e-16, 0.1296615450793885], 'false': [0.0566790803847587, 0.16496805474871254], 'false,false': [0.09915090450905223, 0.17563128345784892], 'false,false,false': [0.0, 0.16877904908471716], 'false,false,true': [nan, 0.09915090450905223], 'false,true': [nan, 0.0566790803847587]}
{'': [-2.220446049250313e-16, 0.11234830053386449], 'false': [nan, 0.11234830053386469], 'false,false': [0.16, 0.10139740808207805], 'false,false,true': [0.0, 0.22222222222222224], 'false,false,false': [0.050432350218916344, 0.18692743146320825], 'true': [-2.3684757858670006e-16, 0.0], 'true,false': [nan, 0.0], 'true,true': [-2.3684757858670006e-16, nan]}
{'': [0.06445732468016746, 0.0010748984317894938], 'false': [8.695719204783392e-05, 0.0014446064900103602], 'false,false': [nan, 0.0014446064900103602], 'false,false,false': [nan, 0.0014446064900103602], 'false,true': [nan, 8.695719204783656e-05], 'false,true,false': [1.2545822293128644e-05, 1.029879927300914e-05]}
{'': [0.0, 0.0786532955075967], 'false': [0.00138285772037125, 0.07692314306230381], 'false,false': [0.05971894841944394, 0.14339758587089413], 'false,false,true': [0.001619508230584395, 0.009537343598838854], 'false,true': [0.00138285772037125, nan], 'true': [0.0, nan]}
{'': [0.03822570826634369, 0.10078171809272053], 'false': [0.18016189578215108, 0.09284331247527672], 'false,false': [0.01577847742798788, 0.000944240790756475], 'true': [nan, 0.038225708266343666], 'true,false': [nan, 0.03822570826634369], 'false,false,false': [0.0010047662827964007, 0.0007542106952516328]}
{'': [0.03560594118239656, 0.07619021405207589], 'false': [nan, 0.0761902140520759], 'false,false': [nan, 0.07619021405207589], 'false,false,false': [nan, 0.07619021405207589], 'true': [0.007015607888608277, 0.006754226355180084]}
{'': [0.000733979566143616, 0.0334810285026806], 'false': [nan, 0.03348102850268068], 'false,false': [0.011962292956087703, 0.050488233737349765], 'false,false,false': [0.021017797230363577, 0.07996910295123201], 'true': [0.000733979566143616, nan]}
{'': [7.084820781502396e-05, 0.03870100550977515], 'false': [0.0222284146260275, 0.058328365886983216], 'false,false': [0.010175292504407046, 0.0017491714977313766], 'false,true': [0.010986762689803666, 0.00013738603240983773], 'false,true,true': [0.010986762689803666, nan], 'false,false,false': [nan, 0.0017491714977313766]}
{'': [0.01606814438151085, 0.07560690314360957], 'false': [0.074098284566067, 0.05605187307146957], 'false,false': [nan, 0.05605187307146957], 'false,false,false': [nan, 0.05605187307146957], 'true': [0.004466346923169728, 0.0002506905211456578], 'true,true': [0.00406762244298101, 0.0028786824528341803], 'true,false': [5.3841411152416585e-06, 0.0002815236226185347], 'true,false,false': [0.00012905668273016646, 0.00043194856245107186]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.915
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.06509334918986667;  // std dev = 0.218, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.1395429975520872;  // std dev = 0.148, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.16475635931161878;  // std dev = 2.071, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11607480713771266;  // std dev = 0.017, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.024701595105920744;  // std dev = 1.368, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.013378867938065303;  // std dev = 1.493, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.15679551324683297;  // std dev = 1.512, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.4175135841583098;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08248641584169003;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.6933423019849768;  // std dev = 0.079, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7385796009208088;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.1081349378317842;  // std dev = 0.008, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.1252359740560849;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, I) )
%   | | then return -0.14632556791832554;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.24595579066113685;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3419823936836022;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.12071184716014967;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5396502225740142;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09703640240672237;  // std dev = 0.595, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.09932306406335129;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.19562384574705494;  // std dev = 1.078, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.2511506703598197;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2752754089389247;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then return -0.03109792478973737;  // std dev = 0.170, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.1433540530901372;  // std dev = 0.316, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29500171186533664;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3790429526910076;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5228493145484169;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11417189134340168;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.14615712344054865;  // std dev = 0.308, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.20691284874201749;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2529826843267698;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3734503670029607;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09293841400070359;  // std dev = 0.010, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20644486784533686;  // std dev = 9.13e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2997854702245595;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.07632725539294026;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10890311391229295;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.10951741140189217;  // std dev = 0.292, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.03214995060353692;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.17500709346067977;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21285354191546269;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18376840392434804;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then return -0.05365616571039202;  // std dev = 0.105, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2430307787633518;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09869560162201392;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07188005841340396;  // std dev = 0.414, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08003171995308785;  // std dev = 0.760, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10430924260207208;  // std dev = 0.234, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.17148156675163043;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3636709115466541;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07568519702506449;  // std dev = 0.033, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.08469612701963818;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.22368571053900296;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3713796365523361;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.09363697555395356;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.21390563781819888;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.15019799523527488;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.046637924576734435;  // std dev = 0.646, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.22064097291169477;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18826898349635543;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07159816828045575;  // std dev = 0.003, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.0665003569836973;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.1768757642333985;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08736733028834708;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.003501349050763125;  // std dev = 0.227, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.399', 'seconds']
Refined model CLL: -0.098122


******************************************
Best model found
******************************************
Results 

CLL : -0.095351 

AUC ROC : 0.994042 

AUC PR : 0.434599 

Precision : 0.348083 

Recall : 0.936508 

F1 : 0.507527 

Total Learning Time : 3.915 

Total Inference Time : 3.860736131668091 

Total revision time: 11.662557556152343
Best scored revision CLL: -0.098122


Results 

CLL : -0.095351 

AUC ROC : 0.994042 

AUC PR : 0.434599 

Precision : 0.348083 

Recall : 0.936508 

F1 : 0.507527 

Total Learning Time : 11.680554344177246 

Total Inference Time : 3.860736131668091 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.585
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.25814893509951237;  // std dev = 0.490, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6931576227372707;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.050893045816096175;  // std dev = 0.240, 68.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07850474682064995;  // std dev = 0.821, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7716035333475302;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11401356036782165;  // std dev = 3.204, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5404209966057941;  // std dev = 0.841, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.613016907703916;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5618548863897908;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5618548863897908;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04248847149952262;  // std dev = 2.517, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | | else return 0.12703314213575684;  // std dev = 2.796, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5288355107476912;  // std dev = 1.661, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11541158918509542;  // std dev = 0.028, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.1336862580279744;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17551740001514007;  // std dev = 0.273, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31335236199454114;  // std dev = 0.201, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30111436896016563;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6374464928613987;  // std dev = 0.158, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10330295253452278;  // std dev = 1.087, 102.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=2 */
%   | | else return 0.02835577486478395;  // std dev = 0.312, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.047309199224132015;  // std dev = 1.922, 90.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2417495762497625;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4248693152306342;  // std dev = 1.584, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12709030284062225;  // std dev = 0.199, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.13298242306976937;  // std dev = 0.167, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2861079571970613;  // std dev = 0.634, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return -0.09786119537831496;  // std dev = 0.967, 130.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028815956370743773;  // std dev = 1.437, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18585296679896715;  // std dev = 0.052, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05433755421207154;  // std dev = 0.128, 74.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.03822288540133469;  // std dev = 0.907, 44.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=6 */
%   | | | else return 0.07125447149609766;  // std dev = 1.751, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11202700047614919;  // std dev = 0.219, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26315694716517285;  // std dev = 0.474, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08940275814518406;  // std dev = 0.066, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40845978451323034;  // std dev = 0.492, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12941825602624565;  // std dev = 0.232, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12666064686378298;  // std dev = 1.361, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0.17227074620603655;  // std dev = 0.239, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08097693854425314;  // std dev = 0.031, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08758155499281843;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07929710316802963;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, G) )
%   | then return 0.02044878819027805;  // std dev = 0.656, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17090654514988268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06539505921050932;  // std dev = 1.302, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.693', 'seconds']
Parameter learned model CLL:-0.110005 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [5.96e-08, 57, 0], 'true,false,false': [0.0, 16, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.49, 18, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.987, 1, 37], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.24, 62, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.821, 17, 1], 'false,false,false,true': [0.074, 0, 2], 'false,false,false,false': [3.204, 41, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.841, 1, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.1, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.517, 92, 10], 'false,false,false,false': [2.796, 28, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.661, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 62, 0], 'false,true,false,false': [0.004, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.273, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.201, 0, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.158, 0, 15], 'false,false,true,false': [1.087, 100, 2], 'false,false,false': [0.312, 21, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.922, 54, 36], 'false,true': [0.0, 0, 7], 'false,false,true': [1.584, 2, 19], 'false,false,false,true': [0.199, 36, 0], 'false,false,false,false': [0.167, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.634, 0, 51], 'true,false': [0.967, 128, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.437, 22, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.052, 0, 37], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.128, 68, 6], 'false,false,false,true': [0.907, 38, 6], 'false,false,false,false': [1.751, 22, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 2, 32], 'false,true,true,true': [0.474, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.066, 88, 0], 'false,false,true': [0.492, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.232, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.361, 2, 38], 'true,true,false': [0.239, 0, 6], 'true,false,true': [0.031, 67, 0], 'true,false,false,true': [0.035, 9, 0], 'true,false,false,false': [0.048, 10, 0], 'false,true': [0.656, 13, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.302, 15, 11]}]
{'': [0.23464095258967146, 0.2080085998387525], 'true': [1.2918958832001822e-15, 6.995925908596876e-17], 'false': [0.15608740894901163, 0.23999999999999952], 'false,true': [-1.4802973661668753e-16, 1.3322676295501878e-17], 'true,false': [6.232831015439475e-17, -6.938893903907228e-18], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.025623268698060173, 0.1172248348515445], 'false': [0.057432046418046286, 0.1612290795582798], 'false,false': [0.03745700837008643, 0.1882033474828295], 'false,false,false': [0.002717549529714036, 0.18005316100832294], 'false,true': [nan, 0.057432046418046286], 'false,false,true': [nan, 0.03745700837008643]}
{'': [0.022011023721676775, 0.11550158950444885], 'false': [nan, 0.11550158950444889], 'false,false': [0.0, 0.10548641153383372], 'false,false,false': [0.06209064903939545, 0.19550312065570824], 'true': [0.02279050091151621, 0.004978364989677575], 'true,true': [0.02279050091151621, nan], 'true,false': [nan, 0.004978364989677575], 'false,false,true': [0.0, 0.0]}
{'': [0.04381087581388328, 0.0013606794451199017], 'false': [6.805814829022316e-05, 0.0016180312805446025], 'false,false': [nan, 0.0016180312805446025], 'false,false,false': [nan, 0.0016180312805446025], 'false,true': [nan, 6.805814829021206e-05], 'false,true,false': [1.2386542610641438e-05, 9.941721659153153e-07]}
{'': [0.001258781409930687, 0.07710457398552306], 'false': [-1.3877787807814457e-17, 0.07656117631768322], 'false,false': [0.07163856045167358, 0.09761149624916854], 'false,false,true': [0.0016715930605823103, 0.011580417688491634], 'true': [0.001258781409930687, nan], 'false,true': [-1.3877787807814457e-17, nan]}
{'': [0.041059429554276154, 0.08877664245971902], 'false': [-3.9650822308041306e-17, 0.09256768023206585], 'false,false': [0.11950212080040952, 0.0011729751696822179], 'true': [nan, 0.0410594295542761], 'true,false': [nan, 0.041059429554276154], 'false,false,false': [0.0011005922192864922, 0.0012698714646954166]}
{'': [0.037231424414895416, 0.0666117804476139], 'false': [nan, 0.06661178044761383], 'false,false': [nan, 0.0666117804476139], 'false,false,false': [nan, 0.0666117804476139], 'true': [0.007892913030714887, 0.007199447467555759]}
{'': [7.371567272192743e-05, 0.03591166563653939], 'false': [nan, 0.035911665636539275], 'false,false': [0.016400540565793348, 0.05216843735480921], 'false,false,false': [0.01870295439278308, 0.08756397789701574], 'true': [7.371567272192743e-05, nan]}
{'': [0.04790878100499111, 0.0352945452615419], 'false': [0.016960047687011603, 0.06732168269527024], 'false,false': [0.015137160279773187, 0.0014954848474133036], 'false,true': [0.016019846851054516, 4.906782489519494e-05], 'false,true,true': [0.016019846851054516, nan], 'false,false,false': [nan, 0.0014954848474133036]}
{'': [0.024998463255595474, 0.04700556796592252], 'false': [0.022649446486459137, 0.06315924029877347], 'false,false': [0.0, 0.06517612060186947], 'false,false,false': [nan, 0.06517612060186947], 'true': [0.04176652025557011, 5.79711202781108e-05], 'true,true': [0.046337574798645684, 0.009483883160854514], 'true,false': [1.46528197195482e-05, 0.00020680076961602554], 'true,false,false': [0.00013934052618157377, 0.00023500502668939992]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.6
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.7518526675222027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7275682260387666;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.46947341221095434;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.24420700867007258;  // std dev = 1.677, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.37685619687251026;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.6129926731074506;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.588232901061704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.003078856684895922;  // std dev = 1.501, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.061079511920186624;  // std dev = 1.421, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.25770028534173217;  // std dev = 2.128, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), recursion_accounttype(D, B) )
%   | | | then return 0.3830308255376204;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.21058087709678408;  // std dev = 0.490, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42993947169979474;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5600647110599889;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.5867603747285738;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.69108296412097;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.10641110175896434;  // std dev = 0.005, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( tweets(A, J) )
%   | | then return -0.11855180514839231;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.23045996378476485;  // std dev = 0.049, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.20327009349140723;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.3282700934914071;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.34124759978944846;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.333411863717197;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32920597248291283;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.445158627062891;  // std dev = 0.085, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09311276420795057;  // std dev = 0.868, 96.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.096529960419129;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.1024756942719353;  // std dev = 1.269, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2749699995269982;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.0654095929081903;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2702349424793572;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05139914559701508;  // std dev = 0.113, 65.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=6 */
%   | | else return -0.08904722364699992;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2623906663247774;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.08949830054068493;  // std dev = 1.293, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.42603989906633066;  // std dev = 0.323, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12718735388793806;  // std dev = 0.058, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.23034264699235393;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.02187714927471396;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21880358152371174;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22358631043828647;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then return -0.0629025187476399;  // std dev = 0.150, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3316866470357995;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08745858411777092;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0054027752058417615;  // std dev = 0.833, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return -0.018257338570062065;  // std dev = 1.204, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.19443964231416946;  // std dev = 0.020, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.17955726725927187;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0605866828913348;  // std dev = 0.655, 63.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=3 */
%   | | | else return -0.12091287537397966;  // std dev = 0.527, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.336324313817473;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08363646578797194;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.07091995727441709;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.03132662809062691;  // std dev = 1.311, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return -8.212758081510805E-4;  // std dev = 1.334, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1650524241734214;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.15655966220991507;  // std dev = 1.038, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15887126493335912;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.30745201261372207;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07358078656368104;  // std dev = 0.005, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.22970658758324028;  // std dev = 0.815, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.4231410940562398;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.07954688308076098;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.18933725987009117;  // std dev = 0.182, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.07772857910626312;  // std dev = 0.280, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | else return 0.1506080863908856;  // std dev = 0.040, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.06790983026123522;  // std dev = 0.005, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0025314883008815087;  // std dev = 0.126, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.12408694622651958;  // std dev = 0.720, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.079650087065401;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.2536806802748317;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.02167052045530844;  // std dev = 0.796, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 8.876552954054096E-4;  // std dev = 1.002, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.089', 'seconds']
Refined model CLL: -0.098778


******************************************
Best model found
******************************************
Results 

CLL : -0.098136 

AUC ROC : 0.99419 

AUC PR : 0.442605 

Precision : 0.343407 

Recall : 0.992063 

F1 : 0.510204 

Total Learning Time : 6.6 

Total Inference Time : 5.670369625091553 

Total revision time: 18.636830863952635
Best scored revision CLL: -0.098778


Results 

CLL : -0.098136 

AUC ROC : 0.99419 

AUC PR : 0.442605 

Precision : 0.343407 

Recall : 0.992063 

F1 : 0.510204 

Total Learning Time : 18.654827651977538 

Total Inference Time : 5.670369625091553 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.011
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.1418510649004877;  // std dev = 4.93e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.2137044906550679;  // std dev = 0.479, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06688596174447647;  // std dev = 0.215, 101.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09728070350374654;  // std dev = 0.831, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5745081032099264;  // std dev = 0.836, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12995276698576014;  // std dev = 3.906, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5039543413615658;  // std dev = 1.616, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6427920248978556;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462844;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05058752603897095;  // std dev = 3.050, 161.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=14 */
%   | | | else return 0.04764140553061042;  // std dev = 3.447, 73.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5075425592030414;  // std dev = 2.334, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11231588180446157;  // std dev = 0.013, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.12303907307960074;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16711787297670336;  // std dev = 0.230, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31253300250331717;  // std dev = 0.658, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3014228887680015;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6589558467191209;  // std dev = 0.198, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1030296993605731;  // std dev = 1.119, 154.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=2 */
%   | | else return 0.006089725033786199;  // std dev = 0.305, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03911411591413309;  // std dev = 2.193, 142.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24196174234601434;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5492369953385335;  // std dev = 0.744, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11743998485581791;  // std dev = 0.168, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.12443647092279654;  // std dev = 0.214, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26161677683910567;  // std dev = 1.374, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else return -0.09643050133462348;  // std dev = 0.959, 176.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10637744881853343;  // std dev = 1.745, 43.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17622706262335572;  // std dev = 0.971, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.060928818614614376;  // std dev = 0.114, 115.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.02952806850859517;  // std dev = 1.316, 75.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=12 */
%   | | | else return 0.06487919221971979;  // std dev = 1.990, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1578686423860067;  // std dev = 0.146, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23410632751238722;  // std dev = 0.541, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08623146641911444;  // std dev = 0.077, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4097415819323967;  // std dev = 0.580, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12089451063143983;  // std dev = 0.242, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14058480628447964;  // std dev = 1.398, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | else return 0.14973818635793193;  // std dev = 0.244, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.07841293698283612;  // std dev = 0.024, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08754673153330012;  // std dev = 0.035, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.0724644363521892;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, G) )
%   | then return 0.05352772179001025;  // std dev = 0.914, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18472130422013444;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08549919444305192;  // std dev = 1.440, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.846', 'seconds']
Parameter learned model CLL:-0.108835 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 65], 'true,false,true': [8.69e-08, 102, 0], 'true,false,false': [4.93e-09, 28, 0], 'false,true,true,true': [0.953, 1, 10], 'false,true,true,false': [0.816, 1, 2], 'false,true,false': [3.49e-08, 35, 0], 'false,false': [0.479, 29, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 57], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.215, 94, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.831, 29, 1], 'false,false,false,true': [0.836, 1, 4], 'false,false,false,false': [3.906, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.616, 3, 45], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.105, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 10], 'false,false,false,true': [3.05, 147, 14], 'false,false,false,false': [3.447, 57, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.334, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.013, 102, 0], 'false,true,false,false': [0.004, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.658, 1, 49], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.198, 0, 19], 'false,false,true,false': [1.119, 152, 2], 'false,false,false': [0.305, 46, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.193, 91, 51], 'false,true': [2.11e-08, 0, 13], 'false,false,true': [0.744, 0, 29], 'false,false,false,true': [0.168, 53, 0], 'false,false,false,false': [0.214, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.374, 2, 72], 'true,false': [0.959, 174, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.745, 24, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.971, 1, 57], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.114, 108, 7], 'false,false,false,true': [1.316, 63, 12], 'false,false,false,false': [1.99, 33, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.146, 1, 49], 'false,true,true,true': [0.541, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.077, 129, 0], 'false,false,true': [0.58, 0, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.242, 57, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.398, 2, 53], 'true,true,false': [0.244, 0, 12], 'true,false,true': [0.024, 96, 0], 'true,false,false,true': [0.035, 25, 0], 'true,false,false,false': [0.032, 15, 0], 'false,true': [0.914, 16, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.44, 18, 15]}]
{'': [0.22222222222222238, 0.20914440923494917], 'true': [-8.745141363201234e-16, -3.75767792950053e-17], 'false': [0.18492294877134477, 0.2291358024691353], 'false,true': [0.1224489795918365, 3.489272363107635e-17], 'false,true,true': [0.0826446280991734, 0.22222222222222224], 'true,false': [7.401486830834377e-17, 2.3790493384824782e-17]}
{'': [-1.8698493046318425e-16, 0.11469235843274121], 'false': [0.04604816441545797, 0.16244602340852896], 'false,false': [0.023003009846100136, 0.19414544762738395], 'false,false,false': [0.13982541501193219, 0.18609963054466883], 'false,true': [nan, 0.04604816441545797], 'false,false,true': [nan, 0.023003009846100136]}
{'': [0.05182392551645469, 0.1049943699156941], 'false': [nan, 0.10499436991569386], 'false,false': [-2.5376526277146434e-16, 0.09259164627381893], 'false,false,false': [0.05777666982007837, 0.16273657256646326], 'true': [0.054431926098086225, 0.0027347778879019957], 'true,true': [0.054431926098086225, nan], 'true,false': [nan, 0.0027347778879019957], 'false,false,true': [0.0, -1.3322676295501878e-16]}
{'': [0.05614414127187221, 0.0009077785072386507], 'false': [1.790118526342919e-05, 0.0009589259980678348], 'false,false': [nan, 0.0009589259980678348], 'false,false,false': [nan, 0.0009589259980678348], 'false,true': [nan, 1.790118526342919e-05], 'false,true,false': [1.7675289869795054e-06, 9.0972547963007e-07]}
{'': [0.008664370440447176, 0.072608169366913], 'false': [-3.172065784643304e-17, 0.0713397127452847], 'false,false': [0.06423189337515463, 0.09320622755101698], 'false,false,true': [0.0020730815808978065, 0.008133106610826677], 'true': [0.008664370440447176, nan], 'false,true': [-3.172065784643304e-17, nan]}
{'': [0.033874241377005294, 0.0799209674256476], 'false': [3.416070845000482e-17, 0.08402059095066104], 'false,false': [0.019075189266097033, 0.0007681656315612147], 'true': [nan, 0.03387424137700505], 'true,false': [nan, 0.033874241377005294], 'false,false,false': [0.0005310754169828563, 0.0010209318164352728]}
{'': [0.03794231597274301, 0.07082531458162955], 'false': [nan, 0.07082531458162955], 'false,false': [nan, 0.07082531458162955], 'false,false,false': [nan, 0.07082531458162955], 'true': [0.02551645666670727, 0.005220260390490239]}
{'': [0.016246317319157672, 0.03222100122336647], 'false': [nan, 0.032221001223366484], 'false,false': [0.012954145360994398, 0.047654361636317706], 'false,false,false': [0.023077617268169016, 0.07917183966160646], 'true': [0.016246317319157672, nan]}
{'': [0.021403472466165287, 0.03286150133017985], 'false': [0.013928707974222514, 0.06358746319203568], 'false,false': [0.014030578798957194, 0.001023990080397515], 'false,true': [0.014628626650434951, 4.619315267124229e-05], 'false,true,true': [0.014628626650434951, nan], 'false,false,false': [nan, 0.001023990080397515]}
{'': [0.020815505721371384, 0.047366505149562345], 'false': [0.029804410256974743, 0.061279660222308345], 'false,false': [0.0, 0.06284706000331913], 'false,false,false': [nan, 0.06284706000331919], 'true': [0.030072357890088098, 3.877185516084363e-05], 'true,true': [0.03553462217530435, 0.004968201704653424], 'true,false': [5.830693450340624e-06, 0.00010929227344195352], 'true,false,false': [4.81131556399772e-05, 6.908520232223233e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.546
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.838918165868743;  // std dev = 0.137, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.23314893509951234;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7280501151691304;  // std dev = 0.065, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return -0.12544463852839108;  // std dev = 7.74e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.7259207615860118;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839122;  // std dev = 5.16e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.03440472242229574;  // std dev = 2.013, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0.15434672126688948;  // std dev = 3.083, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.563775392309921;  // std dev = 0.072, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.35599731526215467;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.3631764204348454;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5631764204348455;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11231637819360628;  // std dev = 5.16e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.05444610815348563;  // std dev = 1.581, 70.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.09286071012155579;  // std dev = 2.884, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | | else return 0.29938878735916385;  // std dev = 1.909, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.42386700704464236;  // std dev = 0.076, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.2556244825247647;  // std dev = 0.563, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4267902861460122;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5330142159233393;  // std dev = 0.172, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4133804085481628;  // std dev = 0.843, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6778685805322534;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6441368744532993;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7625667248372733;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12179204330835125;  // std dev = 0.034, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3277439259310162;  // std dev = 0.083, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(E, A) )
%   | | then return 0.06855898874404535;  // std dev = 0.615, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.366560695079713;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.3276888433783332;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13902983645200656;  // std dev = 0.705, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.45500900216283374;  // std dev = 0.965, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09357591299547838;  // std dev = 1.036, 148.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06829639527028972;  // std dev = 0.546, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.22915383966662542;  // std dev = 1.419, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.263515886348863;  // std dev = 0.090, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.08925531958455347;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.25682554316310546;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.0568513018704218;  // std dev = 0.104, 87.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=6 */
%   | | else return -0.08569254481610485;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.269393235983005;  // std dev = 0.092, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3854947322005542;  // std dev = 0.248, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5220339639809656;  // std dev = 0.253, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13398156632490238;  // std dev = 0.056, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.2176278097193459;  // std dev = 0.098, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.09971657601142343;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.2555789953190735;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21410927365761728;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07809066930252463;  // std dev = 0.016, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.03937268210762074;  // std dev = 0.996, 61.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.012604458455325056;  // std dev = 1.435, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.047584023569675386;  // std dev = 1.477, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.17582153014516613;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.16018809696684275;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18884587531575947;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.19174518789518832;  // std dev = 0.022, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(F, A) )
%   | then return -0.05786468864349867;  // std dev = 0.106, 138.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.29863771250011784;  // std dev = 0.273, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11483148633029515;  // std dev = 0.176, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0868793129318994;  // std dev = 1.070, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | | else return 0.023499497253956735;  // std dev = 1.187, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1599599016224115;  // std dev = 0.021, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.08437117055491432;  // std dev = 0.279, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16135924959504067;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3691377929175104;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07099269667508779;  // std dev = 0.037, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.28956419111746107;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3653291666201928;  // std dev = 0.279, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.10606708995341901;  // std dev = 0.104, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.2216016764314404;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.15878187661180884;  // std dev = 0.045, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.025208211613652283;  // std dev = 0.305, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return -0.06639796629265224;  // std dev = 0.003, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12182279395300288;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.027171052447509128;  // std dev = 0.686, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
%   | | | else return 0.020960046157004548;  // std dev = 0.427, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.15604775993016273;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.036525812567561364;  // std dev = 0.758, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.06010416060465022;  // std dev = 1.003, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.965', 'seconds']
Refined model CLL: -0.102999


******************************************
Best model found
******************************************
Results 

CLL : -0.097572 

AUC ROC : 0.993246 

AUC PR : 0.353993 

Precision : 0.353623 

Recall : 0.968254 

F1 : 0.518047 

Total Learning Time : 10.546 

Total Inference Time : 7.833272695541382 

Total revision time: 26.937345582962035
Best scored revision CLL: -0.102999


Results 

CLL : -0.097572 

AUC ROC : 0.993246 

AUC PR : 0.353993 

Precision : 0.353623 

Recall : 0.968254 

F1 : 0.518047 

Total Learning Time : 26.955342370986937 

Total Inference Time : 7.833272695541382 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.433
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8466546822259488;  // std dev = 0.994, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.08470820775763062;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.18573514199606403;  // std dev = 0.469, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6704056310098959;  // std dev = 1.955, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.050373440762522016;  // std dev = 0.241, 158.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0641671912299594;  // std dev = 1.508, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.40522828754237067;  // std dev = 1.192, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.07103094085237617;  // std dev = 4.639, 139.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5816016793350841;  // std dev = 0.312, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5702667794818868;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6658019396280096;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6104252945689219;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5702667794818869;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019525784810363832;  // std dev = 3.997, 204.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=25 */
%   | | | else return 0.0478044183370367;  // std dev = 3.850, 99.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5304081462363137;  // std dev = 2.603, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11939239298087896;  // std dev = 0.041, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | | else return -0.12602453835971178;  // std dev = 0.010, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15996218670024054;  // std dev = 0.222, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3036700904320431;  // std dev = 1.076, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24493137345901542;  // std dev = 0.976, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.518359026663934;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6154567310505691;  // std dev = 1.061, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.10078626001056201;  // std dev = 1.602, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   | | else return 0.03763865091152579;  // std dev = 0.324, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031881173143118856;  // std dev = 2.817, 192.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20679791063729625;  // std dev = 0.987, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5605418703907488;  // std dev = 0.827, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12150203611914383;  // std dev = 0.177, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12881741020961596;  // std dev = 0.161, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27621132098508694;  // std dev = 1.647, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else return -0.0925687964805136;  // std dev = 1.500, 211.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.009154703495019224;  // std dev = 2.507, 90.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18113945338735296;  // std dev = 1.002, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else if ( follows(A, E) )
%   | | then return 0.2833511313473098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.046555348868391466;  // std dev = 0.153, 130.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -4.5074752079706507E-4;  // std dev = 1.810, 89.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=19 */
%   | | | else return 0.07241496611348991;  // std dev = 2.202, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13213443288195656;  // std dev = 0.203, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2658545118373342;  // std dev = 1.165, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09103036636349109;  // std dev = 0.072, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4017016302602088;  // std dev = 0.709, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11058529063047445;  // std dev = 0.258, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1825901552806173;  // std dev = 0.629, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.18348307653761092;  // std dev = 0.327, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08178871049394701;  // std dev = 0.023, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09160671969956913;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.015594528068804599;  // std dev = 0.752, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -8.175415751208106E-4;  // std dev = 1.447, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20880458078908903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016438439673004943;  // std dev = 1.776, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.616', 'seconds']
Parameter learned model CLL:-0.108536 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 86], 'true,false,true': [0.0, 131, 0], 'true,false,false': [0.232, 33, 2], 'false,true,true,true': [0.0, 0, 14], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.469, 39, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.955, 4, 71], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.241, 144, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.508, 37, 3], 'false,false,false,true': [1.192, 2, 4], 'false,false,false,false': [4.639, 107, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.312, 0, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.12, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 5], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [3.997, 179, 25], 'false,false,false,false': [3.85, 79, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.603, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 165, 0], 'false,true,false,false': [0.01, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.222, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.076, 1, 62], 'true,false': [0.0, 0, 0], 'false,true,true': [0.976, 1, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.061, 1, 30], 'false,false,true,false': [1.602, 216, 4], 'false,false,false': [0.324, 44, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.817, 124, 68], 'false,true': [0.987, 1, 17], 'false,false,true': [0.827, 0, 39], 'false,false,false,true': [0.177, 70, 0], 'false,false,false,false': [0.161, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.647, 2, 97], 'true,false': [1.5, 207, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.507, 67, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.002, 1, 70], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 116, 14], 'false,false,false,true': [1.81, 70, 19], 'false,false,false,false': [2.202, 37, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.203, 3, 62], 'false,true,true,true': [1.165, 1, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.072, 152, 0], 'false,false,true': [0.709, 0, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.258, 91, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.629, 0, 71], 'true,true,false': [0.327, 0, 15], 'true,false,true': [0.023, 156, 0], 'true,false,false,true': [0.016, 14, 0], 'true,false,false,false': [0.752, 9, 2], 'false,true': [1.447, 42, 17], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.776, 43, 18]}]
{'': [0.22684310018903692, 0.20701963117192285], 'true': [0.011362135024441663, 0.011903033822034961], 'false': [0.1931360946745557, 0.22027348394768081], 'false,true': [0.05246913580246885, 5.196788625904988e-17], 'false,true,true': [-2.5376526277146434e-16, 0.18750000000000006], 'true,false': [-4.0679927619853064e-17, 0.05387755102040817]}
{'': [0.050978872413017295, 0.10676510430132975], 'false': [0.057967042978308285, 0.14355328028422093], 'false,false': [0.056853931522386346, 0.16266838674784867], 'false,false,false': [0.23676949321553376, 0.15484821094448561], 'false,true': [nan, 0.057967042978308285], 'false,false,true': [nan, 0.056853931522386346]}
{'': [0.002231051703282323, 0.11420398737092574], 'false': [nan, 0.11420398737092433], 'false,false': [0.0022321194934194193, 0.10263932620501194], 'false,false,false': [0.07832278351759149, 0.14969398079217933], 'false,false,true': [0.006450825335982469, -7.401486830834377e-17], 'true': [0.0017023593995363097, 0.004362719500658585], 'true,false': [0.0, 0.003628006010994167], 'true,true': [0.0017023593995363097, nan]}
{'': [0.05293976652328697, 0.0005092566522789745], 'false': [1.451817956732725e-05, 0.0006656130762883484], 'false,false': [nan, 0.0006656130762883484], 'false,false,false': [nan, 0.0006656130762883484], 'false,true': [nan, 1.451817956732495e-05], 'false,true,false': [1.002126201194728e-05, 3.4138146162709937e-06]}
{'': [0.018384929675893117, 0.07941596204109776], 'false': [0.05688828913784264, 0.07688473230722873], 'false,false': [0.07024848923475013, 0.10512237987666642], 'false,false,true': [0.03632089601644168, 0.011670133043627644], 'false,true': [0.056081176779508086, 0.0], 'true': [0.018384929675893117, nan]}
{'': [0.041327863834555785, 0.09110583608898619], 'false': [0.054065936508362694, 0.09273162780260716], 'false,false': [0.01752189168402205, 0.0005012626033800397], 'true': [nan, 0.04132786383455585], 'true,false': [nan, 0.041327863834555785], 'false,false,false': [0.0004482291299697857, 0.0005482312868742437]}
{'': [0.04556609851364583, 0.0698385942106311], 'false': [nan, 0.06983859421063109], 'false,false': [nan, 0.0698385942106311], 'false,false,false': [nan, 0.0698385942106311], 'true': [0.027393050386963012, 0.010660922473901812]}
{'': [0.014100407363843985, 0.042528024094089505], 'false': [nan, 0.04252802409408987], 'false,false': [0.02343213583599647, 0.05691330113310001], 'false,false,false': [0.03680570283804278, 0.08507281615791272], 'true': [0.014153904274111614, 0.0], 'true,false': [0.0, nan]}
{'': [0.04130694771637119, 0.038019535646045315], 'false': [0.025370862214528694, 0.0551414290074428], 'false,false': [0.015710244032411003, 0.000730816157852183], 'false,true': [0.04381132652147274, 3.4178566113486706e-05], 'false,true,true': [0.04381132652147274, nan], 'false,false,false': [nan, 0.000730816157852183]}
{'': [0.01907017687733967, 0.04377632102717948], 'false': [0.03550228905709129, 0.05144789719468042], 'false,false': [0.0, 0.05169445482528562], 'false,false,false': [nan, 0.05169445482528558], 'true': [0.005848350448378583, 0.0036830278290435263], 'true,true': [0.0055736190191522815, 0.007148087637092012], 'true,false': [3.3289510440630384e-06, 0.02544197423887579], 'true,false,false': [1.932463343483249e-05, 0.0513624935237758]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.10338952643894926;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.6314163293617832;  // std dev = 0.298, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.534553538227695;  // std dev = 1.174, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.7362291077851107;  // std dev = 0.142, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12666452402128606;  // std dev = 0.027, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6903874037634832;  // std dev = 0.989, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.1254446385283911;  // std dev = 7.15e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3815061919152162;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.15550820341910834;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.563082090610691;  // std dev = 0.102, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(E, A) )
%   | | then return 0.5769913715972865;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5747855796714911;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.43713122131251164;  // std dev = 0.984, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.558970592554785;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11299934199372756;  // std dev = 0.017, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return 0.009478508058144632;  // std dev = 2.290, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06634635782199691;  // std dev = 2.330, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
%   | | | else return 0.11318207775981362;  // std dev = 2.807, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.4239648632085935;  // std dev = 0.104, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.09774149522956459;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.529694345362813;  // std dev = 0.184, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5563125286867067;  // std dev = 0.163, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.42022842569813607;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6140236260106313;  // std dev = 0.177, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7355625421872818;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.10716672658486337;  // std dev = 0.006, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.13858700311230632;  // std dev = 0.032, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3222425798712465;  // std dev = 0.008, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.23654656366483123;  // std dev = 0.548, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3702061920854972;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3260999836197314;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5691856614883494;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.32312999057013375;  // std dev = 1.203, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.09664909975272346;  // std dev = 0.074, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007422284480420334;  // std dev = 1.847, 71.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=14 */
%   | | | else return 0.09103821682806548;  // std dev = 2.135, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2560279319646547;  // std dev = 0.007, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.17751902053411786;  // std dev = 1.364, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return -0.08755230730217117;  // std dev = 0.048, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.06878795650486326;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3097695373874769;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25706448680012983;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.09366107183340977;  // std dev = 0.876, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.44439494901100196;  // std dev = 0.583, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.12096427377912414;  // std dev = 0.035, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.20920776372265798;  // std dev = 0.031, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.1403182268612658;  // std dev = 0.911, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.09103036705818202;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.21673112654456594;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.2701592003858839;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.07748329771599986;  // std dev = 0.864, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.05684865895881573;  // std dev = 0.112, 186.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.019009674687617394;  // std dev = 1.462, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0.02289015630314008;  // std dev = 1.823, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18084228934018817;  // std dev = 0.012, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.30636750876796104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.1420250058962163;  // std dev = 0.999, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.32431984211813175;  // std dev = 0.212, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07750829155529464;  // std dev = 0.004, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2912250870625131;  // std dev = 0.153, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.09966349356979488;  // std dev = 0.064, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18972423037495081;  // std dev = 0.350, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.07288452125630006;  // std dev = 1.531, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15644035688995753;  // std dev = 0.012, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(E, A) )
%   | | then return -0.006370770352908983;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.007774771275458892;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15821952067615228;  // std dev = 0.092, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2714798965952304;  // std dev = 0.208, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07168315541548334;  // std dev = 0.004, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.242761762358335;  // std dev = 0.119, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3591762408050769;  // std dev = 0.926, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.12020824999149239;  // std dev = 0.042, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12512322288355768;  // std dev = 0.123, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.1679190638289024;  // std dev = 0.049, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.06528996346777644;  // std dev = 0.045, 162.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2177393724458297;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0776083794918364;  // std dev = 0.043, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.06815559137517696;  // std dev = 0.506, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2207306046323988;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.004264890518813565;  // std dev = 0.760, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0.023534919189829515;  // std dev = 1.278, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.912', 'seconds']
Refined model CLL: -0.098156


******************************************
Best model found
******************************************
Results 

CLL : -0.097489 

AUC ROC : 0.993698 

AUC PR : 0.391464 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 13.666 

Total Inference Time : 14.323729515075684 

Total revision time: 39.01340272331238
Best scored revision CLL: -0.098156


Results 

CLL : -0.097489 

AUC ROC : 0.993698 

AUC PR : 0.391464 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 39.031399511337284 

Total Inference Time : 14.323729515075684 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.595
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.0812450042944271;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.733148935099512;  // std dev = 1.620, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.1386367399775605;  // std dev = 0.449, 82.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266654610808694;  // std dev = 0.202, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.023384530236234876;  // std dev = 0.276, 158.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05651076498121921;  // std dev = 1.784, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6543139044064705;  // std dev = 0.973, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11689892344507274;  // std dev = 5.041, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5560178631906055;  // std dev = 1.069, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7308998324893278;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4539945742136749;  // std dev = 1.152, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5919308313033903;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4957477185954423;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0031936011877153345;  // std dev = 4.606, 232.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=34 */
%   | | | else return 0.032159355348496545;  // std dev = 4.191, 120.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5429387624510215;  // std dev = 2.653, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12390213925069997;  // std dev = 0.061, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | | else return -0.12696791464278037;  // std dev = 0.007, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15673609549415984;  // std dev = 0.190, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29835107066337485;  // std dev = 1.440, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.47022052413694904;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30399722510437743;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.504927327850927;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6419593961637089;  // std dev = 0.346, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10383373663752613;  // std dev = 1.823, 265.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=5 */
%   | | else return 0.014409512558371996;  // std dev = 0.303, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03480968950528347;  // std dev = 2.905, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21035190490431505;  // std dev = 1.000, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5390265218952932;  // std dev = 0.980, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1232655204489895;  // std dev = 0.137, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.12401215273413756;  // std dev = 0.149, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2534027554566597;  // std dev = 2.384, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.09116658944213989;  // std dev = 1.822, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0879922163851669;  // std dev = 2.095, 66.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17759106644764414;  // std dev = 0.997, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2688480613795335;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05367527672006268;  // std dev = 0.144, 196.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007825056421663684;  // std dev = 2.169, 118.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=28 */
%   | | | else return 0.09935146901852766;  // std dev = 2.309, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13748382255334535;  // std dev = 0.204, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25957210543124837;  // std dev = 1.171, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09450601465374062;  // std dev = 0.120, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39131203714226664;  // std dev = 0.744, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12143332640209493;  // std dev = 0.286, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1610554649044303;  // std dev = 1.624, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.11008484079955964;  // std dev = 1.052, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08356386891406056;  // std dev = 0.012, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10088812161906212;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.017564951964024998;  // std dev = 0.965, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.03383406938823076;  // std dev = 1.272, 64.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21123459223932273;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02579984706123684;  // std dev = 1.922, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.875', 'seconds']
Parameter learned model CLL:-0.112768 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 149, 0], 'true,false,false': [0.239, 62, 4], 'false,true,true,true': [1.62, 3, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.449, 59, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.202, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 139, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.784, 45, 4], 'false,false,false,true': [0.973, 1, 8], 'false,false,false,false': [5.041, 104, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.069, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [1.152, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false,true': [4.606, 198, 34], 'false,false,false,false': [4.191, 97, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.653, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.061, 199, 0], 'false,true,false,false': [0.007, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.19, 83, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.44, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.039, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.346, 0, 39], 'false,false,true,false': [1.823, 260, 5], 'false,false,false': [0.303, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.905, 151, 82], 'false,true': [1.0, 1, 22], 'false,false,true': [0.98, 0, 52], 'false,false,false,true': [0.137, 63, 0], 'false,false,false,false': [0.149, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.384, 5, 121], 'true,false': [1.822, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.095, 38, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 177, 19], 'false,false,false,true': [2.169, 90, 28], 'false,false,false,false': [2.309, 38, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 4, 78], 'false,true,true,true': [1.171, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.12, 223, 0], 'false,false,true': [0.744, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.286, 105, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.624, 2, 85], 'true,true,false': [1.052, 1, 19], 'true,false,true': [0.012, 157, 0], 'true,false,false,true': [0.03, 22, 0], 'true,false,false,false': [0.965, 20, 4], 'false,true': [1.272, 39, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.922, 46, 21]}]
{'': [0.22325093894663522, 0.2145387080452024], 'true': [0.01851192595229848, 0.018258518117901468], 'false': [0.2266589506172851, 0.20181439619274338], 'false,true': [0.09566326530612335, 4.794144879063176e-17], 'false,true,true': [0.10937500000000015, 0.0], 'true,false': [-1.1027718633860615e-16, 0.05693296602387503]}
{'': [0.0004796625082676087, 0.13029414211309856], 'false': [0.07620320699685869, 0.1660530083558387], 'false,false': [0.06495398884845752, 0.18823472115085105], 'false,false,false': [0.10513404412738803, 0.17643940394942112], 'false,true': [nan, 0.07620320699685869], 'false,false,true': [nan, 0.06495398884845752]}
{'': [0.0335164733150229, 0.12123313206941216], 'false': [nan, 0.12123313206941133], 'false,false': [0.04599569984764005, 0.11044764261755838], 'false,false,false': [0.09144061892336557, 0.14637080248982082], 'false,false,true': [0.00567276040848171, 0.05859374999999986], 'true': [0.016817767076189132, 0.11964350395834884], 'true,false': [0.017061227486127557, 0.13272360488600615], 'true,true': [0.016817767076189132, nan]}
{'': [0.044252344112693194, 0.0003314996515305057], 'false': [1.7507717502054837e-05, 0.00043610864146506243], 'false,false': [nan, 0.00043610864146506243], 'false,false,false': [nan, 0.00043610864146506243], 'false,true': [nan, 1.7507717502058662e-05], 'false,true,false': [1.8842202789059623e-05, 1.3983117794668198e-06]}
{'': [0.026300169869785006, 0.0781692936792678], 'false': [0.001903493057463248, 0.07710355144529274], 'false,false': [0.07352388752595622, 0.09160002959277845], 'false,false,true': [0.0030758362714557383, 0.012536159725133987], 'true': [0.026263844549474214, 0.0], 'false,true': [7.614836796790981e-05, 0.0]}
{'': [0.036220040478446444, 0.0916470974669391], 'false': [0.043456209457833954, 0.0954453086609434], 'false,false': [0.018459519605121225, 0.00031746726278083695], 'true': [nan, 0.03622004047844651], 'true,false': [nan, 0.036220040478446444], 'false,false,false': [0.00029925174241339833, 0.0003345825571555413]}
{'': [0.049340019035141014, 0.0665233099286504], 'false': [nan, 0.06652330992865041], 'false,false': [nan, 0.0665233099286504], 'false,false,false': [nan, 0.0665233099286504], 'true': [0.045111179299421086, 0.012725889077357434]}
{'': [0.011749012582830523, 0.040455520314062104], 'false': [nan, 0.040455520314061785], 'false,false': [0.020748011890038325, 0.05834390275546726], 'false,false,false': [0.039851426950320096, 0.08600901939166643], 'true': [0.011832581964905156, 0.00010493008899901957], 'true,false': [0.00010493008899901957, nan]}
{'': [0.04149611228322614, 0.03477989518388674], 'false': [0.021174456744754662, 0.05690387158562246], 'false,false': [0.013844867037665898, 0.0007810100727123752], 'false,true': [0.03517238027431784, 6.424707356166109e-05], 'false,true,true': [0.03517238027431784, nan], 'false,false,false': [nan, 0.0007810100727123752]}
{'': [0.027428678616129333, 0.04042992764024025], 'false': [0.02527349469845415, 0.05448466532606093], 'false,false': [0.0, 0.05511437629785747], 'false,false,false': [nan, 0.05511437629785746], 'true': [0.035383404391520816, 0.005108813654918426], 'true,true': [0.03031135906227977, 0.05533440537388157], 'true,false': [9.114442543107343e-07, 0.022013490699491146], 'true,false,false': [4.223606717576979e-05, 0.03883336150599838]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 30.536
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8466546822259488;  // std dev = 0.107, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | else return 0.7581489350995123;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else return -0.12532213928065375;  // std dev = 0.127, 242.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.15602127552504427;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7153897105151035;  // std dev = 0.121, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.6625536183844262;  // std dev = 0.238, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.5217874505435602;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7353015488436154;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4372258570765392;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.12194014321159169;  // std dev = 0.860, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   | | | else return 0.02241215636937884;  // std dev = 3.132, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09719518792987947;  // std dev = 3.973, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.18720378254537223;  // std dev = 2.955, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(E, A) )
%   | | then return 0.5624548203566191;  // std dev = 0.041, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.496709779477831;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.6033641653684698;  // std dev = 0.059, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.5979907784087788;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.34343835899566794;  // std dev = 0.706, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7299992482498712;  // std dev = 0.149, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12090856436599647;  // std dev = 0.110, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.07129520274710745;  // std dev = 2.798, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.13783673879785996;  // std dev = 4.040, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.43652954535067867;  // std dev = 1.080, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | | else return 0.30896438104445173;  // std dev = 1.569, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.6345986474038147;  // std dev = 0.252, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3271700810244774;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.6794591870527763;  // std dev = 0.042, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.7699446785927189;  // std dev = 0.335, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6679838137785078;  // std dev = 0.938, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(K, A) )
%   | then return -0.10819589769322727;  // std dev = 0.007, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.18167625747049893;  // std dev = 0.259, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.28988206565958596;  // std dev = 1.274, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.3905269020320591;  // std dev = 0.200, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2114244690027385;  // std dev = 0.830, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.27028944755931106;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.569398674158899;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.35729577433305293;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(J, A) )
%   | | then return -0.060052394842419164;  // std dev = 0.141, 251.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=17 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.016467932628206495;  // std dev = 2.507, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return 0.11005812264421498;  // std dev = 3.072, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.23902844805350207;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.2698010736872885;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.350951979107409;  // std dev = 1.141, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.09220083797125407;  // std dev = 0.071, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.07286624150670272;  // std dev = 0.104, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28733745465048816;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.31438045863574415;  // std dev = 0.172, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5523633644215443;  // std dev = 0.954, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13686775734856796;  // std dev = 0.043, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.21696882495666095;  // std dev = 0.062, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.24174025952486364;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, F) )
%   | | | then return 0.2835604561940107;  // std dev = 0.984, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.4430555263774021;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08477238010010898;  // std dev = 0.088, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3580590775781046;  // std dev = 1.142, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.13395962121101498;  // std dev = 0.215, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.07338181462100037;  // std dev = 1.132, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.004926599356150658;  // std dev = 1.739, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1823778667799944;  // std dev = 0.054, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.12581838486588615;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.2914924310961405;  // std dev = 0.020, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07010292439584022;  // std dev = 0.039, 146.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=2 */
%   | | else if ( tweets(A, H), follows(I, F) )
%   | | | then return 0.0013415194498212417;  // std dev = 1.431, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
%   | | | else return -0.06303495155084672;  // std dev = 0.580, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1764550121156258;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.02081776512205945;  // std dev = 2.003, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.04430926221439206;  // std dev = 1.893, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.07894668897592393;  // std dev = 1.664, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | | else return 0.16223119843609332;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.17289346218290472;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then return 0.15124577949237902;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.18969546758812292;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.031086260579386824;  // std dev = 0.112, 271.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=38 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.24076490382688498;  // std dev = 0.974, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.34734111416574076;  // std dev = 1.354, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return -0.1358419186965279;  // std dev = 0.033, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12834664717849947;  // std dev = 0.124, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.18845023301761232;  // std dev = 0.216, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | else return -0.06791977568038544;  // std dev = 0.046, 249.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1328663751212377;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0010514120362991905;  // std dev = 1.050, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return -0.020017920512691207;  // std dev = 0.876, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18198019035962376;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0076324945475507834;  // std dev = 1.486, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return -0.060674926576971794;  // std dev = 1.497, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.736', 'seconds']
Refined model CLL: -0.109398


******************************************
Best model found
******************************************
Results 

CLL : -0.107611 

AUC ROC : 0.992656 

AUC PR : 0.339168 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 30.536 

Total Inference Time : 16.235941648483276 

Total revision time: 59.05380125617981
Best scored revision CLL: -0.109398


Results 

CLL : -0.107611 

AUC ROC : 0.992656 

AUC PR : 0.339168 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 59.07179804420471 

Total Inference Time : 16.235941648483276 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.056
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281643902400936;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04414854055044045;  // std dev = 0.251, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1614066001377699;  // std dev = 1.314, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5831476222179733;  // std dev = 0.231, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5639392428942599;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5639392428942599;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06456711411692007;  // std dev = 1.409, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | | | else return -0.03698249254878319;  // std dev = 1.252, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.42197275007125895;  // std dev = 1.622, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11285843678295152;  // std dev = 0.015, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11681098748527864;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16450479932867879;  // std dev = 0.102, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2880903438643379;  // std dev = 1.023, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32546973723598394;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6595396633028285;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09492742690009022;  // std dev = 0.828, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   | | else return -0.09580577228449784;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04695214912158633;  // std dev = 1.663, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2584161829901934;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5763395828725043;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12060894801018117;  // std dev = 0.088, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.10868103805965385;  // std dev = 0.125, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.297748930886782;  // std dev = 0.393, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.0862549296054153;  // std dev = 0.709, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03784747168932207;  // std dev = 0.270, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2017029042621598;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03882597737040693;  // std dev = 0.150, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.043283083750728736;  // std dev = 0.312, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.1206560884134481;  // std dev = 0.694, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19165753503338326;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3020561984590624;  // std dev = 0.251, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.086326305599207;  // std dev = 0.035, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38953417012259534;  // std dev = 0.254, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10805244570423586;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18085046522890547;  // std dev = 0.349, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.14448293847907956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08164835559024573;  // std dev = 0.003, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06807356467065637;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.07117039993323333;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.010348638027188486;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1111328594649047;  // std dev = 0.547, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.686', 'seconds']
Parameter learned model CLL:-0.104367 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [3.65e-08, 36, 0], 'true,false,false': [0.0, 8, 0], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 38, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.314, 6, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.231, 0, 18], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.409, 41, 3], 'false,false,false,false': [1.252, 14, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.622, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.015, 28, 0], 'false,true,false,false': [0.0, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.102, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.023, 1, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.075, 0, 4], 'false,false,true,false': [0.828, 53, 1], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.663, 33, 21], 'false,true': [0.0, 0, 1], 'false,false,true': [0.205, 0, 3], 'false,false,false,true': [0.088, 7, 0], 'false,false,false,false': [0.125, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.393, 0, 23], 'true,false': [0.709, 35, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.27, 6, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.017, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 32, 4], 'false,false,false,true': [0.312, 7, 1], 'false,false,false,false': [0.694, 3, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 18], 'false,true,true,true': [0.251, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 35, 0], 'false,false,true': [0.254, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.089, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.349, 0, 21], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.003, 27, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.016, 3, 0], 'false,true': [0.219, 2, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.547, 2, 2]}]
{'': [0.22053909556694234, 0.2222222222222221], 'false': [0.16000000000000003, 0.25], 'true': [0.04158790170132359, 4.5418214643756407e-17], 'false,true': [0.0, 0.0], 'true,false': [3.700743415417188e-17, -6.938893903907228e-18], 'false,true,true': [0.0, nan]}
{'': [-5.921189464667501e-16, 0.08734721261216352], 'false': [0.06278602769118581, 0.15937842794522988], 'false,false': [0.0, 0.19193366231256212], 'false,false,false': [nan, 0.19193366231256212], 'false,true': [nan, 0.06278602769118581], 'false,false,true': [nan, 0.0]}
{'': [0.0029516946899490965, 0.06947014967550603], 'false': [nan, 0.06947014967550592], 'false,false': [0.0, 0.05933976031903022], 'false,false,false': [0.04511354611441029, 0.0979038477272263], 'true': [0.0029516946899490965, nan], 'true,true': [0.0029516946899490965, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.09749967151610406, 0.0006876194514892464], 'false': [8.492102671028498e-06, 0.0013108831254956509], 'false,false': [nan, 0.0013108831254956509], 'false,false,false': [nan, 0.0013108831254956509], 'false,true': [nan, 8.492102671028498e-06], 'false,true,false': [7.752428063647779e-06, 0.0]}
{'': [0.05512659732349216, 0.048976187099684876], 'true': [0.05512659732349216, nan], 'false': [0.0, 0.04621318288686226], 'false,false': [0.048465838267112614, -1.1564823173178713e-18], 'false,false,true': [0.001405209695842069, 0.01269521832633824], 'false,true': [0.0, nan]}
{'': [0.051198624320061, 0.05753830026953213], 'false': [0.0, 0.056741091263046606], 'false,false': [0.013980848245786937, 0.0011998731777212279], 'true': [nan, 0.05119862432006089], 'true,false': [nan, 0.051198624320061], 'false,false,false': [0.001099410659582257, 0.0012041721172702951]}
{'': [0.04621949276849454, 0.010407839946613592], 'true': [0.006730663706141707, 0.013964463636122866], 'false': [nan, 0.010407839946613592], 'false,false': [nan, 0.010407839946613592], 'false,false,false': [nan, 0.010407839946613592]}
{'': [1.6916690033156694e-05, 0.030765073470398273], 'false': [nan, 0.03076507347039829], 'false,false': [0.02257951210879501, 0.05091018060072373], 'false,false,false': [0.012143996862556612, 0.09639696555417539], 'true': [1.6916690033156694e-05, nan]}
{'': [0.0035984783330302306, 0.02569523239664829], 'false': [0.015525251430273496, 0.059234321388326905], 'false,false': [0.02152068190686836, 0.0011195776625238696], 'false,true': [0.01569819276902093, 3.4618043427612844e-05], 'false,true,true': [0.01569819276902093, nan], 'false,false,false': [nan, 0.0011195776625238696]}
{'': [0.01849328316620425, 0.052075045605089645], 'false': [0.015949535855876842, 0.07481598107808211], 'false,false': [nan, 0.07481598107808211], 'false,false,false': [nan, 0.07481598107808211], 'true': [0.005597830457239095, 2.6441024850886417e-05], 'true,true': [0.005804275766804846, 0.0], 'true,false': [3.1491197729740764e-07, 5.169134335389e-05], 'true,false,false': [0.0, 8.231608346573095e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.035
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6374506595744975;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.020265775676010248;  // std dev = 1.601, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.6042938988914315;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return -0.07092503559365798;  // std dev = 1.159, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return -0.11345674477757196;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08373409252438621;  // std dev = 0.730, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.09447519519651716;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.4445621531621345;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.41863559780936316;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.40961439808398215;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7086208956096041;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return -0.1146692888888875;  // std dev = 0.017, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.1034324742648098;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10149229035957485;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.18309496644250622;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18889092083889059;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.3368537783366454;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3680650427286031;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09149431650709897;  // std dev = 0.793, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return -0.015956309316361383;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.587195890563643;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09040889453794623;  // std dev = 0.765, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else return -0.09244125606272173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.19118257179338044;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.38624535732051113;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09587747013320029;  // std dev = 0.002, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3071415124166559;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08528190448957639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3183001554000189;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5253995405314194;  // std dev = 0.203, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13076911059107205;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.11615285294060701;  // std dev = 0.120, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.23476770490563248;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.213945951110753;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2474401815407014;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E), follows(A, F) )
%   | | | then return -0.07316724571950695;  // std dev = 0.424, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | | else return -0.08535111301629493;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.28605105715565254;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08319444228571915;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, H) )
%   | | then return -0.003789490347061525;  // std dev = 0.320, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.2618657573727537;  // std dev = 0.517, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14102908349778054;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.06914422702151105;  // std dev = 0.436, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return -0.08239826057129504;  // std dev = 0.000796, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.024492102765916537;  // std dev = 0.444, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.07492473907891123;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.04468483489696625;  // std dev = 0.471, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.043727310579272795;  // std dev = 0.588, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1732721758508807;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.17672004751525194;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2586075717311728;  // std dev = 0.153, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.07592922892729942;  // std dev = 0.019, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.06568310124552938;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.35861727978470753;  // std dev = 0.172, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0992022947980513;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.18354683483617587;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1476538224480292;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2245022067943155;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.150975352758422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07251526067287772;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.0664005664748563;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.0622130811223379;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06127416204512845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return 0.02165875587872437;  // std dev = 0.194, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.506', 'seconds']
Refined model CLL: -0.097635


******************************************
Best model found
******************************************
Results 

CLL : -0.107029 

AUC ROC : 0.995317 

AUC PR : 0.431448 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 5.035 

Total Inference Time : 4.343669414520264 

Total revision time: 12.67367641067505
Best scored revision CLL: -0.097635


Results 

CLL : -0.107029 

AUC ROC : 0.995317 

AUC PR : 0.431448 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 12.691673198699952 

Total Inference Time : 4.343669414520264 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.367
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7242537166624232;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.045689494359155945;  // std dev = 0.251, 94.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.09054293223511026;  // std dev = 2.253, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5728917258789374;  // std dev = 0.236, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5600603215864848;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5600603215864848;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0333909393941174;  // std dev = 2.652, 104.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=11 */
%   | | | else return 0.011816956091525955;  // std dev = 1.774, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4661064921295965;  // std dev = 2.085, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11634859344620294;  // std dev = 0.025, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.12069603136183284;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17250327146962943;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28863660713960987;  // std dev = 1.026, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3132949174815849;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6467210913789819;  // std dev = 0.144, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08394411486494811;  // std dev = 1.378, 83.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=3 */
%   | | else return -0.09823111565313633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029921840053212103;  // std dev = 2.106, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2501045325993134;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5424935079427771;  // std dev = 0.459, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11303541182683384;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.12027390000485762;  // std dev = 0.108, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30201130028810463;  // std dev = 0.631, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.07802296546411544;  // std dev = 1.222, 93.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.001404405006101478;  // std dev = 0.343, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19516423538625013;  // std dev = 0.045, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04278272180989703;  // std dev = 0.196, 64.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.007697761149207521;  // std dev = 0.757, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.07486129014839948;  // std dev = 1.098, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1503058286045833;  // std dev = 0.154, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28933315668025267;  // std dev = 0.459, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08967359738560618;  // std dev = 0.033, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40837562434612096;  // std dev = 0.434, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11791042404279796;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11302686451539123;  // std dev = 1.814, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else return 0.1409913505610962;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0838281040237399;  // std dev = 0.011, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07473638138544599;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07659161018720823;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then return 0.018007899663389573;  // std dev = 0.581, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11266314795774261;  // std dev = 0.830, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.579', 'seconds']
Parameter learned model CLL:-0.106894 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false': [0.0, 10, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,false': [0.481, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 85, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 14, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.253, 23, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.236, 0, 27], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 5], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.652, 93, 11], 'false,false,false,false': [1.774, 19, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.085, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 61, 0], 'false,true,false,false': [0.013, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.026, 1, 28], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.144, 0, 12], 'false,false,true,false': [1.378, 80, 3], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.106, 79, 37], 'false,true': [0.0, 0, 4], 'false,false,true': [0.459, 0, 9], 'false,false,false,true': [0.062, 9, 0], 'false,false,false,false': [0.108, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.631, 0, 44], 'true,false': [1.222, 89, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.343, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.045, 0, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.196, 55, 9], 'false,false,false,true': [0.757, 15, 5], 'false,false,false,false': [1.098, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.154, 1, 28], 'false,true,true,true': [0.459, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 83, 0], 'false,false,true': [0.434, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.064, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.814, 3, 38], 'true,true,false': [0.008, 0, 3], 'true,false,true': [0.011, 68, 0], 'true,false,false,true': [2.63e-09, 9, 0], 'true,false,false,false': [0.013, 4, 0], 'false,true': [0.581, 10, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.83, 5, 4]}]
{'': [0.22583150907421914, 0.21000000000000008], 'true': [0.023242630385488926, 7.209240419643874e-17], 'false': [0.19390581717451505, 0.2314049586776858], 'false,true': [0.0, -1.1895246692412391e-17], 'true,false': [6.628197161941232e-17, -1.1102230246251566e-17], 'false,true,true': [0.0, nan]}
{'': [-5.551115123125783e-16, 0.0867220118332837], 'false': [0.0630058854653331, 0.1304286637883086], 'false,false': [3.96508223080413e-18, 0.17059168659691584], 'false,false,false': [0.0, 0.16373359583399172], 'false,true': [nan, 0.0630058854653331], 'false,false,true': [nan, 3.96508223080413e-18]}
{'': [0.0019951368772924533, 0.09321746926739378], 'false': [nan, 0.0932174692673938], 'false,false': [1.2688263138573217e-16, 0.08046187521403399], 'false,false,false': [0.06761551160033906, 0.13687615507915502], 'true': [0.0020580617014541763, 0.0], 'true,true': [0.0020580617014541763, nan], 'false,false,true': [8.881784197001253e-17, 0.0], 'true,false': [nan, 0.0]}
{'': [0.08203675049826051, 0.0004111006028549649], 'false': [1.3495646142687908e-05, 0.0005508945288159733], 'false,false': [nan, 0.0005508945288159733], 'false,false,false': [nan, 0.0005508945288159733], 'false,true': [nan, 1.3495646142693194e-05], 'false,true,false': [1.0480368472597021e-05, 7.767529750370693e-06]}
{'': [0.03630113678045744, 0.07841414899960347], 'false': [-1.586032892321652e-17, 0.07772334798573242], 'false,false': [0.07912540987280134, 0.0], 'false,false,true': [0.00173530225611566, 0.022877922953587627], 'true': [0.03630113678045744, nan], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.0382463812328792, 0.08535557000172865], 'false': [0.0, 0.09147548199627364], 'false,false': [0.023360351351603487, 0.000634591526291437], 'true': [nan, 0.03824638123287919], 'true,false': [nan, 0.0382463812328792], 'false,false,false': [0.0004287135220548796, 0.0007315354476773034]}
{'': [0.04529167021583213, 0.01677181735438322], 'true': [0.009048676599837678, 0.01605388644410975], 'false': [nan, 0.01677181735438322], 'false,false': [nan, 0.01677181735438322], 'false,false,false': [nan, 0.01677181735438322]}
{'': [6.209105144958094e-05, 0.0453139287558103], 'false': [nan, 0.045313928755810313], 'false,false': [0.03832316979871302, 0.05496605838445044], 'false,false,false': [0.028658441071929684, 0.09270541298370714], 'true': [6.209105144958094e-05, nan]}
{'': [0.02386343266973344, 0.03256162080893477], 'false': [0.019926053346815294, 0.08128922269090594], 'false,false': [0.023571828733036426, 0.0005181142843636785], 'false,true': [0.015065971026784086, 1.3396631302052994e-05], 'false,true,true': [0.015065971026784086, nan], 'false,false,false': [nan, 0.0005181142843636785]}
{'': [0.03523418285098102, 0.04486088075281966], 'false': [0.022539641564570834, 0.07646318604802674], 'false,false': [nan, 0.07646318604802674], 'false,false,false': [nan, 0.07646318604802674], 'true': [0.07482326114969068, 1.3526444327202248e-05], 'true,true': [0.08024328227958671, 2.094559402476594e-05], 'true,false': [1.8778333519721984e-06, 1.3504919075783081e-05], 'true,false,false': [7.709882115452476e-19, 4.150815121460767e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.148
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8287371703936293;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.7253711349463979;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7628763380323296;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6045267906174348;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6253711349463981;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.1254446385283914;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2246654722877996;  // std dev = 2.019, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.521536376839821;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.6177907128699047;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5819640878642959;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6253473816045594;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5856209723322472;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11281534887102425;  // std dev = 0.040, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10137242821499003;  // std dev = 1.372, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.19608003239414068;  // std dev = 1.554, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(D, F) )
%   | | | then return 0.4336679066304616;  // std dev = 0.033, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.26629591155495275;  // std dev = 1.287, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.46565186124271774;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4731732500308352;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return 0.6029152930733368;  // std dev = 0.207, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7644772545670946;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.1015507952338737;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( tweets(A, I) )
%   | | then return -0.16578309566029462;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.22897868366330734;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3297507507237147;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3535979473497608;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.06697223177759454;  // std dev = 0.909, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(A, H) )
%   | | then return 0.35095974460358037;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3587991987916117;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.44325014092168064;  // std dev = 0.290, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08357903162466833;  // std dev = 1.202, 86.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=3 */
%   | | else return -0.09265314940806799;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26559184120656004;  // std dev = 0.007, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.291932896426202;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0858619457889161;  // std dev = 2.36e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.08586194578891616;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2781723078606889;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2281076132804273;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5567677277099093;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13442593210339757;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.11853970210689134;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.217526242950819;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.13952878995537257;  // std dev = 0.913, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.3230379504385711;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, D), follows(D, G) )
%   | | then return -0.07984085165019572;  // std dev = 0.005, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.14919263358765897;  // std dev = 0.145, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2247269087175812;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.4886674725392344;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1494005103316171;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07636061271916698;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18327136744767514;  // std dev = 0.006, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return -0.0620609368039896;  // std dev = 0.380, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return -0.0737171836437174;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2144336835290761;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07249309845782984;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25724608054806963;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1139995113247266;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.007988717584854366;  // std dev = 0.395, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.010027989040314201;  // std dev = 0.636, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.0949309108587011;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.1586446187072702;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18713218083472935;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.17248962919154037;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.06816183209261992;  // std dev = 0.002, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22570906582019817;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3706572151041243;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.09733176265579686;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1406012787856861;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1410606533525521;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1620825278628078;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10996340651047565;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.06412112904476737;  // std dev = 0.002, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.19037633323518555;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08682689735095013;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09775175469336225;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.03013714661474101;  // std dev = 0.320, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.0022299981545208314;  // std dev = 0.191, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.770', 'seconds']
Refined model CLL: -0.093382


******************************************
Best model found
******************************************
Results 

CLL : -0.098014 

AUC ROC : 0.995007 

AUC PR : 0.373507 

Precision : 0.346154 

Recall : 0.980769 

F1 : 0.511706 

Total Learning Time : 12.148 

Total Inference Time : 8.169504404067993 

Total revision time: 25.401309385299683
Best scored revision CLL: -0.093382


Results 

CLL : -0.098014 

AUC ROC : 0.995007 

AUC PR : 0.373507 

Precision : 0.346154 

Recall : 0.980769 

F1 : 0.511706 

Total Learning Time : 25.419306173324586 

Total Inference Time : 8.169504404067993 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.695
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7226658968615457;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.014553075705011858;  // std dev = 0.288, 121.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7749680444685707;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11918090217650665;  // std dev = 2.556, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5460262862196875;  // std dev = 1.038, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else return 0.22557315062524583;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6172865239768184;  // std dev = 0.107, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.558495459375993;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.558495459375993;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02131053749695713;  // std dev = 3.241, 139.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=17 */
%   | | | else return 0.02696724341433498;  // std dev = 2.097, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47731606035110397;  // std dev = 2.441, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12056045752173457;  // std dev = 0.054, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.12597151805560997;  // std dev = 0.016, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1599541216428012;  // std dev = 0.124, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30021887447386786;  // std dev = 1.042, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else return 0.18805902494390078;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21895530519433978;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6286095826802864;  // std dev = 0.156, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08766003823094065;  // std dev = 1.741, 144.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=5 */
%   | | else return -0.09893033145696278;  // std dev = 1.32e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04251750560752616;  // std dev = 2.609, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26508415761810206;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4691606818047091;  // std dev = 1.054, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1145147198676649;  // std dev = 0.112, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.12277748701274721;  // std dev = 0.144, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27342213555238787;  // std dev = 1.661, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else return -0.07565389659938211;  // std dev = 1.595, 136.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.031251132301825864;  // std dev = 0.384, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17759077179980812;  // std dev = 0.968, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.029433031582059992;  // std dev = 0.170, 112.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=16 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.00912175806342904;  // std dev = 0.999, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0.07447249325287728;  // std dev = 1.349, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16739144526306077;  // std dev = 0.166, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2983948343936303;  // std dev = 0.529, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09498565682328804;  // std dev = 0.050, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43473149479851386;  // std dev = 0.510, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10907010483463866;  // std dev = 0.095, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16411855070946316;  // std dev = 1.497, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return 0.15257140161145136;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08826756405057137;  // std dev = 0.014, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07256166547420857;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07072490773116431;  // std dev = 0.000443, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.014188822080609934;  // std dev = 0.771, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.289071039808568;  // std dev = 0.761, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0487180074978861;  // std dev = 1.083, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.465', 'seconds']
Parameter learned model CLL:-0.113415 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 62], 'true,false,true': [8.69e-08, 103, 0], 'true,false,false': [0.0, 15, 0], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.478, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.288, 105, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 24, 0], 'false,false,false,true': [0.078, 0, 2], 'false,false,false,false': [2.556, 28, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.038, 1, 39], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.107, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [3.241, 122, 17], 'false,false,false,false': [2.097, 27, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.441, 4, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 95, 0], 'false,true,false,false': [0.016, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.042, 1, 40], 'true,false': [0.767, 1, 2], 'false,true,true': [0.953, 1, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 18], 'false,false,true,false': [1.741, 139, 5], 'false,false,false': [1.32e-09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.609, 105, 56], 'false,true': [1.05e-08, 0, 6], 'false,false,true': [1.054, 1, 13], 'false,false,false,true': [0.112, 20, 0], 'false,false,false,false': [0.144, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.661, 2, 66], 'true,false': [1.595, 129, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.384, 10, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.968, 1, 46], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 96, 16], 'false,false,false,true': [0.999, 23, 7], 'false,false,false,false': [1.349, 13, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.166, 1, 42], 'false,true,true,true': [0.529, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.05, 109, 0], 'false,false,true': [0.51, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.095, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.497, 2, 59], 'true,true,false': [0.005, 0, 3], 'true,false,true': [0.014, 97, 0], 'true,false,false,true': [2.63e-09, 8, 0], 'true,false,false,false': [0.000443, 3, 0], 'false,true': [0.771, 16, 7], 'false,false,true': [0.761, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.083, 11, 5]}]
{'': [0.22520680076920743, 0.2137188208616775], 'true': [0.015621063240110127, 2.258080728051166e-17], 'false': [0.2016000000000001, 0.2283737024221454], 'false,true': [-2.5376526277146434e-16, -3.0839528461809902e-18], 'true,false': [7.329627735389383e-17, -1.4802973661668754e-17], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [-3.8616453030440226e-16, 0.10069533583460999], 'false': [0.08300664884243912, 0.13099303770647291], 'false,false': [-4.625929269271485e-18, 0.17941984770362046], 'false,false,false': [0.0030796542094081447, 0.16748455523261976], 'false,true': [nan, 0.08300664884243912], 'false,false,true': [nan, -4.625929269271485e-18]}
{'': [0.040883329663310104, 0.09910385613243382], 'false': [nan, 0.09910385613243372], 'false,false': [0.0, 0.08698000655361995], 'false,false,false': [0.07556042647343275, 0.13319709556597242], 'true': [0.04221728708559288, 0.005724787679244725], 'true,true': [0.02693814133928627, 0.25000000000000006], 'true,false': [nan, 0.005724787679244725], 'false,false,true': [0.0, 0.0]}
{'': [0.07541974875241574, 0.0003144161307992814], 'false': [3.1355951543366535e-05, 0.0007283924091275873], 'false,false': [nan, 0.0007283924091275873], 'false,false,false': [nan, 0.0007283924091275873], 'false,true': [nan, 3.1355951543361114e-05], 'false,true,false': [3.121984111059274e-05, 9.203448052483298e-06]}
{'': [0.03884930045915969, 0.06838184205571225], 'false': [0.08264462809917361, 0.06427163938832989], 'false,true': [0.08264462809917361, nan], 'false,false': [0.06952315968540843, 1.8503717077085942e-18], 'false,false,true': [0.0013494273256534999, 0.021040190692565002], 'true': [0.026492385373893382, 0.19600502391893546]}
{'': [0.04228612001287017, 0.08191322201303575], 'false': [1.850371707708594e-17, 0.08525731766653415], 'false,false': [0.0792852645857413, 0.0008109677916839972], 'true': [nan, 0.0422861200128702], 'true,false': [nan, 0.04228612001287017], 'false,false,false': [0.0006294968674863844, 0.0009434302539488192]}
{'': [0.053084875104904186, 0.012299472740323615], 'true': [0.040591522127126495, 0.018713526186185072], 'false': [nan, 0.012299472740323615], 'false,false': [nan, 0.012299472740323615], 'false,false,false': [nan, 0.012299472740323615]}
{'': [0.019940243978410488, 0.038787680947788464], 'false': [nan, 0.038787680947788665], 'false,false': [0.028911196915314137, 0.05852246368474191], 'false,false,false': [0.03324992481244896, 0.09581174676324228], 'true': [0.019940243978410488, nan]}
{'': [0.027533764387818915, 0.03612919132723279], 'false': [0.023774969931470297, 0.07891269265043999], 'false,false': [0.023677767513158896, 0.0004976457646251151], 'false,true': [0.012696391387154393, 2.27641536359595e-05], 'false,true,true': [0.012696391387154393, nan], 'false,false,false': [nan, 0.0004976457646251151]}
{'': [0.02767235483597818, 0.0621345021644381], 'false': [0.025813129409884682, 0.10854008647813379], 'false,false': [0.28949272831126804, 0.07324306841785846], 'false,false,false': [nan, 0.07324306841785846], 'true': [0.035020723850886615, 2.581758021342874e-05], 'true,true': [0.03673644051531309, 7.3985108330620886e-06], 'true,false': [1.914888906615322e-06, 6.869902395674855e-07], 'true,false,false': [8.673617379884035e-19, 6.537947965362205e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.724
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.6359267128772901;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.124815601766179;  // std dev = 0.442, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.6872153476948256;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.025508094892554657;  // std dev = 2.631, 93.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=11 */
%   | | | else return -0.0941513773898971;  // std dev = 0.829, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1340603023762055;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.21243489287224135;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.12956818386222577;  // std dev = 1.991, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.4863941011417833;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.5633171780648601;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.26146360292241394;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6067516720829065;  // std dev = 0.088, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5713850625158048;  // std dev = 0.032, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7257165702544109;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12061912931040059;  // std dev = 0.054, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18137811838554582;  // std dev = 1.748, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.07447001452003392;  // std dev = 1.850, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4329637345424747;  // std dev = 0.086, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.29613221209919843;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B), follows(A, F) )
%   | | | then return 0.4136231422905484;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5521728970164369;  // std dev = 0.087, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then return 0.6808490731798752;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.779478269659506;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.10902119681365016;  // std dev = 0.005, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( tweets(A, I) )
%   | | then return -0.1698457732775269;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.20994524399887565;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33627261972100597;  // std dev = 0.007, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.19669861647482428;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.1634719300253238;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.42863674125941537;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3180754175338198;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3471809876807967;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.409853607215107;  // std dev = 1.045, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08132422689771289;  // std dev = 1.634, 147.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=5 */
%   | | else return -0.09066421468540292;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2746311975719061;  // std dev = 0.031, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04440318257060249;  // std dev = 1.368, 108.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=13 */
%   | | | else return -0.03289950463150062;  // std dev = 0.389, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.05228060180678785;  // std dev = 0.112, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26332791293982805;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.43307489036679275;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6106537342851425;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14053128499615364;  // std dev = 0.146, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11318778684841503;  // std dev = 0.133, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.17829570589963595;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.06443134528814799;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.22955570001876968;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07899970967158425;  // std dev = 0.061, 95.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3235414659475698;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08581391834481845;  // std dev = 0.035, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.34736130677547206;  // std dev = 0.156, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1214788777813214;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.1156209123465548;  // std dev = 0.294, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.14939875516588522;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.1888585025475983;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.2217170937269712;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return -0.03003296494916119;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2664314254952761;  // std dev = 0.250, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.09163548931854244;  // std dev = 0.026, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.18691086565082873;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06990904242838747;  // std dev = 0.000154, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.004417329498610821;  // std dev = 1.155, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1656069959463924;  // std dev = 0.004, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.19396529158180656;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.22865663827485666;  // std dev = 0.112, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.14861340786075905;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07487855589274442;  // std dev = 0.003, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23473241063199066;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.29168366725160616;  // std dev = 0.873, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10242080700787032;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.15182927381315223;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09792947465623202;  // std dev = 1.389, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.17984176066039334;  // std dev = 0.149, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1411992296502608;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06856808715189502;  // std dev = 0.004, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return -0.26446931858748385;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.033109156681335496;  // std dev = 0.459, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.048968304598756625;  // std dev = 0.405, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, K) )
%   | | then return 0.16379569431346105;  // std dev = 0.310, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.03015754177910209;  // std dev = 0.317, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.045', 'seconds']
Refined model CLL: -0.102929


******************************************
Best model found
******************************************
Results 

CLL : -0.104772 

AUC ROC : 0.995156 

AUC PR : 0.424428 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 8.724 

Total Inference Time : 7.408878564834595 

Total revision time: 22.98246082687378
Best scored revision CLL: -0.102929


Results 

CLL : -0.104772 

AUC ROC : 0.995156 

AUC PR : 0.424428 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 23.000457614898682 

Total Inference Time : 7.408878564834595 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.031
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6794216524933083;  // std dev = 1.693, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03246296289761373;  // std dev = 0.267, 172.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7472207283397626;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09210517569173543;  // std dev = 2.818, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5643122671714411;  // std dev = 1.049, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.7306343618939906;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5860836363858665;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5710064995936377;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5710064995936377;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03173661783289817;  // std dev = 3.465, 175.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=19 */
%   | | | else return 0.02212272516100418;  // std dev = 2.394, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5121821413170021;  // std dev = 1.785, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11648506193265279;  // std dev = 0.044, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return -0.12398882942110927;  // std dev = 0.010, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15598455002370526;  // std dev = 0.134, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29307334560573894;  // std dev = 1.246, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return 0.38785686899653515;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24811839956580423;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6272946901422907;  // std dev = 0.156, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08652031000982634;  // std dev = 1.999, 197.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=7 */
%   | | else return -0.09836565177315329;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03958649652597681;  // std dev = 3.146, 197.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1692102800593417;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43529755870479137;  // std dev = 1.427, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11338543253674212;  // std dev = 0.101, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11786859244442066;  // std dev = 0.151, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.270714749228107;  // std dev = 1.715, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | else return -0.07819174569967746;  // std dev = 1.843, 183.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 2.4661628750496813E-6;  // std dev = 0.652, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18639470046416962;  // std dev = 0.999, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.20494828854791225;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04371415825996557;  // std dev = 0.149, 170.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.005814609945721932;  // std dev = 1.316, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return 0.087151108485516;  // std dev = 1.326, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1550080911278505;  // std dev = 0.163, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2899423033285309;  // std dev = 0.598, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09104328270316382;  // std dev = 0.056, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4544365017148975;  // std dev = 0.517, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11182104106542913;  // std dev = 0.126, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14465357761418143;  // std dev = 1.991, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else return 0.15716575472059288;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08523974024110147;  // std dev = 0.018, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07467650837146327;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.14828244249189731;  // std dev = 0.574, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, G) )
%   | then return 0.03241316785675124;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22379286459309888;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030371306090513656;  // std dev = 1.105, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.629', 'seconds']
Parameter learned model CLL:-0.109846 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 146, 0], 'true,false,false': [2.63e-09, 21, 0], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.478, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.693, 3, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 153, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 22, 0], 'false,false,false,true': [0.096, 0, 4], 'false,false,false,false': [2.818, 37, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.049, 1, 53], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.13, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.465, 156, 19], 'false,false,false,false': [2.394, 36, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.785, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 126, 0], 'false,true,false,false': [0.01, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.246, 2, 55], 'true,false': [0.122, 0, 3], 'false,true,true': [0.968, 1, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 20], 'false,false,true,false': [1.999, 190, 7], 'false,false,false': [2.63e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.146, 124, 73], 'false,true': [0.953, 1, 10], 'false,false,true': [1.427, 1, 17], 'false,false,false,true': [0.101, 26, 0], 'false,false,false,false': [0.151, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.715, 2, 85], 'true,false': [1.843, 174, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.652, 17, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.999, 1, 63], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 151, 19], 'false,false,false,true': [1.316, 39, 11], 'false,false,false,false': [1.326, 13, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.163, 2, 58], 'false,true,true,true': [0.598, 0, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 164, 0], 'false,false,true': [0.517, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.991, 4, 76], 'true,true,false': [0.01, 0, 7], 'true,false,true': [0.018, 148, 0], 'true,false,false,true': [3.73e-09, 15, 0], 'true,false,false,false': [0.574, 11, 0], 'false,true': [0.983, 21, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.105, 13, 5]}]
{'': [0.22088372385991498, 0.2329867674858218], 'false': [0.23543400713436335, 0.2283737024221454], 'false,true': [0.07638888888888877, -3.2653618371328133e-18], 'true': [0.022975778546712552, -1.6753066000331702e-16], 'false,true,true': [-1.6148698540002277e-16, 0.0], 'true,false': [-1.0037632825378127e-16, 5.28677630773884e-18]}
{'': [0.04277121853419514, 0.09429891138138231], 'false': [0.07122975503756682, 0.14010659383771348], 'false,false': [-2.523234146875356e-18, 0.1766932148844477], 'false,false,false': [0.0023097406570561363, 0.15885304931735567], 'false,true': [nan, 0.07122975503756682], 'false,false,true': [nan, -2.523234146875356e-18]}
{'': [0.019405443764819123, 0.09727566778156266], 'false': [nan, 0.09727566778156255], 'false,false': [-2.9605947323337506e-16, 0.08147865861606618], 'false,false,false': [0.06862663168899558, 0.13027666089983764], 'true': [0.020484807348313955, 0.004236560028301861], 'true,true': [0.02036119128358025, 0.0], 'true,false': [nan, 0.004236560028301861], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.03153549643161371, 0.0002903305012234186], 'false': [2.161574816319853e-05, 0.0007188573108857721], 'false,false': [nan, 0.0007188573108857721], 'false,false,false': [nan, 0.0007188573108857721], 'false,true': [nan, 2.161574816319853e-05], 'false,true,false': [1.5201329143370368e-05, 3.077959702720475e-06]}
{'': [0.026553411053889107, 0.06259467846764677], 'false': [0.058593749999999965, 0.05801715647748448], 'false,true': [0.058593749999999965, nan], 'false,false': [0.061152173477722054, 4.270088556250602e-18], 'false,false,true': [0.0012145792797979115, 0.020275747182764994], 'true': [0.027240881745108952, 0.004956747429657293]}
{'': [0.050224846900569095, 0.08850180577511464], 'false': [0.08264462809917356, 0.08658112706355903], 'false,false': [0.11306245692460168, 0.0006274572033263244], 'true': [nan, 0.05022484690056889], 'true,false': [nan, 0.050224846900569095], 'false,false,false': [0.00039334797992202503, 0.0008430359639658209]}
{'': [0.05006120885909203, 0.018491296909494973], 'true': [0.03382467362175877, 0.0185542560380904], 'false': [nan, 0.018491296909494973], 'false,false': [nan, 0.018491296909494973], 'false,false,false': [nan, 0.018491296909494973]}
{'': [0.015364025004013794, 0.031863801859262575], 'false': [nan, 0.03186380185926237], 'false,false': [0.022241985331971467, 0.05188996132362639], 'false,false,false': [0.03462595244645346, 0.0925276317517489], 'true': [0.01559879196192026, 0.0], 'true,false': [0.0, nan]}
{'': [0.02659216128352351, 0.03179182992963418], 'false': [0.020403623689998023, 0.07743120057396817], 'false,false': [0.02059580780622892, 0.0005859181387867846], 'false,true': [0.012342265762589014, 1.9001567874033224e-05], 'false,true,true': [0.012342265762589014, nan], 'false,false,false': [nan, 0.0005859181387867846]}
{'': [0.02879713038421393, 0.043603655702071045], 'false': [0.03020684528759234, 0.06612514834809266], 'false,false': [0.0, 0.067829720369524], 'false,false,false': [nan, 0.067829720369524], 'true': [0.045597883992810215, 0.00214867216754867], 'true,true': [0.0495739086618353, 1.3643830343662566e-05], 'true,false': [2.106713960793106e-06, 0.014007412967761111], 'true,false,false': [9.251858538542971e-19, 0.02998275745622078]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.495
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7224319193003387;  // std dev = 1.03e-07, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6263395484633865;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7284394154100025;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05083150143946292;  // std dev = 2.686, 125.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=11 */
%   | | | else return -0.0486339066429963;  // std dev = 1.395, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839136;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.564966243819192;  // std dev = 0.824, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10848288016865758;  // std dev = 2.750, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5648407972687733;  // std dev = 0.110, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.5754984164455683;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6297248269951836;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5572990461418735;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.558265350839668;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6651770766883541;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.11927080806304338;  // std dev = 0.027, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18022121186774048;  // std dev = 1.858, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.05403498732132661;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.3692859878515513;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.4519953556749871;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.01660565399786589;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.34046254888238986;  // std dev = 0.812, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.4192365163979465;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.5838468102647646;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7073193952927588;  // std dev = 0.235, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(K, A) )
%   | then return -0.10712215858766047;  // std dev = 0.002, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return -0.17144806622292616;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3318118382453524;  // std dev = 7.88e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.3266472761485044;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.35196441217917673;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.41257540023832834;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.38196153684476924;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32188056378670826;  // std dev = 0.000987, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4155901339849057;  // std dev = 1.028, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08229673276492874;  // std dev = 1.790, 190.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=7 */
%   | | else return -0.09164701323354695;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26364373693355075;  // std dev = 0.006, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.26829715696327044;  // std dev = 0.985, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.09100937430913994;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.02834181828655114;  // std dev = 0.147, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2559318135713342;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.11344889787192733;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.26288983307093183;  // std dev = 1.071, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5668638481927336;  // std dev = 0.289, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11325498066686167;  // std dev = 0.026, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D), follows(A, C) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.15041440412320584;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.21493053315546407;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22147314399215928;  // std dev = 0.010, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.004830214134993738;  // std dev = 0.694, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.046259497932262306;  // std dev = 0.112, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21616135037673917;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.11494217770369372;  // std dev = 0.023, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16037313352286756;  // std dev = 0.636, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.14247836847906362;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.13473234686462687;  // std dev = 1.380, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.18445796164181824;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.19111831674280416;  // std dev = 0.007, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.17348092366683288;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return -0.04292179550983127;  // std dev = 0.109, 143.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=14 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.27386770448594544;  // std dev = 0.187, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11426125875614594;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.2341638494953686;  // std dev = 1.258, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.011023675906352379;  // std dev = 1.391, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16711674624940304;  // std dev = 0.005, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(E, A) )
%   | | then return 0.3024813253943601;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19149177999603942;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15967678759268775;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3140213691530564;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07797787607611073;  // std dev = 0.004, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2508758796423841;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.471440007298089;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11633138327022649;  // std dev = 0.026, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15782816907118544;  // std dev = 0.112, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | else return 0.14943977320643675;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.0725729230998779;  // std dev = 0.004, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1613290855553127;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08582736224509745;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002395043235668527;  // std dev = 0.159, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.27383180934674844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.019666713523087527;  // std dev = 0.434, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.013851063247333992;  // std dev = 0.844, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.253', 'seconds']
Refined model CLL: -0.103109


******************************************
Best model found
******************************************
Results 

CLL : -0.099478 

AUC ROC : 0.994682 

AUC PR : 0.368948 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 7.495 

Total Inference Time : 11.606555461883545 

Total revision time: 27.754955030441284
Best scored revision CLL: -0.103109


Results 

CLL : -0.099478 

AUC ROC : 0.994682 

AUC PR : 0.368948 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 27.772951818466186 

Total Inference Time : 11.606555461883545 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.419
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048004619467279;  // std dev = 1.406, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03656103592934412;  // std dev = 0.265, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0996469295377865;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07596093447154255;  // std dev = 3.310, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5681223361995933;  // std dev = 1.079, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.23415276188352266;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8191915486892011;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5884051924240863;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681810661364621;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5681810661364621;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.043195487865614224;  // std dev = 3.683, 221.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=21 */
%   | | | else return 0.039415185909406535;  // std dev = 2.817, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4866242587144154;  // std dev = 2.753, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1175193824042619;  // std dev = 0.036, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.12579450672926967;  // std dev = 0.002, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14412643528665847;  // std dev = 0.154, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.266153358445071;  // std dev = 2.140, 79.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=73 */
%   | else return 0.4460376101505459;  // std dev = 0.200, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3142398152775342;  // std dev = 3.94e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6421164949462371;  // std dev = 0.192, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08284349189802181;  // std dev = 2.344, 252.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=9 */
%   | | else return -0.10666297808289449;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04460349021159525;  // std dev = 3.284, 255.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2588653880202126;  // std dev = 0.101, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5420022158135742;  // std dev = 0.801, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11648564848012541;  // std dev = 0.124, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.11685359564889937;  // std dev = 0.146, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2045089977681989;  // std dev = 3.362, 118.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=107 */
%   | else return -0.07760598968153196;  // std dev = 2.063, 253.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02982460136586018;  // std dev = 0.641, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17537388872847604;  // std dev = 1.705, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23257262555392516;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0459767598546977;  // std dev = 0.150, 218.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019580737885875773;  // std dev = 1.676, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | | else return 0.057553981649933805;  // std dev = 1.729, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1813509227654932;  // std dev = 0.166, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.258092454182893;  // std dev = 1.319, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09175735239110042;  // std dev = 0.045, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39813400135290766;  // std dev = 1.297, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10455044878281207;  // std dev = 0.150, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19550506856039201;  // std dev = 1.198, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.14131412540809912;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08474754727059926;  // std dev = 0.033, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08088968425382706;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.06602018329584704;  // std dev = 0.757, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03770421147402586;  // std dev = 1.016, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20889997747079736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04016472396108837;  // std dev = 1.434, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.038', 'seconds']
Parameter learned model CLL:-0.110085 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 156, 0], 'true,false,false': [0.266, 24, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.406, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [3.31, 55, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.079, 1, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.14, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.683, 200, 21], 'false,false,false,false': [2.817, 47, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.753, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.036, 157, 0], 'false,true,false,false': [0.002, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.14, 6, 73], 'true,false': [0.2, 0, 4], 'false,true,true': [3.94e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.192, 0, 23], 'false,false,true,false': [2.344, 243, 9], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.284, 164, 91], 'false,true': [0.101, 0, 13], 'false,false,true': [0.801, 0, 22], 'false,false,false,true': [0.124, 39, 0], 'false,false,false,false': [0.146, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [3.362, 11, 107], 'true,false': [2.063, 242, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.641, 12, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.705, 3, 80], 'true,false,true': [0.036, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 196, 22], 'false,false,false,true': [1.676, 53, 13], 'false,false,false,false': [1.729, 24, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.166, 2, 77], 'false,true,true,true': [1.319, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.045, 207, 0], 'false,false,true': [1.297, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.198, 1, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.033, 214, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.757, 9, 2], 'false,true': [1.016, 22, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.434, 21, 8]}]
{'': [0.2313190694555885, 0.22750000000000006], 'true': [0.03598567560485849, 0.010868252626494214], 'false': [0.23999999999999952, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, -3.0839528461809902e-18], 'true,false': [-1.3664283380001927e-16, 0.07100591715976336], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02354837259176746, 0.09506823566841709], 'false': [0.0700136684121156, 0.13889782446743748], 'false,false': [0.03329369797859688, 0.16689393215698636], 'false,false,false': [0.002624629381482446, 0.15217520403838927], 'false,true': [nan, 0.0700136684121156], 'false,false,true': [nan, 0.03329369797859688]}
{'': [0.02585073973288465, 0.09282142858453721], 'false': [nan, 0.09282142858453722], 'false,false': [-2.612289469706251e-16, 0.07819913121547913], 'false,false,false': [0.061389624974286204, 0.13684334108497123], 'true': [0.02578409845284247, 0.016207972289078443], 'true,true': [0.01641238560339946, 0.25], 'true,false': [0.0033449638538165516, 0.00488536242733334], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.05787422308523153, 0.00020599705733380136], 'false': [1.8013208152988845e-05, 0.0005172262894676562], 'false,false': [nan, 0.0005172262894676562], 'false,false,false': [nan, 0.0005172262894676562], 'false,true': [nan, 1.8013208152986613e-05], 'false,true,false': [8.364912051130568e-06, 5.4351498389250604e-08]}
{'': [0.05716044391163562, 0.06050916336669718], 'false': [9.143013143971877e-17, 0.05762409096449621], 'false,false': [0.060398314993339, -1.8503717077085942e-18], 'false,false,true': [0.0016020782316556144, 0.021808126924095547], 'true': [0.05798803204774891, 0.010016672477381139], 'false,true': [9.143013143971877e-17, nan]}
{'': [0.04229905488810976, 0.07781583106346612], 'false': [0.0007901342582950627, 0.08183481919926837], 'false,false': [0.029154822162047133, 0.00047614858347773094], 'true': [nan, 0.042299054888109394], 'true,false': [nan, 0.04229905488810976], 'false,false,false': [0.00039470927270929127, 0.0005596624623196083]}
{'': [0.0592045718062222, 0.020528339684743564], 'true': [0.09579983667876271, 0.016822445564295546], 'false': [nan, 0.020528339684743564], 'false,false': [nan, 0.020528339684743564], 'false,false,false': [nan, 0.020528339684743564]}
{'': [0.03428247090250126, 0.03482740802405299], 'false': [nan, 0.034827408024053395], 'false,false': [0.02259385508622425, 0.05989870239208208], 'false,false,false': [0.04258480647156918, 0.09055998426119581], 'true': [0.035015689879574804, 0.0006591689299785611], 'true,false': [0.0006591689299785611, nan]}
{'': [0.02758320204615456, 0.03443991429018678], 'false': [0.02176980968419689, 0.07595915284473961], 'false,false': [0.09349847605631052, 0.00046600034724099404], 'false,true': [0.05269868001620365, 9.82322649748561e-06], 'false,true,true': [0.05269868001620365, nan], 'false,false,false': [nan, 0.00046600034724099404]}
{'': [0.022037621351638215, 0.048691327788777265], 'false': [0.03034075938899754, 0.06945391212372089], 'false,false': [0.0, 0.07089982175151288], 'false,false,false': [nan, 0.07089982175151288], 'true': [0.014028275458838434, 0.0024621343520906756], 'true,true': [0.015101449076314496, 1.780729213209869e-05], 'true,false': [4.94816077425782e-06, 0.02737850870980984], 'true,false,false': [2.7755575615628915e-18, 0.05216277538772645]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 21.964
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.13250527050796504;  // std dev = 0.096, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, C) )
%   | | then return 0.7219281704122615;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(A, E), follows(E, A) )
%   | | | then return 0.5219281704122605;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7219281704122605;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.43912759901508336;  // std dev = 0.885, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7415060754970241;  // std dev = 0.141, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12647354377927048;  // std dev = 2.00e-07, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5403254606655847;  // std dev = 0.922, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1345301463144845;  // std dev = 1.988, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.2445463957148158;  // std dev = 2.122, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.5333801098456584;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.4466592426369869;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.5627377399663023;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.6853375485264324;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5732188418851117;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5706341967489558;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11314826122607637;  // std dev = 1.19e-07, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07387662113119146;  // std dev = 2.028, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.15320778172425067;  // std dev = 2.210, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42934089275905307;  // std dev = 0.113, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | | else return 0.3925520417057921;  // std dev = 0.976, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return 0.509102606553271;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.49506253426812696;  // std dev = 0.227, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6565403324312875;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6755606444085092;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7284250271917861;  // std dev = 0.164, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10228155998774122;  // std dev = 1.13e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.17472857711658962;  // std dev = 0.221, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3104450138529925;  // std dev = 0.977, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.21897245787703373;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.3434308044926952;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4290603183301545;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08029574796072071;  // std dev = 0.401, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33005816260826387;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3554276119551876;  // std dev = 1.116, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08095256691877105;  // std dev = 1.970, 253.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=9 */
%   | | else return -0.09326472062868087;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.178476967112016;  // std dev = 1.888, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return -0.12099607982986749;  // std dev = 1.085, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2722603388712079;  // std dev = 0.061, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then return -0.058640630175836476;  // std dev = 0.150, 146.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=17 */
%   | | else return -0.05096957457290618;  // std dev = 0.102, 46.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26720934244098454;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17411027224928785;  // std dev = 0.876, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.500552539049686;  // std dev = 0.338, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11930078193688592;  // std dev = 0.038, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.21924931715594181;  // std dev = 0.132, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( follows(F, C), recursion_accounttype(F, B) )
%   | | | then return 0.04154061678282834;  // std dev = 1.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.21455368116876436;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2216450079722799;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.054500941111881;  // std dev = 0.131, 234.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.016103811123183223;  // std dev = 1.004, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.10107615656648467;  // std dev = 0.513, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.07123757238561779;  // std dev = 0.772, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02629342575718139;  // std dev = 1.329, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), tweets(F, E) )
%   | | | then return 0.16349105877446712;  // std dev = 1.351, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return -0.07068941200542378;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.19072174928907304;  // std dev = 0.060, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.27647609633627984;  // std dev = 0.109, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then return -0.06930590327506236;  // std dev = 0.054, 133.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=3 */
%   | | else return -0.016852604289884783;  // std dev = 0.200, 89.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=20 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2825283270058746;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.007774227993002013;  // std dev = 1.003, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.023458406103683195;  // std dev = 1.490, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.1070189892537746;  // std dev = 1.655, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.1802482517969599;  // std dev = 0.124, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.027918561535051477;  // std dev = 1.269, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.15928466514166384;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.273595467402802;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.22267486075046194;  // std dev = 0.065, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07390988572057636;  // std dev = 0.032, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3688458976137354;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13986642641944805;  // std dev = 0.035, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1424206576704442;  // std dev = 0.986, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.24225601618152884;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.032840471121809045;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06766850347033251;  // std dev = 0.045, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1717463908170852;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.021480869106004073;  // std dev = 0.667, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.05157795383948896;  // std dev = 0.586, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.22286286304570646;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.00243860580290485;  // std dev = 0.224, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.924', 'seconds']
Refined model CLL: -0.103881


******************************************
Best model found
******************************************
Results 

CLL : -0.104117 

AUC ROC : 0.994678 

AUC PR : 0.406975 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 21.964 

Total Inference Time : 12.436715602874756 

Total revision time: 45.00722633171081
Best scored revision CLL: -0.103881


Results 

CLL : -0.104117 

AUC ROC : 0.994678 

AUC PR : 0.406975 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 45.02522311973571 

Total Inference Time : 12.436715602874756 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.236
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.031564855112908505;  // std dev = 0.266, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12502872987848984;  // std dev = 2.479, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5708603824301259;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.03224484420058788;  // std dev = 1.915, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   | | | else return 0.016508271826262483;  // std dev = 2.126, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5284715937163647;  // std dev = 1.168, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11469191083081635;  // std dev = 0.025, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12052568050273137;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15306079721769744;  // std dev = 0.140, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25071279991081535;  // std dev = 0.698, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2970343212148184;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6385184963406293;  // std dev = 0.129, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11121568140100652;  // std dev = 0.778, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | else return 0.11182349615600469;  // std dev = 0.351, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04001964822080451;  // std dev = 1.192, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23894091378640647;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5632750052877886;  // std dev = 0.276, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12332633598809681;  // std dev = 0.140, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1415718450308184;  // std dev = 0.140, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29986274257209095;  // std dev = 0.361, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.0920687515498777;  // std dev = 0.577, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1104282601865913;  // std dev = 1.080, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18470057749498667;  // std dev = 0.012, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05572552902517061;  // std dev = 0.126, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.057200881522232495;  // std dev = 0.984, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.09652504230780419;  // std dev = 1.073, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09245157993385404;  // std dev = 0.285, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.12873309794037618;  // std dev = 0.829, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08856342584243049;  // std dev = 0.061, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37785860541846517;  // std dev = 0.311, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13439543320619157;  // std dev = 0.185, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19058789757512842;  // std dev = 0.307, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.13927825027642515;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08168518264944244;  // std dev = 0.008, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0890801176729678;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0637682553517365;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01988713612272941;  // std dev = 0.629, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053377128196965606;  // std dev = 0.865, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.777', 'seconds']
Parameter learned model CLL:-0.109583 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false': [0.0, 8, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 12, 0], 'false,false': [0.499, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 24, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.479, 23, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.163, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [1.915, 48, 6], 'false,false,false,false': [2.126, 26, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.168, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 29, 0], 'false,true,false,false': [0.011, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.14, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.698, 1, 11], 'true,false': [0.0, 0, 0], 'false,true,true': [1.49e-08, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.129, 0, 7], 'false,false,true,false': [0.778, 60, 1], 'false,false,false': [0.351, 10, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.192, 25, 14], 'false,true': [1.05e-08, 0, 7], 'false,false,true': [0.276, 0, 10], 'false,false,false,true': [0.14, 25, 0], 'false,false,false,false': [0.14, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.361, 0, 19], 'true,false': [0.577, 48, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.08, 10, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.012, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.126, 33, 3], 'false,false,false,true': [0.984, 26, 4], 'false,false,false,false': [1.073, 8, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.285, 1, 11], 'false,true,true,true': [0.829, 1, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 50, 0], 'false,false,true': [0.311, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.307, 0, 14], 'true,true,false': [0.0, 0, 7], 'true,false,true': [0.008, 37, 0], 'true,false,false,true': [0.028, 8, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true': [0.629, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.865, 8, 6]}]
{'': [0.22574576726686382, 0.22592152199762194], 'false': [0.18749999999999983, 0.24852071005917165], 'true': [0.0, 4.163336342344337e-17], 'false,true': [0.0, -1.1564823173178714e-17], 'true,false': [2.7755575615628914e-17, -6.938893903907228e-18], 'false,true,true': [1.4802973661668753e-16, 0.0]}
{'': [1.9737298215558337e-16, 0.12276865425231265], 'false': [0.07050730987310372, 0.1514797162877957], 'false,false': [2.523234146875356e-18, 0.18628872798012183], 'false,false,false': [nan, 0.1862887279801219], 'false,true': [nan, 0.07050730987310372], 'false,false,true': [nan, 2.523234146875356e-18]}
{'': [0.002400623528538032, 0.11286427900706897], 'false': [nan, 0.1128642790070686], 'false,false': [-1.1102230246251565e-16, 0.09576355838493976], 'false,false,false': [0.06790551322146388, 0.1412815586517278], 'true': [0.002400623528538032, nan], 'true,true': [0.002400623528538032, nan], 'false,false,true': [0.0, -6.344131569286608e-17]}
{'': [0.04260890020715424, 0.0006938745237212123], 'false': [2.653294476591921e-05, 0.0009333429390538701], 'false,false': [nan, 0.0009333429390538701], 'false,false,false': [nan, 0.0009333429390538701], 'false,true': [nan, 2.653294476591921e-05], 'false,true,false': [2.174627347203111e-05, 2.146986014455593e-05]}
{'': [0.04058269348997042, 0.07561588363290829], 'false': [2.7755575615628914e-17, 0.07466067708526579], 'false,false': [0.061053947946018136, 0.12310754615565787], 'false,false,true': [0.002361329346835385, 0.009925793519124195], 'true': [0.04058269348997042, nan], 'false,true': [2.7755575615628914e-17, nan]}
{'': [0.03644905298929363, 0.07605821821360725], 'false': [1.586032892321652e-17, 0.08046224717240916], 'false,false': [0.0076420454148128595, 0.0010813745296029908], 'true': [nan, 0.03644905298929362], 'true,false': [nan, 0.03644905298929363], 'false,false,false': [0.0007826444166673685, 0.0014014246212374706]}
{'': [0.03774680688093929, 0.05556857528464792], 'false': [nan, 0.05556857528464788], 'false,false': [nan, 0.05556857528464792], 'false,false,false': [nan, 0.05556857528464792], 'true': [0.006869729058546226, 0.006799027436670462]}
{'': [8.643303457413056e-06, 0.03697697609545359], 'false': [nan, 0.03697697609545361], 'false,false': [0.015826281416036418, 0.05326945004102139], 'false,false,false': [0.03224806399175708, 0.08220278206849153], 'true': [8.643303457413056e-06, nan]}
{'': [0.08135387964681255, 0.036289516974743724], 'false': [0.018315775236035226, 0.07018899356872284], 'false,false': [0.009698478047738091, 0.0026313767074560078], 'false,true': [0.06253035989472741, 7.388510736869191e-05], 'false,true,true': [0.06253035989472741, nan], 'false,false,false': [nan, 0.0026313767074560078]}
{'': [0.015549598208967537, 0.041105899909591494], 'false': [0.028225910334642595, 0.05342509969997424], 'false,false': [nan, 0.05342509969997424], 'false,false,false': [nan, 0.05342509969997424], 'true': [0.005080577117409592, 4.0939574273256494e-05], 'true,true': [0.00674330570747527, 0.0], 'true,false': [1.625639180070577e-06, 0.00018211791327889387], 'true,false,false': [9.95093167648238e-05, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.459
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.14482988218597315;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08578487415644509;  // std dev = 1.636, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.29448226488274193;  // std dev = 1.488, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return -0.060956161659768617;  // std dev = 0.907, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return -0.1120134950883977;  // std dev = 0.003, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.050451224612988274;  // std dev = 1.257, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.20260644035775432;  // std dev = 1.807, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4175135841583098;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5194134365385035;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return 0.6591731465873796;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6786284802197958;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.10577432793089017;  // std dev = 0.003, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.10030683702368622;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return -0.14116893233439345;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.17012640631299014;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.3005327250122488;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23374806927539685;  // std dev = 0.282, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.490960024011839;  // std dev = 0.096, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09814309458001573;  // std dev = 0.601, 53.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=1 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.09236589450510674;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11662051098891262;  // std dev = 1.084, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.26985973836897525;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3022872092262475;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08849352699024225;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.09432925346708429;  // std dev = 0.355, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2551722425694894;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.39013969125349507;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4928176146632552;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11525389652758959;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.12567400071373155;  // std dev = 0.282, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(A, F), follows(C, E) )
%   | | | then return 0.2198519691850433;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24317974693576472;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(C, E) )
%   | | | then return -0.0835439696075805;  // std dev = 0.793, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return -0.04962680616941712;  // std dev = 0.332, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( tweets(A, G), tweets(C, G) )
%   | | then return -0.04230409685040817;  // std dev = 0.150, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2968663809072643;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11297616380439765;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.0326489948410449;  // std dev = 0.262, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.18590225127205579;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.21230381589731898;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17709649774527736;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2413557783939707;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07793687094848586;  // std dev = 0.004, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2781741907700276;  // std dev = 0.143, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10327734138764619;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.07669838847116134;  // std dev = 0.411, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.009857042185090877;  // std dev = 0.861, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16088205603239283;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.17128172839227124;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.07077264259718648;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.07789746268136291;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.06394394592718283;  // std dev = 0.263, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.054635879177569825;  // std dev = 0.559, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.02435149933986191;  // std dev = 0.265, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14034137972613017;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.18716145596550526;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13187028442621462;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06672619712887609;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.20337711896669358;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08803086127930604;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09833492166462808;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, I) )
%   | | then return 0.0866708844544882;  // std dev = 0.452, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.030904225658405355;  // std dev = 0.312, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.620', 'seconds']
Refined model CLL: -0.105053


******************************************
Best model found
******************************************
Results 

CLL : -0.101793 

AUC ROC : 0.992248 

AUC PR : 0.319971 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 6.459 

Total Inference Time : 7.19262170791626 

Total revision time: 17.66095811843872
Best scored revision CLL: -0.105053


Results 

CLL : -0.101793 

AUC ROC : 0.992248 

AUC PR : 0.319971 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 17.692443199157715 

Total Inference Time : 7.19262170791626 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.571
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.1033895264389493;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287097323557764;  // std dev = 0.144, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01063548178302707;  // std dev = 0.290, 74.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0763585495585803;  // std dev = 0.827, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17257920085005432;  // std dev = 3.246, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5816579105631171;  // std dev = 0.270, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.6101166615614271;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5588255925627226;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.009922036133883576;  // std dev = 3.142, 101.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=17 */
%   | | | else return 0.030509257975516686;  // std dev = 2.704, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5511248803548325;  // std dev = 1.475, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12499883320888837;  // std dev = 0.029, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.1265806984091694;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18891484608802595;  // std dev = 0.236, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25339410894744774;  // std dev = 1.009, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.291879561361771;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.503359512484963;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6062817714281475;  // std dev = 0.197, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12027298041654198;  // std dev = 0.729, 96.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=1 */
%   | | else return 0.028821864395720043;  // std dev = 0.312, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035899690306841675;  // std dev = 1.884, 89.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=30 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24800605163044456;  // std dev = 0.138, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5225247084647594;  // std dev = 0.417, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12952719819354347;  // std dev = 0.156, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.13626883165577225;  // std dev = 0.191, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3044428749244515;  // std dev = 0.577, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10318266021743414;  // std dev = 0.587, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08538240621248425;  // std dev = 1.460, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18073983437630567;  // std dev = 0.052, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, E) )
%   | | then return 0.26069292372986497;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.032479173826604125;  // std dev = 0.156, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02325783720322346;  // std dev = 1.211, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
%   | | | else return 0.007359169616692218;  // std dev = 1.514, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11124152381698778;  // std dev = 0.239, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24462978782508857;  // std dev = 0.530, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09498013970494924;  // std dev = 0.056, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3491984311163316;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12496619884687506;  // std dev = 0.250, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17019555876965922;  // std dev = 0.977, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.15031656030765608;  // std dev = 0.270, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.0847471217448899;  // std dev = 0.005, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09378123864526998;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.12510286362314707;  // std dev = 0.586, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03992763697779431;  // std dev = 0.780, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018914607222350322;  // std dev = 1.207, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.788', 'seconds']
Parameter learned model CLL:-0.110863 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [6.32e-08, 62, 0], 'true,false,false': [0.192, 25, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.5, 10, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.144, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.29, 64, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.827, 15, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.246, 34, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.27, 0, 22], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 4], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.142, 84, 17], 'false,false,false,false': [2.704, 35, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.475, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 57, 0], 'false,true,false,false': [0.006, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.236, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.009, 2, 22], 'true,false': [0.0, 0, 0], 'false,true,true': [0.016, 0, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.197, 0, 19], 'false,false,true,false': [0.729, 95, 1], 'false,false,false': [0.312, 26, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.884, 59, 30], 'false,true': [0.138, 0, 12], 'false,false,true': [0.417, 0, 20], 'false,false,false,true': [0.156, 28, 0], 'false,false,false,false': [0.191, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.577, 0, 45], 'true,false': [0.587, 89, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.46, 18, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.052, 0, 31], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 62, 10], 'false,false,false,true': [1.211, 44, 10], 'false,false,false,false': [1.514, 23, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.239, 2, 22], 'false,true,true,true': [0.53, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 76, 0], 'false,false,true': [0.465, 0, 19], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.25, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.977, 1, 31], 'true,true,false': [0.27, 0, 11], 'true,false,true': [0.005, 69, 0], 'true,false,false,true': [0.024, 9, 0], 'true,false,false,false': [0.586, 5, 1], 'false,true': [0.78, 14, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.207, 19, 10]}]
{'': [0.22049997086416984, 0.22611570247933835], 'false': [0.19102040816326543, 0.25], 'true': [0.022714981070850387, 0.011234504132231475], 'false,true': [-2.9605947323337506e-16, 1.708035422500241e-17], 'true,false': [6.446456272017038e-17, 0.03698224852071011], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.0006464720078577235, 0.1313546277688495], 'false': [0.08435931182452283, 0.1736062229018903], 'false,false': [0.04272019501247702, 0.19874913013605328], 'false,false,false': [nan, 0.19874913013605347], 'false,true': [nan, 0.08435931182452283], 'false,false,true': [nan, 0.04272019501247702]}
{'': [0.0033016600533834635, 0.13180047084530888], 'false': [nan, 0.13180047084530788], 'false,false': [0.002988808057595818, 0.11778153134228164], 'false,false,false': [0.09775930019230439, 0.16242711678470506], 'true': [0.0033016600533834635, nan], 'true,true': [0.0033016600533834635, nan], 'false,false,true': [0.007892321277089664, -9.868649107779169e-17]}
{'': [0.034519834862642484, 0.001406444188210542], 'false': [1.2116846795539547e-05, 0.0015024759259969788], 'false,false': [nan, 0.0015024759259969788], 'false,false,false': [nan, 0.0015024759259969788], 'false,true': [nan, 1.211684679554255e-05], 'false,true,false': [1.4540802660463944e-05, 2.062019985306281e-06]}
{'': [0.04239092576711728, 0.0826919641536821], 'false': [0.0031948928994468637, 0.0823152863743247], 'false,false': [0.07776477719930888, 0.09751714414262179], 'false,false,true': [0.0020462861712518808, 0.005535473408317472], 'true': [0.04239092576711728, nan], 'false,true': [2.0843995395591897e-05, 0.0]}
{'': [0.039874476652895605, 0.07951691316262208], 'false': [0.0015932080753826665, 0.08567462877460032], 'false,false': [0.008714226348254427, 0.001079195767618527], 'true': [nan, 0.03987447665289561], 'true,false': [nan, 0.039874476652895605], 'false,false,false': [0.0008687717070239655, 0.0012600376961465574]}
{'': [0.04194856844254432, 0.06271526982537666], 'false': [nan, 0.06271526982537656], 'false,false': [nan, 0.06271526982537666], 'false,false,false': [nan, 0.06271526982537666], 'true': [0.0074106515626762475, 0.003831334582575332]}
{'': [0.0002788077459080149, 0.03488684614928693], 'false': [nan, 0.034886846149287], 'false,false': [0.024317838702335615, 0.04343704456665096], 'false,false,false': [0.027159105130777603, 0.06949183756482323], 'true': [8.803602862629232e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.05727102241876225, 0.0341442095132829], 'false': [0.022491856805658034, 0.050795751661395355], 'false,false': [0.011385624605242908, 0.0013536963908367574], 'false,true': [0.013378288512516032, 4.066766044722623e-05], 'false,true,true': [0.013378288512516032, nan], 'false,false,false': [nan, 0.0013536963908367574]}
{'': [0.02531542340172717, 0.03980565977938717], 'false': [0.026445637647934218, 0.05020623958071947], 'false,false': [nan, 0.05020623958071943], 'false,false,false': [nan, 0.05020623958071947], 'true': [0.023972079357321242, 0.004209308616966962], 'true,true': [0.029831347178151484, 0.006632853197552815], 'true,false': [2.9435103801077595e-07, 0.02318884863065353], 'true,false,false': [6.53841244817013e-05, 0.057285418875158416]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.053
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.643863220813798;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else return -0.1300863590181347;  // std dev = 0.108, 85.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.4295775065280837;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.6528067455442876;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7313030711336886;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7606300389475332;  // std dev = 5.16e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1267410217935008;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7326787518214977;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1254446385283913;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.29701438684128156;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.29744840516913434;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5715602353009402;  // std dev = 0.058, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.6064096201812548;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5524434047534629;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.09602354869539781;  // std dev = 0.702, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | | else return -0.019462371526833732;  // std dev = 1.752, 53.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=7 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.07699993855539165;  // std dev = 2.098, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0.29129187221327374;  // std dev = 1.548, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.4236968058984072;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2198084315846952;  // std dev = 1.157, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4090712073891705;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.558425131754848;  // std dev = 0.212, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F) )
%   | | then return 0.5563905383360098;  // std dev = 0.107, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.6531873445984877;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.10736663160167254;  // std dev = 0.004, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, H) )
%   | | then return -0.12022557549295897;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.2518625863424593;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3343516553999713;  // std dev = 0.065, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.07099900479487434;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.30793335211388134;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22657735794622225;  // std dev = 0.960, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5089948118333361;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4358020249719221;  // std dev = 0.180, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09442641992317971;  // std dev = 0.526, 97.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.046754574025274255;  // std dev = 0.536, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.01703832800606729;  // std dev = 1.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27056576720198755;  // std dev = 0.091, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, E) )
%   | | then return -0.019955961739545985;  // std dev = 0.162, 52.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
%   | | else return -0.08878305864127278;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.2928591750653071;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2798291121713403;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23276232247457174;  // std dev = 0.975, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.48489184174925914;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.09776703723311851;  // std dev = 0.016, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12130982627066271;  // std dev = 0.329, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.22346952933193295;  // std dev = 0.074, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.018707216557143958;  // std dev = 0.847, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.36182693981393643;  // std dev = 0.153, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26273744491711754;  // std dev = 0.136, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.08765837175288389;  // std dev = 0.032, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2548146825686184;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08163010059921312;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(H, A) )
%   | | then return -0.008996051726550762;  // std dev = 0.263, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04635968820048093;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18409036037799478;  // std dev = 0.070, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.08903444071159086;  // std dev = 0.304, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2633540027114799;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.19285594406514572;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.07931407110620978;  // std dev = 0.032, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.017185760662803366;  // std dev = 0.695, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.04268412573932298;  // std dev = 0.491, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.007409566836753694;  // std dev = 0.585, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.11889013891741189;  // std dev = 0.848, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1634678418453982;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.13584672886663793;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.18015017159381996;  // std dev = 0.120, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.0735520830336773;  // std dev = 0.027, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.21343106671501386;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3259206287536695;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.08495240633420972;  // std dev = 0.003, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.21811972444666433;  // std dev = 0.277, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14178721168152142;  // std dev = 0.080, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16032166050337848;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23360529118493106;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0663186631428804;  // std dev = 0.026, 97.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.1955359612269868;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08603422289338328;  // std dev = 0.063, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.07627266374992679;  // std dev = 0.845, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.00980117922689246;  // std dev = 0.368, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.002203413484592761;  // std dev = 0.263, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.900', 'seconds']
Refined model CLL: -0.099025


******************************************
Best model found
******************************************
Results 

CLL : -0.095433 

AUC ROC : 0.994061 

AUC PR : 0.445269 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 9.053 

Total Inference Time : 7.6158013343811035 

Total revision time: 22.755427526474
Best scored revision CLL: -0.099025


Results 

CLL : -0.095433 

AUC ROC : 0.994061 

AUC PR : 0.445269 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 22.786912607192995 

Total Inference Time : 7.6158013343811035 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.003
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.05361577078284073;  // std dev = 0.284, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.11346808403568258;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7283413040760957;  // std dev = 0.197, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.014076588426682635;  // std dev = 0.286, 99.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0889960522837884;  // std dev = 1.285, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7336614886487065;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13407325008061505;  // std dev = 3.885, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5758047548547094;  // std dev = 0.318, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7289000433626122;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5694526052707138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5966696059247427;  // std dev = 0.177, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5570955662330107;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.019180320216449144;  // std dev = 3.669, 131.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=23 */
%   | | | else return 0.04408983923150274;  // std dev = 3.037, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5198665174695453;  // std dev = 2.513, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1272733443338286;  // std dev = 0.048, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.12910815161422307;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16221270980349106;  // std dev = 0.142, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3220729033756354;  // std dev = 0.480, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.46916615195825817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29774269322777996;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.5021845719272195;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5930899089399084;  // std dev = 0.927, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.10324382582922745;  // std dev = 1.303, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   | | else return 0.036079405585459044;  // std dev = 0.325, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038629722422326464;  // std dev = 2.235, 128.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=46 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25292277753522924;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46566298180493115;  // std dev = 1.851, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12453429809471707;  // std dev = 0.109, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.1273232838896006;  // std dev = 0.114, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2683952292726846;  // std dev = 1.626, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return -0.09367968971580848;  // std dev = 1.274, 170.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049747921761655496;  // std dev = 1.883, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1819180383951875;  // std dev = 0.074, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.2565894267117733;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0390989397273004;  // std dev = 0.155, 102.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.021254603783285593;  // std dev = 1.626, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
%   | | | else return 0.02453417756405618;  // std dev = 2.098, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17999876954349942;  // std dev = 0.072, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2541611680572335;  // std dev = 0.613, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09847946663154288;  // std dev = 0.088, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4229630364107523;  // std dev = 0.656, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11280663981291743;  // std dev = 0.181, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18240684694647874;  // std dev = 0.593, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.1520812959173195;  // std dev = 0.281, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08660205069355734;  // std dev = 0.007, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10122988537073943;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03925370846073033;  // std dev = 0.620, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.011070881057902096;  // std dev = 1.127, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013107347750042218;  // std dev = 1.735, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.839', 'seconds']
Parameter learned model CLL:-0.111397 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 62], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false': [0.284, 31, 3], 'false,true,true,true': [0.964, 1, 13], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [0.0, 18, 0], 'false,false': [0.436, 35, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.197, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.286, 86, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.285, 38, 2], 'false,false,false,true': [0.0, 0, 3], 'false,false,false,false': [3.885, 60, 25]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.318, 0, 36], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 5], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [3.669, 108, 23], 'false,false,false,false': [3.037, 47, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.513, 3, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.048, 87, 0], 'false,true,false,false': [0.003, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.142, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.48, 0, 41], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.927, 1, 23], 'false,false,true,false': [1.303, 137, 3], 'false,false,false': [0.325, 34, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.235, 82, 46], 'false,true': [0.177, 0, 17], 'false,false,true': [1.851, 2, 30], 'false,false,false,true': [0.109, 46, 0], 'false,false,false,false': [0.114, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.626, 2, 69], 'true,false': [1.274, 166, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.883, 37, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 48], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 89, 13], 'false,false,false,true': [1.626, 46, 18], 'false,false,false,false': [2.098, 35, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.072, 0, 42], 'false,true,true,true': [0.613, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 120, 0], 'false,false,true': [0.656, 0, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.181, 72, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.593, 0, 49], 'true,true,false': [0.281, 0, 13], 'true,false,true': [0.007, 92, 0], 'true,false,false,true': [0.023, 16, 0], 'true,false,false,false': [0.62, 17, 3], 'false,true': [1.127, 34, 16], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.735, 30, 12]}]
{'': [0.2125978996084018, 0.22486615110053673], 'false': [0.24816326530612198, 0.19013128112267944], 'false,true': [0.055363321799307655, -3.0839528461809902e-18], 'true': [0.015621063240110127, 0.019728841043196138], 'false,true,true': [0.06632653061224467, 1.4802973661668753e-16], 'true,false': [3.8616453030440226e-17, 0.08044982698961922]}
{'': [0.0007730459292236702, 0.12340991761038923], 'false': [0.08204957401363684, 0.15166849989474038], 'false,false': [0.04125115691513849, 0.18332788005895467], 'false,false,false': [-7.401486830834377e-17, 0.17754238755883633], 'false,true': [nan, 0.08204957401363684], 'false,false,true': [nan, 0.04125115691513849]}
{'': [0.005192069560553974, 0.13148810056771476], 'false': [nan, 0.13148810056771496], 'false,false': [0.002294098560824187, 0.11950489057183693], 'false,false,false': [0.10274590941375063, 0.15628770226903196], 'true': [0.0028002699110584294, 0.014928535567262369], 'true,false': [0.01714532837748998, 0.0], 'true,true': [0.0028002699110584294, nan], 'false,false,true': [0.006264418470091205, -1.2111523905001707e-16]}
{'': [0.06575851854347943, 0.0004118577418603278], 'false': [2.2629620768110926e-05, 0.00035978308832180464], 'false,false': [nan, 0.00035978308832180464], 'false,false,false': [nan, 0.00035978308832180464], 'false,true': [nan, 2.262962076811727e-05], 'false,true,false': [2.6653892066886242e-05, 3.8957573090926525e-07]}
{'': [0.00599891756981394, 0.08292769019160945], 'false': [0.0024614703896045365, 0.08251270669066327], 'false,false': [0.07616108377691674, 0.10562807567650288], 'false,false,true': [0.035823137044490215, 0.01211801350436999], 'true': [0.005630079685383086, 0.0], 'false,true': [1.3288305193404071e-05, 0.0]}
{'': [0.0390389137107209, 0.09315563809707457], 'false': [0.0018329205752846984, 0.10090467553042375], 'false,false': [0.10709318307999688, 0.00030588896919428926], 'true': [nan, 0.03903891371072085], 'true,false': [nan, 0.0390389137107209], 'false,false,false': [0.00025937371257796275, 0.00036096161431466926]}
{'': [0.044950339577473436, 0.06223321654133039], 'false': [nan, 0.06223321654133043], 'false,false': [nan, 0.06223321654133039], 'false,false,false': [nan, 0.06223321654133039], 'true': [0.037226292737398005, 0.009553959901295846]}
{'': [0.00032728551391608907, 0.04552070992677295], 'false': [nan, 0.04552070992677289], 'false,false': [0.023993784117544506, 0.0634766974778047], 'false,false,false': [0.04132435229621231, 0.09363539161478926], 'true': [0.00011416166074106522, 8.947440631557058e-05], 'true,false': [8.947440631557058e-05, nan]}
{'': [0.005132917218787185, 0.03722971073897611], 'false': [0.020826326510802826, 0.05968669864138909], 'false,false': [0.017205681376745403, 0.00045531320858436316], 'false,true': [0.01444090620189712, 6.434898360262083e-05], 'false,true,true': [0.01444090620189712, nan], 'false,false,false': [nan, 0.00045531320858436316]}
{'': [0.019107310781421923, 0.04653101911677216], 'false': [0.02541528778043638, 0.07166654060598265], 'false,false': [nan, 0.07166654060598268], 'false,false,false': [nan, 0.07166654060598265], 'true': [0.007106415499716543, 0.003353889439954465], 'true,true': [0.0071882390852484514, 0.0060711920199986984], 'true,false': [4.846117216044014e-07, 0.011641826967695874], 'true,false,false': [3.247151679284903e-05, 0.01922217954869351]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.056
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8422759192264967;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.10481402786345073;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7267086071664478;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7226658968615453;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.06569457414581358;  // std dev = 1.268, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return -0.12956459096750497;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12065920139103022;  // std dev = 3.690, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5576091669404746;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(E, A) )
%   | | then return 0.7094561196280672;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5846395536984185;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4741650470527012;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5762097111246897;  // std dev = 0.168, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11694866201241842;  // std dev = 0.144, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07547064675899226;  // std dev = 2.962, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
%   | | | else return 0.24812514659346915;  // std dev = 1.971, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.4170680547130773;  // std dev = 0.038, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.48202383407495586;  // std dev = 0.350, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.4190696601250342;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15902452541642878;  // std dev = 0.654, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5970980752795728;  // std dev = 0.395, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6549805654378685;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7150032898247402;  // std dev = 0.151, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(K, A) )
%   | then return -0.10575916591251448;  // std dev = 0.014, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return -0.16264183599616974;  // std dev = 0.235, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.3222171414018466;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.36483326820573786;  // std dev = 0.359, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3795610548915427;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33245993119446315;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4093640037161773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33625936073977863;  // std dev = 0.163, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09598444685273792;  // std dev = 0.139, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.028612404903137125;  // std dev = 2.131, 58.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | | else return 0.04620415060735837;  // std dev = 2.063, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25619914689741335;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, E) )
%   | | then return -0.047040704859010705;  // std dev = 0.105, 90.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=10 */
%   | | else return -0.0842474427740853;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.26657155116622644;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.409973358559767;  // std dev = 1.088, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5437802934336382;  // std dev = 0.180, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.13000763737221352;  // std dev = 0.084, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.1345871138821068;  // std dev = 0.324, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21391042100975224;  // std dev = 0.015, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.07629451020039713;  // std dev = 0.338, 80.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=1 */
%   | | | else return -0.05415816858321028;  // std dev = 0.278, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.2712557201317789;  // std dev = 0.258, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0823764580663816;  // std dev = 0.077, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.36317306852001563;  // std dev = 0.412, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12208426284379988;  // std dev = 0.042, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.01756552667950961;  // std dev = 1.090, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.02921528512225323;  // std dev = 1.210, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.17842647225012873;  // std dev = 0.042, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.16779702332887947;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.051827650491190855;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10559029792487126;  // std dev = 0.980, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.04646282189937767;  // std dev = 0.637, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then return -0.040265240732677655;  // std dev = 0.101, 125.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=15 */
%   | else if ( follows(A, J) )
%   | | then return 0.018918223271787406;  // std dev = 0.238, 59.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.03018967901178435;  // std dev = 0.567, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.21619418570396887;  // std dev = 0.903, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.15982356107524168;  // std dev = 0.014, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.2762203252416933;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11036828272207888;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.11619197980890274;  // std dev = 0.958, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.22918701804801814;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07325938020040143;  // std dev = 0.083, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.32268510709053716;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3803248473208132;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12495049460637109;  // std dev = 0.034, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.09546848007252867;  // std dev = 1.332, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.17313799278403683;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1548196896577542;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0587231697162017;  // std dev = 0.055, 108.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=3 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then return 0.24536348707183947;  // std dev = 0.061, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.10153909050560306;  // std dev = 0.040, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.22198444385850458;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1149713963840523;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.03315197326762556;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.119', 'seconds']
Refined model CLL: -0.102431


******************************************
Best model found
******************************************
Results 

CLL : -0.09947 

AUC ROC : 0.992557 

AUC PR : 0.322838 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 12.056 

Total Inference Time : 10.206828355789185 

Total revision time: 30.425998910903928
Best scored revision CLL: -0.102431


Results 

CLL : -0.09947 

AUC ROC : 0.992557 

AUC PR : 0.322838 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 30.457483991622922 

Total Inference Time : 10.206828355789185 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.305
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.05296217601159886;  // std dev = 0.285, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.12680565151742282;  // std dev = 0.443, 67.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7238673852166091;  // std dev = 0.202, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04638797881009014;  // std dev = 0.246, 171.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0512073472018205;  // std dev = 1.775, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.13297515904126503;  // std dev = 4.609, 117.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5141357553587252;  // std dev = 1.649, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7267718879757202;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.40425628418660997;  // std dev = 0.733, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5945592819994202;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.554281150684896;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.005016865071760063;  // std dev = 4.229, 190.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=30 */
%   | | | else return 0.05043755895118219;  // std dev = 3.853, 95.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5627251413529573;  // std dev = 1.947, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12327111999409719;  // std dev = 0.059, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.12970787789438198;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16266823055243648;  // std dev = 0.170, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30391426921761205;  // std dev = 1.057, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.4599851982621914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.23141534182453738;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.492953058511972;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5964882829223469;  // std dev = 1.077, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return -0.10309784922045816;  // std dev = 1.574, 206.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=4 */
%   | | else return -0.0035918028635404434;  // std dev = 0.290, 73.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02610208259672077;  // std dev = 2.683, 192.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25301280062584247;  // std dev = 0.168, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.474083787156501;  // std dev = 1.981, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12309646762234584;  // std dev = 0.142, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.1305285368654285;  // std dev = 0.153, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2707938200472398;  // std dev = 1.972, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | else return -0.08931736711190306;  // std dev = 1.475, 216.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062013399314185126;  // std dev = 2.213, 64.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17141972585647652;  // std dev = 0.974, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.2508736549106508;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.6304978166026685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04830321507595961;  // std dev = 0.152, 150.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016728896476266887;  // std dev = 2.152, 107.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=23 */
%   | | | else return 0.021323354853282458;  // std dev = 2.400, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.117494521157062;  // std dev = 0.252, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2503393502486272;  // std dev = 1.381, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09265029051839313;  // std dev = 0.099, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4006178924552216;  // std dev = 0.738, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11253095412038405;  // std dev = 0.192, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1623137497952839;  // std dev = 1.497, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else return 0.16617862536146383;  // std dev = 0.363, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.0826451828756945;  // std dev = 0.013, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10612074005583522;  // std dev = 0.262, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.018552547613558498;  // std dev = 0.927, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.024666966127582256;  // std dev = 1.210, 58.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01973597166913358;  // std dev = 1.966, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.219', 'seconds']
Parameter learned model CLL:-0.109373 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 82], 'true,false,true': [7.3e-08, 114, 0], 'true,false,false': [0.285, 41, 4], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.16e-08, 49, 0], 'false,false': [0.443, 49, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.202, 0, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 155, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.775, 40, 4], 'false,false,false,true': [0.866, 1, 3], 'false,false,false,false': [4.609, 82, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.649, 3, 50], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.733, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 5], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [4.229, 160, 30], 'false,false,false,false': [3.853, 75, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.947, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.059, 128, 0], 'false,true,false,false': [0.021, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.057, 1, 55], 'true,false': [0.0, 0, 1], 'false,true,true': [0.978, 1, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.077, 1, 34], 'false,false,true,false': [1.574, 202, 4], 'false,false,false': [0.29, 61, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.683, 129, 63], 'false,true': [0.168, 0, 19], 'false,false,true': [1.981, 3, 42], 'false,false,false,true': [0.142, 74, 0], 'false,false,false,false': [0.153, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.972, 3, 94], 'true,false': [1.475, 211, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.213, 39, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.974, 1, 64], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 134, 16], 'false,false,false,true': [2.152, 84, 23], 'false,false,false,false': [2.4, 55, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.252, 4, 56], 'false,true,true,true': [1.381, 1, 33], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.099, 175, 0], 'false,false,true': [0.738, 0, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.192, 67, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.497, 2, 66], 'true,true,false': [0.363, 0, 16], 'true,false,true': [0.013, 139, 0], 'true,false,false,true': [0.262, 32, 0], 'true,false,false,false': [0.927, 13, 4], 'false,true': [1.21, 38, 20], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.966, 41, 18]}]
{'': [0.2295070677157771, 0.2013408304498283], 'true': [-6.932124251318051e-16, 0.024524346347058957], 'false': [0.2058391094307914, 0.19648028514145635], 'false,true': [-8.881784197001253e-17, 5.437827059388522e-17], 'true,false': [4.674623261579606e-17, 0.08098765432098749], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.0006178239607818755, 0.11538280450790542], 'false': [0.06054644338133496, 0.162464160531308], 'false,false': [0.0715733210485696, 0.18534348264558914], 'false,false,false': [0.18750000000000006, 0.18152657954378013], 'false,false,true': [nan, 0.0715733210485696], 'false,true': [nan, 0.06054644338133496]}
{'': [0.0581680565928887, 0.12518861532400832], 'false': [nan, 0.1251886153240098], 'false,false': [0.002128053522934387, 0.11529557579328498], 'false,false,false': [0.09413051771456399, 0.15625033232906713], 'true': [0.0512800785935375, 0.10961036070607884], 'true,false': [0.017068860934042734, 0.13443806495476837], 'true,true': [0.0512800785935375, nan], 'false,false,true': [0.006489311448760171, -1.708035422500241e-16]}
{'': [0.030313153803689773, 0.0004713084464674777], 'false': [3.1073968689594086e-05, 0.00045310551177728947], 'false,false': [nan, 0.00045310551177728947], 'false,false,false': [nan, 0.00045310551177728947], 'false,true': [nan, 3.1073968689594086e-05], 'false,true,false': [2.6913340212292303e-05, 2.186903763244097e-05]}
{'': [0.020016196249083452, 0.07963079255193867], 'false': [0.05375517271812749, 0.07771085674716492], 'false,false': [0.07583964405994581, 0.08388505777616724], 'false,false,true': [0.03312620037813682, 0.012019079354434161], 'false,true': [0.05314146713667444, 0.0], 'true': [0.01994629262508561, 0.0]}
{'': [0.03749460989418075, 0.08634106085229812], 'false': [0.0014792735804075058, 0.09040322519347627], 'false,false': [0.0871725937455943, 0.00034023763894906045], 'true': [nan, 0.037494609894180776], 'true,false': [nan, 0.03749460989418075], 'false,false,false': [0.00027146990134898507, 0.000395756080575254]}
{'': [0.04710702988601489, 0.0765523023060783], 'false': [nan, 0.07655230230607823], 'false,false': [nan, 0.0765523023060783], 'false,false,false': [nan, 0.0765523023060783], 'true': [0.04008417058705093, 0.010072422516131855]}
{'': [0.023502330162362042, 0.042636917504394835], 'false': [nan, 0.042636917504394634], 'false,false': [0.02318825724524444, 0.05774792089584367], 'false,false,false': [0.04326557570433501, 0.0778326246832209], 'true': [0.014590266924779846, 0.1726836439031476], 'true,false': [8.690892220346302e-05, 0.0]}
{'': [0.06372088694921409, 0.04049404245341072], 'false': [0.025198588498634093, 0.06506026804400501], 'false,false': [0.015579956685796478, 0.0005526932999472549], 'false,true': [0.0561074634452249, 5.551993464932689e-05], 'false,true,true': [0.0561074634452249, nan], 'false,false,false': [nan, 0.0005526932999472549]}
{'': [0.025175870396523588, 0.045533333878795386], 'false': [0.02522370404111389, 0.06548667925810596], 'false,false': [nan, 0.06548667925810597], 'false,false,false': [nan, 0.06548667925810596], 'true': [0.028261521042865428, 0.005928791082386296], 'true,true': [0.032969908474522136, 0.008238782388161857], 'true,false': [1.274575624213312e-06, 0.02245435433250212], 'true,false,false': [0.00213793361276555, 0.0505462180761207]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;true,false;follows(A, E).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 40.489
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.06777699082641366;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.17393840878372288;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7239196981190695;  // std dev = 0.204, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7341461557077351;  // std dev = 0.197, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.12782408880166998;  // std dev = 0.047, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.1254446385283913;  // std dev = 3.16e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2645175387359221;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.09176901392934675;  // std dev = 2.284, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.561744594633241;  // std dev = 0.282, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.31484257237464486;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5950920089465115;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5542682265595865;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5653915476665078;  // std dev = 0.198, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11398650570394406;  // std dev = 0.044, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.054380331783752456;  // std dev = 2.615, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | | | else return 0.1514294426496381;  // std dev = 2.790, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.41487356516674556;  // std dev = 0.015, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.3212299230825931;  // std dev = 1.347, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.561455666594572;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.4865024348537623;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.547572215681453;  // std dev = 0.145, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6508899082099183;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8035723321155854;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(J, A) )
%   | then return -0.1028361763350684;  // std dev = 0.003, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.14503603261459141;  // std dev = 0.032, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3199917636727596;  // std dev = 0.028, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.2101176903882244;  // std dev = 0.923, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.06524979527214962;  // std dev = 0.942, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.27737323579017903;  // std dev = 0.568, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5086342621933408;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3268846285556673;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(I, A) )
%   | | then return -0.05530833603489661;  // std dev = 0.125, 172.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.044868346630273725;  // std dev = 2.010, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
%   | | | else return 0.10347180276884144;  // std dev = 2.151, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2630032067703566;  // std dev = 0.019, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.34039881407682887;  // std dev = 0.098, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08771926898631639;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.07316325127627668;  // std dev = 0.078, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3140959370722183;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25144965868726027;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.016212695688191708;  // std dev = 1.134, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.44806193510727377;  // std dev = 0.558, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.12187847320342404;  // std dev = 0.034, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.1786622006426385;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.08540696701924741;  // std dev = 0.910, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.10808119102486054;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.21705202090826006;  // std dev = 0.035, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(G, A) )
%   | then return -0.045837440890455286;  // std dev = 0.126, 189.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=20 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2505840843333362;  // std dev = 0.980, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.10251214421837702;  // std dev = 0.076, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.00949660099569697;  // std dev = 0.861, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.030120517543513935;  // std dev = 1.872, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15565643472797042;  // std dev = 0.945, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.17062128268979207;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18270551662209505;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.28295608284660245;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.28852269475831205;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28877750731467333;  // std dev = 0.095, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07864262398590535;  // std dev = 0.707, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01640973936807417;  // std dev = 1.409, 70.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=22 */
%   | | | else return 0.0287491216999208;  // std dev = 1.833, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.16256499228024535;  // std dev = 0.091, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15328994920235803;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2468457647951107;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return 0.20210356784493666;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.7846240014391157;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.16642831464158497;  // std dev = 0.177, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return -0.07289969405547925;  // std dev = 0.014, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3216826726612148;  // std dev = 0.094, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.11721132097779731;  // std dev = 0.033, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12386769233572151;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.20022986691900077;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.060868504753797174;  // std dev = 0.051, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then return 0.19505660295914254;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.08374180047180374;  // std dev = 0.068, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21428189332128803;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0989814413275526;  // std dev = 2.24e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.020752222155973606;  // std dev = 0.714, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.01702616917062949;  // std dev = 1.381, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.486', 'seconds']
Refined model CLL: -0.099145


******************************************
Best model found
******************************************
Results 

CLL : -0.101467 

AUC ROC : 0.993279 

AUC PR : 0.385147 

Precision : 0.340599 

Recall : 0.992063 

F1 : 0.507099 

Total Learning Time : 40.489 

Total Inference Time : 13.438341856002808 

Total revision time: 64.20483741188049
Best scored revision CLL: -0.099145


Results 

CLL : -0.101467 

AUC ROC : 0.993279 

AUC PR : 0.385147 

Precision : 0.340599 

Recall : 0.992063 

F1 : 0.507099 

Total Learning Time : 64.23632249259948 

Total Inference Time : 13.438341856002808 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.624
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.07627729440868444;  // std dev = 0.248, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.1607805140468801;  // std dev = 0.459, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7202319350693115;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04035654308161799;  // std dev = 0.257, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.059666755421155314;  // std dev = 1.800, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6345745883333382;  // std dev = 0.981, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11378588151229684;  // std dev = 4.992, 143.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5667767603769701;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7336653469808886;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6151579659031499;  // std dev = 0.191, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5988328734929015;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.56647676947985;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.031171229563367292;  // std dev = 4.641, 304.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=34 */
%   | | | else return 0.0706720392766073;  // std dev = 4.078, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5422189656248798;  // std dev = 2.527, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1193773897082588;  // std dev = 0.044, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.12988625389846292;  // std dev = 0.015, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16008532427789302;  // std dev = 0.249, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28502064766737056;  // std dev = 1.731, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.47007606551742553;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29958924650587876;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5037483098355591;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6102206973086247;  // std dev = 1.099, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09917465387144273;  // std dev = 1.788, 250.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=5 */
%   | | else return 0.007343277179508268;  // std dev = 0.295, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0330189434844078;  // std dev = 3.147, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20748059699367793;  // std dev = 1.003, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5251786112176532;  // std dev = 1.063, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12637965506366006;  // std dev = 0.219, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return -0.12058695297236457;  // std dev = 0.141, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25724871122135645;  // std dev = 2.396, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.08649421023154731;  // std dev = 1.674, 225.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049257657973467;  // std dev = 2.269, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1706123294023793;  // std dev = 1.398, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26825947108768805;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04625433526660819;  // std dev = 0.153, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0026642193396384517;  // std dev = 2.016, 121.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=28 */
%   | | | else return 0.047249687788714606;  // std dev = 2.484, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16339669055698414;  // std dev = 0.142, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24119867571928538;  // std dev = 1.661, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0929796460101904;  // std dev = 0.301, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3936461962782013;  // std dev = 0.783, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11200243702179243;  // std dev = 0.271, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19093543332125437;  // std dev = 0.777, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16846184674840545;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08235672919435102;  // std dev = 0.032, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09500668028318085;  // std dev = 0.030, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.006282566127038487;  // std dev = 0.951, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.024745665784379593;  // std dev = 1.527, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.14036337638846927;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030439438637888897;  // std dev = 1.948, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.691', 'seconds']
Parameter learned model CLL:-0.111586 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 156, 0], 'true,false,false': [0.248, 57, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 55, 0], 'false,false': [0.459, 53, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 170, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.8, 45, 4], 'false,false,false,true': [0.981, 1, 8], 'false,false,false,false': [4.992, 103, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.191, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.641, 270, 34], 'false,false,false,false': [4.078, 76, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.527, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 181, 0], 'false,true,false,false': [0.015, 49, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 84, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.731, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.099, 1, 39], 'false,false,true,false': [1.788, 245, 5], 'false,false,false': [0.295, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.147, 154, 82], 'false,true': [1.003, 1, 22], 'false,false,true': [1.063, 0, 52], 'false,false,false,true': [0.219, 91, 0], 'false,false,false,false': [0.141, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.396, 5, 121], 'true,false': [1.674, 218, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.269, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 163, 19], 'false,false,false,true': [2.016, 93, 28], 'false,false,false,false': [2.484, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.142, 2, 78], 'false,true,true,true': [1.661, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.301, 229, 0], 'false,false,true': [0.783, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.271, 97, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.777, 0, 85], 'true,true,false': [0.365, 0, 19], 'true,false,true': [0.032, 163, 0], 'true,false,false,true': [0.03, 37, 0], 'true,false,false,false': [0.951, 19, 4], 'false,true': [1.527, 36, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.948, 45, 21]}]
{'': [0.22153637698069403, 0.21301775147929078], 'true': [0.04376735964986345, 0.018093397608783264], 'false': [0.2148437500000011, 0.21104570637119213], 'false,true': [7.105427357601002e-16, 6.055761952500853e-17], 'true,false': [-1.3664283380001927e-16, 0.061273851115291475], 'false,true,true': [0.0, 0.0]}
{'': [0.012003636627837027, 0.12118936953711731], 'false': [0.06620431971456943, 0.1640364593656858], 'false,false': [0.06614707216211703, 0.18541896633765378], 'false,false,false': [0.10699517882435927, 0.17429559830412125], 'false,true': [nan, 0.06620431971456943], 'false,false,true': [nan, 0.06614707216211703]}
{'': [0.012790325030086584, 0.10787226730973565], 'false': [nan, 0.10787226730973677], 'false,false': [0.0017092530071889166, 0.09663517200314528], 'false,false,false': [0.07084893023934973, 0.1679930884327123], 'true': [0.01225583190434802, 0.010488582208208686], 'true,true': [0.01225583190434802, nan], 'true,false': [0.01611520805831061, 0.004548415868083022], 'false,false,true': [0.005234587334517131, -2.9605947323337506e-16]}
{'': [0.04016857272931275, 0.0005078838768098856], 'false': [2.7889973719974964e-05, 0.0007381710615289794], 'false,false': [nan, 0.0007381710615289794], 'false,false,false': [nan, 0.0007381710615289794], 'false,true': [nan, 2.7889973719973033e-05], 'false,true,false': [1.068606804938849e-05, 4.530585932599813e-06]}
{'': [0.03742764046788681, 0.07832681876642957], 'false': [0.0018984689927829877, 0.07753836881938418], 'false,false': [0.07503521879687514, 0.08690641512632169], 'false,false,true': [0.030219618074528398, 0.012793057770949271], 'true': [0.03747270192835689, 0.0], 'false,true': [8.586578629188325e-06, 0.0]}
{'': [0.041975406821960805, 0.08462577806165233], 'false': [0.043710038004135254, 0.08652034429668039], 'false,false': [0.02172963087595333, 0.00045963145746833687], 'true': [nan, 0.04197540682196086], 'true,false': [nan, 0.041975406821960805], 'false,false,false': [0.0005272207250767658, 0.0003350266628771327]}
{'': [0.05152811366030344, 0.06598437905384322], 'false': [nan, 0.06598437905384309], 'false,false': [nan, 0.06598437905384322], 'false,false,false': [nan, 0.06598437905384322], 'true': [0.045559035947273833, 0.01245467552099273]}
{'': [0.02268561213851418, 0.03941676608306386], 'false': [nan, 0.03941676608306362], 'false,false': [0.02336504576957573, 0.05227037041482413], 'false,false,false': [0.03357305265205859, 0.08012934868003486], 'true': [0.02299787878867276, 9.850980859800462e-05], 'true,false': [9.850980859800462e-05, nan]}
{'': [0.020282703857841106, 0.03730165963317343], 'false': [0.024726501640171338, 0.05786636216292507], 'false,false': [0.015323332557032932, 0.0007586268668649869], 'false,true': [0.06895892265269489, 0.0003943441973643276], 'false,true,true': [0.06895892265269489, nan], 'false,false,false': [nan, 0.0007586268668649869]}
{'': [0.02050190105498337, 0.05288668469801551], 'false': [0.03822351087727906, 0.06584837207530954], 'false,false': [0.2222222222222222, 0.05747205233412497], 'false,false,false': [nan, 0.057472052334124994], 'true': [0.007161993637199937, 0.004650986611714379], 'true,true': [0.007104036287320734, 0.007008485384170181], 'true,false': [6.309775320726346e-06, 0.01693550353370611], 'true,false,false': [2.3596802337439332e-05, 0.03928723382887439]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.485
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8311219080724858;  // std dev = 0.162, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return 0.7993254056877476;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.12460968559014358;  // std dev = 0.130, 232.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.13814893509951237;  // std dev = 0.449, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.7036192254996578;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.7371542128376857;  // std dev = 0.197, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then return 0.7495217830843383;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4965674254072799;  // std dev = 1.141, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6789478907470247;  // std dev = 0.986, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12734840771566625;  // std dev = 1.71e-07, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06961166031978662;  // std dev = 3.262, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
%   | | | else return 0.20512883625133252;  // std dev = 3.245, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.5499453505347072;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.6960074159001929;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5125423702426288;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5937466134804225;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5030014817824905;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10841155154799656;  // std dev = 0.683, 126.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=1 */
%   | | | else return 0.006588402928383621;  // std dev = 2.556, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07497359736967475;  // std dev = 3.617, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.20860930598839342;  // std dev = 2.741, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, D), recursion_accounttype(F, B) )
%   | | | then return 0.4292063334379693;  // std dev = 0.001, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.39056790832936344;  // std dev = 0.984, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.5066526404088286;  // std dev = 0.230, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.4180973071470375;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5118229662160929;  // std dev = 0.114, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5729151412394399;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6661737181479762;  // std dev = 1.033, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(J, A) )
%   | then return -0.10715088465807966;  // std dev = 0.005, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.16295319034459213;  // std dev = 0.259, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then return 0.31247864020891614;  // std dev = 0.133, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.2588934302352849;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.08786142270228992;  // std dev = 0.826, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2858900141388473;  // std dev = 0.967, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.33239712903444246;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5217503197004556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then return -0.059614237028205855;  // std dev = 0.139, 241.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05558023262549584;  // std dev = 2.793, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return 0.08063663798853274;  // std dev = 2.322, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.26486777728476824;  // std dev = 0.047, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.06614803307718901;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.046826583135974764;  // std dev = 0.165, 146.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=14 */
%   | | else return -0.07844909607589343;  // std dev = 0.095, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.3221383173891628;  // std dev = 0.248, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2815613859528942;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2350315938913316;  // std dev = 0.870, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.49982469482868264;  // std dev = 0.965, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13263086935225882;  // std dev = 0.035, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.2086720565525154;  // std dev = 0.110, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.38400469270078846;  // std dev = 0.475, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.08403861598173261;  // std dev = 0.760, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08131140366353776;  // std dev = 0.052, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2857809880734752;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.38329252626969;  // std dev = 0.125, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.12076199036443772;  // std dev = 0.075, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04190618652113283;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.06729756774468107;  // std dev = 1.586, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1419182369749099;  // std dev = 1.387, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.17949313187039473;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19407108024926575;  // std dev = 0.065, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.3057938808443682;  // std dev = 0.090, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.045591943411323194;  // std dev = 0.139, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28544240066093585;  // std dev = 0.259, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.11258442647228228;  // std dev = 0.120, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05699885976159162;  // std dev = 0.753, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05278867514760971;  // std dev = 1.434, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16782805279440427;  // std dev = 0.033, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.024401027088050427;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.13711223836393283;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16562567099910416;  // std dev = 0.062, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.37897911135579054;  // std dev = 0.257, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07694433525344307;  // std dev = 0.061, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2151925919691904;  // std dev = 0.978, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4214562653597909;  // std dev = 0.215, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11934102993966733;  // std dev = 0.038, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.125241162536714;  // std dev = 0.962, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return -0.3320769857403796;  // std dev = 1.037, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.20606164408599584;  // std dev = 0.075, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.0656495282082148;  // std dev = 0.052, 238.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.21433802954253497;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.09283167923012738;  // std dev = 0.018, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.19201809776971698;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09496717526269181;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.04443845684646809;  // std dev = 0.279, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.661', 'seconds']
Refined model CLL: -0.102835


******************************************
Best model found
******************************************
Results 

CLL : -0.102676 

AUC ROC : 0.99257 

AUC PR : 0.357784 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 14.485 

Total Inference Time : 14.128069162368774 

Total revision time: 41.07346251869202
Best scored revision CLL: -0.102835


Results 

CLL : -0.102676 

AUC ROC : 0.99257 

AUC PR : 0.357784 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 41.10494759941101 

Total Inference Time : 14.128069162368774 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.059
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021985285376634744;  // std dev = 0.277, 49.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.094218744629132;  // std dev = 1.571, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03654239458150033;  // std dev = 2.143, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | | else return 0.015879113419521407;  // std dev = 1.210, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.45791967123879684;  // std dev = 1.710, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12477771602599828;  // std dev = 0.026, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.12477627159663593;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1832333638011676;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3119736397416886;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3119736397416887;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6281366619698077;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.06981313139223091;  // std dev = 1.257, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.053063311636427156;  // std dev = 1.491, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24920026619792068;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6223366513360157;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10897801747754833;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.13696615027765513;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22565650985953456;  // std dev = 1.304, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return -0.08060077410201626;  // std dev = 1.078, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05689194442502265;  // std dev = 0.297, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13585510930295827;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.038845866085930505;  // std dev = 0.203, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.031661008561290616;  // std dev = 0.704, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.0345305181059326;  // std dev = 0.760, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.03939095559368095;  // std dev = 0.331, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3094043181691647;  // std dev = 0.358, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09931800875068991;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4654311814073971;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13097710140289043;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1662403185202129;  // std dev = 1.072, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.13537657413211357;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.09194203616056684;  // std dev = 0.004, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07708844922860009;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return 0.08819576334228021;  // std dev = 0.479, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11448284523988538;  // std dev = 0.521, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.543', 'seconds']
Parameter learned model CLL:-0.116664 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [2.58e-08, 29, 0], 'true,false,false': [0.0, 6, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 43, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.571, 11, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.143, 34, 8], 'false,false,false,false': [1.21, 10, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.71, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 34, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.094, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.11e-08, 0, 11], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.084, 0, 7], 'false,false,true,false': [1.257, 43, 3], 'false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.491, 30, 18], 'false,true': [0.0, 0, 3], 'false,false,true': [0.118, 0, 4], 'false,false,false,true': [0.017, 3, 0], 'false,false,false,false': [0.047, 2, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.304, 2, 20], 'true,false': [1.078, 46, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.297, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.966, 1, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.203, 32, 6], 'false,false,false,true': [0.704, 7, 2], 'false,false,false,false': [0.76, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.331, 2, 11], 'false,true,true,true': [0.358, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 29, 0], 'false,false,true': [0.173, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.058, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.072, 1, 19], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.004, 40, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true': [0.479, 3, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.521, 2, 2]}]
{'': [0.234375, 0.23999999999999985], 'false': [0.22222222222222224, 0.25], 'true': [0.0, 3.172065784643304e-17], 'false,true': [0.0, 0.0], 'true,false': [2.2970131543968756e-17, -6.938893903907228e-18], 'false,true,true': [0.0, nan]}
{'': [1.1842378929335003e-16, 0.09249051504618695], 'false': [0.07671083724115606, 0.1273104505408204], 'false,false': [-2.3129646346357427e-18, 0.164448344499946], 'false,false,false': [nan, 0.164448344499946], 'false,true': [nan, 0.07671083724115606], 'false,false,true': [nan, -2.3129646346357427e-18]}
{'': [-2.0185873175002846e-16, 0.12203932062778498], 'false': [nan, 0.12203932062778496], 'false,false': [0.0, 0.11218518851269998], 'false,false,false': [0.10930398823818731, 0.12193730077142158], 'false,false,true': [0.0, 0.0], 'true': [-2.0185873175002846e-16, nan], 'true,true': [-2.0185873175002846e-16, nan]}
{'': [0.10824477799170958, 0.0006834854829120663], 'false': [1.736834729615673e-05, 0.0010953535005790993], 'false,false': [nan, 0.0010953535005790993], 'false,false,false': [nan, 0.0010953535005790993], 'false,true': [nan, 1.736834729615673e-05], 'false,true,false': [1.9922515748710727e-05, 0.0]}
{'': [4.0371746350005693e-17, 0.0852263510733762], 'false': [0.0, 0.08577285163166344], 'false,false': [0.0857728516316637, nan], 'false,false,true': [0.000998617088602113, 0.03433483714850179], 'true': [4.0371746350005693e-17, nan], 'false,true': [0.0, nan]}
{'': [0.046341345778342806, 0.10383146198514955], 'false': [-9.25185853854297e-18, 0.13805446727241724], 'false,false': [0.0034779990550656836, 0.0006840933263648041], 'true': [nan, 0.04634134577834279], 'true,false': [nan, 0.046341345778342806], 'false,false,false': [9.417755747101232e-05, 0.0010989656331236407]}
{'': [0.06038896405378849, 0.02209331310441478], 'true': [0.07730474692891821, 0.0237313406847572], 'false': [nan, 0.02209331310441478], 'false,false': [nan, 0.02209331310441478], 'false,false,false': [nan, 0.02209331310441478]}
{'': [0.058345677985790656, 0.05001079487722556], 'true': [0.058345677985790656, nan], 'false': [nan, 0.05001079487722549], 'false,false': [0.04132912429299939, 0.06700581119553763], 'false,false,false': [0.05500639951241471, 0.08242899454386811]}
{'': [0.10965418927833709, 0.047771826917868326], 'false': [0.03514939023546043, 0.08870176161321781], 'false,false': [0.007503435377607559, 0.0005528431817382861], 'false,true': [0.01280711382860995, 1.9279755412036004e-05], 'false,true,true': [0.01280711382860995, nan], 'false,false,false': [nan, 0.0005528431817382861]}
{'': [0.03262071178211291, 0.05585936205761458], 'false': [0.045948469428991105, 0.06786408302412099], 'false,false': [nan, 0.06786408302412099], 'false,false,false': [nan, 0.06786408302412099], 'true': [0.05231490086031148, 1.0311921460062635e-05], 'true,true': [0.05745979360837409, 0.0], 'true,false': [3.2137254518671554e-07, 0.0], 'true,false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true


Refining candidate
***************************
Model training time 4.235
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.1409528334544568;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03119272025965762;  // std dev = 0.891, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.1989682096774179;  // std dev = 1.241, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.46241637040036754;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5826080038940757;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11207992931373814;  // std dev = 0.004, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13325729944094747;  // std dev = 0.943, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07799415215788542;  // std dev = 1.232, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.4575528339676058;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4340268747324775;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7343928788798413;  // std dev = 0.174, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.10161791327788268;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.10021086480648932;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.14462434911566;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.18069403513495944;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.23913082972634425;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.33207623264693215;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3417021370853218;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5782038982501754;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09238771627237356;  // std dev = 0.003, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.13346059247143394;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.2971405609739586;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2581223743505451;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0852251600617867;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.08413221935134704;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2782928762681775;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.44185415516103965;  // std dev = 0.222, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11114996792522251;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.1250823076946679;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.24550120394085284;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22826296596555487;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(C, F) )
%   | | then return 0.20715475555711407;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23233433318778499;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.037368748518710415;  // std dev = 0.605, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07828117441152012;  // std dev = 0.000937, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( tweets(A, J) )
%   | | then return -0.03963263890717577;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.033865490763255034;  // std dev = 0.259, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, E) )
%   | then return 0.2029022415109968;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1861497912874909;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.1846939098842336;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.34153609679764496;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07304613098061473;  // std dev = 0.002, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11470219427440301;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.1022583956048984;  // std dev = 0.820, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16883783244422995;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.155680358368664;  // std dev = 0.000177, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.1605487270072647;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19234661161955555;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06851532118005019;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.08326906260892397;  // std dev = 0.117, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.27178836264393647;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1003723009577217;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.06842837224505112;  // std dev = 1.520, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.13787722237764952;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18546987004592874;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.06379322701098723;  // std dev = 0.000742, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06640282397156339;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.061935769539628906;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.08155959130801739;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.07109891864021282;  // std dev = 0.198, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.03643151215062082;  // std dev = 0.156, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '37.621', 'seconds']
Refined model CLL: -0.094357


******************************************
Best model found
******************************************
Results 

CLL : -0.09179 

AUC ROC : 0.995375 

AUC PR : 0.447047 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 4.235 

Total Inference Time : 6.7320778369903564 

Total revision time: 14.25173482322693
Best scored revision CLL: -0.094357


Results 

CLL : -0.09179 

AUC ROC : 0.995375 

AUC PR : 0.447047 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 14.283219903945923 

Total Inference Time : 6.7320778369903564 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.606
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8155957436101503;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7279812424281441;  // std dev = 1.46e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021611935478072067;  // std dev = 0.282, 89.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07224741870977475;  // std dev = 1.588, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5350837870399495;  // std dev = 1.002, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.563756786998866;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.563756786998866;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015307586803358428;  // std dev = 2.636, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return -0.023080182216654855;  // std dev = 1.516, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5200425587398514;  // std dev = 0.996, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1198805168015289;  // std dev = 0.039, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.12062305732218757;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15794116991974752;  // std dev = 0.139, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25686225826264664;  // std dev = 1.273, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3042001166504491;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6304293647936187;  // std dev = 0.079, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09015012844425088;  // std dev = 1.280, 94.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=3 */
%   | | else return -0.09952766406520498;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04285514967167744;  // std dev = 2.216, 118.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=41 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.06964414800998735;  // std dev = 0.779, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5510986803505782;  // std dev = 0.359, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11462595654619094;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1219346036664419;  // std dev = 0.117, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2826035069759151;  // std dev = 1.038, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return -0.0838081935937004;  // std dev = 1.197, 86.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0870131008641735;  // std dev = 0.817, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1478312542255669;  // std dev = 1.348, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else if ( follows(A, E) )
%   | | then return 0.18892121707174914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03390977190098607;  // std dev = 0.163, 84.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0336422608802258;  // std dev = 0.807, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | | else return -0.017210323934262875;  // std dev = 0.815, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14908035660307556;  // std dev = 0.183, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3109732186140102;  // std dev = 0.428, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09205587544819478;  // std dev = 0.056, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4990941380330927;  // std dev = 0.188, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10876518316984664;  // std dev = 0.100, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19824586993087612;  // std dev = 0.492, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.17163560114504048;  // std dev = 0.000372, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08648854003812076;  // std dev = 0.002, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06681615649748511;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0725443040424504;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.023508262638435418;  // std dev = 0.590, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021880438290390936;  // std dev = 0.658, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.024', 'seconds']
Parameter learned model CLL:-0.108829 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.384, 2, 45], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false': [0.0, 4, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.46e-07, 0, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.282, 78, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.588, 13, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.002, 1, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 5], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.636, 76, 11], 'false,false,false,false': [1.516, 16, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.996, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 75, 0], 'false,true,false,false': [0.0, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.273, 2, 29], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.079, 0, 11], 'false,false,true,false': [1.28, 91, 3], 'false,false,false': [1.86e-09, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.216, 77, 41], 'false,true': [0.779, 1, 4], 'false,false,true': [0.359, 0, 5], 'false,false,false,true': [0.08, 8, 0], 'false,false,false,false': [0.117, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.038, 1, 44], 'true,false': [1.197, 82, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.817, 9, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.348, 2, 33], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 73, 11], 'false,false,false,true': [0.807, 24, 3], 'false,false,false,false': [0.815, 9, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.183, 1, 29], 'false,true,true,true': [0.428, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 83, 0], 'false,false,true': [0.188, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.1, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.492, 0, 42], 'true,true,false': [0.000372, 0, 3], 'true,false,true': [0.002, 76, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.016, 6, 0], 'false,true': [0.59, 8, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.658, 8, 2]}]
{'': [0.23437500000000083, 0.2148437499999998], 'true': [0.04074241738343243, 6.995925908596876e-17], 'false': [0.1874999999999999, 0.25], 'false,true': [1.4802973661668753e-16, -9.25185853854297e-18], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [6.75787928032704e-17, 0.0]}
{'': [6.269494727295002e-16, 0.08943514138720493], 'false': [0.07947918606405309, 0.12018361536333487], 'false,false': [0.0, 0.16207812911847963], 'false,false,false': [0.0, 0.1483398318990405], 'false,true': [nan, 0.07947918606405309], 'false,false,true': [nan, 0.0]}
{'': [0.03349807026114237, 0.1014032385594049], 'false': [nan, 0.10140323855940492], 'false,false': [1.2688263138573217e-16, 0.08722784721736206], 'false,false,false': [0.0798392100832148, 0.12101044332772977], 'true': [0.03463946326957927, 0.0], 'true,true': [0.03463946326957927, nan], 'false,false,true': [4.4408920985006264e-17, 0.0], 'true,false': [nan, 0.0]}
{'': [0.019835831761576408, 0.00037048194504246825], 'false': [1.5614991184335058e-05, 0.001071735891608737], 'false,false': [nan, 0.001071735891608737], 'false,false,false': [nan, 0.001071735891608737], 'false,true': [nan, 1.5614991184335058e-05], 'false,true,false': [2.007033641952205e-05, -1.0092936587501423e-17]}
{'': [0.05224878680698158, 0.061688710099744415], 'false': [0.0, 0.05933686436227745], 'false,false': [0.06436170069849412, 2.7755575615628915e-18], 'false,false,true': [0.0005607585284665782, 0.01743174109615266], 'true': [0.05224878680698158, nan], 'false,true': [0.0, nan]}
{'': [0.04161465733272627, 0.08341543936734559], 'false': [0.12141899460283301, 0.07552834319178046], 'false,false': [0.02583608623439191, 0.0009687228929626231], 'true': [nan, 0.041614657332726256], 'true,false': [nan, 0.04161465733272627], 'false,false,false': [0.0007985906305096376, 0.0010530705945316825]}
{'': [0.049436475639815285, 0.06069113547518692], 'false': [nan, 0.06069113547518692], 'false,false': [nan, 0.06069113547518692], 'false,false,false': [nan, 0.06069113547518692], 'true': [0.023922816560115707, 0.01666764575151587]}
{'': [0.05055084979553684, 0.029000552099998873], 'true': [0.051948260205064475, 0.0], 'false': [nan, 0.029000552099998904], 'false,false': [0.02642360670766028, 0.03467957808658841], 'false,false,false': [0.024122583885045408, 0.06040035203610909], 'true,false': [0.0, nan]}
{'': [0.033609593793379924, 0.030877355638124243], 'false': [0.02478101873103612, 0.05913577903780137], 'false,false': [0.008829890995167539, 0.0005928482204258854], 'false,true': [0.010770482882929184, 3.7129943044816136e-05], 'false,true,true': [0.010770482882929184, nan], 'false,false,false': [nan, 0.0005928482204258854]}
{'': [0.019191320365290653, 0.03768958466056529], 'false': [0.03162265790486731, 0.04328408619221067], 'false,false': [nan, 0.04328408619221067], 'false,false,false': [nan, 0.04328408619221067], 'true': [0.005413399285480165, 4.572677948531014e-05], 'true,true': [0.005752860275969589, 4.610743073914699e-08], 'true,false': [6.771531116535699e-08, 2.4759826813129197e-05], 'true,false,false': [-7.709882115452476e-19, 4.2212562454684487e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.852
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.011995088945666036;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.07574357672019458;  // std dev = 0.199, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04175095539619402;  // std dev = 1.665, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5882063320409344;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5615239171140314;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5732801730793498;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1132782989877946;  // std dev = 0.022, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.025127087434192744;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.10535909431334069;  // std dev = 1.330, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.4167768668118111;  // std dev = 0.008, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.4500879034580868;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.25171598929405736;  // std dev = 0.823, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.42649140612040304;  // std dev = 0.189, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.697499280725664;  // std dev = 0.351, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10171749826275213;  // std dev = 0.002, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.10542082824457898;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, I) )
%   | | then return -0.13868928290395266;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.15857163128781082;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), tweets(F, D) )
%   | | | then return 0.3208723664711716;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3185011120054584;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3940695034137027;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.31665298271472964;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31875913318690774;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3712478637912358;  // std dev = 0.432, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07170220534231297;  // std dev = 1.184, 77.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=3 */
%   | | else return -0.09260022896048814;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25618440091197536;  // std dev = 0.004, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11190289668050121;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2614314994495103;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.25499878525287406;  // std dev = 0.135, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08674885448697196;  // std dev = 3.33e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.07832770119504844;  // std dev = 0.141, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.25383935295045135;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.5386795768278138;  // std dev = 0.407, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1062162056205761;  // std dev = 0.019, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21590178585839126;  // std dev = 0.043, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11539488366133004;  // std dev = 1.148, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2138179475947383;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21348261829507909;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07556366735150818;  // std dev = 0.067, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else return 0.00533822985764887;  // std dev = 0.148, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3163105130259341;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10202738573477577;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.1612537652160161;  // std dev = 0.764, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.11615599552275853;  // std dev = 0.923, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1837154411391591;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1947768631367623;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1746312798568086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.035168714140294724;  // std dev = 0.109, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11973419165358284;  // std dev = 0.660, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.0343253467727341;  // std dev = 0.558, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08360993045862297;  // std dev = 0.511, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.037321025908198004;  // std dev = 0.665, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.1696335106744977;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.15749406812670516;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.28766033064941554;  // std dev = 1.014, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1527652480530007;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.22837456023190517;  // std dev = 0.223, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.0746236442185481;  // std dev = 0.004, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4380518947159742;  // std dev = 0.205, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08333507240568204;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.13524504634777768;  // std dev = 0.000997, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09509663181957478;  // std dev = 1.250, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.17573584141386966;  // std dev = 0.224, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.13131218493882083;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0699397880818172;  // std dev = 0.003, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.06766185243788471;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H) )
%   | | then return -0.030539835248743086;  // std dev = 0.203, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.07594312006464783;  // std dev = 0.364, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then return 0.024830399847936734;  // std dev = 0.393, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.06049313992008613;  // std dev = 0.180, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.639', 'seconds']
Refined model CLL: -0.095919


******************************************
Best model found
******************************************
Results 

CLL : -0.096088 

AUC ROC : 0.995558 

AUC PR : 0.450009 

Precision : 0.354839 

Recall : 0.987179 

F1 : 0.522034 

Total Learning Time : 6.852 

Total Inference Time : 8.035191535949707 

Total revision time: 20.207584674835203
Best scored revision CLL: -0.095919


Results 

CLL : -0.096088 

AUC ROC : 0.995558 

AUC PR : 0.450009 

Precision : 0.354839 

Recall : 0.987179 

F1 : 0.522034 

Total Learning Time : 20.239069755554198 

Total Inference Time : 8.035191535949707 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.744
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.10814893509951232;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.722282075558107;  // std dev = 0.147, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0323604464977856;  // std dev = 0.265, 118.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13166743038995857;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.41851933418886933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08991727023713438;  // std dev = 2.188, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5186417024965932;  // std dev = 1.287, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.7259581449894827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.12999896010826334;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6659665702405452;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5546727732923715;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5546727732923715;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03660204109778583;  // std dev = 2.910, 127.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=13 */
%   | | | else return -0.010982758934601789;  // std dev = 1.978, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4892205606313887;  // std dev = 1.865, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11799374575137231;  // std dev = 0.038, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | | else return -0.12076621391332146;  // std dev = 1.49e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14590007743811573;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29818405440171786;  // std dev = 1.016, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.5364874562121537;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30484649336163083;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6459926660322891;  // std dev = 0.166, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09269470535809761;  // std dev = 1.615, 164.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=4 */
%   | | else return -0.10224193257176775;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04102130803363811;  // std dev = 2.523, 167.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=59 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2811373594246838;  // std dev = 0.239, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4634096702455065;  // std dev = 1.199, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11852676890208766;  // std dev = 0.071, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.1053361080440325;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25298569666404913;  // std dev = 1.800, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   | else return -0.0750972838904457;  // std dev = 1.442, 116.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00979718553586932;  // std dev = 0.481, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.161924994976383;  // std dev = 1.391, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.28282850434737616;  // std dev = 0.125, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.060117057309697755;  // std dev = 0.170, 129.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007878742023890092;  // std dev = 0.991, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | | | else return 0.0948306135479225;  // std dev = 1.166, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12578343325026387;  // std dev = 0.240, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30138014730610974;  // std dev = 0.542, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08915131946393373;  // std dev = 0.037, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41400449646372794;  // std dev = 0.861, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10558296215361726;  // std dev = 0.081, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17643079353304636;  // std dev = 1.201, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else return 0.1358134543931361;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08309891951799711;  // std dev = 0.006, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.076777118971102;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.02635837636288883;  // std dev = 0.334, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.020170805933480945;  // std dev = 1.104, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01831567611110146;  // std dev = 1.021, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.188', 'seconds']
Parameter learned model CLL:-0.106912 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 65], 'true,false,true': [8.43e-08, 107, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.913, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.433, 12, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.147, 0, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 105, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 11, 0], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [2.188, 21, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.287, 2, 44], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.78, 2, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.91, 114, 13], 'false,false,false,false': [1.978, 33, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.865, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 99, 0], 'false,true,false,false': [1.49e-08, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.084, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.016, 1, 46], 'true,false': [0.136, 0, 2], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.166, 0, 14], 'false,false,true,false': [1.615, 160, 4], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.523, 108, 59], 'false,true': [0.239, 0, 7], 'false,false,true': [1.199, 1, 9], 'false,false,false,true': [0.071, 18, 0], 'false,false,false,false': [0.063, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.8, 3, 66], 'true,false': [1.442, 111, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.481, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.391, 2, 51], 'true,false,true': [0.125, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 116, 13], 'false,false,false,true': [0.991, 24, 5], 'false,false,false,false': [1.166, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.24, 3, 48], 'false,true,true,true': [0.542, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 116, 0], 'false,false,true': [0.861, 1, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.201, 1, 60], 'true,true,false': [0.007, 0, 5], 'true,false,true': [0.006, 95, 0], 'true,false,false,true': [2.63e-09, 9, 0], 'true,false,false,false': [0.334, 6, 1], 'false,true': [1.104, 15, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.021, 13, 4]}]
{'': [0.22670360110803336, 0.17437500000000014], 'true': [-8.745141363201234e-16, 0.007936], 'false': [0.16493055555555544, 0.18749999999999983], 'false,true': [0.1388888888888887, -3.0839528461809902e-18], 'false,true,true': [0.1388888888888887, nan], 'true,false': [6.640586315514955e-17, 0.052469135802469175]}
{'': [0.0004102066694770335, 0.09227898488080019], 'false': [0.06998384727915567, 0.14924341145125167], 'false,false': [5.046468293750712e-18, 0.18538544183039354], 'false,false,false': [0.2222222222222222, 0.17098903266352647], 'false,true': [nan, 0.06998384727915567], 'false,false,true': [nan, 5.046468293750712e-18]}
{'': [0.05377159257975842, 0.0880944635192501], 'false': [nan, 0.08809446351925006], 'false,false': [-4.9343245538895844e-17, 0.07517564498121451], 'false,false,false': [0.06669676772858327, 0.10300775649983218], 'true': [0.03613730425098092, 0.19068152040477063], 'true,false': [0.20289802236358712, 0.0], 'true,true': [0.03600842745297552, 0.0], 'false,false,true': [-4.4408920985006264e-17, 0.0]}
{'': [0.04518966917738471, 0.00015720252617238542], 'false': [1.2958531879622944e-05, 0.0002938863187189657], 'false,false': [nan, 0.0002938863187189657], 'false,false,false': [nan, 0.0002938863187189657], 'false,true': [nan, 1.29585318796177e-05], 'false,true,false': [1.4928892208093512e-05, 7.93016446160826e-18]}
{'': [0.02368662763682396, 0.055957064621528316], 'false': [-2.4671622769447922e-17, 0.053247246709324285], 'false,false': [0.05434324233752635, 0.0], 'false,false,true': [0.001978660242699881, 0.015896387021417276], 'true': [0.02198090205661452, 0.009300565878316402], 'false,true': [-2.4671622769447922e-17, nan]}
{'': [0.03811361411195922, 0.0879163722623523], 'false': [0.008135691504754159, 0.09114315916141007], 'false,false': [0.14384640397369236, 0.00030948633350750035], 'true': [nan, 0.038113614111959224], 'true,false': [nan, 0.03811361411195922], 'false,false,false': [0.00028360180355980574, 0.0002464922058839254]}
{'': [0.05392203202709604, 0.015428671339626698], 'true': [0.04695573391128469, 0.017919548552895067], 'false': [nan, 0.015428671339626698], 'false,false': [nan, 0.015428671339626698], 'false,false,false': [nan, 0.015428671339626698]}
{'': [0.03597736319553485, 0.03747179163537474], 'false': [nan, 0.03747179163537463], 'false,false': [0.02904804653925538, 0.05801806079826949], 'false,false,false': [0.033853778165227555, 0.10463901945735328], 'true': [0.03650679113848945, 0.007861415350042547], 'true,false': [0.007861415350042547, nan]}
{'': [0.0574684354761468, 0.03241644140948516], 'false': [0.02130319888728689, 0.08178117309750314], 'false,false': [0.0925736218655458, 0.00032958583244861175], 'false,true': [0.014707858959592868, 1.1675499620970337e-05], 'false,true,true': [0.014707858959592868, nan], 'false,false,false': [nan, 0.00032958583244861175]}
{'': [0.02383023395027236, 0.0615025418329793], 'false': [0.06098195144153663, 0.061314347441263066], 'false,false': [nan, 0.061314347441263066], 'false,false,false': [nan, 0.061314347441263066], 'true': [0.021963808680934643, 0.0011924941785095159], 'true,true': [0.023638346052037754, 9.666957004050847e-06], 'true,false': [4.2979126895215104e-07, 0.007581049267284375], 'true,false,false': [7.709882115452476e-19, 0.01589820970745202]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.177
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.0793510649004878;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.6882234122109546;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.7194734122109542;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.7626515333660023;  // std dev = 0.122, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.008626348977225326;  // std dev = 2.489, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
%   | | | else return 0.08578487415644503;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.0709337965452078;  // std dev = 0.208, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1324634293473104;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.08578487415644509;  // std dev = 1.636, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.15158877799000098;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5643875109796864;  // std dev = 0.160, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.733564797317703;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.753376000365568;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7018381141597752;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5708758802736442;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.720573048049533;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1232162108627284;  // std dev = 0.046, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0043378284518269805;  // std dev = 1.323, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.12770591177300764;  // std dev = 1.671, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.3842015875069453;  // std dev = 0.980, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.22164614848877884;  // std dev = 1.748, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42512484941769296;  // std dev = 0.067, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5610568164691967;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5556020915610641;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7009295801781154;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8032647216303135;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.1107600347022683;  // std dev = 0.004, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return -0.16067104972034468;  // std dev = 0.030, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3310618630339715;  // std dev = 0.017, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2777279097976395;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.07050197588170781;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.35084391743517096;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4220843941093986;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34002974223500043;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4716240346986905;  // std dev = 0.316, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08609613503408631;  // std dev = 1.386, 143.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=4 */
%   | | else return -0.09571316597803194;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.03613102238132408;  // std dev = 0.189, 169.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=59 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.2819829023302431;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27751314183684506;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.42233540798086444;  // std dev = 0.236, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6090676753479478;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11145689468778919;  // std dev = 0.104, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.12753004117644598;  // std dev = 0.172, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25371999078512014;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.08525796949010614;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2744079634499954;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2649073686633397;  // std dev = 0.028, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(F, G) )
%   | | | then return 0.30470607878354233;  // std dev = 0.163, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4187857713699947;  // std dev = 0.196, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, I) )
%   | | | then return -0.09639860376206258;  // std dev = 0.082, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | | else return -0.15145698268342417;  // std dev = 0.364, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.07805772853272688;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.20876410777919355;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.0682695831155897;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.22376146591293905;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21678537491980707;  // std dev = 0.025, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, A), follows(F, A) )
%   | | then return -0.07863972402687734;  // std dev = 0.061, 82.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=2 */
%   | | else return -0.01809834062865271;  // std dev = 0.137, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | else if ( follows(H, A) )
%   | | then return -0.07262211231725059;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07384158185248924;  // std dev = 0.435, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1395829888089648;  // std dev = 0.539, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.1552395525495562;  // std dev = 0.916, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.18561559832529362;  // std dev = 0.082, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.03731646160040647;  // std dev = 0.738, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.1885197096828005;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22768649928096707;  // std dev = 0.219, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.036146467224056636;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.08133872524208402;  // std dev = 0.066, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.32694349284051466;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1095846482995344;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12349843756252536;  // std dev = 1.348, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.0556020534978315;  // std dev = 1.421, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.1578200366035039;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07748842500323189;  // std dev = 0.031, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06291127822906295;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.04085030704639882;  // std dev = 0.236, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else return -0.024612217746549415;  // std dev = 0.223, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.786', 'seconds']
Refined model CLL: -0.101062


******************************************
Best model found
******************************************
Results 

CLL : -0.100731 

AUC ROC : 0.995632 

AUC PR : 0.468025 

Precision : 0.339869 

Recall : 1.0 

F1 : 0.507317 

Total Learning Time : 11.177 

Total Inference Time : 7.948142766952515 

Total revision time: 25.923479553222656
Best scored revision CLL: -0.101062


Results 

CLL : -0.100731 

AUC ROC : 0.995632 

AUC PR : 0.468025 

Precision : 0.339869 

Recall : 1.0 

F1 : 0.507317 

Total Learning Time : 25.95496463394165 

Total Inference Time : 7.948142766952515 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.097
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8240580260086028;  // std dev = 1.702, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.10185106490048777;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6997851109437409;  // std dev = 1.404, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.026532093891724562;  // std dev = 0.273, 155.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12989911376521193;  // std dev = 1.83e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07724898667108619;  // std dev = 2.551, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.533357079784223;  // std dev = 1.550, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | | else return 0.7315447317398314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.768892101318733;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5869481484606751;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5686037769810994;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5686037769810994;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03335898118533674;  // std dev = 3.302, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return 0.033790799861687586;  // std dev = 2.241, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5078987396103144;  // std dev = 1.734, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11814736660283191;  // std dev = 0.037, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return -0.12584162818268924;  // std dev = 0.009, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1585884894166734;  // std dev = 0.133, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2513843713796282;  // std dev = 2.118, 66.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=61 */
%   | else return 0.4132333244560744;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3099515850833657;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6347233260923386;  // std dev = 0.148, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08807195084596917;  // std dev = 1.886, 193.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=6 */
%   | | else return -0.1012641672062921;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024616186387604645;  // std dev = 3.131, 249.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=77 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26254427829396076;  // std dev = 0.125, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5128166971287099;  // std dev = 0.697, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11084135355587427;  // std dev = 0.107, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11027898031605879;  // std dev = 0.138, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2910938711164215;  // std dev = 1.193, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | else return -0.0791748068867276;  // std dev = 1.682, 185.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018476767972735637;  // std dev = 0.512, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1768727241213531;  // std dev = 1.392, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.2272818243200222;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04602182915765324;  // std dev = 0.168, 152.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02148013308895966;  // std dev = 1.111, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return 0.05465308887831709;  // std dev = 1.351, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15892229287384763;  // std dev = 0.181, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2159034447357342;  // std dev = 1.645, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08950366833706941;  // std dev = 0.063, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47597498765850926;  // std dev = 0.446, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10845661585508738;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16296160580456603;  // std dev = 1.823, 82.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=79 */
%   | | else return 0.14587260816102815;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08775180113531003;  // std dev = 0.443, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0767528315793813;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.09646697447737866;  // std dev = 0.592, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.017839627155444078;  // std dev = 0.824, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21506068162829606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03233736449472339;  // std dev = 1.154, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.748', 'seconds']
Parameter learned model CLL:-0.107236 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.702, 3, 85], 'true,false,true': [0.0, 148, 0], 'true,false,false': [0.196, 24, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.471, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.404, 2, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 137, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.83e-08, 23, 0], 'false,false,false,true': [0.098, 0, 4], 'false,false,false,false': [2.551, 31, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.55, 3, 59], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.134, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.302, 142, 17], 'false,false,false,false': [2.241, 31, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.734, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.037, 127, 0], 'false,true,false,false': [0.009, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.133, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.118, 5, 61], 'true,false': [0.147, 0, 4], 'false,true,true': [2.11e-08, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.148, 0, 18], 'false,false,true,false': [1.886, 187, 6], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.131, 172, 77], 'false,true': [0.125, 0, 9], 'false,false,true': [0.697, 0, 14], 'false,false,false,true': [0.107, 31, 0], 'false,false,false,false': [0.138, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.193, 1, 87], 'true,false': [1.682, 177, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.512, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.392, 2, 66], 'true,false,true': [0.047, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 134, 18], 'false,false,false,true': [1.111, 40, 8], 'false,false,false,false': [1.351, 15, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.181, 2, 65], 'false,true,true,true': [1.645, 2, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.063, 173, 0], 'false,false,true': [0.446, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.105, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.823, 3, 79], 'true,true,false': [0.011, 0, 6], 'true,false,true': [0.443, 133, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.592, 11, 1], 'false,true': [0.824, 18, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.154, 26, 5]}]
{'': [0.22093040325303584, 0.20659722222222168], 'true': [0.03292871900826439, 0.005746934411440236], 'false': [0.19555555555555568, 0.22222222222222232], 'false,true': [-2.220446049250313e-16, 5.046468293750712e-18], 'true,false': [-1.0802169969325848e-16, 0.03840000000000005], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.02816366924056096, 0.0943326992110613], 'false': [0.07446476298058699, 0.13589895532266852], 'false,false': [1.4481169886415085e-17, 0.18128891608822326], 'false,false,false': [0.002425309837189915, 0.15875845433251914], 'false,true': [nan, 0.07446476298058699], 'false,false,true': [nan, 1.4481169886415085e-17]}
{'': [0.0370870417675778, 0.09461037165207796], 'false': [nan, 0.09461037165207792], 'false,false': [8.074349270001139e-17, 0.08154577711152694], 'false,false,false': [0.06859037755395642, 0.1321145775208018], 'true': [0.03877167293837289, 0.008874963998302166], 'true,true': [0.03877355670209068, 0.0], 'true,false': [0.0, 0.004472984601554653], 'false,false,true': [0.0, 0.0]}
{'': [0.029772313859146683, 0.00029156594750031457], 'false': [1.8702250180519e-05, 0.0006840086854784613], 'false,false': [nan, 0.0006840086854784613], 'false,false,false': [nan, 0.0006840086854784613], 'false,true': [nan, 1.8702250180521758e-05], 'false,true,false': [1.0516371695305552e-05, 2.579466853564896e-06]}
{'': [0.06581614718641145, 0.05752330503337079], 'true': [0.06797953850473701, 0.005421968742780198], 'false': [4.0371746350005693e-17, 0.054914076862895615], 'false,false': [0.05773565133922213, -4.625929269271485e-18], 'false,false,true': [0.0012250248370574053, 0.018438327333170676], 'false,true': [4.0371746350005693e-17, nan]}
{'': [0.039382295050946065, 0.06427004643660998], 'false': [0.0017355004069784766, 0.06451793963543667], 'false,false': [0.03472061967762498, 0.00048626628173742414], 'true': [nan, 0.03938229505094606], 'true,false': [nan, 0.039382295050946065], 'false,false,false': [0.0003698927652995484, 0.0005988475039852316]}
{'': [0.04553057176915037, 0.018744416775082085], 'true': [0.01617661985156134, 0.015300482629661518], 'false': [nan, 0.018744416775082085], 'false,false': [nan, 0.018744416775082085], 'false,false,false': [nan, 0.018744416775082085]}
{'': [0.027767959623878166, 0.03409607928779748], 'false': [nan, 0.034096079287797426], 'false,false': [0.028175037842990032, 0.04557379568251562], 'false,false,false': [0.025727471245749256, 0.08690463688855757], 'true': [0.02847893588425996, 0.0011262915989957017], 'true,false': [0.0011262915989957017, nan]}
{'': [0.03294037779463233, 0.034005851148277914], 'false': [0.02444846653674397, 0.08140489710455893], 'false,false': [0.019872203812684175, 0.0005254379517656494], 'false,true': [0.10026997203261087, 2.312924762200353e-05], 'false,true,true': [0.10026997203261087, nan], 'false,false,false': [nan, 0.0005254379517656494]}
{'': [0.029456276216845247, 0.03613328631034999], 'false': [0.02611728729913275, 0.04346365101804144], 'false,false': [0.0, 0.042953023238391445], 'false,false,false': [nan, 0.042953023238391445], 'true': [0.03778376358617629, 0.0033520833067752246], 'true,true': [0.04052694361953051, 2.1514021421263168e-05], 'true,false': [0.0014734948544388473, 0.011402636225300211], 'true,false,false': [-1.460819769243627e-18, 0.0292186069850196]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.1359339051371746;  // std dev = 0.077, 169.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.124815601766179;  // std dev = 0.442, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7248362501052885;  // std dev = 0.150, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.5557652526336724;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.02304697362564314;  // std dev = 2.996, 116.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=14 */
%   | | | else return 0.014832868711950914;  // std dev = 0.772, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.04411635820061592;  // std dev = 0.260, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12609523998784983;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7858704248253165;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.025057100313589008;  // std dev = 2.629, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5419714384167333;  // std dev = 0.170, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( follows(E, A) )
%   | | then return 0.3288252871423185;  // std dev = 0.625, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.302998674352361;  // std dev = 1.130, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5576723476958757;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.43221119171530925;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7241547658893357;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12231361862357217;  // std dev = 0.043, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.004504138022264657;  // std dev = 1.669, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | | else return 0.0679105408461058;  // std dev = 1.998, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.41630311753576743;  // std dev = 0.802, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.13533462762803805;  // std dev = 0.705, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B), follows(A, F) )
%   | | | then return 0.33075260487204444;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5614458714559925;  // std dev = 0.239, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5853960870977686;  // std dev = 0.170, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7063223292897483;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8199276763749996;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.10955210227662762;  // std dev = 0.003, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.14920750238246053;  // std dev = 0.145, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(E, F), recursion_accounttype(D, B) )
%   | | | then return 0.32595141446434706;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.08927839396711283;  // std dev = 0.660, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.35150421378688496;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5166804610830121;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.44379104147240084;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34462112022217933;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4131862292533763;  // std dev = 1.034, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08672884899541151;  // std dev = 1.785, 213.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=6 */
%   | | else return -0.09162984931210245;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then return 0.25487900557699633;  // std dev = 0.138, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.08554119458563132;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(A, G) )
%   | | | then return -0.045310576735446945;  // std dev = 1.424, 114.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=13 */
%   | | | else return -0.2431573529520691;  // std dev = 0.509, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.039775882088589364;  // std dev = 0.132, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.29738018641811265;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.31053564960622104;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5767334622199977;  // std dev = 0.284, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10512685594805952;  // std dev = 0.023, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, C), follows(A, E) )
%   | | then return 0.21315216668836107;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.23890239930337168;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2663683865467545;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.30960032286023054;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0012273265450533644;  // std dev = 0.897, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27419432576980707;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.0876824705932631;  // std dev = 0.050, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02424644081433461;  // std dev = 0.802, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.11108520178790865;  // std dev = 1.192, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.1295120982007161;  // std dev = 1.385, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.1877324519120924;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1847521343282057;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.28042356065189566;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05361799794836476;  // std dev = 0.115, 205.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3010566674678574;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10338482691487633;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.049953540851722815;  // std dev = 0.701, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.024890924902018968;  // std dev = 1.291, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.16257447152739823;  // std dev = 0.013, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.27551790694284256;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.019567104454353456;  // std dev = 0.837, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2143740445619603;  // std dev = 0.894, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.0067060597106308;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07657446377492048;  // std dev = 0.050, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2911192186160793;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4919419467687149;  // std dev = 0.149, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11157304143541932;  // std dev = 0.022, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.07587132571833655;  // std dev = 2.013, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | | | else return 0.22300076581473613;  // std dev = 0.213, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.15450182445468802;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06982334292729356;  // std dev = 0.022, 172.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.005902310241132273;  // std dev = 0.121, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else return -0.0039546495248301864;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.3215066758084948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.0587191761706777;  // std dev = 0.553, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.0811105475163875;  // std dev = 0.752, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.385', 'seconds']
Refined model CLL: -0.100287


******************************************
Best model found
******************************************
Results 

CLL : -0.100849 

AUC ROC : 0.995214 

AUC PR : 0.437537 

Precision : 0.336245 

Recall : 0.987179 

F1 : 0.501629 

Total Learning Time : 12.676 

Total Inference Time : 9.691242456436157 

Total revision time: 30.934184549331665
Best scored revision CLL: -0.100287


Results 

CLL : -0.100849 

AUC ROC : 0.995214 

AUC PR : 0.437537 

Precision : 0.336245 

Recall : 0.987179 

F1 : 0.501629 

Total Learning Time : 30.96566963005066 

Total Inference Time : 9.691242456436157 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.435
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004884;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030114424903882;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03197118206724538;  // std dev = 0.269, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08903289567122669;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11160379251560174;  // std dev = 3.235, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.552370320075537;  // std dev = 1.466, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7314760036461917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8183324004909184;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5869481484606751;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5663910155085076;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5663910155085076;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03795183682516968;  // std dev = 3.655, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.007724923602981587;  // std dev = 2.857, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5150028835840064;  // std dev = 1.932, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11912657929352762;  // std dev = 0.056, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | | else return -0.12288422184166091;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1548032243539886;  // std dev = 0.163, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2943742436027066;  // std dev = 1.550, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.2136870746361655;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3069850782112461;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6307668049647627;  // std dev = 0.193, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08452806734262736;  // std dev = 2.305, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.10832532571355652;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024694434630530036;  // std dev = 3.454, 278.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2579643587144519;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.533157526427604;  // std dev = 0.768, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11593761456836067;  // std dev = 0.120, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.12065897575761442;  // std dev = 0.151, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25987423758815814;  // std dev = 2.108, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07438031363847576;  // std dev = 2.020, 229.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 1.3302095299642808E-4;  // std dev = 0.798, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14159345712273028;  // std dev = 2.142, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24235553303224483;  // std dev = 0.064, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0414215284620679;  // std dev = 0.151, 196.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.014196961276521062;  // std dev = 1.566, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.07076451408110046;  // std dev = 1.669, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15149928448871616;  // std dev = 0.210, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2841523024111729;  // std dev = 0.679, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09064128728456299;  // std dev = 0.040, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37810381711716873;  // std dev = 1.304, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11172633218950087;  // std dev = 0.148, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17881121845689854;  // std dev = 1.440, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14226498647084812;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08406677390131678;  // std dev = 0.019, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08005117647766444;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.0033473128644909205;  // std dev = 0.460, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04811253363158603;  // std dev = 0.962, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24304304558789713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03906906960274435;  // std dev = 1.399, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.663', 'seconds']
Parameter learned model CLL:-0.110636 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 199, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 175, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.098, 0, 4], 'false,false,false,false': [3.235, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.466, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.134, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.655, 182, 21], 'false,false,false,false': [2.857, 58, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.932, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.056, 166, 0], 'false,true,false,false': [0.002, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.55, 3, 73], 'true,false': [0.87, 1, 4], 'false,true,true': [1.49e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.193, 0, 23], 'false,false,true,false': [2.305, 252, 9], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.454, 187, 91], 'false,true': [0.152, 0, 13], 'false,false,true': [0.768, 0, 22], 'false,false,false,true': [0.12, 43, 0], 'false,false,false,false': [0.151, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.108, 4, 107], 'true,false': [2.02, 218, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.798, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.142, 5, 80], 'true,false,true': [0.064, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 174, 22], 'false,false,false,true': [1.566, 46, 13], 'false,false,false,false': [1.669, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 4, 77], 'false,true,true,true': [0.679, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 223, 0], 'false,false,true': [1.304, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.148, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.44, 2, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.019, 197, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.46, 7, 2], 'false,true': [0.962, 18, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.399, 20, 8]}]
{'': [0.21694214876033252, 0.23097502972651607], 'false': [0.23725286160249692, 0.2222222222222223], 'false,true': [-1.4802973661668753e-16, 0.0], 'true': [0.027500889996442155, 0.008848852040816159], 'true,false': [-2.410132395166169e-16, 0.07360000000000004], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023553952305991492, 0.10255808262340992], 'false': [0.07228753815293344, 0.16156414874158082], 'false,false': [0.043388429752066096, 0.18740232204426824], 'false,false,false': [0.002425309837189915, 0.1744290572973438], 'false,true': [nan, 0.07228753815293344], 'false,false,true': [nan, 0.043388429752066096]}
{'': [0.029658281262752263, 0.09428846846202701], 'false': [nan, 0.09428846846202699], 'false,false': [-2.0898315757650005e-16, 0.07951330015517705], 'false,false,false': [0.06581190807138028, 0.11826608843996281], 'true': [0.029876766803592227, 0.01597048986113762], 'true,true': [0.02985228565305493, 0.0], 'true,false': [0.0032730523219069996, 0.004472984601554653], 'false,false,true': [-1.4802973661668753e-16, -1.6653345369377348e-16]}
{'': [0.02940384785569571, 0.0003035308332464126], 'false': [1.7768473269235444e-05, 0.0006155947609991704], 'false,false': [nan, 0.0006155947609991704], 'false,false,false': [nan, 0.0006155947609991704], 'false,true': [nan, 1.7768473269235444e-05], 'false,true,false': [1.8922981293646942e-05, 1.8255776306982352e-07]}
{'': [0.03936653698581208, 0.05726731723519436], 'false': [1.3061447348531253e-17, 0.05438875610450748], 'false,false': [0.05692632724541534, 0.0], 'false,false,true': [0.0016164655581742476, 0.0203641955496424], 'true': [0.03159725582639814, 0.15135106910367577], 'false,true': [1.3061447348531253e-17, nan]}
{'': [0.04292396350682357, 0.07446762808724713], 'false': [0.0017809715569902646, 0.0773467559638612], 'false,false': [0.026810744992378555, 0.00046572555871933946], 'true': [nan, 0.042923963506823766], 'true,false': [nan, 0.04292396350682357], 'false,false,false': [0.00033374768075609544, 0.0006032353196123046]}
{'': [0.04963612950671572, 0.02894844702698538], 'true': [0.040027732212984474, 0.017818187694115188], 'false': [nan, 0.02894844702698538], 'false,false': [nan, 0.02894844702698538], 'false,false,false': [nan, 0.02894844702698538]}
{'': [0.05301911344962625, 0.03523506861829667], 'true': [0.05398459545442237, 0.002066534509750341], 'false': [nan, 0.03523506861829698], 'false,false': [0.02279285427850031, 0.06048973144023636], 'false,false,false': [0.04157513303378773, 0.09290317551147603], 'true,false': [0.002066534509750341, nan]}
{'': [0.04408896693557349, 0.029970385925981075], 'false': [0.017230206928012266, 0.0790854912952516], 'false,false': [0.0944500466179631, 0.000520609320293995], 'false,true': [0.014410483222445356, 7.193639610597925e-06], 'false,true,true': [0.014410483222445356, nan], 'false,false,false': [nan, 0.000520609320293995]}
{'': [0.021497545284629455, 0.049551086436016356], 'false': [0.030867304933483188, 0.06887708222612765], 'false,false': [0.0, 0.06990230964477342], 'false,false,false': [nan, 0.06990230964477342], 'true': [0.019845295297933465, 0.0012497721491663003], 'true,true': [0.021590511795065312, 8.507909972085529e-06], 'true,false': [1.7520796189700042e-06, 0.01005599253904561], 'true,false,false': [-1.734723475976807e-18, 0.023481915472745703]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.58
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1321892291516961;  // std dev = 0.098, 207.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6937591563277545;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7335868908794758;  // std dev = 0.146, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7360653658391788;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12768417438626986;  // std dev = 0.153, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.009137256397821597;  // std dev = 0.297, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.12349153648605937;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12650846351394063;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7485124095828778;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10930034185962324;  // std dev = 3.138, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5719685622581583;  // std dev = 0.243, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7774708974341633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6630580901651469;  // std dev = 0.302, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5603449951988655;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5548926780049745;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5852752883510917;  // std dev = 0.263, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11716159777391327;  // std dev = 0.105, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06444802204927946;  // std dev = 2.055, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.12355628584814923;  // std dev = 2.327, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.3837296728882673;  // std dev = 1.691, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.17270434919981717;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), tweets(E, G) )
%   | | | then return 0.45028891522289727;  // std dev = 0.466, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.3646805280994711;  // std dev = 0.504, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.28715400459117174;  // std dev = 1.016, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6773630390709902;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7568560004062382;  // std dev = 0.162, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10528059148879695;  // std dev = 0.007, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.15934796695057596;  // std dev = 0.022, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3375272373337793;  // std dev = 0.030, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.18612433877684617;  // std dev = 1.239, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3193254609075822;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5203132879509004;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3169170356447567;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.22089760352077514;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3544326002769938;  // std dev = 1.179, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08061340926413393;  // std dev = 2.085, 246.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=9 */
%   | | else return -0.09269703962716365;  // std dev = 1.18e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.21653969932728223;  // std dev = 1.382, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.2868498143285676;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2601067930617182;  // std dev = 0.005, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05635298282887338;  // std dev = 0.128, 163.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=17 */
%   | | else return -0.0395325682900116;  // std dev = 0.157, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2885406808219218;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1832012782171907;  // std dev = 0.961, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4717986793576528;  // std dev = 0.992, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.1190005818560599;  // std dev = 0.027, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.20321380030002686;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.10422670810827983;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2106302398086062;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.20813108560093294;  // std dev = 0.934, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.33715726872298457;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.051594769078201125;  // std dev = 0.111, 199.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=20 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return 2.406685394694065E-4;  // std dev = 0.173, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02132910100873405;  // std dev = 1.029, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.014450183673029606;  // std dev = 1.751, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.17445565615845798;  // std dev = 0.120, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.22034542540919844;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.27340074296470845;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07564458515725617;  // std dev = 0.069, 136.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.31318019601873937;  // std dev = 0.325, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08496654854799685;  // std dev = 0.065, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.15173895712973057;  // std dev = 1.179, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007733348905691054;  // std dev = 1.015, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.07052150310373158;  // std dev = 1.562, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17721273785074754;  // std dev = 0.041, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.06085913713311102;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15366616580172654;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09639037743180116;  // std dev = 1.048, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.163455435748607;  // std dev = 0.992, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.2570909157958397;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07530739539898516;  // std dev = 0.006, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.39722391660832673;  // std dev = 0.098, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1275828251441849;  // std dev = 0.022, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15115804926356527;  // std dev = 0.109, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.16627752647000815;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06907204991237073;  // std dev = 0.064, 176.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1649249294932219;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.009102482225977643;  // std dev = 0.645, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.07381067445925929;  // std dev = 0.610, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.2037470658538837;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.040391297635571866;  // std dev = 0.421, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.06590702385148159;  // std dev = 1.046, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.501', 'seconds']
Refined model CLL: -0.103406


******************************************
Best model found
******************************************
Results 

CLL : -0.102833 

AUC ROC : 0.994873 

AUC PR : 0.38101 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 13.58 

Total Inference Time : 15.59561276435852 

Total revision time: 39.836146965026856
Best scored revision CLL: -0.103406


Results 

CLL : -0.102833 

AUC ROC : 0.994873 

AUC PR : 0.38101 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 39.86763204574585 

Total Inference Time : 15.59561276435852 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.134
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7672398441904211;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7374506595744974;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.017582726265530257;  // std dev = 0.285, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030454451486106954;  // std dev = 1.439, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1455486921995876;  // std dev = 2.282, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5732954857711154;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.2535967664491661;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5732954857711153;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08360000266469482;  // std dev = 2.583, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | | else return 0.05005572891240287;  // std dev = 1.891, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5965798378529114;  // std dev = 0.872, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.14320051717540397;  // std dev = 0.078, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.12905073973730982;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17190750019153123;  // std dev = 0.091, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29336406248102603;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29430513725528984;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6022598627746368;  // std dev = 0.204, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09576334251834002;  // std dev = 1.077, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return 0.058848432258442974;  // std dev = 0.326, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04117210861804072;  // std dev = 1.359, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23705912334899315;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3527129225282764;  // std dev = 1.670, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13436425486818057;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.14839711216785878;  // std dev = 0.066, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3113875792664053;  // std dev = 0.487, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.08865369682968373;  // std dev = 0.983, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18120229365912166;  // std dev = 0.915, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1779122525886397;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.045424363243049735;  // std dev = 0.152, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.005223741890182218;  // std dev = 1.510, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.06356597829133463;  // std dev = 1.042, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15279969923892667;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3709698234833409;  // std dev = 0.477, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10900013747385068;  // std dev = 0.115, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3621910272605433;  // std dev = 0.304, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1307841750778957;  // std dev = 0.162, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12138677493470104;  // std dev = 1.054, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.2238718185490973;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08959686517864192;  // std dev = 0.003, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.12514206456751256;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.018860294123271792;  // std dev = 0.676, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.0074165381237447795;  // std dev = 0.692, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009999337034437152;  // std dev = 0.790, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.575', 'seconds']
Parameter learned model CLL:-0.123161 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.348, 2, 20], 'true,false,true': [2.79e-08, 30, 0], 'true,false,false': [0.35, 6, 1], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 8, 0], 'false,false': [0.471, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.16e-08, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.285, 35, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.439, 13, 3], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.282, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.583, 36, 12], 'false,false,false,false': [1.891, 18, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.872, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.078, 35, 0], 'false,true,false,false': [0.0, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.091, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.011, 0, 12], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.204, 0, 11], 'false,false,true,false': [1.077, 50, 2], 'false,false,false': [0.326, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.359, 28, 16], 'false,true': [0.0, 0, 2], 'false,false,true': [1.67, 2, 13], 'false,false,false,true': [0.069, 17, 0], 'false,false,false,false': [0.066, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.487, 0, 23], 'true,false': [0.983, 49, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.915, 4, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.012, 0, 13], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 35, 5], 'false,false,false,true': [1.51, 17, 8], 'false,false,false,false': [1.042, 9, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.006, 0, 12], 'false,true,true,true': [0.477, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.115, 35, 0], 'false,false,true': [0.304, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.162, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.054, 1, 16], 'true,true,false': [0.237, 0, 4], 'true,false,true': [0.003, 31, 0], 'true,false,false,true': [0.037, 4, 0], 'true,false,false,false': [0.676, 5, 1], 'false,true': [0.692, 13, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.79, 9, 4]}]
{'': [0.2292444699798909, 0.23668639053254442], 'false': [0.24489795918367352, 0.22222222222222207], 'false,true': [-1.4802973661668753e-16, -6.938893903907228e-18], 'true': [0.08264462809917356, 0.026296566837107443], 'true,false': [2.590520390792032e-17, 0.12244897959183677], 'false,true,true': [0.0, 0.0]}
{'': [2.049642507000289e-16, 0.13445072782965128], 'false': [0.08143934481900819, 0.17300019925562787], 'false,false': [0.12944194832162328, 0.19056339714233925], 'false,false,false': [0.0, 0.18601097122904406], 'false,false,true': [nan, 0.12944194832162328], 'false,true': [nan, 0.08143934481900819]}
{'': [0.04839772892019957, 0.14727640253822735], 'false': [nan, 0.14727640253822738], 'false,false': [0.0, 0.14456031431459496], 'false,false,false': [0.13900472838114872, 0.15539386964604215], 'true': [-1.6148698540002277e-16, 0.163605366031061], 'true,false': [0.0, 0.0], 'false,false,true': [nan, 0.0], 'true,true': [-1.6148698540002277e-16, nan]}
{'': [0.024555922628919282, 0.00045904117506449267], 'false': [0.00017061062995759382, 0.0004557244123765742], 'false,false': [nan, 0.0004557244123765742], 'false,false,false': [nan, 0.0004557244123765742], 'false,true': [nan, 0.000170610629957599], 'false,true,false': [0.00017235781950716766, -3.469446951953614e-18]}
{'': [9.741839038327852e-06, 0.09210665683781813], 'false': [0.0, 0.09275362450051006], 'false,false': [0.08927602808729959, 0.1064940378150116], 'false,false,true': [0.003784722185689038, 0.022287706041175307], 'true': [9.741839038327852e-06, nan], 'false,true': [0.0, nan]}
{'': [0.041948264860704215, 0.10664662260498357], 'false': [0.0, 0.10897547619375554], 'false,false': [0.18587242307435783, 0.0003171408753178379], 'true': [nan, 0.04194826486070422], 'true,false': [nan, 0.041948264860704215], 'false,false,false': [0.00028147174372371054, 0.0002543494649153678]}
{'': [0.05053812561753983, 0.08380673683323689], 'false': [nan, 0.08380673683323683], 'false,false': [nan, 0.08380673683323689], 'false,false,false': [nan, 0.08380673683323689], 'true': [0.010304468542764756, 0.018942722558249456]}
{'': [1.2001420569490291e-05, 0.05597125066850259], 'false': [nan, 0.05597125066850259], 'false,false': [0.023234468759333625, 0.08741514414023953], 'false,false,false': [0.09120789009312685, 0.07760903376479424], 'true': [1.2001420569490291e-05, nan]}
{'': [3.864759375189301e-05, 0.047977483695795374], 'false': [0.04516172157546357, 0.051796364089568565], 'false,false': [0.010242557508495405, 0.0010996187973006226], 'false,true': [0.022717978221736934, 0.00038062780513979774], 'false,true,true': [0.022717978221736934, nan], 'false,false,false': [nan, 0.0010996187973006226]}
{'': [0.03853351455192608, 0.03450456899111761], 'true': [0.05718099555726287, 0.012870660503105664], 'true,true': [0.06534406837882967, 0.013985358408510513], 'false': [0.025222420218641083, 0.04806682561049998], 'false,false': [nan, 0.048066825610500005], 'false,false,false': [nan, 0.04806682561049998], 'true,false': [2.1596512209031532e-07, 0.05081350209936457], 'true,false,false': [0.00034010536935226085, 0.07616776152930238]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.888
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1555325621642444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.20326289324748184;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1300490644743603;  // std dev = 2.170, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08673784277647037;  // std dev = 1.740, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.19887969328632335;  // std dev = 1.692, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.41751358415830986;  // std dev = 1.18e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5143161297385453;  // std dev = 0.352, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5981580906659407;  // std dev = 0.255, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.11073530786168864;  // std dev = 0.113, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.17657765744182397;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12301956604611851;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.16394959564638775;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2555553127179585;  // std dev = 0.271, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(E, F) )
%   | | | then return -0.05861996293961131;  // std dev = 0.675, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | | else return 0.19920646127413916;  // std dev = 0.706, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1074312306969072;  // std dev = 1.273, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.027204227087975603;  // std dev = 1.432, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2765189529864947;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2677520773477817;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.02947262747601325;  // std dev = 0.141, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | else return -0.08617557991063717;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4896010352672716;  // std dev = 0.166, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5398829164296589;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1382693477037876;  // std dev = 0.028, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1684387513779664;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.21711194268887601;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0019255157550395197;  // std dev = 0.832, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, F), tweets(C, F) )
%   | | | then return 0.26670178281705287;  // std dev = 0.176, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3582366470828888;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08686668366396857;  // std dev = 0.008, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.13883706087376083;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.018546258504581557;  // std dev = 0.222, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.056391660026045246;  // std dev = 0.530, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.09588997609279695;  // std dev = 0.287, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.1973574051944212;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.16675137430520595;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.08594802629120554;  // std dev = 0.643, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.13971345453218856;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.040071688091312556;  // std dev = 0.521, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.32791407405686784;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( tweets(L, J), recursion_accounttype(L, B) )
%   | | | then return 0.3419566259465252;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13198345429031336;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.030582318783963357;  // std dev = 0.254, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.0889159072021962;  // std dev = 0.271, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.1631343661758122;  // std dev = 0.222, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F) )
%   | | | then return -0.08141772461565416;  // std dev = 0.083, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.11968733488033603;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35025683016366543;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return -0.11850317758866773;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.15182198130355723;  // std dev = 0.070, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.1561003368244017;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.12852263844987458;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21091561967801462;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07274536308532448;  // std dev = 0.010, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.10775030920676512;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.1058862213959202;  // std dev = 0.285, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.22121562876720405;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11046337122880719;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.059918649062889004;  // std dev = 0.227, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.048', 'seconds']
Refined model CLL: -0.114436


******************************************
Best model found
******************************************
Results 

CLL : -0.108077 

AUC ROC : 0.994259 

AUC PR : 0.449895 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 4.888 

Total Inference Time : 3.9811439514160156 

Total revision time: 12.63049380493164
Best scored revision CLL: -0.114436


Results 

CLL : -0.108077 

AUC ROC : 0.994259 

AUC PR : 0.449895 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 12.65719549369812 

Total Inference Time : 3.9811439514160156 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.528
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.10018439823382112;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.09148226843284571;  // std dev = 0.423, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0031538680266441515;  // std dev = 0.297, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019863618648726305;  // std dev = 1.428, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1226080052012437;  // std dev = 3.184, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5351356068617593;  // std dev = 1.035, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.031216893206484353;  // std dev = 3.400, 105.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=20 */
%   | | | else return 0.02873328557859516;  // std dev = 2.473, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5265498219169196;  // std dev = 2.113, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1307231844496549;  // std dev = 0.031, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.1295126884807106;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15560980817956466;  // std dev = 0.095, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2836381825635253;  // std dev = 1.038, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29743575310354803;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6231643840456668;  // std dev = 0.302, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08896042985472025;  // std dev = 1.556, 97.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=4 */
%   | | else return 0.027641019468045053;  // std dev = 0.308, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02008431924822078;  // std dev = 2.160, 103.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23957750620423252;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5316316570270423;  // std dev = 0.675, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12278192398711527;  // std dev = 0.071, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.1321300533498806;  // std dev = 0.079, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31056014719579395;  // std dev = 0.664, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.0910027182457346;  // std dev = 1.466, 118.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06204132610766399;  // std dev = 1.228, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18793645547655327;  // std dev = 0.034, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.035701445602349655;  // std dev = 0.157, 78.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0116236253619709;  // std dev = 1.506, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return 0.06827193675962322;  // std dev = 1.383, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14069775674430166;  // std dev = 0.196, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26506071305105966;  // std dev = 1.108, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10014924003905695;  // std dev = 0.077, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.32439144685344634;  // std dev = 0.921, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11773153666308249;  // std dev = 0.119, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1413722271807636;  // std dev = 1.430, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.1874446384880759;  // std dev = 0.287, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08782231964088298;  // std dev = 0.000337, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10841509281253242;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.010411686006446309;  // std dev = 0.719, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04694300909310333;  // std dev = 0.898, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00757132997241514;  // std dev = 1.154, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.573', 'seconds']
Parameter learned model CLL:-0.116455 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 42], 'true,false,true': [6.14e-08, 61, 0], 'true,false,false': [0.2, 23, 1], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 18, 0], 'false,false': [0.423, 23, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 29], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.297, 65, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.428, 15, 3], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [3.184, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.035, 1, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.4, 85, 20], 'false,false,false,false': [2.473, 35, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.113, 3, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 64, 0], 'false,true,false,false': [0.01, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.095, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.038, 1, 27], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.302, 0, 19], 'false,false,true,false': [1.556, 93, 4], 'false,false,false': [0.308, 18, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.16, 70, 33], 'false,true': [0.002, 0, 7], 'false,false,true': [0.675, 0, 22], 'false,false,false,true': [0.071, 36, 0], 'false,false,false,false': [0.079, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.664, 0, 47], 'true,false': [1.466, 114, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.228, 16, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.034, 0, 29], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 67, 11], 'false,false,false,true': [1.506, 38, 14], 'false,false,false,false': [1.383, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.196, 1, 27], 'false,true,true,true': [1.108, 1, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.077, 76, 0], 'false,false,true': [0.921, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.119, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.43, 2, 34], 'true,true,false': [0.287, 0, 8], 'true,false,true': [0.000337, 64, 0], 'true,false,false,true': [0.005, 15, 0], 'true,false,false,false': [0.719, 8, 1], 'false,true': [0.898, 16, 12], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.154, 20, 7]}]
{'': [0.22394444788889684, 0.21638888888888838], 'true': [1.3534147347811431e-15, 0.011626297577854695], 'false': [0.23999999999999952, 0.17888888888888904], 'false,true': [-1.4802973661668753e-16, -3.0839528461809902e-18], 'true,false': [6.188128333976282e-17, 0.0399305555555556], 'false,true,true': [-8.881784197001253e-17, 0.0]}
{'': [-3.675221047035001e-16, 0.13114129861649793], 'false': [0.08837064688583819, 0.16552257828015304], 'false,false': [0.1132650662393563, 0.17753407158057122], 'false,false,false': [0.0, 0.1718719031090001], 'false,false,true': [nan, 0.1132650662393563], 'false,true': [nan, 0.08837064688583819]}
{'': [0.03829589259249522, 0.1258934510492178], 'false': [nan, 0.12589345104921817], 'false,false': [-6.344131569286608e-17, 0.11940640046204504], 'false,false,false': [0.11006307099128206, 0.14221713114561507], 'true': [0.04284754758097137, 3.700743415417188e-17], 'true,true': [0.04284754758097137, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, -7.401486830834377e-17]}
{'': [0.06869684852738828, 0.0002296241891244643], 'false': [1.4278336023106148e-05, 0.00022674745454278055], 'false,false': [nan, 0.00022674745454278055], 'false,false,false': [nan, 0.00022674745454278055], 'false,true': [nan, 1.4278336023097383e-05], 'false,true,false': [1.529475958239948e-05, 7.623473117888043e-06]}
{'': [0.03845740135410715, 0.09069620703250875], 'false': [-4.7580986769649563e-17, 0.09177460557312014], 'false,false': [0.09110541964777642, 0.09514962892583206], 'false,false,true': [0.004800262662405636, 0.02494750813785337], 'true': [0.03845740135410715, nan], 'false,true': [-4.7580986769649563e-17, nan]}
{'': [0.04528660642538954, 0.0851569649044198], 'false': [7.776505065766009e-07, 0.08936244770354772], 'false,false': [0.0207380447992795, 0.0002026423462038937], 'true': [nan, 0.0452866064253896], 'true,false': [nan, 0.04528660642538954], 'false,false,false': [0.0001395390728046422, 0.00023927496722706638]}
{'': [0.04854916175344497, 0.055828919938009446], 'false': [nan, 0.05582891993800946], 'false,false': [nan, 0.055828919938009446], 'false,false,false': [nan, 0.055828919938009446], 'true': [0.009370754364031682, 0.018221523414490827]}
{'': [3.887227484387768e-05, 0.041073284452055873], 'false': [nan, 0.04107328445205588], 'false,false': [0.024707036645127804, 0.05571617332761264], 'false,false,false': [0.0436397568276715, 0.07968608949530957], 'true': [3.887227484387768e-05, nan]}
{'': [0.038530655904049305, 0.043940570285857544], 'false': [0.034318789695694775, 0.05870838363491148], 'false,false': [0.047096972490100614, 0.00038428395564560347], 'false,true': [0.06457576264130777, 7.888449207450962e-05], 'false,true,true': [0.06457576264130777, nan], 'false,false,false': [nan, 0.00038428395564560347]}
{'': [0.0326616917024817, 0.03923701418095514], 'false': [0.02878931138338395, 0.049282512292720924], 'false,false': [nan, 0.04928251229272092], 'false,false,false': [nan, 0.049282512292720924], 'true': [0.04865723070350558, 0.006542029995088969], 'true,true': [0.05678921212514602, 0.010326586692211578], 'true,false': [1.7765741091788079e-09, 0.0237975496586542], 'true,false,false': [1.8507600720178245e-06, 0.057454130481958306]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.124
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.1304874285368513;  // std dev = 0.106, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7314326599017127;  // std dev = 0.062, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.02566140898030793;  // std dev = 2.246, 67.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=8 */
%   | | | else return -0.12669663897234357;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.07330336102765649;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.04207963385401374;  // std dev = 1.135, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.13612731227397634;  // std dev = 2.937, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5784015110209156;  // std dev = 0.092, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(E, A) )
%   | | then return 0.5524113637531238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5524113637531238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5524113637531238;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.737975502828159;  // std dev = 0.133, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12319264119073198;  // std dev = 0.057, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13629534233294935;  // std dev = 2.254, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | | else return 0.19688806888042218;  // std dev = 1.648, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4288102860476887;  // std dev = 0.057, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.55328061365327;  // std dev = 0.244, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2022459969195957;  // std dev = 0.716, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.461844865534387;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.5917004232541994;  // std dev = 0.291, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6568084926203217;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.48006026723537026;  // std dev = 0.783, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.11062765643949832;  // std dev = 0.006, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return -0.16634488168298092;  // std dev = 0.012, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3431969779113974;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.33235555718429305;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.31257636524406585;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15526504645672923;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.19041784843409754;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.44235784661268357;  // std dev = 0.207, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10092939601808933;  // std dev = 0.063, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.017428753053852303;  // std dev = 1.875, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
%   | | | else return 0.12396323131337364;  // std dev = 1.341, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2655484384571808;  // std dev = 0.011, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.306917614751514;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.030148465990283035;  // std dev = 0.146, 59.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=9 */
%   | | else return -0.08378985922512182;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27230117197153636;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3149499435877298;  // std dev = 1.470, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.5075503352186396;  // std dev = 0.262, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13375800910402647;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.13414139509649678;  // std dev = 0.206, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.21991250106415217;  // std dev = 0.013, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.30756514667454465;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.38947305022216944;  // std dev = 0.209, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, D) )
%   | | then return -0.09655592814136339;  // std dev = 0.016, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.13321177665353556;  // std dev = 0.112, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2246124901793821;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.2071165460086298;  // std dev = 0.544, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03622604022151633;  // std dev = 0.689, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.026675869918529792;  // std dev = 0.850, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18395689837597337;  // std dev = 0.012, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06977786537199268;  // std dev = 0.441, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | | else return -0.16553337709674823;  // std dev = 0.510, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2609663561384527;  // std dev = 0.161, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07888626900382349;  // std dev = 0.025, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2923397812213761;  // std dev = 0.219, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11302486002275952;  // std dev = 0.008, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14677966785984317;  // std dev = 0.698, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.0921777092716916;  // std dev = 0.709, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.15937862977307587;  // std dev = 0.015, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.12917593780259728;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.23031297832024;  // std dev = 0.132, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1712988777456601;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07512817446895784;  // std dev = 0.005, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.1361342152485388;  // std dev = 1.268, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.30049871519436133;  // std dev = 0.302, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10217417058236451;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.16759754814705696;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.067166626897196;  // std dev = 1.313, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.1614857491710731;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.14618657576332333;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.06593752206411256;  // std dev = 0.042, 74.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return 7.412434051898402E-4;  // std dev = 0.140, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.31058920118019023;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14554847623738115;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, L) )
%   | | | then return -0.03362807014789076;  // std dev = 0.339, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.019563732728557805;  // std dev = 0.578, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.236', 'seconds']
Refined model CLL: -0.104258


******************************************
Best model found
******************************************
Results 

CLL : -0.104116 

AUC ROC : 0.992825 

AUC PR : 0.336059 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 8.124 

Total Inference Time : 7.341415643692017 

Total revision time: 21.664475967407228
Best scored revision CLL: -0.104258


Results 

CLL : -0.104116 

AUC ROC : 0.992825 

AUC PR : 0.336059 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 21.691177656173707 

Total Inference Time : 7.341415643692017 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.898
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.003920030417729115;  // std dev = 0.345, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284308244647707;  // std dev = 0.188, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028505801136568722;  // std dev = 0.270, 105.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.012812845559135371;  // std dev = 1.736, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7430177130359652;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10615917020094834;  // std dev = 3.897, 89.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5757147162306995;  // std dev = 0.323, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7210049767517713;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5815991645594838;  // std dev = 0.143, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6200143932295178;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.55720188549269;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007148037546027096;  // std dev = 3.598, 146.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=21 */
%   | | | else return 0.06005299439205737;  // std dev = 3.204, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5349884817019522;  // std dev = 2.265, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12781620659305332;  // std dev = 0.098, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.1347566957720798;  // std dev = 0.040, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1594569882733886;  // std dev = 0.185, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3189046344656198;  // std dev = 0.486, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.45499606295619166;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21792898353066967;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.48013204945238375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6384081298760388;  // std dev = 0.289, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09415022005906637;  // std dev = 1.773, 158.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=5 */
%   | | else return -0.020463438214796698;  // std dev = 0.280, 47.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019709752289963727;  // std dev = 2.251, 147.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=46 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2637713642403253;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.526061260345181;  // std dev = 0.893, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12542891345220902;  // std dev = 0.138, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.12719523033820238;  // std dev = 0.099, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29061108424163756;  // std dev = 0.817, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return -0.08574534819472082;  // std dev = 1.786, 176.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01962534611914526;  // std dev = 1.712, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1843748650519032;  // std dev = 0.089, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E) )
%   | | then return 0.2402002903395949;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04665888450503691;  // std dev = 0.160, 101.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007834442761448507;  // std dev = 1.845, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | | else return 0.06395531580924158;  // std dev = 1.898, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09401130026217253;  // std dev = 0.279, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2929694677879097;  // std dev = 0.713, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09442130593418117;  // std dev = 0.083, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3941154441699079;  // std dev = 0.646, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11148407904424858;  // std dev = 0.185, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1639108870914869;  // std dev = 1.164, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.1795506776678738;  // std dev = 0.331, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08368636019798349;  // std dev = 0.019, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09959302901294548;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.00604462354681003;  // std dev = 0.895, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.0060608192243495835;  // std dev = 1.058, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18010360506912004;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09321642359982031;  // std dev = 1.373, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.255', 'seconds']
Parameter learned model CLL:-0.114642 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false': [0.345, 25, 4], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.46, 32, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.188, 0, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 93, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.736, 25, 4], 'false,false,false,true': [0.105, 0, 5], 'false,false,false,false': [3.897, 65, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.323, 0, 37], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.216, 0, 3], 'true,false,false': [0.143, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.154, 0, 3], 'false,false,true,false': [4.21e-08, 0, 10], 'false,false,false,true': [3.598, 125, 21], 'false,false,false,false': [3.204, 50, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.265, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.098, 98, 0], 'false,true,false,false': [0.04, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.486, 0, 44], 'true,false': [0.0, 0, 1], 'false,true,true': [0.959, 1, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.289, 0, 23], 'false,false,true,false': [1.773, 153, 5], 'false,false,false': [0.28, 40, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.251, 101, 46], 'false,true': [0.147, 0, 14], 'false,false,true': [0.893, 0, 33], 'false,false,false,true': [0.138, 51, 0], 'false,false,false,false': [0.099, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.817, 0, 70], 'true,false': [1.786, 170, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.712, 39, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.089, 0, 46], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 89, 12], 'false,false,false,true': [1.845, 57, 18], 'false,false,false,false': [1.898, 30, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.279, 4, 45], 'false,true,true,true': [0.713, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.083, 115, 0], 'false,false,true': [0.646, 0, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 59, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.164, 1, 48], 'true,true,false': [0.331, 0, 12], 'true,false,true': [0.019, 97, 0], 'true,false,false,true': [0.02, 17, 0], 'true,false,false,false': [0.895, 14, 4], 'false,true': [1.058, 42, 15], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.373, 16, 13]}]
{'': [0.218176308679074, 0.21459128222916074], 'true': [0.016124697661918288, 0.02814534761604695], 'false': [0.2172928927116337, 0.21172022684309966], 'false,true': [-2.3684757858670006e-16, 2.7755575615628914e-17], 'true,false': [6.111319401606367e-17, 0.11890606420927453], 'false,true,true': [-2.7328566760003855e-16, 0.0]}
{'': [0.0007369843500155682, 0.1284751258891513], 'false': [0.07282782101030662, 0.16789341495928342], 'false,false': [0.10393713820249217, 0.1821164105868714], 'false,false,false': [0.0022173364053545974, 0.1706492276166757], 'false,false,true': [nan, 0.10393713820249217], 'false,true': [nan, 0.07282782101030662]}
{'': [0.005125821510011461, 0.12224131115652698], 'false': [nan, 0.1222413111565269], 'false,false': [0.002521327821564744, 0.1114775424501576], 'false,false,false': [0.08867022003815701, 0.1603670662774985], 'true': [0.002827480440956457, 0.012974256209435597], 'true,false': [0.015602074559031806, 0.004109822522306006], 'true,true': [0.002827480440956457, nan], 'false,false,true': [0.00789082225637805, 1.7763568394002506e-16]}
{'': [0.05401850040243988, 0.00046317318614646705], 'false': [0.00010117513377596217, 0.0006205958902785555], 'false,false': [nan, 0.0006205958902785555], 'false,false,false': [nan, 0.0006205958902785555], 'false,true': [nan, 0.00010117513377596033], 'false,true,false': [9.881844559484951e-05, 7.233395653127861e-05]}
{'': [0.005660695036972483, 0.08035835091864246], 'false': [0.07022986520537801, 0.07760011807866962], 'false,false': [0.07735343421685242, 0.07825131346382418], 'false,false,true': [0.0036235662561806114, 0.01989421928851897], 'false,true': [0.07072141625895814, 0.0], 'true': [0.005377772154490252, 0.0]}
{'': [0.03447917553313902, 0.08307525086868953], 'false': [0.0015419577476656978, 0.08695804806115284], 'false,false': [0.024173741796024828, 0.00029810505365534287], 'true': [nan, 0.034479175533139034], 'true,false': [nan, 0.03447917553313902], 'false,false,false': [0.0003716488238543421, 0.00021492704856207467]}
{'': [0.04451944718799532, 0.05232683783712743], 'false': [nan, 0.052326837837127306], 'false,false': [nan, 0.05232683783712743], 'false,false,false': [nan, 0.05232683783712743], 'true': [0.009546114184579743, 0.01812404555570891]}
{'': [0.00029193984473624884, 0.04519119487563233], 'false': [nan, 0.0451911948756327], 'false,false': [0.02574494519536748, 0.05958302112322033], 'false,false,false': [0.0453658531097268, 0.08005719524843605], 'true': [0.00017269737706953928, 4.7891747041839405e-05], 'true,false': [4.7891747041839405e-05, nan]}
{'': [0.07760557514229251, 0.03832665966921619], 'false': [0.02514369597041988, 0.057978104101852286], 'false,false': [0.017363287615728046, 0.0005820231074137636], 'false,true': [0.021180063537522942, 5.924366367884196e-05], 'false,true,true': [0.021180063537522942, nan], 'false,false,false': [nan, 0.0005820231074137636]}
{'': [0.024959361604907786, 0.03697504850016188], 'false': [0.019639048474608366, 0.06307382824327372], 'false,false': [0.0, 0.06499714176108011], 'false,false,false': [nan, 0.06499714176108007], 'true': [0.024044509741728823, 0.0071030755788823825], 'true,true': [0.02764907273999883, 0.009129393082163146], 'true,false': [3.725400371933443e-06, 0.025693638767874356], 'true,false,false': [2.3945165175721847e-05, 0.044517000228628284]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.028
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.127, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return -0.11464018054674638;  // std dev = 0.163, 147.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7289689120860544;  // std dev = 0.206, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7227701886500579;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.033879266937586486;  // std dev = 2.270, 72.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=8 */
%   | | | else return -0.1284604488860421;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.09376177333618009;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.05752456242470044;  // std dev = 1.153, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7347705933912674;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10943912063854896;  // std dev = 3.726, 87.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.5572438569069031;  // std dev = 0.003, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.7279021986694131;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22373578682344222;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4007468360309479;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5731381093981655;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7422749469346496;  // std dev = 0.124, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12394236053675974;  // std dev = 0.068, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0989367592716227;  // std dev = 2.807, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.1571889618858725;  // std dev = 2.269, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.3234969631644132;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.4498980409229216;  // std dev = 0.376, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.18326419819900375;  // std dev = 0.455, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.49275383265440564;  // std dev = 0.191, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.323962441508371;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5799313595637294;  // std dev = 0.175, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7105854563909441;  // std dev = 0.210, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(I, A) )
%   | then return -0.11133943685322525;  // std dev = 0.005, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return -0.15760754200315644;  // std dev = 0.132, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.33543315897232356;  // std dev = 0.111, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.11611848589404723;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.43752702086103584;  // std dev = 0.102, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5019677470580981;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34801886804659116;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09956057662801138;  // std dev = 0.708, 77.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=1 */
%   | | | else return -0.019451795882012204;  // std dev = 1.589, 66.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=10 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.004400334464422081;  // std dev = 1.755, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0.11231918823792524;  // std dev = 2.228, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23640298754969044;  // std dev = 0.965, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.40417430029500373;  // std dev = 0.181, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09508797038032979;  // std dev = 0.026, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2746202811480864;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08808633963785698;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27962512581373383;  // std dev = 0.058, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3615317985824496;  // std dev = 0.208, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5278101999761634;  // std dev = 0.303, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13018330228403932;  // std dev = 0.030, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2188585031001126;  // std dev = 0.018, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.24773312637694017;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3418815221551781;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.2443540894216818;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21492857296563578;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09094860446897098;  // std dev = 0.925, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return -0.019960668925629768;  // std dev = 1.260, 61.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.014005582626496715;  // std dev = 1.953, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 5.509039251004354E-4;  // std dev = 1.226, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.1455285481191824;  // std dev = 0.974, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.1765295738231986;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18350094156558572;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.28358288075761057;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.037401444456956166;  // std dev = 0.127, 143.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=16 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.35107496207888783;  // std dev = 0.396, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.12637215351347195;  // std dev = 0.101, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10064453293524883;  // std dev = 0.473, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.029125252673232547;  // std dev = 1.046, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16275674089994746;  // std dev = 0.015, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(E, A) )
%   | | then return 0.2441053590797016;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15240329787738852;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15934190950515084;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.35596131034030876;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07901380903934513;  // std dev = 0.074, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.31060793131189485;  // std dev = 0.126, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.43397421893171695;  // std dev = 0.217, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12851374226137574;  // std dev = 0.026, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.14833229556314273;  // std dev = 0.056, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.005646546341431048;  // std dev = 1.289, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.19244143712542208;  // std dev = 0.068, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.06176117373773213;  // std dev = 0.066, 127.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.0075878310855290445;  // std dev = 0.147, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return -0.052128099547452504;  // std dev = 0.151, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.2889674790412111;  // std dev = 0.605, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.014458569040046037;  // std dev = 0.816, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 5.280182393373042E-4;  // std dev = 0.992, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.591', 'seconds']
Refined model CLL: -0.107309


******************************************
Best model found
******************************************
Results 

CLL : -0.107041 

AUC ROC : 0.993056 

AUC PR : 0.367102 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 9.028 

Total Inference Time : 11.664810419082642 

Total revision time: 29.10950148200989
Best scored revision CLL: -0.107309


Results 

CLL : -0.107041 

AUC ROC : 0.993056 

AUC PR : 0.367102 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 29.13620317077637 

Total Inference Time : 11.664810419082642 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.376
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.05674468192176434;  // std dev = 0.279, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6688707101953539;  // std dev = 1.961, 70.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03838578829476256;  // std dev = 0.257, 146.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05434332380594895;  // std dev = 1.780, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7387034082726256;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1346091906439235;  // std dev = 4.448, 109.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.566923414235533;  // std dev = 1.061, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7361055140255721;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.33975431151532237;  // std dev = 1.175, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6197011037591115;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5708146016285155;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.032059207136380545;  // std dev = 4.197, 245.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=28 */
%   | | | else return 0.035477786198338815;  // std dev = 3.683, 91.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5257831807173563;  // std dev = 2.847, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11977599847462973;  // std dev = 0.040, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | | else return -0.12706794220278714;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1656267948244973;  // std dev = 0.230, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31662631162032745;  // std dev = 1.140, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return 0.4815047618275248;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24694408271472468;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.5105958352347004;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6348177733724472;  // std dev = 0.326, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.09523628616764997;  // std dev = 1.776, 212.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=5 */
%   | | else return -0.009270331934957477;  // std dev = 0.281, 61.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029756939962243194;  // std dev = 2.678, 189.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26726463964202785;  // std dev = 0.167, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5042998287747459;  // std dev = 1.330, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12396131654155461;  // std dev = 0.153, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.12943995129637054;  // std dev = 0.181, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26800253940941055;  // std dev = 1.946, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | else return -0.08246981691213633;  // std dev = 1.669, 199.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.046566992885312575;  // std dev = 1.927, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19496059734665522;  // std dev = 0.074, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.25986462276246597;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05397226324574083;  // std dev = 0.152, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0028095924093692187;  // std dev = 1.875, 104.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=24 */
%   | | | else return 0.04270002063120245;  // std dev = 2.314, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11457237425737722;  // std dev = 0.254, 66.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2035515481136905;  // std dev = 1.821, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09152174891463513;  // std dev = 0.075, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36449332598028905;  // std dev = 1.095, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11742009761077381;  // std dev = 0.238, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13797576997820807;  // std dev = 1.989, 69.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=65 */
%   | | else return 0.18159785999311392;  // std dev = 0.375, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08196265506970128;  // std dev = 0.019, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09484702734701986;  // std dev = 0.027, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.008850754636372837;  // std dev = 0.967, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.010881674039222345;  // std dev = 1.677, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22617801599096032;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028359333997997064;  // std dev = 1.807, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.818', 'seconds']
Parameter learned model CLL:-0.110407 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.279, 43, 4], 'false,true,true,true': [0.0, 0, 19], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.467, 38, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.961, 4, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 131, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.78, 42, 4], 'false,false,false,true': [0.105, 0, 6], 'false,false,false,false': [4.448, 76, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.061, 1, 52], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.216, 0, 3], 'true,false,false': [1.175, 2, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.169, 0, 4], 'false,false,true,false': [2.98e-08, 0, 13], 'false,false,false,true': [4.197, 217, 28], 'false,false,false,false': [3.683, 73, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.847, 5, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 155, 0], 'false,true,false,false': [0.016, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.14, 1, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.968, 1, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.326, 0, 32], 'false,false,true,false': [1.776, 207, 5], 'false,false,false': [0.281, 52, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.678, 126, 63], 'false,true': [0.167, 0, 18], 'false,false,true': [1.33, 1, 43], 'false,false,false,true': [0.153, 54, 0], 'false,false,false,false': [0.181, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.946, 3, 95], 'true,false': [1.669, 192, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.927, 42, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 64], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 136, 15], 'false,false,false,true': [1.875, 80, 24], 'false,false,false,false': [2.314, 43, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.254, 5, 61], 'false,true,true,true': [1.821, 3, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 154, 0], 'false,false,true': [1.095, 1, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 82, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.989, 4, 65], 'true,true,false': [0.375, 0, 16], 'true,false,true': [0.019, 129, 0], 'true,false,false,true': [0.027, 27, 0], 'true,false,false,false': [0.967, 19, 4], 'false,true': [1.677, 44, 21], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.807, 38, 17]}]
{'': [0.21484375000000072, 0.22222222222222357], 'false': [0.22574576726686382, 0.21811224489795866], 'false,true': [0.0, 4.163336342344337e-17], 'true': [0.012046400951813752, 0.02060941828254837], 'true,false': [-9.006004955001269e-17, 0.07786328655500212], 'false,true,true': [-2.8047739569477637e-16, 0.0]}
{'': [0.0549119294396767, 0.12324560446537433], 'false': [0.06619205906161148, 0.1654587431805001], 'false,false': [0.06889276868166554, 0.19019735305350363], 'false,false,false': [0.0018489637426594523, 0.18152533740749707], 'false,false,true': [nan, 0.06889276868166554], 'false,true': [nan, 0.06619205906161148]}
{'': [0.04724677489234402, 0.10558892117226525], 'false': [nan, 0.10558892117226484], 'false,false': [0.0021169960663826363, 0.09371249440047005], 'false,false,false': [0.07191135372771475, 0.1490819649805532], 'true': [0.0212303913343108, 0.1608569075930199], 'true,false': [0.015490376079592139, 0.17252546352928594], 'true,true': [0.0212303913343108, nan], 'false,false,true': [0.0071696702716942395, 6.832141690000964e-17]}
{'': [0.06283748002374044, 0.0006394595993176508], 'false': [1.6582093897704876e-05, 0.0006930348905514443], 'false,false': [nan, 0.0006930348905514443], 'false,false,false': [nan, 0.0006930348905514443], 'false,true': [nan, 1.6582093897704876e-05], 'false,true,false': [1.026853957172316e-05, 1.1313955063844047e-05]}
{'': [0.021407028276560974, 0.0776952770358707], 'false': [0.055747217327798824, 0.07513481980115308], 'false,false': [0.07408950868572498, 0.07923956368625697], 'false,false,true': [0.0033296098879980196, 0.014871372080861301], 'false,true': [0.055164673927746086, 0.0], 'true': [0.02131949698339344, 0.0]}
{'': [0.037939705668847704, 0.08809539978713415], 'false': [0.00155365740496675, 0.09352264207908202], 'false,false': [0.0402265509230449, 0.0005235545470156657], 'true': [nan, 0.037939705668847794], 'true,false': [nan, 0.037939705668847704], 'false,false,false': [0.00043455629773617063, 0.0005960646124189875]}
{'': [0.04928946015146424, 0.057996222126284185], 'false': [nan, 0.057996222126284254], 'false,false': [nan, 0.057996222126284185], 'false,false,false': [nan, 0.057996222126284185], 'true': [0.03865751043964713, 0.013995242462485609]}
{'': [0.00020794709967149116, 0.04035754736753768], 'false': [nan, 0.04035754736753744], 'false,false': [0.023000222976275315, 0.0539334466954872], 'false,false,false': [0.0338193953197028, 0.08637557356403441], 'true': [8.459085919740317e-05, 7.046678012616325e-05], 'true,false': [7.046678012616325e-05, nan]}
{'': [0.06464015133546419, 0.04227899596913125], 'false': [0.030409238026376385, 0.05894249805357983], 'false,false': [0.03525715723823725, 0.0006927437227801322], 'false,true': [0.10044671723257803, 3.622136452236474e-05], 'false,true,true': [0.10044671723257803, nan], 'false,false,false': [nan, 0.0006927437227801322]}
{'': [0.030231046284077114, 0.050982319877285846], 'false': [0.043245892283441625, 0.058979274521843886], 'false,false': [0.0, 0.05935283512938422], 'false,false,false': [nan, 0.05935283512938429], 'true': [0.048477303607404106, 0.0058841311749085485], 'true,true': [0.05731778455895553, 0.008808033211232365], 'true,false': [2.7865202931828835e-06, 0.020545245098635246], 'true,false,false': [2.784511343937991e-05, 0.04063739474265043]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.907
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8278459047964823;  // std dev = 0.171, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1205744691558073;  // std dev = 0.144, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8126943896449667;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.3966104735610507;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7310827533410024;  // std dev = 0.203, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.6541200749548984;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.014918126870707286;  // std dev = 0.292, 113.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=15 */
%   | | else return -0.12779751924192737;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0722024807580726;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.07430184519385544;  // std dev = 1.248, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7270417366749098;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.12545461136101146;  // std dev = 4.260, 108.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5599776477135969;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.7563478257744123;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4796468891830969;  // std dev = 0.299, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.48255604261046875;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5865628694682092;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11681622518079235;  // std dev = 0.857, 117.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=1 */
%   | | | else return 0.028524993249803492;  // std dev = 2.774, 69.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07336372833048135;  // std dev = 3.414, 85.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=22 */
%   | | | else return 0.1247670697206634;  // std dev = 2.562, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.376938158211047;  // std dev = 0.961, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.4279105216356055;  // std dev = 0.054, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.5396443975878418;  // std dev = 0.238, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(A, H) )
%   | | | then return 0.498827058308002;  // std dev = 0.202, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6721312040423424;  // std dev = 0.940, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.8130769815832517;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6488453283879506;  // std dev = 0.938, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.11996504239427426;  // std dev = 0.011, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return -0.16366244126721002;  // std dev = 0.263, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32913583649664463;  // std dev = 0.073, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1555812881174202;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.36565923744161666;  // std dev = 0.257, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5424476873240964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3404043837367181;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09347054857223781;  // std dev = 0.712, 115.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=1 */
%   | | | else return -0.0045117426358221215;  // std dev = 2.282, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04425763375528516;  // std dev = 2.296, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.11511498504205324;  // std dev = 2.368, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.20626841733015142;  // std dev = 1.376, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.5248949130781516;  // std dev = 0.337, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10186557314905711;  // std dev = 0.108, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.1480349765700396;  // std dev = 0.940, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2692303307305699;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1101263132631047;  // std dev = 0.076, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.27725708723821113;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.49598806824433894;  // std dev = 0.111, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.1334274074275792;  // std dev = 0.037, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.19259623656266578;  // std dev = 0.166, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0.23692890566837194;  // std dev = 0.054, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(E, F), follows(G, E) )
%   | | then return -0.06258324747324844;  // std dev = 0.118, 117.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=7 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.4355814952795205;  // std dev = 0.077, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.052974043564028295;  // std dev = 0.756, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return 0.001255446325963099;  // std dev = 1.145, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return 0.07291058903884634;  // std dev = 1.809, 49.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=19 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.14037286255662074;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.025681003603969015;  // std dev = 1.654, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19086840713723002;  // std dev = 0.074, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.28138334925508685;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), follows(A, F) )
%   | | | then return 0.07321820507696815;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4364274932800054;  // std dev = 0.337, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08721932683736315;  // std dev = 0.134, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2693755767317542;  // std dev = 1.268, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12371967079098219;  // std dev = 0.026, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.00141769537022375;  // std dev = 1.340, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return -0.025052436231643153;  // std dev = 1.541, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.17104835872671234;  // std dev = 0.024, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return -0.02569653103924287;  // std dev = 0.343, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.11285210963074241;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.21986162439760135;  // std dev = 1.258, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return -0.07954243154352834;  // std dev = 0.009, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3204470435134948;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4085601349755298;  // std dev = 0.246, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.11042370138394787;  // std dev = 0.022, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.16399342258311977;  // std dev = 0.215, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.126439533621328;  // std dev = 0.142, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.17790874643817486;  // std dev = 0.171, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.06668831902685837;  // std dev = 0.057, 170.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11299918138989273;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -9.931877365253162E-4;  // std dev = 1.043, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0.017687179683765125;  // std dev = 0.585, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1369482959658742;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.004052951006275666;  // std dev = 1.212, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return 0.011894405806131252;  // std dev = 1.024, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.271', 'seconds']
Refined model CLL: -0.11101


******************************************
Best model found
******************************************
Results 

CLL : -0.109376 

AUC ROC : 0.993454 

AUC PR : 0.41472 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 17.907 

Total Inference Time : 16.856751680374146 

Total revision time: 46.56589604187012
Best scored revision CLL: -0.110407


Results 

CLL : -0.109376 

AUC ROC : 0.993454 

AUC PR : 0.41472 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 46.5925977306366 

Total Inference Time : 16.856751680374146 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.58
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.06021841183926325;  // std dev = 0.274, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.2291166770349954;  // std dev = 0.483, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7247781996277718;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03752175117453446;  // std dev = 0.258, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06329031982057212;  // std dev = 1.789, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7533939252959664;  // std dev = 0.122, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10842001079581194;  // std dev = 5.027, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5122151914315519;  // std dev = 2.003, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7285928931892149;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.592085341343893;  // std dev = 0.166, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5898135907313321;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5564080142547034;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012222556492592643;  // std dev = 4.633, 248.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=34 */
%   | | | else return 0.07341968865959969;  // std dev = 4.050, 94.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5404350452469706;  // std dev = 2.508, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12178085672201534;  // std dev = 0.049, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | | else return -0.13179247647022754;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16576842091972346;  // std dev = 0.292, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29854616047882476;  // std dev = 1.410, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.46665264588584465;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29347742698490836;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5012978911431849;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6306518768051118;  // std dev = 0.298, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10353297682419076;  // std dev = 1.799, 259.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=5 */
%   | | else return 0.022105242541600546;  // std dev = 0.313, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.040849344004594425;  // std dev = 2.984, 225.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24717767840712748;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5185443333651972;  // std dev = 1.064, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12218883753952942;  // std dev = 0.214, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.13118432758986656;  // std dev = 0.210, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24528696250777973;  // std dev = 2.487, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else return -0.08943857007095747;  // std dev = 1.670, 265.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029803707589435756;  // std dev = 2.266, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18121788874322298;  // std dev = 0.995, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26115184106919126;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.6299172099032805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05307029694812781;  // std dev = 0.156, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006772576579947898;  // std dev = 2.089, 129.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=28 */
%   | | | else return 0.035448017932367105;  // std dev = 2.451, 79.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1492063610406541;  // std dev = 0.178, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28149176919584795;  // std dev = 0.881, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09277998057762948;  // std dev = 0.089, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37033621767467345;  // std dev = 1.283, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12134322963757291;  // std dev = 0.253, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16591826514801933;  // std dev = 1.518, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.07250658719081328;  // std dev = 1.261, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08336969559943216;  // std dev = 0.028, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.095500211686461;  // std dev = 0.029, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.002178147236165263;  // std dev = 0.934, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.013963518995902814;  // std dev = 1.381, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17335084441271342;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014266547232071006;  // std dev = 1.977, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.854', 'seconds']
Parameter learned model CLL:-0.1122 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 144, 0], 'true,false,false': [0.274, 45, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.58e-08, 54, 0], 'false,false': [0.483, 39, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 164, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.789, 48, 4], 'false,false,false,true': [0.122, 0, 8], 'false,false,false,false': [5.027, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.003, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.166, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.633, 214, 34], 'false,false,false,false': [4.05, 71, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.508, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.049, 177, 0], 'false,true,false,false': [0.017, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.292, 86, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.41, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.298, 0, 39], 'false,false,true,false': [1.799, 254, 5], 'false,false,false': [0.313, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.984, 143, 82], 'false,true': [0.18, 0, 22], 'false,false,true': [1.064, 0, 52], 'false,false,false,true': [0.214, 87, 0], 'false,false,false,false': [0.21, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.487, 6, 121], 'true,false': [1.67, 258, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.266, 61, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 166, 19], 'false,false,false,true': [2.089, 101, 28], 'false,false,false,false': [2.451, 55, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.178, 3, 78], 'false,true,true,true': [0.881, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.089, 195, 0], 'false,false,true': [1.283, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 90, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.518, 2, 85], 'true,true,false': [1.261, 2, 19], 'true,false,true': [0.028, 156, 0], 'true,false,false,true': [0.029, 27, 0], 'true,false,false,false': [0.934, 18, 4], 'false,true': [1.381, 54, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.977, 50, 21]}]
{'': [0.23107067249223265, 0.2229937894273566], 'true': [0.009433106575965852, 0.020295846868372203], 'false': [0.21338210638622274, 0.23335067637877316], 'false,true': [0.06858710562414343, 5.756711979537848e-17], 'false,true,true': [0.04338842975206614, 0.15999999999999986], 'true,false': [-9.251858538542972e-17, 0.0749687630154101]}
{'': [0.0004759680312457202, 0.12098512616633261], 'false': [0.06672585240972526, 0.16152138712171654], 'false,false': [0.06155210505149874, 0.18464668445453156], 'false,false,false': [0.0018508567829986777, 0.17305295391018383], 'false,true': [nan, 0.06672585240972526], 'false,false,true': [nan, 0.06155210505149874]}
{'': [0.051951338835665224, 0.12255981259684653], 'false': [nan, 0.12255981259684703], 'false,false': [0.0018219306771200565, 0.11217728548098972], 'false,false,false': [0.08654856856016777, 0.17447482173275838], 'true': [0.056479607963019623, 0.010850584550803384], 'true,true': [0.056479607963019623, nan], 'true,false': [0.01705442432465561, 0.003442059623571525], 'false,false,true': [0.005579662698679415, 1.1842378929335003e-16]}
{'': [0.03956821394111187, 0.0006844445066139395], 'false': [2.5193480833095942e-05, 0.00099295940086149], 'false,false': [nan, 0.00099295940086149], 'false,false,false': [nan, 0.00099295940086149], 'false,true': [nan, 2.5193480833089505e-05], 'false,true,false': [1.3311677180133217e-05, 9.59004602311501e-06]}
{'': [0.02519141110886173, 0.07800387914475046], 'false': [0.0019672082684987317, 0.07730780232902681], 'false,false': [0.07246358266921302, 0.09782574003021305], 'false,false,true': [0.0022718401735813878, 0.012489141361242153], 'true': [0.025157042350044095, 0.0], 'false,true': [8.933190354065702e-06, 0.0]}
{'': [0.039581855009756826, 0.08162379773200783], 'false': [0.0014764570352205505, 0.0863150573235182], 'false,false': [0.021787509703678733, 0.0006316191836265917], 'true': [nan, 0.03958185500975676], 'true,false': [nan, 0.039581855009756826], 'false,false,false': [0.0005279577517188146, 0.0007340375171147236]}
{'': [0.047440027038466386, 0.057711407363481966], 'false': [nan, 0.05771140736348206], 'false,false': [nan, 0.057711407363481966], 'false,false,false': [nan, 0.057711407363481966], 'true': [0.04871724067400726, 0.010528871963085436]}
{'': [0.019036754513670377, 0.03906565872231509], 'false': [nan, 0.03906565872231517], 'false,false': [0.024396443293050924, 0.05028376594150487], 'false,false,false': [0.033815771317570374, 0.07606900043681232], 'true': [0.011787526059963502, 0.17651258101340284], 'true,false': [0.00010085365311045258, 0.0]}
{'': [0.031838168574988245, 0.038751538039525184], 'false': [0.02248549025876064, 0.06503777794937697], 'false,false': [0.04015643336514854, 0.0007108124350988164], 'false,true': [0.02042824522983252, 4.0831256635418194e-05], 'false,true,true': [0.02042824522983252, nan], 'false,false,false': [nan, 0.0007108124350988164]}
{'': [0.027487499515703666, 0.03859605408369842], 'false': [0.024154308504310922, 0.054213498775645165], 'false,false': [0.0, 0.055047274829803206], 'false,false,false': [nan, 0.055047274829803185], 'true': [0.03741989071375026, 0.004940306590027869], 'true,true': [0.026474669196247545, 0.07573531025256096], 'true,false': [5.120104389765546e-06, 0.01997794889600079], 'true,false,false': [3.096580326990232e-05, 0.039659496252219234]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;true,false;follows(A, E).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 33.417
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 0.209, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else return -0.12545762227753762;  // std dev = 0.127, 244.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7184695186134219;  // std dev = 0.122, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.6698143340318501;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6760062844962463;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12725420561316658;  // std dev = 1.13e-07, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.1056849893066952;  // std dev = 0.150, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.039412461053499756;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.09159203606913426;  // std dev = 1.185, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.645383395564329;  // std dev = 0.933, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13137418289892752;  // std dev = 4.654, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5570267550076149;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5486171436696616;  // std dev = 0.290, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.24024544966237185;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6027030224166526;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.45066304822764475;  // std dev = 0.323, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.609169079524671;  // std dev = 0.265, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1127259270841262;  // std dev = 0.999, 208.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.09137280344406915;  // std dev = 3.869, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.16201022781530477;  // std dev = 2.519, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.4351531739964779;  // std dev = 0.104, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.33703566349167846;  // std dev = 1.685, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.7006711097215468;  // std dev = 0.338, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.5219682203385497;  // std dev = 0.146, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25669055077263786;  // std dev = 0.630, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6344180820285513;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.7393271557885019;  // std dev = 0.246, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(K, A) )
%   | then return -0.10529036690002917;  // std dev = 0.005, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.1645125157865933;  // std dev = 0.215, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32967226240003017;  // std dev = 0.044, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1936623359972164;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.34753337556875513;  // std dev = 0.742, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5319546698941853;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3481984056343691;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.46333644460453444;  // std dev = 0.516, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09507518007860385;  // std dev = 1.660, 277.000 (wgt'ed) examples reached here.  /* #neg=272 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06984230880359897;  // std dev = 0.872, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.1367938851143904;  // std dev = 1.933, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.21773651738512426;  // std dev = 1.366, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.27576547485776887;  // std dev = 0.108, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.2268169729585197;  // std dev = 0.981, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0615049221100866;  // std dev = 0.108, 166.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=14 */
%   | | else return -0.07297821385153831;  // std dev = 0.085, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2805693580750606;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.18270045515756073;  // std dev = 1.165, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.4614206757398039;  // std dev = 0.934, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12471340145046517;  // std dev = 0.031, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.18248675311684454;  // std dev = 1.395, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return -0.011986208925303983;  // std dev = 1.686, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.27595572842116706;  // std dev = 0.043, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.08759680655860454;  // std dev = 0.039, 282.000 (wgt'ed) examples reached here.  /* #neg=281 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2229994066611915;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5331317760423915;  // std dev = 0.264, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10832416259727004;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.06106922876842949;  // std dev = 0.507, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.017220559375802882;  // std dev = 1.752, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.16796041356616143;  // std dev = 0.137, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.18985725194469047;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.27936062566584474;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, G) )
%   | | | then return 0.1516199064184256;  // std dev = 1.213, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.4878264892860964;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07611370851709764;  // std dev = 0.040, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.26454301817474796;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.009091361601454646;  // std dev = 1.427, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | | | else return 0.01658728141360753;  // std dev = 1.911, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.16487777571430537;  // std dev = 0.014, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.007490509693775304;  // std dev = 2.002, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   | | else return 0.18054359315951396;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(F, A) )
%   | | then return 0.2654075828267604;  // std dev = 0.206, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.10521329590837412;  // std dev = 0.317, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19137210708318236;  // std dev = 0.070, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07066176255799582;  // std dev = 0.031, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.308125752839312;  // std dev = 0.094, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12010869019199244;  // std dev = 0.034, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12336544889036061;  // std dev = 0.148, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else return 0.02907267158165824;  // std dev = 0.369, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | else return -0.06150157205555415;  // std dev = 0.054, 228.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.041201728826437564;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.034119002147630965;  // std dev = 1.184, 54.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=13 */
%   | | | else return 0.005922691008204826;  // std dev = 0.750, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 1.9892208301164338E-4;  // std dev = 0.617, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0056728650945814755;  // std dev = 1.257, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return -0.03815982662800308;  // std dev = 1.354, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.753', 'seconds']
Refined model CLL: -0.098743


******************************************
Best model found
******************************************
Results 

CLL : -0.096526 

AUC ROC : 0.994192 

AUC PR : 0.409375 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 33.417 

Total Inference Time : 18.87882351875305 

Total revision time: 65.03251459312439
Best scored revision CLL: -0.098743


Results 

CLL : -0.096526 

AUC ROC : 0.994192 

AUC PR : 0.409375 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 65.05921628189087 

Total Inference Time : 18.87882351875305 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.148
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2581489350995122;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030213318388223814;  // std dev = 0.334, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01697357824080592;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8237336544841058;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2973414903785498;  // std dev = 1.272, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5840880263202513;  // std dev = 0.202, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8600815551555565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6721923233751143;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.013403988525649077;  // std dev = 1.975, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return -0.06507391942599793;  // std dev = 1.234, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5463207397777974;  // std dev = 0.695, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.13303112399640762;  // std dev = 0.028, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12166981293005645;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19160901227770738;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33988820124356095;  // std dev = 0.340, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.37744769344231444;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29332088296253334;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5939339780489351;  // std dev = 0.116, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09602443784461874;  // std dev = 0.908, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else return -0.12613263059841603;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03499859633779165;  // std dev = 1.553, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23637985502799563;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46980343263522945;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12397579359787332;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.13641531662296738;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30851434571312053;  // std dev = 0.436, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07671502063313126;  // std dev = 0.797, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09762100405350982;  // std dev = 0.242, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17212913666831545;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.0288968674190049;  // std dev = 0.163, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0034873025558926646;  // std dev = 0.838, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.029617877214027387;  // std dev = 0.477, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18841934930199658;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28881415060296334;  // std dev = 0.290, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09963286030147817;  // std dev = 0.028, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3634465642286747;  // std dev = 0.189, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11980512667117417;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13320347805547483;  // std dev = 1.093, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.21068369094285397;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08993776376011034;  // std dev = 0.015, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10005018084794531;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.005639339038423938;  // std dev = 0.327, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.09852410302252967;  // std dev = 0.503, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18407652760511173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06924494672844891;  // std dev = 0.282, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.607', 'seconds']
Parameter learned model CLL:-0.124912 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [4.08e-08, 40, 0], 'true,false,false': [0.35, 6, 1], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.49, 3, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.334, 30, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.935, 7, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.272, 4, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.202, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.975, 32, 7], 'false,false,false,false': [1.234, 15, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.695, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 33, 0], 'false,true,false,false': [5.27e-09, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.064, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.34, 0, 12], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.116, 0, 7], 'false,false,true,false': [0.908, 39, 2], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.553, 29, 17], 'false,true': [0.0, 0, 2], 'false,false,true': [0.242, 0, 6], 'false,false,false,true': [0.014, 6, 0], 'false,false,false,false': [0.057, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.436, 0, 20], 'true,false': [0.797, 39, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.242, 1, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.018, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 36, 7], 'false,false,false,true': [0.838, 13, 4], 'false,false,false,false': [0.477, 3, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.067, 0, 13], 'false,true,true,true': [0.29, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.028, 48, 0], 'false,false,true': [0.189, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.061, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.093, 1, 17], 'true,true,false': [0.816, 1, 2], 'true,false,true': [0.015, 39, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.327, 3, 1], 'false,true': [0.503, 3, 3], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 1, 1]}]
{'': [0.2112029384756653, 0.24305555555555536], 'false': [0.24489795918367335, 0.24000000000000005], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [-2.8047739569477637e-16, 0.020823902218198347], 'true,false': [4.163336342344337e-17, 0.12244897959183677], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [1.4802973661668753e-16, 0.14287389029278993], 'false': [0.11148022202267263, 0.19574771160779297], 'false,false': [0.10937499999999994, 0.2071200945215862], 'false,false,false': [0.0, 0.20222247184436995], 'false,true': [nan, 0.11148022202267263], 'false,false,true': [nan, 0.10937499999999994]}
{'': [0.008813179743187814, 0.10859674449866713], 'false': [nan, 0.10859674449866714], 'false,false': [3.700743415417188e-17, 0.09813744878285892], 'false,false,false': [0.10000912577033522, 0.08955444980089891], 'true': [0.0037121836844491844, 0.00882559085476109], 'true,false': [0.0, 0.0], 'true,true': [0.0037121836844491844, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.019311768502554047, 0.0005894146741345194], 'false': [3.640394875722345e-05, 0.0005850657264555502], 'false,false': [nan, 0.0005850657264555502], 'false,false,false': [nan, 0.0005850657264555502], 'false,true': [nan, 3.640394875722345e-05], 'false,true,false': [2.3164480970290292e-05, 4.625929269271485e-18]}
{'': [0.008967951154384722, 0.07272829597503874], 'false': [0.0, 0.0720548388253501], 'false,false': [0.07674482548892404, 0.0], 'false,false,true': [0.0019131068491069492, 0.020098091123012533], 'true': [0.00960676384384788, 0.0], 'false,true': [0.0, nan]}
{'': [0.05241362379592014, 0.07763446823071261], 'false': [0.0, 0.08348577228894559], 'false,false': [0.009799599845127497, 0.0003292634122531053], 'true': [nan, 0.052413623795920225], 'true,false': [nan, 0.05241362379592014], 'false,false,false': [3.2424640514764715e-05, 0.0005487313174455435]}
{'': [0.04573172187693174, 0.019510712478915893], 'true': [0.00948966334221687, 0.015118340248205757], 'false': [nan, 0.019510712478915893], 'false,false': [nan, 0.019510712478915893], 'false,false,false': [nan, 0.019510712478915893]}
{'': [2.615849449008149e-05, 0.032352039672212465], 'false': [nan, 0.03235203967221246], 'false,false': [0.026725724454129983, 0.04237736170256839], 'false,false,false': [0.04130642882151486, 0.045490909959814314], 'true': [2.615849449008149e-05, nan]}
{'': [0.004532837675311225, 0.02617885332822728], 'false': [0.019988453896458896, 0.046259858415025785], 'false,false': [0.008967456900805165, 0.0003076097303752097], 'false,true': [0.010484016730633025, 1.6658145916256344e-05], 'false,true,true': [0.010484016730633025, nan], 'false,false,false': [nan, 0.0003076097303752097]}
{'': [0.039866558233152265, 0.037934239083711456], 'true': [0.10312803473977519, 0.003014716042861365], 'true,true': [0.06638494849245996, 0.22222222222222224], 'false': [0.04217000223874315, 0.029408736323102324], 'false,false': [0.0, 0.03971767382910897], 'false,false,false': [nan, 0.03971767382910897], 'true,false': [5.599174116582982e-06, 0.016168925205430933], 'true,false,false': [0.0, 0.02675271310395625]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.824
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.08578487415644506;  // std dev = 0.366, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0.01758869918022089;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.8332054912315484;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13010059326712306;  // std dev = 1.489, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5863859071663236;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(E, A) )
%   | | then return 0.8486770416719569;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6846689160841062;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5846607722289827;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12266089211822481;  // std dev = 0.100, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15751816326834134;  // std dev = 1.036, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.08462163593148417;  // std dev = 1.018, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(D, G), follows(A, D) )
%   | | | then return 0.2842396033152889;  // std dev = 0.905, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.07665629469377915;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.414504001705831;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.410323525328215;  // std dev = 0.000373, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6780549812270734;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6116072189708596;  // std dev = 0.208, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.11044349974173916;  // std dev = 0.015, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, K) )
%   | | then return -0.158621249230214;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.19880251776014324;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, G) )
%   | | | then return 0.38049884480535623;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3531116246719475;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4267023066308071;  // std dev = 0.166, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3726268705007547;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32136785550280744;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.40624453467810956;  // std dev = 0.332, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08386976573874293;  // std dev = 0.878, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else return -0.12375230746146278;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.10391013851778581;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.295348002930458;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25894752514739106;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.044425226160138206;  // std dev = 0.106, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else return -0.042073779413675266;  // std dev = 0.142, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25561981907619813;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.461499576008044;  // std dev = 0.240, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.13477265853639803;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13425464840678608;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2628446892510671;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.21680666971794824;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.06626711688274325;  // std dev = 0.317, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return -0.02126533905238346;  // std dev = 0.378, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.24334523205136538;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08101056207008174;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(I, K), tweets(A, K) )
%   | | | then return -0.11593550409233082;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07378645756226992;  // std dev = 0.695, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09583831783264687;  // std dev = 0.590, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2152518728814499;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.19451279671945076;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(F, G), tweets(F, E) )
%   | | then if ( follows(G, A), follows(F, A) )
%   | | | then return -0.06040422354554101;  // std dev = 0.324, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.0030123784268163228;  // std dev = 0.551, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else return 0.12164534941795864;  // std dev = 0.582, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32686351797535335;  // std dev = 0.155, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11954620629631502;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.19236445676404823;  // std dev = 0.747, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1961152520906123;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1540105083142001;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20045429532889747;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.19145597452964117;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22377381389723613;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07659026066126644;  // std dev = 0.008, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.33737663524767936;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.11574173979012008;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.13219165178863854;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16020064822778757;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.06988898424387456;  // std dev = 0.006, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.07546696515753326;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.009188025526002348;  // std dev = 0.287, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.09447660743866862;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.2896646962967894;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.15532049870692696;  // std dev = 0.336, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1707973444603652;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.28977460815805123;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.542', 'seconds']
Refined model CLL: -0.115099


******************************************
Best model found
******************************************
Results 

CLL : -0.114048 

AUC ROC : 0.99291 

AUC PR : 0.285639 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 5.824 

Total Inference Time : 3.805572748184204 

Total revision time: 13.077685472488403
Best scored revision CLL: -0.115099


Results 

CLL : -0.114048 

AUC ROC : 0.99291 

AUC PR : 0.285639 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 13.104387161254882 

Total Inference Time : 3.805572748184204 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.492
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6569734122109547;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030510026085768388;  // std dev = 0.267, 89.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05990944051699805;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4255778264016293;  // std dev = 0.869, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05643456397541502;  // std dev = 2.093, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5431294956368349;  // std dev = 1.014, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8700906503759146;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6988414782288359;  // std dev = 0.103, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5707416375986882;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5707416375986882;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01654911894014873;  // std dev = 2.608, 86.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=11 */
%   | | | else return 0.04587404742859424;  // std dev = 1.642, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5411752874514213;  // std dev = 0.992, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12118653580651638;  // std dev = 0.019, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.1271399213585618;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14100893615794188;  // std dev = 0.091, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26194401499252956;  // std dev = 1.444, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else return 0.49406439705422456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30427146416537804;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5443323541557281;  // std dev = 0.816, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.08668543697268748;  // std dev = 1.462, 107.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=4 */
%   | | else return -0.11511804618276224;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0055766433200326445;  // std dev = 2.256, 124.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24391929024512254;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45882894326348234;  // std dev = 0.856, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11103011451351974;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.11373573047621428;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22533792935616084;  // std dev = 2.023, 44.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=40 */
%   | else return -0.07388348427926347;  // std dev = 1.310, 100.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09094322669106346;  // std dev = 0.405, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17525904228978378;  // std dev = 0.979, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.01774496050419994;  // std dev = 0.181, 64.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.025136435733941385;  // std dev = 1.148, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return 0.053035961509788676;  // std dev = 0.897, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17378420526048258;  // std dev = 0.193, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2895590223447758;  // std dev = 0.520, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0942627389819194;  // std dev = 0.032, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45644508018731017;  // std dev = 0.323, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09954197156924323;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.21081336154188127;  // std dev = 0.507, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.12664089679971113;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0856847838670664;  // std dev = 0.014, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09564893987721763;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.01791207291816661;  // std dev = 0.374, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.005735410028095484;  // std dev = 1.022, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.244239809330011;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.041672605508992405;  // std dev = 0.831, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.944', 'seconds']
Parameter learned model CLL:-0.115336 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.46e-07, 0, 40], 'true,false,true': [6.99e-08, 70, 0], 'true,false,false': [0.3, 9, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.458, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.369, 2, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 79, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [0.869, 1, 2], 'false,false,false,false': [2.093, 25, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.014, 1, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.103, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.608, 75, 11], 'false,false,false,false': [1.642, 16, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.992, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 66, 0], 'false,true,false,false': [5.27e-09, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.091, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.444, 2, 26], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.816, 1, 11], 'false,false,true,false': [1.462, 103, 4], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.256, 91, 33], 'false,true': [0.0, 0, 7], 'false,false,true': [0.856, 1, 10], 'false,false,false,true': [0.038, 12, 0], 'false,false,false,false': [0.063, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.023, 4, 40], 'true,false': [1.31, 95, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.405, 3, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.979, 1, 30], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.181, 54, 10], 'false,false,false,true': [1.148, 21, 7], 'false,false,false,false': [0.897, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.193, 1, 27], 'false,true,true,true': [0.52, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.032, 73, 0], 'false,false,true': [0.323, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.059, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.507, 0, 35], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.014, 66, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.374, 3, 1], 'false,true': [1.022, 13, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.831, 8, 2]}]
{'': [0.22493055555555677, 0.23040000000000005], 'false': [0.24000000000000007, 0.20999999999999988], 'false,true': [-1.4802973661668753e-16, -9.25185853854297e-18], 'true': [1.5099033134902129e-15, 0.012343750000000034], 'true,false': [6.97854472621527e-17, 0.09000000000000005], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.058593749999999556, 0.09610874620313622], 'false': [0.07119938705308546, 0.1382910027837104], 'false,false': [0.07100591715976327, 0.15735148669948443], 'false,false,false': [0.2516247257644292, 0.13683336354903142], 'false,true': [nan, 0.07119938705308546], 'false,false,true': [nan, 0.07100591715976327]}
{'': [0.04215242525529948, 0.10547262006154118], 'false': [nan, 0.10547262006154118], 'false,false': [-1.1102230246251565e-16, 0.09018966105272168], 'false,false,false': [0.0790658478666791, 0.13486062335499713], 'true': [0.041155807450944056, 0.010027458412703952], 'true,true': [0.041155807450944056, nan], 'true,false': [0.0, 0.005265761298702709], 'false,false,true': [-3.700743415417188e-17, -4.4408920985006264e-17]}
{'': [0.019667748067043432, 0.00015576552051943296], 'false': [8.66132785961741e-06, 0.00039589120125598285], 'false,false': [nan, 0.00039589120125598285], 'false,false,false': [nan, 0.00039589120125598285], 'false,true': [nan, 8.66132785961741e-06], 'false,true,false': [5.589282078541789e-06, 3.0839528461809902e-18]}
{'': [0.07364815320218923, 0.06069819175710294], 'true': [0.07442051777527585, 0.0], 'false': [-2.7755575615628914e-17, 0.05798280328823651], 'false,false': [0.05965616603003332, 0.0], 'false,false,true': [0.05554871972630896, 0.019963860998107343], 'false,true': [-2.7755575615628914e-17, nan]}
{'': [0.041027574309518935, 0.07878621353477756], 'false': [-2.3790493384824782e-17, 0.08815487415223931], 'false,false': [0.066659089185098, 0.00021084513877774795], 'true': [nan, 0.041027574309519116], 'true,false': [nan, 0.041027574309518935], 'false,false,false': [0.0001227466854299905, 0.0002829794721420087]}
{'': [0.05932257651952803, 0.020473235914748554], 'true': [0.09298871120433178, 0.01715203286494221], 'false': [nan, 0.020473235914748554], 'false,false': [nan, 0.020473235914748554], 'false,false,false': [nan, 0.020473235914748554]}
{'': [0.03091765959271329, 0.042071341694424204], 'false': [nan, 0.042071341694424155], 'false,false': [0.03284176364794668, 0.056033219641472634], 'false,false,false': [0.047072494688535964, 0.08054970374447208], 'true': [0.03091765959271329, nan]}
{'': [0.037296491817849775, 0.03580091800287982], 'false': [0.024777061851509453, 0.07195309057780491], 'false,false': [0.014876398385109362, 0.00023200699288354701], 'false,true': [0.016923702921466804, 1.4005422056231251e-05], 'false,true,true': [0.016923702921466804, nan], 'false,false,false': [nan, 0.00023200699288354701]}
{'': [0.021930869218175254, 0.06040756573637608], 'false': [0.054927184285471296, 0.06958320455099622], 'false,false': [0.0, 0.06911007873708944], 'false,false,false': [nan, 0.06911007873708944], 'true': [0.00719898081724144, 0.002396306229756103], 'true,true': [0.007341781170679429, 0.0], 'true,false': [2.8038209576905926e-06, 0.017101444080339975], 'true,false,false': [-1.1564823173178713e-18, 0.035015948024581876]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.979
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, C), follows(A, C) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.7786178301400978;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.09143215954441752;  // std dev = 1.250, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | | else return 0.05307233488504495;  // std dev = 1.938, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13859225232765418;  // std dev = 1.567, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.009152421036289824;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5626476302778847;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.25609325155016793;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.7237686853630808;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6140848918584562;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5807952997074388;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7582666052212617;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12124611087766793;  // std dev = 0.074, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11846590246270594;  // std dev = 1.283, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.1783866395282782;  // std dev = 1.422, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.4232458930550314;  // std dev = 0.111, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.24428556910114266;  // std dev = 0.809, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.19776461941415382;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.43688387348433405;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5961234067955616;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7126503259025297;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6882144973477902;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.1091049956662777;  // std dev = 0.009, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.1763951115711202;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2801366836989317;  // std dev = 0.855, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.45293108248774494;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.005444694894334079;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.49409620526228437;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31103146524416325;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.34782014495831004;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01912396102286774;  // std dev = 1.810, 74.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
%   | | | else return 0.19015561402002112;  // std dev = 0.975, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return -0.09417986649002855;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2746934912384863;  // std dev = 0.032, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(A, F) )
%   | | | then return -0.04547011136500542;  // std dev = 1.338, 68.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=6 */
%   | | | else return -0.24914147682818102;  // std dev = 0.352, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.037849784469525506;  // std dev = 0.153, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2664413010841495;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3650026616699429;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.515349221671887;  // std dev = 0.239, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1420787166651047;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.13302793982509953;  // std dev = 0.186, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2192395808122;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.012555717637241143;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20811972948260674;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07680206694298775;  // std dev = 0.137, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | else if ( follows(A, H), follows(H, F) )
%   | | | then return 0.08550282229954824;  // std dev = 1.114, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return -0.06643769626005866;  // std dev = 0.560, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.006104048498997069;  // std dev = 0.672, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.08397032570366314;  // std dev = 0.570, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.014377231715602803;  // std dev = 0.291, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1429483907697507;  // std dev = 1.005, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2581899055102308;  // std dev = 0.917, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.08652053870818417;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0.08092793008683612;  // std dev = 0.497, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.19585175042800057;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.26241478501143584;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3544753589264483;  // std dev = 0.291, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10596203758485653;  // std dev = 0.055, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.027388697100687386;  // std dev = 0.241, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.09545129445622809;  // std dev = 0.236, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.16963539788405446;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.23667876887632958;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.3870151430385476;  // std dev = 0.282, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1867689620266031;  // std dev = 0.188, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08126642951985416;  // std dev = 0.011, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3499522014519319;  // std dev = 0.141, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35337213014154534;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.132017825650376;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10972851308487389;  // std dev = 0.904, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.20034956020994088;  // std dev = 1.010, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.12930759401871994;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07420698174838554;  // std dev = 0.032, 96.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20813723585143776;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09498207899211193;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.0010474607190720936;  // std dev = 0.181, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.19842204453362255;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.017068067640930037;  // std dev = 0.239, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.445', 'seconds']
Refined model CLL: -0.112493


******************************************
Best model found
******************************************
Results 

CLL : -0.1064 

AUC ROC : 0.994817 

AUC PR : 0.421155 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 6.979 

Total Inference Time : 7.352912902832031 

Total revision time: 19.689910217285156
Best scored revision CLL: -0.112493


Results 

CLL : -0.1064 

AUC ROC : 0.994817 

AUC PR : 0.421155 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 19.716611906051636 

Total Inference Time : 7.352912902832031 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.747
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7258991219738669;  // std dev = 0.140, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.023067276548751653;  // std dev = 0.276, 116.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08020678084891569;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7583425154006127;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11619285648580807;  // std dev = 2.553, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5239993432212735;  // std dev = 1.439, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8141497151701804;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5988177211119085;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5578938277766938;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5578938277766938;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019423584734207227;  // std dev = 3.033, 119.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=15 */
%   | | | else return -0.014153083361586272;  // std dev = 2.121, 45.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5048912307029646;  // std dev = 1.862, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12177085962279072;  // std dev = 0.039, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | | else return -0.12191540796756746;  // std dev = 0.006, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15419355255771897;  // std dev = 0.106, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2668689569432836;  // std dev = 1.706, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | else return 0.392885024972722;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3036098765847241;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6263011401099357;  // std dev = 0.177, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08559573630191938;  // std dev = 1.679, 135.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=5 */
%   | | else return -0.11181411965328687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.003248946102714465;  // std dev = 2.829, 171.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2529553222148633;  // std dev = 0.109, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.42632214405492563;  // std dev = 1.398, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11550426518377425;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1188358206309877;  // std dev = 0.103, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25048038912213544;  // std dev = 2.111, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else return -0.07591392886018253;  // std dev = 1.546, 149.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031569012424121745;  // std dev = 0.626, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14386441394845392;  // std dev = 1.670, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else if ( follows(A, E) )
%   | | then return 0.25155824534853244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03832692170947984;  // std dev = 0.155, 122.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.022425945314479886;  // std dev = 1.238, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0.055533383798328034;  // std dev = 1.221, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18647720935833928;  // std dev = 0.167, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28109455093217167;  // std dev = 0.572, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.091371257748593;  // std dev = 0.026, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43616290445754813;  // std dev = 0.484, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1091018096050607;  // std dev = 0.080, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18921216302942223;  // std dev = 1.194, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.1381311195558208;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08370956902606835;  // std dev = 0.002, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0878343110348928;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.004986755398151606;  // std dev = 0.466, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.024388577322148372;  // std dev = 0.885, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2282878587186572;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.041987519447420754;  // std dev = 0.977, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.906', 'seconds']
Parameter learned model CLL:-0.112228 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 59], 'true,false,true': [8.69e-08, 98, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.464, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.14, 0, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 102, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.095, 0, 3], 'false,false,false,false': [2.553, 27, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.439, 2, 37], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.13, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.033, 104, 15], 'false,false,false,false': [2.121, 39, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.862, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 114, 0], 'false,true,false,false': [0.006, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.106, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.706, 3, 39], 'true,false': [0.132, 0, 3], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 16], 'false,false,true,false': [1.679, 130, 5], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.829, 123, 48], 'false,true': [0.109, 0, 12], 'false,false,true': [1.398, 1, 15], 'false,false,false,true': [0.061, 21, 0], 'false,false,false,false': [0.103, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.111, 4, 60], 'true,false': [1.546, 142, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.626, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.67, 3, 45], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 108, 14], 'false,false,false,true': [1.238, 27, 10], 'false,false,false,false': [1.221, 13, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.167, 1, 42], 'false,true,true,true': [0.572, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.026, 134, 0], 'false,false,true': [0.484, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.194, 1, 50], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.002, 127, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.466, 7, 2], 'false,true': [0.885, 18, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.977, 10, 4]}]
{'': [0.2240432098765434, 0.21694214876033008], 'true': [0.016388888888888432, 0.01638888888888887], 'false': [0.21811224489795927, 0.2148437499999998], 'false,true': [0.08999999999999977, -3.0839528461809902e-18], 'false,true,true': [-2.9605947323337506e-16, 0.0], 'true,false': [7.703588334133739e-17, 0.0826446280991736]}
{'': [0.0004252789355121894, 0.10689418867855914], 'false': [0.07636247664877395, 0.15860875762299165], 'false,false': [0.05246913580246914, 0.18713438372035662], 'false,false,false': [0.003021614365536459, 0.1714971986137983], 'false,true': [nan, 0.07636247664877395], 'false,false,true': [nan, 0.05246913580246914]}
{'': [0.05146631422197015, 0.09891774661883587], 'false': [nan, 0.09891774661883529], 'false,false': [1.1102230246251565e-16, 0.08354465212029002], 'false,false,false': [0.07731639894592722, 0.09999476550398825], 'true': [0.053080908096335616, 0.015910983022976933], 'true,true': [0.053080908096335616, nan], 'true,false': [0.003507813835824103, 0.005632615415034126], 'false,false,true': [0.0, 0.0]}
{'': [0.04501472196482572, 0.00021987287788724806], 'false': [1.1371772679161066e-05, 0.00042925157296538256], 'false,false': [nan, 0.00042925157296538256], 'false,false,false': [nan, 0.00042925157296538256], 'false,true': [nan, 1.1371772679154536e-05], 'false,true,false': [1.3260378593742445e-05, 1.5678459365281954e-06]}
{'': [0.06607409384243562, 0.06708192660043208], 'false': [-3.700743415417188e-17, 0.0650628905300376], 'true': [0.06931758830817447, 0.005843791880598433], 'false,false': [0.06688610628457008, -2.7755575615628915e-18], 'false,false,true': [0.0019471613551748645, 0.020882212226993983], 'false,true': [-3.700743415417188e-17, nan]}
{'': [0.046805577161308606, 0.08204616567619774], 'false': [0.0009907561635499236, 0.08947224578757287], 'false,false': [0.12220659548561269, 0.00032399376501732744], 'true': [nan, 0.0468055771613085], 'true,false': [nan, 0.046805577161308606], 'false,false,false': [0.00017871217360489915, 0.0004459355020442364]}
{'': [0.05454636536309478, 0.020614863074163985], 'true': [0.0696491299872509, 0.01604928097920351], 'false': [nan, 0.020614863074163985], 'false,false': [nan, 0.020614863074163985], 'false,false,false': [nan, 0.020614863074163985]}
{'': [0.057139082132569734, 0.03488799369482581], 'true': [0.058092786588801786, 0.0], 'false': [nan, 0.034887993694826015], 'false,false': [0.024113959181800787, 0.055254381531539276], 'false,false,false': [0.041453123535714356, 0.08288625604452045], 'true,false': [0.0, nan]}
{'': [0.02783715611847573, 0.03020586172017833], 'false': [0.018903718907132803, 0.07337316298738407], 'false,false': [0.02133547341872905, 0.00028747163778541413], 'false,true': [0.014848118328453341, 4.966791100475456e-06], 'false,true,true': [0.014848118328453341, nan], 'false,false,false': [nan, 0.00028747163778541413]}
{'': [0.022282214487145575, 0.042353086962943806], 'false': [0.029017896766456514, 0.06577712615959477], 'false,false': [0.0, 0.06816163788634635], 'false,false,false': [nan, 0.06816163788634635], 'true': [0.02408862726874645, 0.0018377256659543055], 'true,true': [0.027945141069027783, 1.7167015153134952e-05], 'true,false': [2.594098748408083e-08, 0.012557328277391977], 'true,false,false': [-3.784851220313033e-18, 0.024130129338519348]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.989
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.797542874493451;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.6949779575235225;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.7295300724215261;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.736972233319118;  // std dev = 0.140, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.22953007242152623;  // std dev = 1.220, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.7745951277109896;  // std dev = 0.142, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7453768164599529;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12691061306172527;  // std dev = 0.039, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18322009731851097;  // std dev = 1.770, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.12183981982574803;  // std dev = 1.723, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5778051382922983;  // std dev = 0.182, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(E, A) )
%   | | then return 0.6684984432115106;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5958693176209598;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5740281887370878;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5510412930577236;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.40952075285916667;  // std dev = 1.334, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.11339160658398077;  // std dev = 0.035, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06434248115730859;  // std dev = 1.886, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.18524612044507285;  // std dev = 1.602, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(E, A), recursion_accounttype(F, B) )
%   | | | then return 0.39878088157919844;  // std dev = 0.889, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.4662900770641987;  // std dev = 0.226, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.41485046698359146;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.03797035308201077;  // std dev = 1.053, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4970469862232602;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6611983467407946;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8024994974014197;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.10248025395254891;  // std dev = 0.003, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else return -0.17574300695157358;  // std dev = 0.021, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.28465063617850955;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.13511964214213196;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.34565471770877526;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0.3981909556114229;  // std dev = 0.143, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3371450057924757;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31990667199206196;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.330263294615895;  // std dev = 1.546, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.08033960559179393;  // std dev = 1.482, 149.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=5 */
%   | | else return -0.09995928782050711;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2773569508534175;  // std dev = 0.020, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.23391481215474982;  // std dev = 0.973, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.0858829625567923;  // std dev = 1.49e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.031013506876850262;  // std dev = 0.131, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3224239261922057;  // std dev = 0.126, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2517966880259338;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3307746931793814;  // std dev = 0.848, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5333980537905788;  // std dev = 0.238, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11533516522036232;  // std dev = 0.028, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22513631789077415;  // std dev = 0.013, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, E), tweets(A, D) )
%   | | | then return -0.08920020161238751;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21157746618999873;  // std dev = 0.058, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.24399061318819112;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then return -0.04444281791580298;  // std dev = 0.128, 131.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.31964245742837855;  // std dev = 0.246, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11341038191121687;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07628421935074299;  // std dev = 0.738, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.004614327387342206;  // std dev = 0.975, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.15716224263341924;  // std dev = 0.912, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.1861588631499042;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17415983131040527;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2954626170217808;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.04491491693900492;  // std dev = 0.104, 168.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1632746382390113;  // std dev = 1.154, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.11185294636392971;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20585632772609655;  // std dev = 0.361, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.029285698407113123;  // std dev = 0.922, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.1365631391778589;  // std dev = 0.946, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return -0.21258511831231855;  // std dev = 1.025, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.19814634782779472;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20977922870581128;  // std dev = 0.193, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2168190753206084;  // std dev = 0.079, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07431346338887238;  // std dev = 0.020, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.25638897100884345;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4842221633397524;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13175683692700893;  // std dev = 0.022, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1508148910575605;  // std dev = 0.141, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.18166733747903377;  // std dev = 0.997, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.024877788963400982;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06446846199309436;  // std dev = 0.039, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.011389194721606474;  // std dev = 0.124, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.05311401108499597;  // std dev = 0.411, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21732709671435324;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06053214309775066;  // std dev = 0.489, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.12195498971074212;  // std dev = 1.002, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.140', 'seconds']
Refined model CLL: -0.102488


******************************************
Best model found
******************************************
Results 

CLL : -0.101389 

AUC ROC : 0.994603 

AUC PR : 0.364189 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 17.989 

Total Inference Time : 9.197493076324463 

Total revision time: 34.391915260314946
Best scored revision CLL: -0.102488


Results 

CLL : -0.101389 

AUC ROC : 0.994603 

AUC PR : 0.364189 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 34.418616949081425 

Total Inference Time : 9.197493076324463 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.148
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970732;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.221785298735876;  // std dev = 0.481, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.710517143156088;  // std dev = 1.004, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021808746351191954;  // std dev = 0.278, 164.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=20 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08448744112577214;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5632646583341805;  // std dev = 0.826, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15107080253386404;  // std dev = 2.833, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5300544324337677;  // std dev = 1.673, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8174006614362076;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4216232454621376;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.563584908036855;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.563584908036855;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038589168093406755;  // std dev = 3.372, 172.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=18 */
%   | | | else return 0.025269973443286586;  // std dev = 2.673, 53.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5019784779219328;  // std dev = 2.286, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11986554211808036;  // std dev = 0.050, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | | else return -0.12606455660722746;  // std dev = 0.003, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16108475796642113;  // std dev = 0.147, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2930190935977457;  // std dev = 1.690, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | else return 0.44931005290520076;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3079247579333408;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6289286296657787;  // std dev = 0.173, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.0885449455846092;  // std dev = 2.025, 206.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=7 */
%   | | else return -0.10863181811720206;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03493148076513859;  // std dev = 2.986, 204.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2544229638648937;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48611371704958817;  // std dev = 1.007, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12327713068599999;  // std dev = 0.121, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1259064376937743;  // std dev = 0.128, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28121197464198233;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return -0.08043933470880653;  // std dev = 1.823, 208.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005007722049673022;  // std dev = 0.694, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19855259452869684;  // std dev = 0.070, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(A, E) )
%   | | then return 0.23994333306456317;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.050436178337249754;  // std dev = 0.150, 196.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010369860239379546;  // std dev = 1.343, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return 0.08657757825127;  // std dev = 1.542, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1509804339883824;  // std dev = 0.206, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21034571096432908;  // std dev = 1.655, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09085171494981359;  // std dev = 0.039, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4362062219655915;  // std dev = 0.545, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1112593509421953;  // std dev = 0.149, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16026794680201178;  // std dev = 1.940, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.14585401937539777;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0842208384693752;  // std dev = 0.022, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07976378821807062;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0332571839822954;  // std dev = 0.477, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0080831481964017;  // std dev = 0.916, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2687067063561537;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025323434340711676;  // std dev = 1.246, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.602', 'seconds']
Parameter learned model CLL:-0.111699 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.0, 152, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.481, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 61], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.278, 144, 20], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.826, 1, 4], 'false,false,false,false': [2.833, 30, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.673, 3, 52], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.934, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.372, 154, 18], 'false,false,false,false': [2.673, 43, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.286, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.05, 136, 0], 'false,true,false,false': [0.003, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.69, 3, 55], 'true,false': [0.111, 0, 3], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.173, 0, 21], 'false,false,true,false': [2.025, 199, 7], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.986, 136, 68], 'false,true': [0.1, 0, 13], 'false,false,true': [1.007, 1, 19], 'false,false,false,true': [0.121, 25, 0], 'false,false,false,false': [0.128, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.701, 2, 83], 'true,false': [1.823, 199, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.694, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.07, 0, 60], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 176, 20], 'false,false,false,true': [1.343, 39, 11], 'false,false,false,false': [1.542, 14, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.206, 3, 58], 'false,true,true,true': [1.655, 2, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 163, 0], 'false,false,true': [0.545, 0, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.149, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.94, 3, 71], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.022, 148, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.477, 13, 2], 'false,true': [0.916, 25, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.246, 17, 7]}]
{'': [0.21636528972436367, 0.2363060208239017], 'false': [0.24000000000000005, 0.23140495867768604], 'false,true': [-8.881784197001253e-17, -1.4802973661668754e-17], 'true': [0.023795359904817976, 0.011171757796290812], 'true,false': [-1.2270886061646468e-16, 0.07360000000000004], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.01625845105536731, 0.10763463470515486], 'false': [0.0773308666610206, 0.1669334363746353], 'false,false': [0.04749999999999999, 0.19334200355382486], 'false,false,false': [0.13660176218160186, 0.18245263838179204], 'false,true': [nan, 0.0773308666610206], 'false,false,true': [nan, 0.04749999999999999]}
{'': [0.06292405450682768, 0.09715282768319188], 'false': [nan, 0.09715282768319188], 'false,false': [-1.9032394707859825e-16, 0.08300487631023964], 'false,false,false': [0.0660930955883428, 0.1347709943380866], 'true': [0.05088682686734397, 0.15748310630434212], 'true,false': [0.003323082366281649, 0.17439289788096282], 'true,true': [0.05088682686734397, nan], 'false,false,true': [-7.401486830834377e-17, -1.6653345369377348e-16]}
{'': [0.05022700866928254, 0.0003288908395079588], 'false': [2.0613161922966582e-05, 0.000829654927915659], 'false,false': [nan, 0.000829654927915659], 'false,false,false': [nan, 0.000829654927915659], 'false,true': [nan, 2.0613161922958258e-05], 'false,true,false': [1.841563631288022e-05, 4.021935055530575e-07]}
{'': [0.04819182571788957, 0.06127810787107882], 'false': [-1.586032892321652e-17, 0.05867841054654581], 'false,false': [0.06140501312114886, 0.0], 'false,false,true': [0.0014314139137229496, 0.019897086743448367], 'true': [0.04927193847061113, 0.004084103049117364], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.04370179634301382, 0.08430415457075914], 'false': [0.0007673637910895054, 0.09457322399459869], 'false,false': [0.050690272618838295, 0.0006765276404000921], 'true': [nan, 0.04370179634301346], 'true,false': [nan, 0.04370179634301382], 'false,false,false': [0.0005879180382863703, 0.0007782580579743395]}
{'': [0.04814900548179491, 0.017185081513989505], 'true': [0.034037637624335045, 0.01597269442172632], 'false': [nan, 0.017185081513989505], 'false,false': [nan, 0.017185081513989505], 'false,false,false': [nan, 0.017185081513989505]}
{'': [0.00010878606845660383, 0.033556689662071294], 'false': [nan, 0.0335566896620712], 'false,false': [0.022512481786713303, 0.06006965269214315], 'false,false,false': [0.03605607192611586, 0.10811902412194761], 'true': [8.251403457223786e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.042322591975120054, 0.03604589206791826], 'false': [0.026103204039297605, 0.06948647875343492], 'false,false': [0.021251731045751114, 0.0006718380479300677], 'false,true': [0.09126271854454537, 9.118148442535207e-06], 'false,true,true': [0.09126271854454537, nan], 'false,false,false': [nan, 0.0006718380479300677]}
{'': [0.02834687281250528, 0.040994492657827064], 'false': [0.02395789230922348, 0.0644212508627779], 'false,false': [0.0, 0.06473605296484929], 'false,false,false': [nan, 0.06473605296484929], 'true': [0.04536499673459121, 0.001538549758482848], 'true,true': [0.05085872750849899, 9.088512754455867e-06], 'true,false': [3.1247864760089377e-06, 0.010371280286575541], 'true,false,false': [-8.673617379884035e-19, 0.015150329168386373]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.304
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(G, E), follows(G, A) )
%   | | | then return 0.8402917922423695;  // std dev = 0.991, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.12965594294926858;  // std dev = 0.110, 164.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7219960920349521;  // std dev = 0.010, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.6718068910481526;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.770696403371215;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.731625125664264;  // std dev = 0.152, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12678866692296287;  // std dev = 1.15e-07, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10498755712779385;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.13019836883875263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5674901668195601;  // std dev = 0.208, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.3901081890408045;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6085684004655989;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1849059226689569;  // std dev = 1.035, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.565961177057794;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.44637904352432045;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.06426057187485629;  // std dev = 0.180, 185.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.051025048177120544;  // std dev = 1.720, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0.19535758491660368;  // std dev = 1.795, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.39473958542626114;  // std dev = 0.948, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.46297694032808295;  // std dev = 0.204, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4376059227887374;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5756054489490948;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.4301646284719082;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5468779990957325;  // std dev = 0.113, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7493657674988669;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10710061521753647;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return -0.15705955910540348;  // std dev = 0.267, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.33121654200589795;  // std dev = 0.061, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3224850633231183;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1333034436507397;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.43332000177020635;  // std dev = 0.325, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33442897544013656;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.42070343179512937;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07461389924615208;  // std dev = 1.789, 180.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=7 */
%   | | else return -0.09728116029453972;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2258597135637417;  // std dev = 0.984, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.2718980647408774;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27314732755749455;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04781334413895142;  // std dev = 0.128, 117.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=12 */
%   | | else return -0.042423995899521186;  // std dev = 0.131, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27635994296484634;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.28066111555715095;  // std dev = 0.953, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5010567781447441;  // std dev = 0.477, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11410404610571134;  // std dev = 0.033, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D), follows(A, C) )
%   | | then return 0.1851848851835714;  // std dev = 0.178, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.22344426490644445;  // std dev = 0.029, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.07419489296718758;  // std dev = 0.351, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2297658741563587;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.046362829556067124;  // std dev = 0.136, 194.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2923336439373374;  // std dev = 0.357, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0930182293021822;  // std dev = 0.048, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04968010473670532;  // std dev = 0.362, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0616538471686131;  // std dev = 1.225, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17162898368345264;  // std dev = 0.128, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return 0.2914126913504953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return -0.038466285516467726;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3481810433923282;  // std dev = 0.130, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.08282295155962495;  // std dev = 0.024, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23879223783121423;  // std dev = 0.317, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08760324072940488;  // std dev = 0.047, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.022671794452091713;  // std dev = 0.383, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.16117755865779454;  // std dev = 1.052, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.09249484338011861;  // std dev = 1.354, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.18129332888803415;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.16273795887140205;  // std dev = 0.039, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2226607090553266;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2216610806891801;  // std dev = 0.060, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.07669583756339071;  // std dev = 0.024, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1752016064082787;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4143138521394576;  // std dev = 0.189, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10490870828738728;  // std dev = 0.047, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10027666136456008;  // std dev = 1.661, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.21292341161590755;  // std dev = 0.192, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13054980200678207;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06741362941280817;  // std dev = 0.034, 151.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.09244644415234238;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.0012611489710578317;  // std dev = 0.120, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3068286265145629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03119148915096975;  // std dev = 0.385, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.01971150959369501;  // std dev = 0.935, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.079', 'seconds']
Refined model CLL: -0.105006


******************************************
Best model found
******************************************
Results 

CLL : -0.100452 

AUC ROC : 0.994693 

AUC PR : 0.360059 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 22.304 

Total Inference Time : 10.898109912872314 

Total revision time: 41.84104309272766
Best scored revision CLL: -0.105006


Results 

CLL : -0.100452 

AUC ROC : 0.994693 

AUC PR : 0.360059 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 41.86774478149414 

Total Inference Time : 10.898109912872314 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.381
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.0862955093449322;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.699349551650591;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03766026223059674;  // std dev = 0.262, 207.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07903585144259014;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7469716877023695;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11687207138854576;  // std dev = 3.209, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5487711887425308;  // std dev = 1.467, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.22891539706352204;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8216515884788509;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.58577109290075;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5626974728345616;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5626974728345616;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02898676210255254;  // std dev = 3.620, 185.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=21 */
%   | | | else return 0.011353887372588344;  // std dev = 2.844, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4930856793799912;  // std dev = 2.435, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11905554009323742;  // std dev = 0.047, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return -0.12265995123798482;  // std dev = 0.002, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15723031263556436;  // std dev = 0.191, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30592252371289613;  // std dev = 1.407, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.2301574029947174;  // std dev = 0.965, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3092418182383972;  // std dev = 2.98e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.54919868628364;  // std dev = 1.399, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08829609880248912;  // std dev = 2.322, 264.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=9 */
%   | | else return -0.10780375116349152;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029509212166786605;  // std dev = 3.375, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2599542918213185;  // std dev = 0.158, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5407577202636722;  // std dev = 0.755, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12251302379939963;  // std dev = 0.135, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.1179597333109615;  // std dev = 0.161, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2796113697467053;  // std dev = 1.793, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07511772646251402;  // std dev = 2.016, 233.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0019802402584683126;  // std dev = 0.688, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1375421139433696;  // std dev = 2.169, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24195265669548893;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045445579062689645;  // std dev = 0.168, 195.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021736565956372807;  // std dev = 1.583, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
%   | | | else return 0.07291622214936583;  // std dev = 1.672, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1698766231977122;  // std dev = 0.172, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2913547156768881;  // std dev = 0.721, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09070218636632764;  // std dev = 0.039, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.389687677953528;  // std dev = 1.188, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11444191215328162;  // std dev = 0.160, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1549561198337996;  // std dev = 2.134, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.1428934973239478;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08410303177853275;  // std dev = 0.017, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07917888416246323;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.0380231016002963;  // std dev = 0.488, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01712865037028414;  // std dev = 1.031, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23459084233771088;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03063016945720734;  // std dev = 1.404, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.761', 'seconds']
Parameter learned model CLL:-0.110031 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 165, 0], 'true,false,false': [0.229, 34, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 185, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.973, 18, 1], 'false,false,false,true': [0.095, 0, 4], 'false,false,false,false': [3.209, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.467, 2, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.129, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.62, 164, 21], 'false,false,false,false': [2.844, 54, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.435, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 158, 0], 'false,true,false,false': [0.002, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.191, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.407, 2, 73], 'true,false': [0.965, 1, 4], 'false,true,true': [2.98e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.399, 2, 23], 'false,false,true,false': [2.322, 255, 9], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.375, 189, 91], 'false,true': [0.158, 0, 13], 'false,false,true': [0.755, 0, 22], 'false,false,false,true': [0.135, 41, 0], 'false,false,false,false': [0.161, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.793, 2, 107], 'true,false': [2.016, 222, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.688, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.169, 5, 80], 'true,false,true': [0.067, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 173, 22], 'false,false,false,true': [1.583, 54, 13], 'false,false,false,false': [1.672, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.172, 2, 77], 'false,true,true,true': [0.721, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 208, 0], 'false,false,true': [1.188, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.134, 4, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.017, 183, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.488, 16, 2], 'false,true': [1.031, 28, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.404, 21, 8]}]
{'': [0.22574576726686596, 0.2239854318418315], 'true': [0.009522928994084868, 0.009851241305908105], 'false': [0.2191380569758943, 0.23040000000000005], 'false,true': [-1.4802973661668753e-16, 1.3322676295501878e-17], 'true,false': [-1.6417843515668981e-16, 0.05246913580246913], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023579839625665806, 0.10019463084504003], 'false': [0.06885400732451248, 0.16529677834475703], 'false,false': [0.04986149584487535, 0.18721479964237342], 'false,false,false': [0.002268465465005254, 0.1745455642277093], 'false,true': [nan, 0.06885400732451248], 'false,false,true': [nan, 0.04986149584487535]}
{'': [0.03791937948756687, 0.0998231234506877], 'false': [nan, 0.09982312345068772], 'false,false': [-1.0449157878825003e-16, 0.08510396910950571], 'false,false,false': [0.07085162447672959, 0.12446408228273566], 'true': [0.038525566453245695, 0.016157926249314336], 'true,true': [0.029886202917080773, 0.25], 'true,false': [0.003075499056605646, 0.004152603780945285], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.04562613006492414, 0.0003848069203439116], 'false': [1.3172032649499954e-05, 0.0007029851949265642], 'false,false': [nan, 0.0007029851949265642], 'false,false,false': [nan, 0.0007029851949265642], 'false,true': [nan, 1.3172032649504394e-05], 'false,true,false': [1.3916840287478029e-05, 1.0663128620556708e-07]}
{'': [0.03675066520639423, 0.05869886066630875], 'false': [5.224578939412501e-17, 0.05563732458871081], 'false,false': [0.05755065541021374, 0.0], 'false,false,true': [0.07832291013297343, 0.020427911006166533], 'true': [0.02641300082194796, 0.1864340495504885], 'false,true': [5.224578939412501e-17, nan]}
{'': [0.040677800261693195, 0.07553581489427838], 'false': [0.001912736065090741, 0.07821640587326202], 'false,false': [0.02593176923227437, 0.0005388639166882807], 'true': [nan, 0.040677800261693396], 'true,false': [nan, 0.040677800261693195], 'false,false,false': [0.0004461150537939642, 0.0006191631404900131]}
{'': [0.048600997385709145, 0.01754624511288671], 'true': [0.02948212017708394, 0.017440437408598963], 'false': [nan, 0.01754624511288671], 'false,false': [nan, 0.01754624511288671], 'false,false,false': [nan, 0.01754624511288671]}
{'': [0.05435943331819481, 0.03827365541366632], 'true': [0.05533453625087608, 0.0022666078492136893], 'false': [nan, 0.038273655413666445], 'false,false': [0.028100138163604918, 0.057105542847593393], 'false,false,false': [0.03739817236455289, 0.0963836239975285], 'true,false': [0.0022666078492136893, nan]}
{'': [0.029665534318966156, 0.03163820484588124], 'false': [0.01904106451478033, 0.07733783598655523], 'false,false': [0.07845925012392733, 0.0006132368413033958], 'false,true': [0.01625524438450708, 7.322040615358076e-06], 'false,true,true': [0.01625524438450708, nan], 'false,false,false': [nan, 0.0006132368413033958]}
{'': [0.027399726890562335, 0.04405247056278266], 'false': [0.026598307019014982, 0.0670892037912708], 'false,false': [0.0, 0.06801595940893052], 'false,false,false': [nan, 0.06801595940893052], 'true': [0.04257980589061906, 0.0012964473147673305], 'true,true': [0.04647719965314919, 8.250287283798371e-06], 'true,false': [1.5719188928481191e-06, 0.008905272023985186], 'true,false,false': [2.7755575615628915e-18, 0.013247717356963484]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.824
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.7986251255757026;  // std dev = 2.168, 84.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=79 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1328824550350176;  // std dev = 0.094, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.715815895374247;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7413583413236828;  // std dev = 0.138, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.0340377858322326;  // std dev = 3.246, 147.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=16 */
%   | | | else return -0.07151027710780757;  // std dev = 0.868, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return -0.030306277781648305;  // std dev = 0.268, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026431879062751257;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12643187906275127;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17615814598804166;  // std dev = 2.960, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.5470990277123676;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5677078685179083;  // std dev = 0.076, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7538211540870103;  // std dev = 0.134, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.23963585064820472;  // std dev = 1.203, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5638979036771988;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10264531468943387;  // std dev = 1.473, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   | | | else return 0.012750141570595763;  // std dev = 2.737, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07992137752483491;  // std dev = 2.120, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.06265385289199234;  // std dev = 2.299, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.43145616943576265;  // std dev = 0.058, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.3920685527535499;  // std dev = 0.975, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.4702427378753096;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.38417208328687896;  // std dev = 1.296, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.6624902577829497;  // std dev = 1.037, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.583327518837775;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.738924857064453;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.11552857457660985;  // std dev = 0.007, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.17536151503496622;  // std dev = 0.187, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.3150475909578751;  // std dev = 0.130, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.1646454776043428;  // std dev = 0.402, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.16550391803704315;  // std dev = 0.493, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.005490460765646299;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18215445103570435;  // std dev = 0.895, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.32747545621232516;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return -0.054948465028334365;  // std dev = 2.597, 210.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=15 */
%   | | | else return 0.033919751762512274;  // std dev = 2.472, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | | else return -0.09300461693657901;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22861362506439248;  // std dev = 0.200, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.44131801094403866;  // std dev = 1.545, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09836508372730449;  // std dev = 0.053, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.03319352938693924;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.048605181584179105;  // std dev = 1.115, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27317906189362384;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3526639802842089;  // std dev = 1.340, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.564257899590435;  // std dev = 0.240, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13114083598748338;  // std dev = 0.033, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.2241130122684284;  // std dev = 0.048, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return -0.021510199804766594;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.25104259432152964;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3533062158754048;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.21301731138971372;  // std dev = 0.028, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4653428943504177;  // std dev = 0.850, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09114535012323227;  // std dev = 0.106, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 3.773228381544026E-4;  // std dev = 1.257, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.038287874482770774;  // std dev = 1.539, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1774297631744997;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.24377707890342598;  // std dev = 0.087, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07474580356747697;  // std dev = 0.093, 133.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3594238585440904;  // std dev = 0.348, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09012535133411222;  // std dev = 0.035, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3655977402307751;  // std dev = 0.243, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1252018083436235;  // std dev = 0.009, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.053797416942813904;  // std dev = 0.641, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.19968887395286253;  // std dev = 0.987, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.13635115699445904;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.16712981725391443;  // std dev = 0.053, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.19589493768913452;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return -0.004500994383628748;  // std dev = 0.412, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.1990428360704132;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2425932344521053;  // std dev = 0.100, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.0773520568640041;  // std dev = 0.079, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.35830313575747436;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13100793124774532;  // std dev = 0.036, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12157999291833965;  // std dev = 0.222, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.12299126510211317;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06869111807838336;  // std dev = 0.038, 213.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2157890966073744;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09848374561796373;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.09632469647361039;  // std dev = 0.172, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1822762458438797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.011887916896312543;  // std dev = 0.552, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.03434734719021455;  // std dev = 1.019, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.863', 'seconds']
Refined model CLL: -0.106797


******************************************
Best model found
******************************************
Results 

CLL : -0.105391 

AUC ROC : 0.99475 

AUC PR : 0.386035 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 11.824 

Total Inference Time : 14.931650400161743 

Total revision time: 36.98238380432129
Best scored revision CLL: -0.106797


Results 

CLL : -0.105391 

AUC ROC : 0.99475 

AUC PR : 0.386035 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 37.00908549308777 

Total Inference Time : 14.931650400161743 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.168
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06492798797741087;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03922851090192752;  // std dev = 0.256, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.023018577047365072;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0665912253995248;  // std dev = 2.214, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5685938166311378;  // std dev = 0.165, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.005424997003906411;  // std dev = 2.120, 46.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=7 */
%   | | | else return 0.1095413315514228;  // std dev = 1.863, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5222292554955906;  // std dev = 1.483, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12509760891693075;  // std dev = 0.038, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.13707594583665342;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15891789863194908;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23679314849591096;  // std dev = 0.991, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.1554822586463649;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.639664794013263;  // std dev = 0.158, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0777068118942471;  // std dev = 1.210, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else return -0.06791485999945325;  // std dev = 0.265, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03627644451307969;  // std dev = 1.422, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26684282364231876;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4092480989688728;  // std dev = 1.284, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12116370975220343;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13036088742802926;  // std dev = 0.100, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3202376764494172;  // std dev = 0.465, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.0656366588861464;  // std dev = 1.145, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00225041906885876;  // std dev = 0.880, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1960810574559013;  // std dev = 0.068, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04169519851073976;  // std dev = 0.154, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.004063327843766439;  // std dev = 0.912, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.05838855001415093;  // std dev = 1.202, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.0525805761378177;  // std dev = 0.315, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3041113478706568;  // std dev = 0.559, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.096822967443968;  // std dev = 0.027, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4170400504599702;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12117045948404137;  // std dev = 0.129, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14193569257648977;  // std dev = 1.061, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.14027196041457;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08888344006612223;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08954367352489863;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.06291556262730694;  // std dev = 0.700, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.03237307104602747;  // std dev = 0.351, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10342552534410755;  // std dev = 0.888, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.855', 'seconds']
Parameter learned model CLL:-0.11558 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true': [2.79e-08, 31, 0], 'true,false,false': [0.266, 12, 1], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.471, 10, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 44, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.943, 8, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.214, 24, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.165, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.12, 39, 7], 'false,false,false,false': [1.863, 14, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.483, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 53, 0], 'false,true,false,false': [0.016, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.991, 1, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.926, 1, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.158, 0, 9], 'false,false,true,false': [1.21, 42, 2], 'false,false,false': [0.265, 9, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.422, 33, 17], 'false,true': [0.0, 0, 6], 'false,false,true': [1.284, 2, 8], 'false,false,false,true': [0.075, 12, 0], 'false,false,false,false': [0.1, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.465, 0, 23], 'true,false': [1.145, 40, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.88, 14, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.068, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 34, 5], 'false,false,false,true': [0.912, 14, 3], 'false,false,false,false': [1.202, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.315, 2, 13], 'false,true,true,true': [0.559, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 52, 0], 'false,false,true': [0.382, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.129, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.061, 1, 17], 'true,true,false': [0.035, 0, 6], 'true,false,true': [0.017, 30, 0], 'true,false,false,true': [0.005, 7, 0], 'true,false,false,false': [0.7, 4, 1], 'false,true': [0.351, 9, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.888, 6, 5]}]
{'': [0.22989529962129762, 0.20659722222222232], 'true': [3.089316242435218e-16, 0.02221074380165296], 'false': [0.17283950617283952, 0.22222222222222202], 'false,true': [0.0, -7.93016446160826e-18], 'true,false': [2.5069552168955147e-17, 0.07100591715976336], 'false,true,true': [0.0, nan]}
{'': [1.9737298215558337e-16, 0.10350827028117253], 'false': [0.06541234183354395, 0.14613619368409342], 'false,false': [0.0987654320987654, 0.1580822641783941], 'false,false,false': [nan, 0.15808226417839416], 'false,false,true': [nan, 0.0987654320987654], 'false,true': [nan, 0.06541234183354395]}
{'': [0.0020995629434183982, 0.13509998538461623], 'false': [nan, 0.13509998538461648], 'false,false': [-7.401486830834377e-17, 0.12476331882255753], 'false,false,false': [0.09766418402135409, 0.1827002164234145], 'true': [0.0020995629434183982, nan], 'true,true': [0.0020995629434183982, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.06869445287824366, 0.0003494918608627086], 'false': [4.5230148166769224e-05, 0.0008573076499433072], 'false,false': [nan, 0.0008573076499433072], 'false,false,false': [nan, 0.0008573076499433072], 'false,true': [nan, 4.52301481667728e-05], 'false,true,false': [2.740299641694922e-05, 2.7559531217071404e-05]}
{'': [0.07021106002184814, 0.10148918991892192], 'false': [0.12244897959183673, 0.09749227118522996], 'false,true': [0.12244897959183673, nan], 'false,false': [0.1006486326681927, 0.07020579119727997], 'false,false,true': [0.002787081937743204, 0.0332771229758023], 'true': [0.07021106002184814, nan]}
{'': [0.04043727704420648, 0.09067374141984644], 'false': [-1.850371707708594e-17, 0.0954884272476119], 'false,false': [0.1649222672425271, 0.0005385417874853786], 'true': [nan, 0.04043727704420649], 'true,false': [nan, 0.04043727704420648], 'false,false,false': [0.0004663814455560684, 0.0005528134512246325]}
{'': [0.056941145415752556, 0.040740660884450663], 'true': [0.009408654098757598, 0.030476454851239756], 'false': [nan, 0.04074066088445062], 'false,false': [nan, 0.040740660884450663], 'false,false,false': [nan, 0.040740660884450663]}
{'': [0.00025608370004943156, 0.04608631863992864], 'false': [nan, 0.046086318639928514], 'false,false': [0.023798163326960893, 0.06992870934081606], 'false,false,false': [0.04888822608431922, 0.09027500977612686], 'true': [0.00025608370004943156, nan]}
{'': [0.09915262382455237, 0.03745503615559], 'false': [0.0281457593269286, 0.055878785658226356], 'false,false': [0.020833850717642117, 0.0006907453030144418], 'false,true': [0.028452384844157172, 1.3728345239648011e-05], 'false,true,true': [0.028452384844157172, nan], 'false,false,false': [nan, 0.0006907453030144418]}
{'': [0.036484260641025265, 0.04610174464120952], 'false': [0.011228799408391842, 0.07175406048326187], 'false,false': [nan, 0.07175406048326187], 'false,false,false': [nan, 0.07175406048326187], 'true': [0.04695492895183218, 0.014089540495021985], 'true,true': [0.06253903828622737, 0.00020052494511672847], 'true,false': [9.31595464331858e-06, 0.046467288377071335], 'true,false,false': [4.173818293486715e-06, 0.09795675452462713]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.71
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.11912379217321498;  // std dev = 0.149, 44.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6425503352878773;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.7451706938182211;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5268881936800706;  // std dev = 0.937, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.12795930673438163;  // std dev = 1.49e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, H) )
%   | | then return 0.11596051882570745;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.508243899526118;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.12977759274328537;  // std dev = 1.105, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5010387535672871;  // std dev = 0.257, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.11434744987485114;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.06140754710434725;  // std dev = 1.529, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.028114217987714775;  // std dev = 1.055, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.12371084565419273;  // std dev = 1.538, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.32473585031990027;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.44973585031990027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17879455340996006;  // std dev = 0.633, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5235079386487833;  // std dev = 0.889, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.7591227468982861;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.1096123450298196;  // std dev = 0.008, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( tweets(A, J) )
%   | | then return -0.14212196665154272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.20039791131990972;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.3720037402383063;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.32802705811670435;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(F, G), tweets(G, E) )
%   | | | then return -0.062205675581617194;  // std dev = 0.707, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return 0.14499248740852538;  // std dev = 0.995, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.026544813602713133;  // std dev = 0.908, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.1096043847846495;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.45567876470506113;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15905882897606857;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06728829387849355;  // std dev = 0.711, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.29322663009688543;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.27083075488922814;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.047295928093403716;  // std dev = 0.227, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else return -0.09028542371032455;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25378440994043716;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5847903483173985;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4108913312100661;  // std dev = 0.288, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12939626782044278;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.11302703654896114;  // std dev = 0.090, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.23114767595072183;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2087768871257315;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.45033687102974584;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26046370820795384;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(H, E) )
%   | | | then return -0.08815716386477782;  // std dev = 0.035, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.11784955934466469;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.0763028255348795;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1051727318412197;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.031279652339359997;  // std dev = 0.246, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.192654370904046;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.17637677163266485;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return -0.10311116069233221;  // std dev = 0.497, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.06984317854140354;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.34975661002884034;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09245544667851022;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, I) )
%   | | then return -0.0135738910495869;  // std dev = 0.169, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.039581312085060966;  // std dev = 0.411, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.13155474993269356;  // std dev = 0.599, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1699771126410695;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15219765395695783;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2828962818884958;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.07805627220683249;  // std dev = 0.059, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.07291755538096083;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.28750642301354495;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0975049103940194;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.12871279554342005;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15823277654524373;  // std dev = 0.037, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, E) )
%   | | | then return -0.07145044084663742;  // std dev = 0.052, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.14798677008907926;  // std dev = 0.550, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06337817128939126;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.016895890383619994;  // std dev = 0.270, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.012740630342544705;  // std dev = 0.161, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.0884214169219838;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.08939433595215444;  // std dev = 0.240, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16583645963479476;  // std dev = 0.436, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.515', 'seconds']
Refined model CLL: -0.107356


******************************************
Best model found
******************************************
Results 

CLL : -0.098772 

AUC ROC : 0.993566 

AUC PR : 0.363189 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 4.71 

Total Inference Time : 3.563513994216919 

Total revision time: 12.00655052947998
Best scored revision CLL: -0.107356


Results 

CLL : -0.098772 

AUC ROC : 0.993566 

AUC PR : 0.363189 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 17.589797952651978 

Total Inference Time : 3.563513994216919 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.501
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.09639651944594235;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.691695634433177;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0035910837434295706;  // std dev = 0.300, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09205532266035503;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7744699631937847;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.03607422363516716;  // std dev = 3.027, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5446797116105304;  // std dev = 1.032, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.2798023658249351;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6166495022183773;  // std dev = 0.106, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5622147572515079;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5622147572515078;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021718925154831474;  // std dev = 3.007, 114.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=14 */
%   | | | else return 0.032835540922688165;  // std dev = 2.486, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5084949069747746;  // std dev = 2.182, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12259272438902873;  // std dev = 0.024, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.12767128604534964;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1459016488467779;  // std dev = 0.149, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30108750772021897;  // std dev = 0.889, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3056460241149291;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5254570905251108;  // std dev = 1.393, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.0921715500546037;  // std dev = 1.509, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   | | else return -0.006123567098470867;  // std dev = 0.278, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.046556302672532995;  // std dev = 2.103, 103.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2448630113527459;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44615883622901326;  // std dev = 1.775, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11941352703558634;  // std dev = 0.120, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12762947121249085;  // std dev = 0.122, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3186216354946152;  // std dev = 0.747, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.07808008906146184;  // std dev = 1.394, 99.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020523898510953726;  // std dev = 1.278, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16154539047139033;  // std dev = 0.990, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04238298565897246;  // std dev = 0.177, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.019433240372776748;  // std dev = 1.286, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | | else return 0.019160269285681174;  // std dev = 1.845, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17894488960987923;  // std dev = 0.049, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30858212709984545;  // std dev = 0.679, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09490190552128795;  // std dev = 0.031, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37744036092283995;  // std dev = 1.228, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10790900473144598;  // std dev = 0.139, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14483555405376594;  // std dev = 1.418, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.13237135929943655;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08791141692783132;  // std dev = 0.014, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08400104502468225;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.009704714851440865;  // std dev = 0.764, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03092704948713442;  // std dev = 0.657, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17054969951190635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08053736243783463;  // std dev = 1.325, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.199', 'seconds']
Parameter learned model CLL:-0.114208 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.06e-07, 0, 46], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false': [0.208, 21, 1], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 19, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.986, 1, 35], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.3, 64, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.078, 0, 2], 'false,false,false,false': [3.027, 54, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.032, 1, 29], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.106, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.007, 100, 14], 'false,false,false,false': [2.486, 35, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.182, 3, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.024, 76, 0], 'false,true,false,false': [0.007, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.149, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.889, 1, 31], 'true,false': [0.0, 0, 0], 'false,true,true': [1.05e-08, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.393, 2, 16], 'false,false,true,false': [1.509, 104, 3], 'false,false,false': [0.278, 19, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.103, 66, 37], 'false,true': [1.05e-08, 0, 9], 'false,false,true': [1.775, 2, 16], 'false,false,false,true': [0.12, 29, 0], 'false,false,false,false': [0.122, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.747, 0, 48], 'true,false': [1.394, 95, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.278, 22, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.99, 1, 35], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.177, 70, 11], 'false,false,false,true': [1.286, 34, 7], 'false,false,false,false': [1.845, 26, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.049, 0, 31], 'false,true,true,true': [0.679, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 79, 0], 'false,false,true': [1.228, 1, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.418, 2, 37], 'true,true,false': [0.033, 0, 9], 'true,false,true': [0.014, 71, 0], 'true,false,false,true': [0.017, 12, 0], 'true,false,false,false': [0.764, 10, 1], 'false,true': [0.657, 11, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.325, 15, 8]}]
{'': [0.226941015089164, 0.2099999999999995], 'true': [9.267948727305654e-16, 0.011109708370155309], 'false': [0.18240000000000017, 0.23040000000000005], 'false,true': [-1.4802973661668753e-16, 0.0], 'true,false': [6.628197161941232e-17, 0.04338842975206616], 'false,true,true': [0.0, 0.0]}
{'': [0.027006172839505557, 0.10818831458851152], 'false': [0.09017573849431396, 0.12222975831359803], 'false,false': [0.03698224852071004, 0.14823245266072885], 'false,false,false': [0.003024620620007079, 0.1367632968924065], 'false,true': [nan, 0.09017573849431396], 'false,false,true': [nan, 0.03698224852071004]}
{'': [0.053120225994016064, 0.10884117086985189], 'false': [nan, 0.10884117086985189], 'false,false': [1.4802973661668753e-16, 0.09752765919267696], 'false,false,false': [0.07929458744562748, 0.1437054455770694], 'true': [0.055596582015430766, 0.00561025719304814], 'true,true': [0.03552171444780641, 0.0], 'true,false': [nan, 0.00561025719304814], 'false,false,true': [0.0, 1.2688263138573217e-16]}
{'': [0.07325597376151084, 0.0002874247791142107], 'false': [1.0252286205925109e-05, 0.0006530587491411515], 'false,false': [nan, 0.0006530587491411515], 'false,false,false': [nan, 0.0006530587491411515], 'false,true': [nan, 1.0252286205922642e-05], 'false,true,false': [7.430196263088905e-06, 3.792470529901234e-06]}
{'': [0.024722412489257856, 0.08078492108012184], 'false': [1.2335811384723961e-17, 0.08021130037458038], 'false,false': [0.08075368538621189, 0.07712246256744106], 'false,false,true': [0.10773469436415296, 0.021283844239153724], 'true': [0.024722412489257856, nan], 'false,true': [1.2335811384723961e-17, nan]}
{'': [0.04295212735176904, 0.10004080488702441], 'false': [1.2335811384723961e-17, 0.10731164492805231], 'false,false': [0.17496423756882906, 0.0005802197016988586], 'true': [nan, 0.04295212735176925], 'true,false': [nan, 0.04295212735176904], 'false,false,false': [0.0004990446799068494, 0.0006449256156933843]}
{'': [0.051630817047182066, 0.051052986056974586], 'true': [0.01162797806610986, 0.019639273074910254], 'false': [nan, 0.05105298605697457], 'false,false': [nan, 0.051052986056974586], 'false,false,false': [nan, 0.051052986056974586]}
{'': [0.027205047324554747, 0.048991595275637734], 'false': [nan, 0.048991595275637644], 'false,false': [0.031365484065937935, 0.06692172762085101], 'false,false,false': [0.040329021990820814, 0.09726965885985171], 'true': [0.027205047324554747, nan]}
{'': [0.0023821735144328744, 0.0471721497031107], 'false': [0.029368606856269245, 0.08175067806040395], 'false,false': [0.10766388588364931, 0.0005891939456099149], 'false,true': [0.025620790551681302, 1.2348319762610483e-05], 'false,true,true': [0.025620790551681302, nan], 'false,false,false': [nan, 0.0005891939456099149]}
{'': [0.029605750174192896, 0.05420246921008326], 'false': [0.025361637278489575, 0.0734507717409819], 'false,false': [0.0, 0.07630669102140987], 'false,false,false': [nan, 0.07630669102140984], 'true': [0.04193318431930463, 0.006837260612443277], 'true,true': [0.05155358581906307, 0.00011855094776636044], 'true,false': [2.8090002970217364e-06, 0.026759803838376225], 'true,false,false': [2.5252100466334238e-05, 0.05304479823470521]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 34.589
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8303711573217337;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.643863220813798;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else return -0.13267675297388215;  // std dev = 0.095, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(C, A), follows(A, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.7250455120817102;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5821018633255923;  // std dev = 0.901, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7408720268936234;  // std dev = 0.176, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.12816963801590645;  // std dev = 0.129, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7250455120817102;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then return -0.12645459995517558;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.08578487415644506;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.048081022759600134;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.525230793399594;  // std dev = 0.984, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.38969368867149634;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5500763136026754;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5599757798105829;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6206511587693763;  // std dev = 0.155, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11299071510474071;  // std dev = 0.000585, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.02608744349374402;  // std dev = 1.953, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.25365518123937486;  // std dev = 1.246, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), tweets(A, F) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.38144396548540754;  // std dev = 0.862, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.4723587548560557;  // std dev = 0.238, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.4254061585679773;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.036675391884490066;  // std dev = 1.620, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4213171778766036;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.6906722042633685;  // std dev = 0.199, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1021436116742924;  // std dev = 0.000467, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.10214432267481319;  // std dev = 0.000147, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.13566612633790853;  // std dev = 0.214, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.34026995779875907;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14290686220879695;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3260848200392253;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.38128564726885317;  // std dev = 0.129, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3328208212416313;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.35387461298855194;  // std dev = 0.125, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09315188996156809;  // std dev = 0.000485, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0018004172159671776;  // std dev = 1.093, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.13570428609469062;  // std dev = 1.508, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27113098316578976;  // std dev = 0.020, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.1426703871299092;  // std dev = 1.209, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.08555697719630394;  // std dev = 3.41e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.08555692156978631;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2636215571691698;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.27564579962120317;  // std dev = 0.950, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.48573596245161116;  // std dev = 0.346, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1048171259018905;  // std dev = 0.055, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.10358424325570492;  // std dev = 0.156, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.22386074484287774;  // std dev = 0.020, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.20775174312320566;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.26494995825971507;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.08087529417286357;  // std dev = 0.792, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07881427742768432;  // std dev = 0.000528, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), recursion_accounttype(J, B) )
%   | | | then return 0.32588143509930917;  // std dev = 0.157, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12665463333102647;  // std dev = 0.705, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.046920292410058254;  // std dev = 0.967, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.029375698714573427;  // std dev = 0.955, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(C, D), recursion_accounttype(E, B) )
%   | | | then return 0.18282062933646773;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1296153256669477;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1757198504189179;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18911880130954503;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then return -0.044044955103230254;  // std dev = 0.119, 100.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.190339619719238;  // std dev = 1.115, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.09110521018595016;  // std dev = 0.058, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030275578243328164;  // std dev = 0.479, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.003264765479313466;  // std dev = 1.016, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.09594498085939886;  // std dev = 0.898, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.15170991700484646;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17244644494661504;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.05888048339246321;  // std dev = 0.426, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18963521072786163;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07035169142188415;  // std dev = 0.000470, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.29173747185623417;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.48349368658102104;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10392282935296994;  // std dev = 0.036, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1643234142089048;  // std dev = 0.040, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.13267715085131165;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.061535157657488106;  // std dev = 0.038, 79.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.004794791740298723;  // std dev = 0.360, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.09145544885432377;  // std dev = 0.888, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.017021560440724337;  // std dev = 0.347, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13944533588421915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020525255103982905;  // std dev = 0.719, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.005663462018388307;  // std dev = 0.679, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.161', 'seconds']
Refined model CLL: -0.09828


******************************************
Best model found
******************************************
Results 

CLL : -0.097125 

AUC ROC : 0.994281 

AUC PR : 0.441857 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 34.589 

Total Inference Time : 9.877525091171265 

Total revision time: 50.73731192588806
Best scored revision CLL: -0.09828


Results 

CLL : -0.097125 

AUC ROC : 0.994281 

AUC PR : 0.441857 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 56.320559349060055 

Total Inference Time : 9.877525091171265 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.022
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8273797043302819;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.1033895264389493;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.15226658215833588;  // std dev = 0.456, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7256414700982698;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.016694218029402477;  // std dev = 0.289, 99.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08899357534926279;  // std dev = 0.993, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7616320398305929;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12498882819457954;  // std dev = 3.961, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5239967295161141;  // std dev = 1.424, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2525092568843512;  // std dev = 1.214, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5614327477436598;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5614327477436598;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02607879904453863;  // std dev = 3.757, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | | | else return 0.07839030338408601;  // std dev = 3.187, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.556469441156484;  // std dev = 1.881, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12068783219983384;  // std dev = 0.045, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.13182276941195084;  // std dev = 0.006, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16067989248125633;  // std dev = 0.210, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2460837691622739;  // std dev = 1.781, 46.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2950622056303128;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.635635045936793;  // std dev = 0.252, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10449129106997203;  // std dev = 1.524, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | else return 0.017977089483036376;  // std dev = 0.293, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015652435819075005;  // std dev = 2.454, 168.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23758137792483047;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5390718364618924;  // std dev = 0.723, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12779360082545874;  // std dev = 0.168, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.12407142502673796;  // std dev = 0.165, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2686018629613732;  // std dev = 1.938, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | else return -0.08662737449596945;  // std dev = 1.339, 157.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.057088580577830374;  // std dev = 1.627, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1793829251299006;  // std dev = 0.988, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03807098100138069;  // std dev = 0.170, 100.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.009475949210968832;  // std dev = 1.480, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return 0.05693796452150317;  // std dev = 1.990, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13110879194459604;  // std dev = 0.229, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27475102861712564;  // std dev = 0.754, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0915768678694328;  // std dev = 0.062, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38322850663597113;  // std dev = 0.607, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11703995224342131;  // std dev = 0.238, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14670403734521736;  // std dev = 1.751, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | else return 0.12811626113585398;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08683412923313502;  // std dev = 0.285, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0917611282468361;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.023658747683544593;  // std dev = 0.752, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.009500656822198082;  // std dev = 1.165, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23781766502662538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.060252038298416924;  // std dev = 1.478, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.386', 'seconds']
Parameter learned model CLL:-0.111249 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 63], 'true,false,true': [8.16e-08, 88, 0], 'true,false,false': [0.192, 25, 1], 'false,true,true,true': [0.957, 1, 11], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.456, 36, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.289, 86, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.993, 20, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.961, 62, 25]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.424, 2, 38], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.214, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [3.757, 162, 22], 'false,false,false,false': [3.187, 45, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.881, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 100, 0], 'false,true,false,false': [0.006, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.21, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.781, 4, 42], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.252, 0, 26], 'false,false,true,false': [1.524, 156, 3], 'false,false,false': [0.293, 33, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.454, 120, 48], 'false,true': [0.0, 0, 15], 'false,false,true': [0.723, 0, 30], 'false,false,false,true': [0.168, 51, 0], 'false,false,false,false': [0.165, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.938, 3, 69], 'true,false': [1.339, 153, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.627, 30, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.988, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 87, 13], 'false,false,false,true': [1.48, 55, 15], 'false,false,false,false': [1.99, 29, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 3, 42], 'false,true,true,true': [0.754, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.062, 124, 0], 'false,false,true': [0.607, 0, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 64, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.751, 3, 48], 'true,true,false': [0.028, 0, 15], 'true,false,true': [0.285, 81, 0], 'true,false,false,true': [0.024, 22, 0], 'true,false,false,false': [0.752, 13, 1], 'false,true': [1.165, 35, 14], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.478, 23, 14]}]
{'': [0.22970568958521903, 0.20958656605377957], 'true': [0.02982248520709983, 0.008694983071714367], 'false': [0.21172022684309966, 0.2076124567474043], 'false,true': [0.06222222222222188, 2.5069552168955147e-17], 'false,true,true': [0.07638888888888877, 1.4802973661668753e-16], 'true,false': [7.569702440626067e-17, 0.03698224852071011]}
{'': [-5.684341886080802e-16, 0.13429644093065884], 'false': [0.08373767967717628, 0.17173765543452432], 'false,false': [0.046956103556907186, 0.18955566807895413], 'false,false,false': [0.0019738926836256887, 0.18036409207528628], 'false,true': [nan, 0.08373767967717628], 'false,false,true': [nan, 0.046956103556907186]}
{'': [0.08449499341980901, 0.11327199135383201], 'false': [nan, 0.11327199135383184], 'false,false': [-1.1842378929335003e-16, 0.10189148358865492], 'false,false,false': [0.07671259373591646, 0.17215153676262143], 'true': [0.050703259712315284, 0.24568152440079719], 'true,false': [nan, 0.24568152440079719], 'true,true': [0.050703259712315284, nan], 'false,false,true': [0.0, -6.832141690000964e-17]}
{'': [0.03765805796280554, 0.0005885034849618042], 'false': [3.475617503896117e-05, 0.0007238870072227648], 'false,false': [nan, 0.0007238870072227648], 'false,false,false': [nan, 0.0007238870072227648], 'false,true': [nan, 3.4756175038955665e-05], 'false,true,false': [2.0157794117465766e-05, 1.8038228322612783e-06]}
{'': [0.06899201236655474, 0.08028606835423635], 'false': [0.0, 0.08030013832823865], 'false,false': [0.07906025682726128, 0.0857546848049583], 'false,false,true': [0.0024345744755298947, 0.014603962280045572], 'true': [0.06899201236655474, nan], 'false,true': [0.0, nan]}
{'': [0.035839491610820486, 0.08119439725766622], 'false': [-5.181040781584064e-17, 0.08679158522039498], 'false,false': [0.017403344834212516, 0.0006067404372632998], 'true': [nan, 0.03583949161082017], 'true,false': [nan, 0.035839491610820486], 'false,false,false': [0.0005546103230479893, 0.0006639049501508764]}
{'': [0.05143083384600853, 0.05293709986419202], 'false': [nan, 0.052937099864191955], 'false,false': [nan, 0.05293709986419202], 'false,false,false': [nan, 0.05293709986419202], 'true': [0.052176370857830306, 0.011414161205932742]}
{'': [0.01912146994525876, 0.043575420837226785], 'false': [nan, 0.043575420837226826], 'false,false': [0.028988343922093495, 0.05499693075537378], 'false,false,false': [0.03128898195570653, 0.09000573118890075], 'true': [0.01912146994525876, nan]}
{'': [0.05231268734176457, 0.03568720043280783], 'false': [0.023044603801639932, 0.05532615562432606], 'false,false': [0.014722019814724003, 0.0008869970318163539], 'false,true': [0.02186779842537399, 3.069117367878666e-05], 'false,true,true': [0.02186779842537399, nan], 'false,false,false': [nan, 0.0008869970318163539]}
{'': [0.03204123721427148, 0.042443883592408554], 'false': [0.027722053828454656, 0.05830754377769392], 'false,false': [0.0, 0.0590536982920062], 'false,false,false': [nan, 0.05905369829200631], 'true': [0.046542817297299297, 0.0059771379446404635], 'true,true': [0.06013836075602885, 5.098807330241965e-05], 'true,false': [0.001006076440066638, 0.016840300240320957], 'true,false,false': [2.7258260308248144e-05, 0.04042650163465975]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.487
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.7867203636709409;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.13307913507592625;  // std dev = 0.093, 114.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.021915471928693833;  // std dev = 2.907, 107.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=13 */
%   | | | else return -0.1264101579659938;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12641015796599378;  // std dev = 1.39e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.015299046854882679;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.1264101579659938;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5504898020630853;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.0867500687347249;  // std dev = 3.816, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5742514780022043;  // std dev = 0.299, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.4303664367462843;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.3289077019580052;  // std dev = 0.555, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.26327701928389396;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6660341568703991;  // std dev = 0.978, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1215682182512336;  // std dev = 0.058, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10384238960588803;  // std dev = 2.829, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.23671413858195456;  // std dev = 2.159, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3674735517435991;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.2873465397291745;  // std dev = 0.947, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.4266503463077678;  // std dev = 0.068, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.6132380075782917;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3319773555991565;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.5912562191595312;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7030939811606254;  // std dev = 0.243, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(J, A) )
%   | then return -0.10802180563720737;  // std dev = 0.005, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return -0.16170004828828527;  // std dev = 0.217, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.33321297048347337;  // std dev = 0.049, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.23735235391266438;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.4546871137359657;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31872462004163704;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.48614054673143325;  // std dev = 0.167, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09284811248273402;  // std dev = 1.277, 158.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.10547152609971894;  // std dev = 0.235, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.04338780073816347;  // std dev = 1.677, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.27184142482870666;  // std dev = 0.021, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.35274806771540695;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04013453768567511;  // std dev = 0.140, 80.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=10 */
%   | | else return -0.08456124266736048;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.253815786576372;  // std dev = 2.79e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3819904210215215;  // std dev = 0.092, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5886986431961299;  // std dev = 0.252, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11478397254598773;  // std dev = 0.063, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.12939676814060921;  // std dev = 0.295, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.22121529971927822;  // std dev = 0.019, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.14461063391690368;  // std dev = 0.240, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07679630301026952;  // std dev = 0.059, 88.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.28209916211083974;  // std dev = 0.796, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.08650206843580206;  // std dev = 0.041, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2316416266661048;  // std dev = 1.008, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1135242284308821;  // std dev = 0.058, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05250628266537218;  // std dev = 0.956, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.18833229052484882;  // std dev = 1.108, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17572020087032098;  // std dev = 1.83e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.574279799129679;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.200110688852389;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.18665962513785356;  // std dev = 0.033, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(F, A) )
%   | then return -0.05076234584652426;  // std dev = 0.135, 140.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=14 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2668463859429392;  // std dev = 0.118, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10388662671181602;  // std dev = 0.048, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.03677153963298335;  // std dev = 0.784, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.010180944340218675;  // std dev = 1.285, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15169899463483721;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.06241399265655519;  // std dev = 0.849, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.17086742122127987;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2147988603821498;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22358217127503222;  // std dev = 0.083, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.0773078583741312;  // std dev = 0.146, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06804022920147527;  // std dev = 1.599, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.390903969217163;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11814913704240092;  // std dev = 0.044, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1528732022102873;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.1310159708915972;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0663681315504143;  // std dev = 0.043, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18567524244196373;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07898991995412753;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.0873471189592317;  // std dev = 0.242, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17154424986527983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.015426537420268375;  // std dev = 0.744, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.045939491496930725;  // std dev = 1.000, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.980', 'seconds']
Refined model CLL: -0.101987


******************************************
Best model found
******************************************
Results 

CLL : -0.101741 

AUC ROC : 0.994522 

AUC PR : 0.518815 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 8.487 

Total Inference Time : 7.37330436706543 

Total revision time: 24.18611353302002
Best scored revision CLL: -0.101987


Results 

CLL : -0.101741 

AUC ROC : 0.994522 

AUC PR : 0.518815 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 29.769360956192017 

Total Inference Time : 7.37330436706543 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.209
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8232652141692794;  // std dev = 1.702, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.1073683062797981;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.20297652130640864;  // std dev = 0.475, 58.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7264598462513637;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.040783323270775815;  // std dev = 0.255, 161.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0742098303616814;  // std dev = 1.540, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7558117788735915;  // std dev = 0.124, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11503350525363408;  // std dev = 4.484, 115.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5760237480199931;  // std dev = 0.330, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5622441717297268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5947600646974119;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5622441717297268;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.562244171729727;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.006752137609794907;  // std dev = 4.179, 201.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=28 */
%   | | | else return 0.04356861899328525;  // std dev = 3.766, 92.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5293399857180849;  // std dev = 2.672, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12068194936172746;  // std dev = 0.030, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return -0.12577733531306437;  // std dev = 0.000250, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.162725735879931;  // std dev = 0.238, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2833095785706505;  // std dev = 1.380, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | else return -0.38032284904578384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24862754030151424;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6089236181429314;  // std dev = 1.044, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.10164231791303656;  // std dev = 1.661, 205.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=4 */
%   | | else return 0.03338475494990787;  // std dev = 0.315, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05001139308687096;  // std dev = 2.598, 163.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=62 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25128941701898494;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49378047414823684;  // std dev = 1.526, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12548418217838783;  // std dev = 0.191, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.12050867011423137;  // std dev = 0.136, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2758710101388462;  // std dev = 1.731, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return -0.09101560977283057;  // std dev = 1.495, 220.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019155141056744863;  // std dev = 2.180, 86.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1910282755482617;  // std dev = 0.079, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.048504110821498796;  // std dev = 0.142, 160.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=16 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.016099133883535524;  // std dev = 1.977, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | | else return 0.05963089769757179;  // std dev = 2.298, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15355197782519578;  // std dev = 0.138, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2600974494099746;  // std dev = 1.386, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269809101555207;  // std dev = 0.069, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37587046818598424;  // std dev = 1.179, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11832437276398167;  // std dev = 0.259, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13222807373206455;  // std dev = 1.982, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | else return 0.1323657412077995;  // std dev = 0.809, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0842549757430001;  // std dev = 0.014, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09275256657698891;  // std dev = 0.026, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.03574438564480708;  // std dev = 0.777, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.012874057428490557;  // std dev = 1.144, 61.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17522607964863268;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010069819578556231;  // std dev = 2.007, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.017', 'seconds']
Parameter learned model CLL:-0.110249 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.702, 3, 83], 'true,false,true': [0.0, 128, 0], 'true,false,false': [0.182, 28, 1], 'false,true,true,true': [0.972, 1, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.475, 38, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 145, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.54, 41, 3], 'false,false,false,true': [0.124, 0, 8], 'false,false,false,false': [4.484, 83, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.33, 0, 50], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.17, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.179, 173, 28], 'false,false,false,false': [3.766, 73, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.672, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 127, 0], 'false,true,false,false': [0.00025, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.238, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.38, 2, 59], 'true,false': [0.0, 1, 0], 'false,true,true': [0.973, 1, 18], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.044, 1, 32], 'false,false,true,false': [1.661, 201, 4], 'false,false,false': [0.315, 44, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.598, 101, 62], 'false,true': [0.006, 0, 19], 'false,false,true': [1.526, 1, 43], 'false,false,false,true': [0.191, 71, 0], 'false,false,false,false': [0.136, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.731, 2, 93], 'true,false': [1.495, 215, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.18, 60, 26]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.079, 0, 65], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 144, 16], 'false,false,false,true': [1.977, 74, 22], 'false,false,false,false': [2.298, 43, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.138, 1, 59], 'false,true,true,true': [1.386, 1, 33], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.069, 158, 0], 'false,false,true': [1.179, 1, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 73, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.982, 4, 64], 'true,true,false': [0.809, 1, 19], 'true,false,true': [0.014, 103, 0], 'true,false,false,true': [0.026, 30, 0], 'true,false,false,false': [0.777, 14, 1], 'false,true': [1.144, 41, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.007, 44, 18]}]
{'': [0.2261850327693956, 0.22314808276251807], 'true': [0.033666846944294074, 0.006328857154448296], 'false': [0.2203708680462237, 0.22592152199762144], 'false,true': [0.04535147392290242, 4.163336342344337e-17], 'false,true,true': [0.05246913580246885, 1.4802973661668753e-16], 'true,false': [-2.7755575615628914e-17, 0.03329369797859696]}
{'': [0.0, 0.11975204055679545], 'false': [0.06495581585416521, 0.16341341396021822], 'false,false': [0.053926589079822944, 0.1885299867582603], 'false,false,false': [0.0019147173873952372, 0.17480643587759673], 'false,true': [nan, 0.06495581585416521], 'false,false,true': [nan, 0.053926589079822944]}
{'': [0.0023844750750971204, 0.11894898888097871], 'false': [nan, 0.11894898888097835], 'false,false': [-2.9605947323337506e-16, 0.1085443344285826], 'false,false,false': [0.08687756368255904, 0.15414442657465208], 'true': [0.002183582311501482, 0.0033067168078720283], 'true,false': [0.0, 0.003602580487135465], 'true,true': [0.002183582311501482, nan], 'false,false,true': [-3.700743415417188e-17, -2.3684757858670006e-16]}
{'': [0.056206489778853744, 0.000630114923124969], 'false': [9.678478567546051e-06, 0.0007240520355697145], 'false,false': [nan, 0.0007240520355697145], 'false,false,false': [nan, 0.0007240520355697145], 'false,true': [nan, 9.678478567548953e-06], 'false,true,false': [7.24740301814317e-06, 2.39553753756693e-09]}
{'': [0.03770726906890111, 0.08251788186335332], 'false': [0.04986149584487529, 0.08098332912064206], 'false,false': [0.07647123092142069, 0.09942604844242388], 'false,false,true': [0.03300593822682158, 0.013460392441614098], 'false,true': [0.04986149584487529, nan], 'true': [0.031222066198526417, 0.0]}
{'': [0.041413671428193875, 0.08494147182261104], 'false': [2.090240501561562e-06, 0.09048114662183886], 'false,false': [0.05289058478852171, 0.0004744825277271632], 'true': [nan, 0.04141367142819385], 'true,false': [nan, 0.041413671428193875], 'false,false,false': [0.0005134910306027274, 0.0003992510494869112]}
{'': [0.04496178562860434, 0.05527218038168801], 'false': [nan, 0.055272180381688005], 'false,false': [nan, 0.05527218038168801], 'false,false,false': [nan, 0.05527218038168801], 'true': [0.03154907932000306, 0.010158238531885523]}
{'': [9.649693830034914e-05, 0.040478325264055814], 'false': [nan, 0.04047832526405568], 'false,false': [0.020179809762601832, 0.05881138451491399], 'false,false,false': [0.0406935025418649, 0.08254718486452232], 'true': [9.649693830034914e-05, nan]}
{'': [0.019013901239443357, 0.042652728724566956], 'false': [0.028164831051638462, 0.06610940772837497], 'false,false': [0.04212814251730045, 0.0009168399937143044], 'false,true': [0.05648570656349993, 2.9842655470394596e-05], 'false,true,true': [0.05648570656349993, nan], 'false,false,false': [nan, 0.0009168399937143044]}
{'': [0.03276813309784246, 0.0431140636499885], 'false': [0.021442088357802393, 0.0637674542821438], 'false,false': [0.0, 0.06497207549139601], 'false,false,false': [nan, 0.06497207549139604], 'true': [0.05205673644128728, 0.004331077067334375], 'true,true': [0.05775342162530197, 0.03268799217065197], 'true,false': [1.7992053531931969e-06, 0.014163509939594358], 'true,false,false': [2.2659847229975864e-05, 0.040278588328858875]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.716
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.8055173561521439;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.1354816381488957;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.6706929244060769;  // std dev = 0.215, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else return 0.7194734122109542;  // std dev = 4.21e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7299724186538795;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12614508608120686;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.12614508608120675;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12614508608120675;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.03573725243220103;  // std dev = 1.490, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.6083623010998431;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12147894922439914;  // std dev = 4.198, 111.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.49745790003260465;  // std dev = 0.255, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then return 0.5673772046456647;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.439750861036933;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.24927467056074262;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5567009665128823;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(I, A) )
%   | | then return -0.054725581044414814;  // std dev = 0.207, 175.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10581799322744434;  // std dev = 3.133, 68.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=20 */
%   | | | else return 0.16622594461045587;  // std dev = 2.604, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.4369789500262492;  // std dev = 0.078, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.3546890676400627;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.280597889985181;  // std dev = 0.722, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.48535485600074735;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.5791380009916994;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7048296443073125;  // std dev = 0.332, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10935360501144137;  // std dev = 0.053, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else return -0.10901561423546624;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.16195737332354296;  // std dev = 0.150, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3418066203189434;  // std dev = 0.018, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.43538775104494665;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3232910976354057;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, H) )
%   | | | then return -0.09794582894233164;  // std dev = 0.041, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return 0.118056974427802;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.33425280990883594;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.06684562486038201;  // std dev = 0.680, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.06532783676811177;  // std dev = 3.264, 108.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=33 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.26386225674653746;  // std dev = 0.045, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.17780858763201943;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.2814398985274609;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04866711486127185;  // std dev = 0.124, 125.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=12 */
%   | | else return -0.08921044407275038;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26269182925630663;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2922629887870394;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5292173975860458;  // std dev = 0.430, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.13441784287357547;  // std dev = 0.027, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.21997670955595544;  // std dev = 0.006, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.23332629187581558;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.34823807073749785;  // std dev = 0.737, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.09446908933292404;  // std dev = 0.017, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return 0.2037410816070025;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.23438413137699463;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.08222263634142163;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.21258590349602424;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.041975999699717485;  // std dev = 2.068, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.1605327382596121;  // std dev = 0.156, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.1785741773658908;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.07522290064009028;  // std dev = 1.305, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.3367403415421071;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07867120826667595;  // std dev = 0.004, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2530841619697856;  // std dev = 1.039, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.12192360134822057;  // std dev = 0.060, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04499569186473383;  // std dev = 0.607, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.060790319203883954;  // std dev = 1.335, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.11023933982666041;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.15520051771669;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1645555642618127;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then return -0.00928041620590241;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.04759758537245083;  // std dev = 0.317, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A) )
%   | then return -0.028220493557349742;  // std dev = 0.107, 204.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=33 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.14972849286896983;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3493124255144386;  // std dev = 0.392, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12179076424493655;  // std dev = 0.027, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13218557308763992;  // std dev = 0.121, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return 0.23892089515388173;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07057330193444472;  // std dev = 0.056, 164.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.14682859292456096;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.029836352679879902;  // std dev = 0.846, 48.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=10 */
%   | | | else return 0.0016152195785194094;  // std dev = 0.565, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.17217701359471316;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017976493175221275;  // std dev = 0.830, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0.07962616991844425;  // std dev = 1.086, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.449', 'seconds']
Refined model CLL: -0.104809


******************************************
Best model found
******************************************
Results 

CLL : -0.101743 

AUC ROC : 0.992991 

AUC PR : 0.350418 

Precision : 0.346479 

Recall : 0.97619 

F1 : 0.511435 

Total Learning Time : 11.716 

Total Inference Time : 26.66546058654785 

Total revision time: 48.77767043113708
Best scored revision CLL: -0.104809


Results 

CLL : -0.101743 

AUC ROC : 0.992991 

AUC PR : 0.350418 

Precision : 0.346479 

Recall : 0.97619 

F1 : 0.511435 

Total Learning Time : 54.36091785430908 

Total Inference Time : 26.66546058654785 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.776
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.26886322081379715;  // std dev = 0.492, 56.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7088253104093754;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04212002692507444;  // std dev = 0.255, 193.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04238643466830283;  // std dev = 1.774, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6311843378742767;  // std dev = 0.975, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13043708502903692;  // std dev = 4.896, 131.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5668942124751313;  // std dev = 1.068, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5186415258039149;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4038263404710175;  // std dev = 1.317, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6014081706015505;  // std dev = 0.176, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.569275865100183;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01455426609182838;  // std dev = 4.580, 256.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=34 */
%   | | | else return 0.08158415455715747;  // std dev = 3.987, 90.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.539926504288168;  // std dev = 2.602, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12155854603747797;  // std dev = 0.067, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | | else return -0.13369064337701742;  // std dev = 0.022, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16913872820226114;  // std dev = 0.348, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3059757317267216;  // std dev = 1.403, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5263486210357133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30189301948299424;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5056811460892225;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6245056719864199;  // std dev = 0.287, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10626511672348261;  // std dev = 1.790, 291.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=5 */
%   | | else return 0.013973992868107226;  // std dev = 0.306, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025330272951341982;  // std dev = 3.201, 245.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2562802626462817;  // std dev = 0.198, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49295685235769016;  // std dev = 1.445, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13036963343623714;  // std dev = 0.255, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.1377965807288703;  // std dev = 0.268, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26485817043162874;  // std dev = 2.079, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08979769136362507;  // std dev = 1.692, 240.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.042457861479931;  // std dev = 2.188, 80.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19226646112526552;  // std dev = 0.071, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2743174098068714;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04300721808238109;  // std dev = 0.147, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01500203626205987;  // std dev = 2.136, 136.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=28 */
%   | | | else return 0.01862579067155411;  // std dev = 2.505, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17302995394477277;  // std dev = 0.115, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2627573006395932;  // std dev = 1.252, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09291617934614535;  // std dev = 0.108, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38339938121038475;  // std dev = 0.762, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12159285435357506;  // std dev = 0.335, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1729126939758438;  // std dev = 1.281, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1604108079429769;  // std dev = 0.377, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08215146669330425;  // std dev = 0.030, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09328150814337352;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.033980464293914804;  // std dev = 1.006, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.0053515835841195635;  // std dev = 1.572, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21429178930329473;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053694397898975905;  // std dev = 1.829, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.245', 'seconds']
Parameter learned model CLL:-0.112768 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 56, 0], 'false,false': [0.492, 33, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 174, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.774, 37, 4], 'false,false,false,true': [0.975, 1, 8], 'false,false,false,false': [4.896, 91, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.068, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.778, 1, 3], 'true,false,false': [1.317, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.176, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.58, 222, 34], 'false,false,false,false': [3.987, 67, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.602, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.067, 192, 0], 'false,true,false,false': [0.022, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.348, 95, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.403, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.287, 0, 39], 'false,false,true,false': [1.79, 286, 5], 'false,false,false': [0.306, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.201, 163, 82], 'false,true': [0.198, 0, 22], 'false,false,true': [1.445, 1, 52], 'false,false,false,true': [0.255, 78, 0], 'false,false,false,false': [0.268, 73, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.079, 4, 121], 'true,false': [1.692, 233, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.188, 52, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.071, 0, 83], 'true,false,true': [0.009, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 160, 19], 'false,false,false,true': [2.136, 108, 28], 'false,false,false,false': [2.505, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.115, 1, 78], 'false,true,true,true': [1.252, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.108, 204, 0], 'false,false,true': [0.762, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.335, 101, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.281, 1, 85], 'true,true,false': [0.377, 0, 19], 'true,false,true': [0.03, 163, 0], 'true,false,false,true': [0.044, 27, 0], 'true,false,false,false': [1.006, 33, 4], 'false,true': [1.572, 52, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.829, 33, 21]}]
{'': [0.22016528925620055, 0.22760935585273656], 'false': [0.21338210638622274, 0.24202806122449091], 'true': [0.04376735964986345, 0.017771953891197862], 'false,true': [7.105427357601002e-16, 5.947623346206196e-17], 'true,false': [-1.5801947344358056e-16, 0.06420927467300819], 'false,true,true': [0.0, 0.0]}
{'': [0.023034738879491933, 0.12405132693013805], 'false': [0.06497915106774245, 0.17410707845442563], 'false,false': [0.07676499962406258, 0.19309358763630435], 'false,false,false': [0.10565995459528502, 0.18298097630528415], 'false,false,true': [nan, 0.07676499962406258], 'false,true': [nan, 0.06497915106774245]}
{'': [0.04531217873256873, 0.11966293512165645], 'false': [nan, 0.1196629351216557], 'false,false': [0.0016856898887075474, 0.10836239030264957], 'false,false,false': [0.08195164693313897, 0.17664783007749077], 'true': [0.016765868365761674, 0.16989417413097344], 'true,false': [0.15126437293798328, 0.17357965838444728], 'true,true': [0.016765868365761674, nan], 'false,false,true': [0.005162425284165921, 1.7763568394002506e-16]}
{'': [0.042595858190242517, 0.0008493040905228552], 'false': [3.9864950934826715e-05, 0.0012723471682910303], 'false,false': [nan, 0.0012723471682910303], 'false,false,false': [nan, 0.0012723471682910303], 'false,true': [nan, 3.98649509348307e-05], 'false,true,false': [2.3284867879586058e-05, 1.5827794082250292e-05]}
{'': [0.02519962184955408, 0.07216347512342645], 'false': [0.0018915652605016465, 0.07055425442801021], 'false,false': [0.06561640321083663, 0.0935658820035122], 'false,false,true': [0.0021131156403432472, 0.011014995880400434], 'true': [0.024911551775331754, 0.0], 'false,true': [8.54349754215722e-06, 0.0]}
{'': [0.04182861692412603, 0.08279645626113986], 'false': [0.001773830903117557, 0.0865019528535682], 'false,false': [0.039411694111721886, 0.0009209061185761139], 'true': [nan, 0.04182861692412556], 'true,false': [nan, 0.04182861692412603], 'false,false,false': [0.0008343925268535266, 0.0009848522882110946]}
{'': [0.048012366309968864, 0.059860361525147024], 'false': [nan, 0.059860361525147156], 'false,false': [nan, 0.059860361525147024], 'false,false,false': [nan, 0.059860361525147024], 'true': [0.034579351257090364, 0.011933118622931697]}
{'': [0.0002142781583315855, 0.03753895090999203], 'false': [nan, 0.037538950909991646], 'false,false': [0.021491675417228788, 0.04997018335139711], 'false,false,false': [0.03354784688281447, 0.0765017568108044], 'true': [6.01127134948506e-05, 3.819436725938097e-05], 'true,false': [3.819436725938097e-05, nan]}
{'': [0.013174185888873863, 0.03649938695066867], 'false': [0.0235434007884418, 0.05673554243532294], 'false,false': [0.014509763119298812, 0.001113330308620997], 'false,true': [0.040196349457833486, 5.6698012901443434e-05], 'false,true,true': [0.040196349457833486, nan], 'false,false,false': [nan, 0.001113330308620997]}
{'': [0.021792192926354176, 0.04480697634619062], 'false': [0.03208387940811966, 0.06060811626910257], 'false,false': [0.0, 0.06193173552589665], 'false,false,false': [nan, 0.061931735525896654], 'true': [0.01701683897765311, 0.0048192877269712135], 'true,true': [0.019091342991032892, 0.007498963894408047], 'true,false': [5.467367131838191e-06, 0.01669454884993774], 'true,false,false': [7.297854693595875e-05, 0.027340231407265936]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.608
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.7251789173348895;  // std dev = 0.239, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else return -0.12817559539888243;  // std dev = 0.127, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7213915923008598;  // std dev = 7.30e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.04140233247486615;  // std dev = 1.142, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.15619471171805743;  // std dev = 2.581, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.13856700522597593;  // std dev = 2.402, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5565050768132056;  // std dev = 0.003, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.38964244095620115;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6087345575169034;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.46067324585083885;  // std dev = 0.307, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5564337239285183;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5863950608326798;  // std dev = 0.268, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11592137116606212;  // std dev = 0.140, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09205284627630396;  // std dev = 2.418, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | | | else return 0.13497212042185358;  // std dev = 3.333, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.38892230841535164;  // std dev = 1.681, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | | | else return 0.5037321507942916;  // std dev = 0.301, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.34675420051988654;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.24557664277310592;  // std dev = 1.103, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.41908716397181317;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.21078210294821445;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.49624622611291025;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6992707921358389;  // std dev = 0.269, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.11678306227581661;  // std dev = 0.027, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32579471934938103;  // std dev = 0.031, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.13915838829197308;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3584647046093447;  // std dev = 0.217, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.48808940739310347;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3420572045577259;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3761339917938843;  // std dev = 1.184, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09193506062476593;  // std dev = 1.267, 281.000 (wgt'ed) examples reached here.  /* #neg=276 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06453976340120088;  // std dev = 0.703, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | | else return 0.115357936748265;  // std dev = 1.988, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.22596708320821324;  // std dev = 1.389, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.3126899818402146;  // std dev = 0.088, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.38198128300971135;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0484769473875043;  // std dev = 0.101, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | else return -0.07100165707780896;  // std dev = 0.082, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2734203879082368;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.24077483725278184;  // std dev = 1.451, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.4373667230005489;  // std dev = 0.970, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.11567883789322107;  // std dev = 0.037, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.21064154685628056;  // std dev = 0.109, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | | then return 0.11307441837505397;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.213740628080512;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1986656133740336;  // std dev = 1.098, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.0534853607151656;  // std dev = 0.122, 249.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.20097298499013516;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.029623078176115498;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0053768317009416115;  // std dev = 1.274, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return -0.005788565007675284;  // std dev = 2.256, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18862769801076854;  // std dev = 0.158, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return -0.04634029306416939;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07460219248412381;  // std dev = 0.067, 125.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2904292121309812;  // std dev = 0.274, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07924125218594143;  // std dev = 0.052, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2661589322430506;  // std dev = 0.270, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11207834681852386;  // std dev = 0.748, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14185081525150128;  // std dev = 0.701, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04139539209121789;  // std dev = 1.681, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16972408937236724;  // std dev = 0.283, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.05172528725449169;  // std dev = 0.327, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1720637057245456;  // std dev = 0.157, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2357644417064527;  // std dev = 0.234, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07206223859027779;  // std dev = 0.069, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2345355118535107;  // std dev = 0.061, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.41524157316366195;  // std dev = 0.304, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10950105395646134;  // std dev = 0.339, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.130229365482164;  // std dev = 0.116, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.16330268812179283;  // std dev = 0.037, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.060145384354479726;  // std dev = 0.048, 204.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1159844112980182;  // std dev = 1.031, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.07456633354305342;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0.04737088229696678;  // std dev = 0.173, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.24639120139753323;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.011337932407383589;  // std dev = 0.963, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return -0.0015131649604051027;  // std dev = 1.273, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.990', 'seconds']
Refined model CLL: -0.098974


******************************************
Best model found
******************************************
Results 

CLL : -0.097212 

AUC ROC : 0.993967 

AUC PR : 0.383145 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 10.608 

Total Inference Time : 11.90452241897583 

Total revision time: 35.011660512924195
Best scored revision CLL: -0.098974


Results 

CLL : -0.097212 

AUC ROC : 0.993967 

AUC PR : 0.383145 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 40.59490793609619 

Total Inference Time : 11.90452241897583 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.107
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7277141524908164;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2581489350995122;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7450313777155169;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008474748586056072;  // std dev = 0.314, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.06993903907271087;  // std dev = 1.425, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5926859817596044;  // std dev = 0.156, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5810911974812754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5810911974812754;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038588321836153565;  // std dev = 1.629, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | | else return 0.01132365724118352;  // std dev = 1.246, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4779306659289138;  // std dev = 1.283, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12169045817326882;  // std dev = 0.013, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12290533821542961;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15636435934504572;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.16376268395869228;  // std dev = 1.615, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0.3076946010953039;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3248070049417593;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6703344712532666;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08304465809279657;  // std dev = 1.096, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else return -0.09730147557086374;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018583647697986698;  // std dev = 1.725, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return -0.020679699571693872;  // std dev = 0.683, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4935138743947487;  // std dev = 0.443, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10546094014502778;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11228929758837929;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3169829581036096;  // std dev = 0.423, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07553691054048672;  // std dev = 0.946, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09078034049720735;  // std dev = 0.342, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.22501241366764962;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.0394119707510614;  // std dev = 0.160, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.08860022205645492;  // std dev = 0.536, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.03068884400467683;  // std dev = 0.819, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1919154584596718;  // std dev = 0.054, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30379057732176123;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09470327760519812;  // std dev = 0.012, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5075285919772959;  // std dev = 0.197, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11793035015963783;  // std dev = 0.079, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1424174225976764;  // std dev = 1.093, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.1603699518775693;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08667281241857641;  // std dev = 0.009, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08686821827122887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.08323479150822147;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03496791696894604;  // std dev = 0.432, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0844387833717424;  // std dev = 0.597, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.951', 'seconds']
Parameter learned model CLL:-0.111161 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.615, 3, 20], 'true,false,true': [3.94e-08, 38, 0], 'true,false,false': [0.0, 8, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.49, 3, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.314, 22, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.425, 10, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.156, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.629, 36, 4], 'false,false,false,false': [1.246, 10, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.283, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.013, 28, 0], 'false,true,false,false': [0.016, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.107, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.615, 3, 15], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.066, 0, 4], 'false,false,true,false': [1.096, 43, 2], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.725, 41, 18], 'false,true': [0.683, 1, 2], 'false,false,true': [0.443, 0, 5], 'false,false,false,true': [0.056, 7, 0], 'false,false,false,false': [0.072, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.423, 0, 21], 'true,false': [0.946, 43, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.342, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.038, 0, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 30, 4], 'false,false,false,true': [0.536, 3, 3], 'false,false,false,false': [0.819, 6, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.054, 0, 16], 'false,true,true,true': [0.275, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.012, 43, 0], 'false,false,true': [0.197, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.079, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.093, 1, 18], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.009, 27, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.011, 2, 0], 'false,true': [0.432, 4, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.597, 3, 2]}]
{'': [0.2058391094307914, 0.2295918367346937], 'false': [0.2222222222222221, 0.24000000000000005], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'true': [0.11342155009451807, 5.3097622916855314e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [4.0902953538821554e-17, -6.938893903907228e-18]}
{'': [2.220446049250313e-16, 0.121690397716803], 'false': [0.09863921234810093, 0.14770942215376617], 'false,false': [-2.3129646346357427e-18, 0.18407393982532147], 'false,false,false': [0.0, 0.15614035390567674], 'false,true': [nan, 0.09863921234810093], 'false,false,true': [nan, -2.3129646346357427e-18]}
{'': [0.0016815757411188792, 0.09599584845634174], 'false': [nan, 0.09599584845634168], 'false,false': [0.0, 0.08135987490132372], 'false,false,false': [0.06635899506654531, 0.12944649564129052], 'true': [0.0017477072919927267, 0.0], 'true,true': [0.0017477072919927267, nan], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.06335924065132505, 0.0004902534022892393], 'false': [1.3388221194598383e-05, 0.0008784271849855461], 'false,false': [nan, 0.0008784271849855461], 'false,false,false': [nan, 0.0008784271849855461], 'false,true': [nan, 1.3388221194598383e-05], 'false,true,false': [6.418394926722375e-06, 4.4698602450441806e-05]}
{'': [0.1383130582656285, 0.06754550302560963], 'true': [0.1449067803860255, 0.0], 'false': [-1.850371707708594e-17, 0.0647395459235739], 'false,false': [0.06715691180205491, 0.0], 'false,false,true': [0.0010944595276711766, 0.026696059371042347], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.050453752681809017, 0.09184915742708268], 'false': [0.15528533108519676, 0.08115846117445631], 'false,false': [0.03932047223217801, 0.0006078371343744361], 'true': [nan, 0.05045375268180899], 'true,false': [nan, 0.050453752681809017], 'false,false,false': [0.0004427990823348073, 0.0007495619537269821]}
{'': [0.04968267314380098, 0.029296618652910146], 'true': [0.008515061585662969, 0.019871364705963106], 'false': [nan, 0.029296618652910146], 'false,false': [nan, 0.029296618652910146], 'false,false,false': [nan, 0.029296618652910146]}
{'': [9.178311257054123e-05, 0.04017048545923402], 'false': [nan, 0.04017048545923404], 'false,false': [0.025575112086431158, 0.06923444914442677], 'false,false,false': [0.04795425430621086, 0.08375728339829329], 'true': [9.178311257054123e-05, nan]}
{'': [0.002920559436467289, 0.0287521157495983], 'false': [0.01861142067335177, 0.05438940852834367], 'false,false': [0.012965259733180487, 0.0003881909065337648], 'false,true': [0.012616292334361586, 3.376443978039758e-06], 'false,true,true': [0.012616292334361586, nan], 'false,false,false': [nan, 0.0003881909065337648]}
{'': [0.03632399331297882, 0.04578255904902833], 'false': [0.02662046503161717, 0.0711818601435287], 'false,false': [nan, 0.0711818601435287], 'false,false,false': [nan, 0.0711818601435287], 'true': [0.0569309194794985, 7.305163453131628e-06], 'true,true': [0.06289295324504289, 0.0], 'true,false': [2.9089922083422624e-06, 4.2407614962464146e-05], 'true,false,false': [0.0, 5.921082576298368e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.564
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09189542613020789;  // std dev = 1.419, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.37889584851099056;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.11295318163728357;  // std dev = 0.023, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.11024456011969058;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07323087994546904;  // std dev = 0.724, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.11088554171221232;  // std dev = 1.197, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.3118877737046136;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4392318613936537;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4609501386289974;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4319924356485391;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.648002818483764;  // std dev = 0.311, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.10153822030670259;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.12378653600317725;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.1015382203067026;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.15778697859085783;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.376514460266586;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.35168129788872793;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3394268945918375;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3175657678162218;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3253809613986029;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.23505711894373826;  // std dev = 1.009, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.07000755228531216;  // std dev = 0.992, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.11097329582271596;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2910051894727066;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.08962115078250454;  // std dev = 0.007, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.005940233315267534;  // std dev = 0.152, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.25018955071881277;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4788731976746007;  // std dev = 0.429, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.10797869051193348;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11903001796003505;  // std dev = 0.077, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.24140447439885493;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.21502290682334674;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( tweets(E, G), tweets(F, H) )
%   | | | then return -0.07454876081604146;  // std dev = 0.306, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | | else return -0.19426340978774578;  // std dev = 0.282, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, I), recursion_accounttype(I, B) )
%   | | | then return 0.25694041357982245;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09615206258197762;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( tweets(A, L) )
%   | | | then return -0.014629632697337006;  // std dev = 0.323, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.02879507860777577;  // std dev = 0.581, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.08460915454479716;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then return 0.192781744018117;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20949705604820743;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17749184884258573;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return -0.11290375694595571;  // std dev = 1.147, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(G, I), follows(A, I) )
%   | | | then return -0.07587559143302554;  // std dev = 0.019, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.0906806585004516;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.29084155397704137;  // std dev = 0.286, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12082590788101855;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.06403760305116035;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.06532099574681391;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.191127667144916;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16678426467085106;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19173209953061524;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.06953706474053829;  // std dev = 0.024, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.0755325824691321;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.4654423903036607;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12345009534529965;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.08746939827159711;  // std dev = 0.958, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.20496836175202943;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.20680815884904277;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06554985437262437;  // std dev = 0.014, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.07349884389314404;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07088285153197603;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0676090316705486;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, I) )
%   | then return 0.11001726850390801;  // std dev = 0.266, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.008078450474328357;  // std dev = 0.242, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.979', 'seconds']
Refined model CLL: -0.100163


******************************************
Best model found
******************************************
Results 

CLL : -0.101976 

AUC ROC : 0.994549 

AUC PR : 0.358409 

Precision : 0.345372 

Recall : 0.980769 

F1 : 0.510851 

Total Learning Time : 4.564 

Total Inference Time : 3.7318265438079834 

Total revision time: 11.660330530166625
Best scored revision CLL: -0.100163


Results 

CLL : -0.101976 

AUC ROC : 0.994549 

AUC PR : 0.358409 

Precision : 0.345372 

Recall : 0.980769 

F1 : 0.510851 

Total Learning Time : 17.243577953338622 

Total Inference Time : 3.7318265438079834 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.643062040306225;  // std dev = 1.660, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05747761773513574;  // std dev = 0.230, 100.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.15714911336947518;  // std dev = 1.861, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5901993945297519;  // std dev = 0.213, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5798225139781557;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5798225139781557;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03372053465960754;  // std dev = 2.389, 86.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=9 */
%   | | | else return 0.022839659207357515;  // std dev = 1.526, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4802482502343447;  // std dev = 1.629, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11442073829728885;  // std dev = 0.021, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.12169360790875274;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15985238149820727;  // std dev = 0.079, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3158193189491234;  // std dev = 0.544, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0.30720113260529347;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.18057882735022832;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6562865053921738;  // std dev = 0.145, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08962442574513728;  // std dev = 1.291, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | else return -0.09837278327127968;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04974935347917442;  // std dev = 2.123, 96.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.28524227076661923;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.509327725407734;  // std dev = 0.493, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10620553506385202;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11382644777522595;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2291206888108826;  // std dev = 1.751, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | else return -0.08242784391224434;  // std dev = 1.152, 103.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0323218399189018;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18231844172980088;  // std dev = 0.991, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05611991161559196;  // std dev = 0.132, 102.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.026096913113142144;  // std dev = 0.944, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.14489826829033353;  // std dev = 0.841, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18726097693682536;  // std dev = 0.045, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.31192911463186856;  // std dev = 0.391, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08926621031803171;  // std dev = 0.026, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4458842969600907;  // std dev = 0.294, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11098515326670767;  // std dev = 0.117, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19382277277734022;  // std dev = 0.476, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.1535881277502345;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08268700113400562;  // std dev = 0.013, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07511302991588543;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0715557087785166;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return 0.03297739123956756;  // std dev = 0.651, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.7521787964850654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05828699882258587;  // std dev = 0.702, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.662', 'seconds']
Parameter learned model CLL:-0.108856 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 42], 'true,false,true': [6.99e-08, 70, 0], 'true,false,false': [0.0, 6, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.421, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.66, 3, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.23, 92, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.861, 13, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.213, 0, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.389, 77, 9], 'false,false,false,false': [1.526, 15, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.629, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 60, 0], 'false,true,false,false': [1.39e-08, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.079, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.544, 1, 31], 'true,false': [0.0, 0, 1], 'false,true,true': [0.926, 1, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.145, 0, 9], 'false,false,true,false': [1.291, 96, 3], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.123, 59, 37], 'false,true': [0.0, 0, 5], 'false,false,true': [0.493, 0, 8], 'false,false,false,true': [0.029, 10, 0], 'false,false,false,false': [0.081, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.751, 3, 42], 'true,false': [1.152, 99, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.498, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.991, 1, 34], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.132, 94, 8], 'false,false,false,true': [0.944, 21, 5], 'false,false,false,false': [0.841, 4, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.045, 0, 32], 'false,true,true,true': [0.391, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.026, 79, 0], 'false,false,true': [0.294, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.117, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.476, 0, 37], 'true,true,false': [0.014, 0, 5], 'true,false,true': [0.013, 80, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.014, 5, 0], 'false,true': [0.651, 9, 5], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.702, 5, 3]}]
{'': [0.22837370242214647, 0.17632653061224507], 'true': [0.022714981070850387, 7.011934892369409e-17], 'false': [0.17561983471074363, 0.17751479289940816], 'false,true': [0.0, -3.2653618371328133e-18], 'true,false': [6.97854472621527e-17, -6.938893903907228e-18], 'false,true,true': [0.0, nan]}
{'': [0.0745069393718037, 0.08235477068116567], 'false': [0.053124433028375044, 0.15824950993461046], 'false,false': [0.0, 0.19217199494669274], 'false,false,false': [0.0, 0.18228551960632622], 'false,true': [nan, 0.053124433028375044], 'false,false,true': [nan, 0.0]}
{'': [0.0014843892506211653, 0.09230973154438436], 'false': [nan, 0.09230973154438439], 'false,false': [7.401486830834377e-17, 0.07775245850286061], 'false,false,false': [0.06638634980622285, 0.12941182721112457], 'true': [0.0015075150997492534, 0.0], 'true,true': [0.0015075150997492534, nan], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.05101505819163773, 0.0003702392634173524], 'false': [1.4344169591140598e-05, 0.00036374840914697157], 'false,false': [nan, 0.00036374840914697157], 'false,false,false': [nan, 0.00036374840914697157], 'false,true': [nan, 1.4344169591140598e-05], 'false,true,false': [7.351285511869588e-06, 1.295260195396016e-17]}
{'': [0.008972457739023446, 0.06075596855258273], 'false': [0.12244897959183672, 0.05445273411511947], 'false,true': [0.12244897959183672, nan], 'false,false': [0.05813951907954941, 0.0], 'false,false,true': [0.002350433230066685, 0.016845994390930853], 'true': [0.009250596342281342, 0.0]}
{'': [0.04695167287087212, 0.07909402153691858], 'false': [0.0, 0.08531672867803589], 'false,false': [0.030380574964322726, 0.00036577131636885064], 'true': [nan, 0.04695167287087215], 'true,false': [nan, 0.04695167287087212], 'false,false,false': [8.657200643711755e-05, 0.0005919325324930063]}
{'': [0.05024060825269915, 0.022508702607916178], 'true': [0.06817203694249786, 0.012894245875670902], 'false': [nan, 0.022508702607916178], 'false,false': [nan, 0.022508702607916178], 'false,false,false': [nan, 0.022508702607916178]}
{'': [0.028060237545316787, 0.026958815668101387], 'true': [0.028060237545316787, nan], 'false': [nan, 0.026958815668101495], 'false,false': [0.017353084630803997, 0.05332859965870521], 'false,false,false': [0.03429344522882887, 0.10099353656489628]}
{'': [0.0020304130033538953, 0.027988056699725573], 'false': [0.020117835363309088, 0.04917054737193889], 'false,false': [0.014429350019289392, 0.0005083435237787833], 'false,true': [0.012769991304985425, 8.773847888338196e-06], 'false,true,true': [0.012769991304985425, nan], 'false,false,false': [nan, 0.0005083435237787833]}
{'': [0.017588450240251147, 0.06623452685684886], 'false': [0.030297242983615365, 0.11958559282038046], 'false,false': [0.0, 0.061549924660298745], 'false,false,false': [nan, 0.061549924660298745], 'true': [0.005563714042845439, 1.3317943812782376e-05], 'true,true': [0.0061178089000621695, 3.730289856268276e-05], 'true,false': [2.072088952966011e-06, 2.084374355028466e-05], 'true,false,false': [1.1564823173178713e-18, 3.8953762897334096e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.197
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7243987983162999;  // std dev = 0.062, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7350122940520396;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.07263357738945665;  // std dev = 1.946, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5631633046151147;  // std dev = 0.112, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.41079350733174563;  // std dev = 0.901, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5716325953499217;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5541498594044499;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5515261231575116;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11231637819360622;  // std dev = 6.23e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23008867438370967;  // std dev = 1.190, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.009801812613512728;  // std dev = 1.439, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.41746955065249625;  // std dev = 0.047, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.47315487201360024;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16168351561941643;  // std dev = 1.045, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.41434242242253017;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4227625023017989;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7269648341040367;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.10159632948783621;  // std dev = 5.43e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.19985243209171144;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.15016142652456907;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.26699569136544987;  // std dev = 0.976, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.3416101263121515;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.42890589705700083;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.37879351257694116;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32307290624695106;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.39037029500379516;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08123130031757796;  // std dev = 1.220, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.26194561159542895;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.1199460933987432;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.26825972111064195;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08608206373378346;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.10360492029894115;  // std dev = 0.072, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25791106564602556;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.37782574537392505;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6178897210311394;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11390133964876897;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21405896048984532;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2609255830217738;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.024359070202901557;  // std dev = 1.242, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.07954671613365372;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.07908199703763834;  // std dev = 0.021, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2958034595774139;  // std dev = 0.154, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12440396782504773;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.23748187769882123;  // std dev = 0.410, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.027137235645930964;  // std dev = 0.643, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18025623447716194;  // std dev = 0.007, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2138518151427932;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06465996616677747;  // std dev = 0.368, 59.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=2 */
%   | | | else return -0.07309550247302096;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.22341466929405296;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08903051603314967;  // std dev = 0.268, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25652938254488405;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10508835293524975;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.10428970703189;  // std dev = 0.273, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, F) )
%   | | then return 0.15581695594849998;  // std dev = 0.006, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.24078462729227273;  // std dev = 1.099, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18271714790593155;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.0019084363544247251;  // std dev = 0.854, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.16282616387996193;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.06860334038658122;  // std dev = 0.014, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3204532493657346;  // std dev = 0.286, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14698980201037026;  // std dev = 0.167, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11923179056675555;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.09255123787830245;  // std dev = 1.289, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.1788228893756213;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13335911703864628;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06427905286740633;  // std dev = 0.000986, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.0019109820389974115;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.03340427175465918;  // std dev = 0.362, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.016848602141037883;  // std dev = 0.439, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.003826837399429295;  // std dev = 0.545, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.421', 'seconds']
Refined model CLL: -0.096498


******************************************
Best model found
******************************************
Results 

CLL : -0.101524 

AUC ROC : 0.995505 

AUC PR : 0.43645 

Precision : 0.34763 

Recall : 0.987179 

F1 : 0.51419 

Total Learning Time : 6.197 

Total Inference Time : 8.904949188232422 

Total revision time: 20.44490916442871
Best scored revision CLL: -0.096498


Results 

CLL : -0.101524 

AUC ROC : 0.995505 

AUC PR : 0.43645 

Precision : 0.34763 

Recall : 0.987179 

F1 : 0.51419 

Total Learning Time : 26.02815658760071 

Total Inference Time : 8.904949188232422 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.785
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return 0.011995088945666036;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6862092887529976;  // std dev = 1.399, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.052606875533620374;  // std dev = 0.237, 116.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07188893000605974;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.0727570527573861;  // std dev = 2.289, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5564499973288918;  // std dev = 0.881, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8079404868986058;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5635646436599546;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5635646436599546;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.049185661032183185;  // std dev = 2.677, 124.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=11 */
%   | | | else return -0.034498176683380545;  // std dev = 1.823, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46562922192212025;  // std dev = 2.109, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11596577234002862;  // std dev = 0.041, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.11675563500766478;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14020410257792248;  // std dev = 0.102, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2750125475697895;  // std dev = 1.763, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | else return 0.38374148914126616;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31571121936699725;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6607319617656037;  // std dev = 0.153, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08373553490297851;  // std dev = 1.723, 162.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=5 */
%   | | else return -0.11659830567143428;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.041958003959764935;  // std dev = 2.524, 152.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16303989503336586;  // std dev = 0.966, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45290864567292544;  // std dev = 1.374, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11020315961951091;  // std dev = 0.044, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.12286848170860118;  // std dev = 0.092, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2797266683421001;  // std dev = 1.248, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return -0.07402146981394243;  // std dev = 1.549, 135.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0021926809691865017;  // std dev = 0.698, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18771855550128663;  // std dev = 0.995, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( follows(A, E) )
%   | | then return 0.2326819426417373;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.055410450326881314;  // std dev = 0.148, 111.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013998340761497946;  // std dev = 1.194, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | | else return 0.01800039506874431;  // std dev = 1.401, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.08852974642963994;  // std dev = 0.301, 56.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.280424339880615;  // std dev = 0.461, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08953900195865945;  // std dev = 0.024, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5199397375560084;  // std dev = 0.366, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10163746984363245;  // std dev = 0.080, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16159339374463458;  // std dev = 1.419, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.15278923082635804;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08186030609770215;  // std dev = 0.004, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08581362069010122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.009304252008473072;  // std dev = 0.481, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.028345399837545325;  // std dev = 0.809, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047968143686282425;  // std dev = 0.969, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.613', 'seconds']
Parameter learned model CLL:-0.106933 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 63], 'true,false,true': [8.43e-08, 107, 0], 'true,false,false': [0.361, 11, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.462, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.399, 2, 54], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.237, 106, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.289, 26, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.881, 1, 46], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [2.677, 113, 11], 'false,false,false,false': [1.823, 35, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.109, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 102, 0], 'false,true,false,false': [0.014, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.102, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.763, 3, 48], 'true,false': [0.104, 0, 2], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.153, 0, 10], 'false,false,true,false': [1.723, 157, 5], 'false,false,false': [2.63e-09, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.524, 97, 55], 'false,true': [0.966, 1, 9], 'false,false,true': [1.374, 1, 11], 'false,false,false,true': [0.044, 20, 0], 'false,false,false,false': [0.092, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.248, 1, 62], 'true,false': [1.549, 129, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.698, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 52], 'true,false,true': [0.052, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 101, 10], 'false,false,false,true': [1.194, 34, 7], 'false,false,false,false': [1.401, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.301, 6, 50], 'false,true,true,true': [0.461, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 120, 0], 'false,false,true': [0.366, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.419, 2, 55], 'true,true,false': [0.009, 0, 8], 'true,false,true': [0.004, 97, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.481, 6, 2], 'false,true': [0.809, 14, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.969, 10, 4]}]
{'': [0.22903042790169917, 0.20761245674740494], 'true': [-7.894919286223335e-16, 0.01638888888888887], 'false': [0.20408163265306134, 0.21301775147928975], 'false,true': [-1.4802973661668753e-16, -1.4802973661668754e-17], 'true,false': [6.640586315514955e-17, 0.13017751479289943], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03494396832947017, 0.08578315724524645], 'false': [0.056236601011674166, 0.14576288288061703], 'false,false': [0.06632653061224487, 0.16752477850757788], 'false,false,false': [0.0, 0.15414350782193578], 'false,false,true': [nan, 0.06632653061224487], 'false,true': [nan, 0.056236601011674166]}
{'': [0.01772021332284937, 0.0808654350447937], 'false': [nan, 0.0808654350447937], 'false,false': [-4.4408920985006264e-17, 0.06437166933138345], 'false,false,false': [0.05777538078298014, 0.08518037652000572], 'true': [0.016501592376983124, 0.017592584858428795], 'true,false': [0.0032883443116838995, 0.0], 'true,true': [0.016501592376983124, nan], 'false,false,true': [0.0, 6.344131569286608e-17]}
{'': [0.05703749432355679, 0.00016670725103011874], 'false': [1.4962453366101913e-05, 0.00034448508234683113], 'false,false': [nan, 0.00034448508234683113], 'false,false,false': [nan, 0.00034448508234683113], 'false,true': [nan, 1.4962453366101913e-05], 'false,true,false': [1.6654430718841246e-05, 7.827539266691978e-06]}
{'': [0.05926718969300168, 0.04990068182605606], 'true': [0.06093388707948341, 0.0053905361585123435], 'false': [-5.551115123125783e-17, 0.04586900634006562], 'false,false': [0.04774475171803916, 6.938893903907228e-18], 'false,false,true': [0.002339037220604112, 0.01832479141478401], 'false,true': [-5.551115123125783e-17, nan]}
{'': [0.0419080119692824, 0.08756521022296963], 'false': [0.09340230139206493, 0.0826099625706936], 'false,false': [0.1573574639397551, 0.00025336170508043806], 'true': [nan, 0.0419080119692826], 'true,false': [nan, 0.0419080119692824], 'false,false,false': [9.848828186882763e-05, 0.0002946973365002289]}
{'': [0.047139115835921945, 0.021195990952515228], 'true': [0.024728730721787988, 0.017780740249393752], 'false': [nan, 0.021195990952515228], 'false,false': [nan, 0.021195990952515228], 'false,false,false': [nan, 0.021195990952515228]}
{'': [0.018115653208404393, 0.03535536544248444], 'false': [nan, 0.03535536544248439], 'false,false': [0.022013168309625318, 0.05965960434164891], 'false,false,false': [0.03479796576341078, 0.12263104998989155], 'true': [0.018675204020058588, 0.001339367104904239], 'true,false': [0.001339367104904239, nan]}
{'': [0.09042482780970644, 0.02918471744245732], 'false': [0.016432197483634402, 0.07520494543991238], 'false,false': [0.01673361608964996, 0.00025317089048467525], 'false,true': [0.012500578063599192, 4.951622764510592e-06], 'false,true,true': [0.012500578063599192, nan], 'false,false,false': [nan, 0.00025317089048467525]}
{'': [0.02570536976619029, 0.04695073450287584], 'false': [0.03274986812553394, 0.06701118524924057], 'false,false': [nan, 0.06701118524924057], 'false,false,false': [nan, 0.06701118524924057], 'true': [0.03096667024936474, 0.0025556923798244267], 'true,true': [0.03530177555981796, 1.1071724271529554e-05], 'true,false': [1.862899732675775e-07, 0.01508836463306213], 'true,false,false': [-2.7755575615628915e-18, 0.028922481698444125]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.419
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6769202207215932;  // std dev = 0.202, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return 0.7358421226824219;  // std dev = 0.139, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6337529772186845;  // std dev = 0.915, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.08294384801576696;  // std dev = 0.190, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.009648949311305737;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.13320819354583713;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.04115858330165581;  // std dev = 2.321, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5431207411472421;  // std dev = 0.149, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.45878740664695;  // std dev = 0.791, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.811405074446377;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.2731419292526981;  // std dev = 0.691, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5542262910800695;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5764209581546745;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11544182024920689;  // std dev = 0.069, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0022682927888816517;  // std dev = 1.476, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.048132271712172846;  // std dev = 1.800, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4311240436965819;  // std dev = 0.157, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23089760268480614;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4302172925323395;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.42839040462618805;  // std dev = 1.044, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7011039289953178;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7879087993547348;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.1021755405025871;  // std dev = 0.026, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.10649422466676285;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.15245372402388976;  // std dev = 0.118, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.3297504519433735;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3663161467235706;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.37785159335553614;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0.03617648884992839;  // std dev = 1.130, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.4719680939810373;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31704956921848815;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.42424390311988214;  // std dev = 0.444, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07653304757563616;  // std dev = 1.550, 132.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=5 */
%   | | else return -0.0976413397579895;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.26380412899889166;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.4391187106794159;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.24780938694612095;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08616026430457054;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.07073931065936566;  // std dev = 0.078, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2649775804722157;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3650380584963971;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5826565698036084;  // std dev = 0.182, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12133601582552281;  // std dev = 0.028, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(C, D), tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.16822809985246948;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.21368264530701495;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21952997988135323;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.31416046780621804;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.058233423568020616;  // std dev = 0.078, 119.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20401796833763303;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08235328007237953;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.035335137532863624;  // std dev = 0.742, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.08920274165840095;  // std dev = 1.074, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18384709636589286;  // std dev = 0.010, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return 0.27216501862844844;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then return 0.014300222894257558;  // std dev = 0.889, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.23287341221910285;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return -0.05488926925662706;  // std dev = 0.734, 98.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=7 */
%   | | | else return -0.07868906083688024;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.033419559776286425;  // std dev = 0.793, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.01240754549214761;  // std dev = 1.129, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.16003063903343773;  // std dev = 0.039, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.027513496467107504;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.2658884109319735;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1932719129938296;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18637727200904797;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07209175952770143;  // std dev = 0.002, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13616935069621378;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4450642824339811;  // std dev = 0.157, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12236701723035119;  // std dev = 0.023, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10552302245463381;  // std dev = 1.361, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.19002633634824453;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1261308402312007;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06313082329397136;  // std dev = 0.036, 128.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2535995594571479;  // std dev = 0.170, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09017760301013247;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.032381631303199446;  // std dev = 0.450, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.032381631303199446;  // std dev = 0.450, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.052420304547683365;  // std dev = 0.193, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.144', 'seconds']
Refined model CLL: -0.099433


******************************************
Best model found
******************************************
Results 

CLL : -0.100193 

AUC ROC : 0.994431 

AUC PR : 0.388596 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 6.419 

Total Inference Time : 10.60457968711853 

Total revision time: 23.942719940185548
Best scored revision CLL: -0.099433


Results 

CLL : -0.100193 

AUC ROC : 0.994431 

AUC PR : 0.388596 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 29.525967363357545 

Total Inference Time : 10.60457968711853 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.039
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8461007423284279;  // std dev = 0.994, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.221785298735876;  // std dev = 0.481, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6949827618607486;  // std dev = 1.404, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0466220048301206;  // std dev = 0.246, 172.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08984469965903517;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.13962451044447152;  // std dev = 2.892, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5785047652748007;  // std dev = 0.357, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8180942802815319;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.09212422918167713;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3643699238452755;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5643699238452755;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04874333837717697;  // std dev = 3.100, 169.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=15 */
%   | | | else return 0.024696312974090126;  // std dev = 2.685, 57.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5051949297223282;  // std dev = 1.881, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11618558229471625;  // std dev = 0.035, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | | else return -0.1234279646434243;  // std dev = 0.008, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16236419637623156;  // std dev = 0.155, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28011388978147456;  // std dev = 1.746, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else return 0.43329688717121134;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32247200551450966;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5794595883289835;  // std dev = 1.005, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.07737291818843967;  // std dev = 2.271, 201.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=9 */
%   | | else return -0.1081606721938426;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04002125996160618;  // std dev = 2.816, 206.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26076134315267246;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4794891980863264;  // std dev = 1.426, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11891175823283583;  // std dev = 0.126, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12458742425494765;  // std dev = 0.153, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24779441522184023;  // std dev = 2.226, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   | else return -0.06377607484550724;  // std dev = 1.978, 161.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04713389219924273;  // std dev = 0.590, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19906086269020057;  // std dev = 0.058, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.23826649318183818;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047684388167614576;  // std dev = 0.146, 162.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008094687900942053;  // std dev = 1.317, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0.019243760338043314;  // std dev = 1.842, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14525429045901822;  // std dev = 0.208, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.294164738445384;  // std dev = 0.619, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09152980353775031;  // std dev = 0.035, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3655196311979196;  // std dev = 1.474, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11046339501157383;  // std dev = 0.142, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1792147957768163;  // std dev = 1.205, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | else return 0.1305556726426255;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08481013561294391;  // std dev = 0.025, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08356189936313638;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.006979328679222189;  // std dev = 0.463, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.030596857836808877;  // std dev = 0.968, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04105809646833461;  // std dev = 1.490, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.602', 'seconds']
Parameter learned model CLL:-0.111023 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 82], 'true,false,true': [0.0, 152, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.481, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.404, 2, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 156, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.892, 32, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.357, 0, 59], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.932, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.894, 1, 4], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.1, 154, 15], 'false,false,false,false': [2.685, 47, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.881, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 124, 0], 'false,true,false,false': [0.008, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.155, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.746, 3, 61], 'true,false': [0.037, 0, 2], 'false,true,true': [0.072, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.005, 1, 16], 'false,false,true,false': [2.271, 192, 9], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.816, 134, 72], 'false,true': [0.11, 0, 11], 'false,false,true': [1.426, 2, 17], 'false,false,false,true': [0.126, 33, 0], 'false,false,false,false': [0.153, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.226, 4, 82], 'true,false': [1.978, 151, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.59, 9, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.058, 0, 65], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 146, 16], 'false,false,false,true': [1.317, 41, 9], 'false,false,false,false': [1.842, 24, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.208, 3, 63], 'false,true,true,true': [0.619, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 176, 0], 'false,false,true': [1.474, 2, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.142, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.205, 1, 73], 'true,true,false': [0.036, 0, 9], 'true,false,true': [0.025, 135, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.463, 6, 2], 'false,true': [0.968, 19, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49, 18, 8]}]
{'': [0.21957815035154202, 0.2175999999999995], 'true': [0.011903033822034635, 0.0112979591836733], 'false': [0.2040816326530613, 0.23140495867768604], 'false,true': [-2.220446049250313e-16, 2.7755575615628915e-18], 'true,false': [-1.2270886061646468e-16, 0.07939508506616262], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.0285565834620215, 0.09173420310604079], 'false': [0.06057682393553377, 0.15615203958376295], 'false,false': [0.04338842975206613, 0.187618000528085], 'false,false,false': [0.0, 0.1817659403622131], 'false,true': [nan, 0.06057682393553377], 'false,false,true': [nan, 0.04338842975206613]}
{'': [0.03124506730443282, 0.0889886184828675], 'false': [nan, 0.08898861848286746], 'false,false': [0.07100591715976354, 0.07544670658291237], 'false,false,false': [0.05686814162156076, 0.12649741746361953], 'false,false,true': [0.15999999999999998, 0.0], 'true': [0.002157772416168046, 0.2630566441276443], 'true,false': [0.0032236953627605702, 0.2172956134787776], 'true,true': [0.002157772416168046, nan]}
{'': [0.03470417813051918, 0.00038140349714013493], 'false': [1.7301648372781065e-05, 0.0008847915558197462], 'false,false': [nan, 0.0008847915558197462], 'false,false,false': [nan, 0.0008847915558197462], 'false,true': [nan, 1.7301648372778338e-05], 'false,true,false': [9.679319343933806e-06, 1.6345331686555944e-06]}
{'': [0.04690366386798287, 0.06048220572489052], 'false': [0.00043333641084405034, 0.05744015896370178], 'false,false': [0.05930998686013133, -5.204170427930421e-18], 'false,false,true': [0.05945209951179882, 0.025654426063297882], 'true': [0.047637299028120555, 0.000673369590314804], 'false,true': [0.00043333641084405034, nan]}
{'': [0.03848541071139334, 0.08589526588252656], 'false': [0.0011079888209358688, 0.09044554228076633], 'false,false': [0.10696034738255761, 0.0006426868107424837], 'true': [nan, 0.038485410711393386], 'true,false': [nan, 0.03848541071139334], 'false,false,false': [0.00047959475413781184, 0.0008111285960398937]}
{'': [0.05793175608727282, 0.02044373980195927], 'true': [0.05763520825393106, 0.02429036034124758], 'false': [nan, 0.02044373980195927], 'false,false': [nan, 0.02044373980195927], 'false,false,false': [nan, 0.02044373980195927]}
{'': [9.837432078948013e-05, 0.03589704153441415], 'false': [nan, 0.035897041534414295], 'false,false': [0.021460575740473387, 0.06274083020771812], 'false,false,false': [0.03471335875242332, 0.10607802828825304], 'true': [5.2129293485728784e-05, 0.00011013927463750933], 'true,false': [0.00011013927463750933, nan]}
{'': [0.04328166015108785, 0.033132720414920554], 'false': [0.017136160412781078, 0.08660931282172658], 'false,false': [0.13580225672236493, 0.000519274795600978], 'false,true': [0.016644554333965153, 7.005225882602349e-06], 'false,true,true': [0.016644554333965153, nan], 'false,false,false': [nan, 0.000519274795600978]}
{'': [0.021721681869180793, 0.05962636773819338], 'false': [0.034710894403513125, 0.08544437732259531], 'false,false': [nan, 0.08544437732259531], 'false,false,false': [nan, 0.08544437732259531], 'true': [0.017751193575436437, 0.0017404376871139535], 'true,true': [0.019635611260903994, 0.00014612200904938323], 'true,false': [4.70258418834384e-06, 0.010342781018656816], 'true,false,false': [-4.89804275569922e-18, 0.026746745180018093]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 18.555
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13592671287729013;  // std dev = 0.448, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7019295525618316;  // std dev = 0.131, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.7486550802734384;  // std dev = 0.126, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5528067455442875;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05932061716618157;  // std dev = 2.434, 115.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=9 */
%   | | | else return -0.05785119446924372;  // std dev = 1.146, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.023376330014661034;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.13448744112577213;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09058646856813116;  // std dev = 2.926, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5627755198684263;  // std dev = 0.078, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0.6829169344648687;  // std dev = 0.268, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5539218165742619;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.575495083051499;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7312363651687835;  // std dev = 0.000369, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11988513371004547;  // std dev = 0.040, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01366066279412283;  // std dev = 1.695, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.15073127497103703;  // std dev = 2.290, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.40420184720925134;  // std dev = 0.993, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.5499523735256556;  // std dev = 0.292, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4202201677206956;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.043949995351797576;  // std dev = 1.220, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.45988536637716876;  // std dev = 0.179, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6979603368652856;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6507844234785237;  // std dev = 0.914, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10770035217846739;  // std dev = 0.003, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.15458494903379083;  // std dev = 0.023, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.28417446536962504;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.22504639831029408;  // std dev = 1.019, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.3360501954771336;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07602710351910735;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3218032511271459;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22617990812374134;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.0610039236337568;  // std dev = 1.840, 152.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=11 */
%   | | | else return 0.0395266074092673;  // std dev = 2.365, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | else return -0.0976225841608365;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2666202039034698;  // std dev = 0.006, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.03204252857893798;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.2547713326932983;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.005691567259472492;  // std dev = 0.460, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0547671827353041;  // std dev = 1.556, 130.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=9 */
%   | | | else return -0.04474041801306754;  // std dev = 0.904, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.29890082522609535;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.5369505784369005;  // std dev = 0.125, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12004504463602532;  // std dev = 0.031, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.20653975822484302;  // std dev = 0.131, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.12028040455932887;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.33587797618625437;  // std dev = 0.959, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.4999860200142957;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08752971289867821;  // std dev = 0.025, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.32554801043483234;  // std dev = 0.260, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11715922459111255;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19078624646873046;  // std dev = 0.552, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13527039807123634;  // std dev = 1.210, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18989475674820097;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.2658342795706008;  // std dev = 0.122, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.024126178355474016;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.37545315721381417;  // std dev = 0.199, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.08069091324949704;  // std dev = 0.039, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.276229180815052;  // std dev = 0.253, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11291580659886608;  // std dev = 0.065, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06966349082373692;  // std dev = 0.615, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.052296670959437505;  // std dev = 1.267, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.10522212881994944;  // std dev = 1.376, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.1578537077673178;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.18894021795317878;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18964002857980827;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.235375793433444;  // std dev = 0.073, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07465919970084742;  // std dev = 0.030, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.27684792043388035;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.42183612845416374;  // std dev = 0.293, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13415189232385924;  // std dev = 0.039, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09889970995124159;  // std dev = 1.687, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | | | else return 0.22986523735734363;  // std dev = 0.231, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1450868191329383;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06558686670663602;  // std dev = 0.036, 149.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.17422463726308046;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09279185999263558;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23169094641379984;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10742819112489824;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06819545313286722;  // std dev = 0.279, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.284', 'seconds']
Refined model CLL: -0.104425


******************************************
Best model found
******************************************
Results 

CLL : -0.10199 

AUC ROC : 0.993881 

AUC PR : 0.324642 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 18.555 

Total Inference Time : 11.082106351852417 

Total revision time: 38.17880525016785
Best scored revision CLL: -0.104425


Results 

CLL : -0.10199 

AUC ROC : 0.993881 

AUC PR : 0.324642 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 43.762052673339845 

Total Inference Time : 11.082106351852417 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.07935106490048778;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.12285481745245355;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048202983611463;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04275477024140716;  // std dev = 0.254, 225.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07983185039994196;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7502365931742115;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07119390309774934;  // std dev = 3.329, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5171133403420489;  // std dev = 2.160, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | | else return 0.7353598539147479;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.46536097844311763;  // std dev = 0.873, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.589930109578853;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681761992389776;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5681761992389776;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038683522510857035;  // std dev = 3.678, 209.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=21 */
%   | | | else return 0.021768232415187584;  // std dev = 2.863, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5172575088261953;  // std dev = 2.141, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11732990410508173;  // std dev = 0.023, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | | else return -0.12350676606637817;  // std dev = 0.006, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15048667801144908;  // std dev = 0.142, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32421878994801645;  // std dev = 1.165, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4328352865898737;  // std dev = 0.188, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30767323276270575;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6375032900157936;  // std dev = 0.209, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08447407607317811;  // std dev = 2.350, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.10762856734998238;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021664461862342686;  // std dev = 3.509, 286.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2611618845521972;  // std dev = 0.186, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5428407404522244;  // std dev = 0.830, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10993193129845526;  // std dev = 0.066, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11337807666746047;  // std dev = 0.116, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2824086814109926;  // std dev = 1.519, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07237577631006196;  // std dev = 2.048, 236.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.026522196585926933;  // std dev = 1.037, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18630235941777729;  // std dev = 0.995, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2537902667416524;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04582427869755635;  // std dev = 0.163, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019131377353183442;  // std dev = 1.595, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | | else return 0.08338266168156676;  // std dev = 1.709, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15620329211160458;  // std dev = 0.187, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25832480696348536;  // std dev = 0.999, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08978793039851031;  // std dev = 0.039, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45250987774090345;  // std dev = 0.632, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10407007042621443;  // std dev = 0.152, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15963782923779796;  // std dev = 1.943, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14273094129788536;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08329424000191638;  // std dev = 0.025, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07787006832999209;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.022057986808445056;  // std dev = 0.551, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.028789868648713725;  // std dev = 1.664, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2102921631188447;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02724767622380182;  // std dev = 1.403, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.015', 'seconds']
Parameter learned model CLL:-0.108557 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.242, 30, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.441, 25, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 203, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.973, 18, 1], 'false,false,false,true': [0.107, 0, 4], 'false,false,false,false': [3.329, 57, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.16, 5, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.873, 1, 2], 'true,false,false': [0.146, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.678, 188, 21], 'false,false,false,false': [2.863, 54, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.141, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.023, 170, 0], 'false,true,false,false': [0.006, 48, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.142, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.165, 1, 73], 'true,false': [0.188, 0, 4], 'false,true,true': [2.58e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.209, 0, 23], 'false,false,true,false': [2.35, 252, 9], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.509, 195, 91], 'false,true': [0.186, 0, 13], 'false,false,true': [0.83, 0, 22], 'false,false,false,true': [0.066, 28, 0], 'false,false,false,false': [0.116, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.519, 2, 107], 'true,false': [2.048, 225, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.037, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 80], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 170, 22], 'false,false,false,true': [1.595, 53, 13], 'false,false,false,false': [1.709, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.187, 3, 77], 'false,true,true,true': [0.999, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 238, 0], 'false,false,true': [0.632, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 58, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.943, 3, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.025, 191, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.551, 12, 2], 'false,true': [1.664, 20, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.403, 23, 8]}]
{'': [0.2236329235636543, 0.21345155709342578], 'true': [0.03598567560485849, 0.009707804690503488], 'false': [0.22837370242214483, 0.19463667820069216], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.8073398075293246e-16, 0.05859375000000002], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02355479534747032, 0.0920636954522941], 'false': [0.06430329869026748, 0.14763344539371515], 'false,false': [0.04986149584487536, 0.16468419136823037], 'false,false,false': [0.0028391199089342622, 0.14978647232997708], 'false,true': [nan, 0.06430329869026748], 'false,false,true': [nan, 0.04986149584487536]}
{'': [0.06655712485642301, 0.09459310087282316], 'false': [nan, 0.09459310087282324], 'false,false': [0.0, 0.07995226143293716], 'false,false,false': [0.06473365264522786, 0.12609845051185806], 'true': [0.06200965729430618, 0.11567857487034335], 'true,false': [0.2539354624135594, 0.005335565599254688], 'true,true': [0.062209721926388586, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.03582547819983367, 0.0002332631518581683], 'false': [9.13819019309193e-06, 0.0004225738051671507], 'false,false': [nan, 0.0004225738051671507], 'false,false,false': [nan, 0.0004225738051671507], 'false,true': [nan, 9.138190193096005e-06], 'false,true,false': [3.0803092901710016e-06, 8.403592452234839e-07]}
{'': [0.018422541780408183, 0.05937856991221629], 'false': [3.918434204559376e-17, 0.05662418527010416], 'false,false': [0.05839137701730755, 1.3877787807814458e-18], 'false,false,true': [0.001899982046753587, 0.02115553080187944], 'true': [0.01833477855750095, 0.008853620284146851], 'false,true': [3.918434204559376e-17, nan]}
{'': [0.0430599299670618, 0.08140122532571771], 'false': [0.0026670119234110455, 0.08704459955655107], 'false,false': [0.03131779503793193, 0.00026517560643029144], 'true': [nan, 0.043059929967061976], 'true,false': [nan, 0.0430599299670618], 'false,false,false': [0.00015503942007919928, 0.00033738085303305074]}
{'': [0.04604365082932251, 0.04136636206069843], 'true': [0.021166597923598433, 0.017765217425076283], 'false': [nan, 0.04136636206069843], 'false,false': [nan, 0.04136636206069843], 'false,false,false': [nan, 0.04136636206069843]}
{'': [0.012131041536388236, 0.03846016546046067], 'false': [nan, 0.038460165460460695], 'false,false': [0.02667582933726229, 0.060331591201569945], 'false,false,false': [0.038557416863703384, 0.10427768112557012], 'true': [0.012233227872102521, 0.0035476271275328847], 'true,false': [0.0035476271275328847, nan]}
{'': [0.03510737869230739, 0.026849368125206892], 'false': [0.01664752628437683, 0.05993033103523102], 'false,false': [0.023477594777795287, 0.00039767295898798696], 'false,true': [0.030240494793252623, 6.249052388569394e-06], 'false,true,true': [0.030240494793252623, nan], 'false,false,false': [nan, 0.00039767295898798696]}
{'': [0.025082502377786316, 0.075442005496883], 'false': [0.08648491308692707, 0.06249209207312563], 'false,false': [0.0, 0.06346092588025998], 'false,false,false': [nan, 0.06346092588025998], 'true': [0.03564298432638721, 0.0016149244328581777], 'true,true': [0.03892549980047338, 3.188811532997857e-06], 'true,false': [3.1670673422347196e-06, 0.011640542383439059], 'true,false,false': [0.0, 0.021723590544994203]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 38.266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13237239191470637;  // std dev = 0.097, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7094514587199143;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6594281704122605;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.4582833286305351;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7307560103992559;  // std dev = 0.150, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12648822466734808;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6361400788776209;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2500744951335401;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.202334239218108;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5694685802967104;  // std dev = 0.186, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.5832416542430598;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6775660412797647;  // std dev = 0.250, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5649391974904503;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5608456352143686;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09651665280693877;  // std dev = 1.139, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   | | | else return 0.006076674707342422;  // std dev = 2.089, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12817992104407752;  // std dev = 1.817, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | | else return 0.10825240382805522;  // std dev = 2.106, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.39867880790553056;  // std dev = 1.325, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.4575592311636772;  // std dev = 1.031, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.2268800057063828;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.4080928509824872;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5461184304809309;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6372843262821912;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7595333605889997;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(L, A) )
%   | then return -0.1066826056964954;  // std dev = 0.004, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.15597800729171385;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3130103473828359;  // std dev = 0.140, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.24774306048629122;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.5889386758377184;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.37843168812888806;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3882944629045607;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.325423748955068;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.43320259569613506;  // std dev = 0.101, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08460211474732011;  // std dev = 2.013, 276.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=9 */
%   | | else return -0.0943142692017316;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2531341851201079;  // std dev = 0.709, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.3274178252034186;  // std dev = 0.141, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08967056747737906;  // std dev = 0.004, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2741386414877906;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.04554785349010145;  // std dev = 0.128, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27661249890174505;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3018103738028612;  // std dev = 0.165, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5604562677238983;  // std dev = 0.276, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11761921938964683;  // std dev = 0.035, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22014302075897668;  // std dev = 0.011, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(C, E), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2642921002936777;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10909364715764429;  // std dev = 1.067, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.25192478431307797;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, G) )
%   | then return -0.040054434251343564;  // std dev = 0.128, 227.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=31 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.33298030036590187;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1217299676477801;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.004877026368212112;  // std dev = 0.691, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.02047154321889264;  // std dev = 1.275, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18590072523660414;  // std dev = 0.010, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, C), tweets(C, E) )
%   | | | then return 0.039242556858149445;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.20712125113209873;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then return -0.307466070229098;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(C, G) )
%   | | | then return 0.22796275009395797;  // std dev = 0.174, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.01906764640162209;  // std dev = 0.671, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.04600596621824531;  // std dev = 0.106, 235.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.032066428813956556;  // std dev = 0.159, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | | else return 0.0629577220932989;  // std dev = 0.276, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.13010357135942274;  // std dev = 0.988, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.17466424729408056;  // std dev = 0.094, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.20151283061655564;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1645613575642465;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return -0.04712786341869202;  // std dev = 0.413, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.1917079594487878;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.03723691998630948;  // std dev = 0.123, 235.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=32 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.32687053904250696;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12104998160840422;  // std dev = 0.038, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10354874922449434;  // std dev = 1.802, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.2734862799124434;  // std dev = 0.306, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.18319284615800466;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07136663945797588;  // std dev = 0.035, 218.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.10242827133364535;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.01827539276617979;  // std dev = 0.127, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1782976657406311;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.058849981699368815;  // std dev = 0.339, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.019656510276083422;  // std dev = 1.094, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.080', 'seconds']
Refined model CLL: -0.104021


******************************************
Best model found
******************************************
Results 

CLL : -0.101889 

AUC ROC : 0.994944 

AUC PR : 0.38263 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 38.266 

Total Inference Time : 18.728801012039185 

Total revision time: 67.64337941551209
Best scored revision CLL: -0.104021


Results 

CLL : -0.101889 

AUC ROC : 0.994944 

AUC PR : 0.38263 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 73.22662683868408 

Total Inference Time : 18.728801012039185 

