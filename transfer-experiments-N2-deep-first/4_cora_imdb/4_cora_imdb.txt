Starting experiment 4_cora_imdb 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.719
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16085163780221604;  // std dev = 0.459, 185.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14681128680167382;  // std dev = 6.219, 181.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15582273510676475;  // std dev = 6.082, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0996084492487353;  // std dev = 6.226, 182.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09320679883871064;  // std dev = 6.179, 176.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0660504569600623;  // std dev = 6.226, 182.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.062432932327793664;  // std dev = 6.187, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0693689706636236;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05967309516233462;  // std dev = 6.082, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.024484095692894014;  // std dev = 6.187, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.186', 'seconds']
Parameter learned model CLL:-0.366724 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.459, 129, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.219, 125, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.082, 109, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.226, 126, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.179, 120, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.226, 126, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.187, 121, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 111, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.082, 109, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.187, 121, 56]}]
{'': [nan, 0.21107377647918235]}
{'': [nan, 0.21366869143188474], 'false': [nan, 0.21366869143188474]}
{'': [nan, 0.22420569329660361], 'false': [nan, 0.22420569329660361]}
{'': [nan, 0.21301775147928817], 'false': [nan, 0.21301775147928817]}
{'': [nan, 0.21694214876033294], 'false': [nan, 0.21694214876033294]}
{'': [nan, 0.2130177514792907], 'false': [nan, 0.2130177514792907]}
{'': [nan, 0.2162852309361918], 'false': [nan, 0.2162852309361918]}
{'': [nan, 0.22288357416902776]}
{'': [nan, 0.2242056932966007], 'false': [nan, 0.2242056932966007]}
{'': [nan, 0.21628523093619215], 'false': [nan, 0.21628523093619215]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.525
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839147;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.16e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( female(A) )
%   | | | then return 0.5315206219270028;  // std dev = 0.656, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783616;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4203150077150413;  // std dev = 0.022, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.17948546566504398;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926108;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32261469633062695;  // std dev = 0.019, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.15434698493438564;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 6.32e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25647201929529084;  // std dev = 0.017, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1354432391893214;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21067652100961312;  // std dev = 0.015, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11951257750094942;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | | else return -0.20458887403089818;  // std dev = 0.644, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17777078826388312;  // std dev = 0.013, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10902710025175295;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07323640287178988;  // std dev = 0.045, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15325563478417623;  // std dev = 0.012, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.09803703403018224;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.0684276040043929;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return -0.162910717001114;  // std dev = 0.626, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06386129294447264;  // std dev = 0.021, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( female(A) )
%   | | | then return 0.12783021481588053;  // std dev = 0.220, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.12561714219675083;  // std dev = 0.220, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.424', 'seconds']
Refined model CLL: -0.065468


******************************************
Best model found
******************************************
Results 

CLL : -0.080478 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.525 

Total Inference Time : 1.0456531047821045 

Total revision time: 4.165812295913696
Best scored revision CLL: -0.065468


Results 

CLL : -0.080478 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.182710212707519 

Total Inference Time : 1.0456531047821045 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.706
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16502724197782043;  // std dev = 0.461, 189.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20393832607950266;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1543678302996107;  // std dev = 6.153, 167.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14666169827791434;  // std dev = 6.070, 159.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08352341981153967;  // std dev = 6.245, 177.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09161382678435141;  // std dev = 6.133, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06127433524450921;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.052826417277573846;  // std dev = 0.475, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01730802899425516;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04227545886203956;  // std dev = 6.153, 167.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.110', 'seconds']
Parameter learned model CLL:-0.389988 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.461, 131, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.153, 109, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.07, 101, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.245, 119, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.133, 107, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.153, 109, 58]}]
{'': [nan, 0.21270401164581096]}
{'': [nan, 0.23233456176894615], 'false': [nan, 0.23233456176894615]}
{'': [nan, 0.2266843558392198], 'false': [nan, 0.2266843558392198]}
{'': [nan, 0.2317155175823728], 'false': [nan, 0.2317155175823728]}
{'': [nan, 0.2203070637428581], 'false': [nan, 0.2203070637428581]}
{'': [nan, 0.22795224977043055], 'false': [nan, 0.22795224977043055]}
{'': [nan, 0.22413734140419375], 'false': [nan, 0.22413734140419375]}
{'': [nan, 0.22541227548054904]}
{'': [nan, 0.21712353580485497], 'false': [nan, 0.21712353580485497]}
{'': [nan, 0.22668435583922097], 'false': [nan, 0.22668435583922097]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.427
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360622;  // std dev = 7.45e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10253306324199049;  // std dev = 0.106, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09344054887793528;  // std dev = 0.099, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08505345561336489;  // std dev = 5.05e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07866391361612037;  // std dev = 9.47e-06, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07314833531093587;  // std dev = 8.86e-06, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0683413559397046;  // std dev = 2.36e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06560040295489365;  // std dev = 0.154, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.610', 'seconds']
Refined model CLL: -0.063467


******************************************
Best model found
******************************************
Results 

CLL : -0.065855 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.427 

Total Inference Time : 1.0592248439788818 

Total revision time: 4.061770065307617
Best scored revision CLL: -0.063467


Results 

CLL : -0.065855 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.07866798210144 

Total Inference Time : 1.0592248439788818 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.088
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19023848733831444;  // std dev = 0.471, 536.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5621918322835336;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.0334695531254528;  // std dev = 6.517, 368.000 (wgt'ed) examples reached here.  /* #neg=319 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16766047709060525;  // std dev = 0.164, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.1803302181327278;  // std dev = 9.954, 472.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.42559053949767994;  // std dev = 0.448, 179.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | else return -0.03903089274509932;  // std dev = 6.435, 348.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3952372316689528;  // std dev = 5.247, 164.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=129 */
%   | else return -0.02148827321073447;  // std dev = 6.389, 322.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13898856343739904;  // std dev = 0.038, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.09716878332299501;  // std dev = 8.944, 453.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12260843463475694;  // std dev = 0.249, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.069382457116177;  // std dev = 9.041, 462.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1998789261510763;  // std dev = 5.894, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.05229410016598976;  // std dev = 6.420, 359.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1663359851185236;  // std dev = 5.728, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.029844158327477915;  // std dev = 6.370, 316.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.098398597676118;  // std dev = 3.65e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.030523878020345434;  // std dev = 8.697, 472.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.460', 'seconds']
Parameter learned model CLL:-0.310079 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false': [0.471, 358, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.517, 319, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.164, 52, 0], 'false,false': [9.954, 294, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.448, 50, 129], 'false,false': [6.435, 299, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.247, 35, 129], 'false,false': [6.389, 273, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.038, 48, 0], 'false,false': [8.944, 275, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.249, 56, 0], 'false,false': [9.041, 284, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [1.32e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.894, 48, 129], 'false,false': [6.42, 310, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.728, 44, 129], 'false,false': [6.37, 267, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.65e-08, 50, 0], 'false,false': [8.697, 294, 178]}]
{'': [-1.4802973661668754e-17, 0.22180608153263806], 'true': [-1.4802973661668754e-17, nan]}
{'': [2.523234146875356e-18, 0.21993434896052963], 'false': [0.19764435507038644, 0.11542267249527396], 'true': [2.523234146875356e-18, nan]}
{'': [9.912705577010326e-18, 0.19996512511769302], 'false': [0.0005185599553645648, 0.20992074024990343], 'true': [9.912705577010326e-18, nan]}
{'': [-2.135044278125301e-18, 0.19502023708953567], 'false': [0.20027442020467404, 0.11899454153267346], 'true': [-2.135044278125301e-18, nan]}
{'': [0.0, 0.17945704058769132], 'false': [0.1678688280785262, 0.126757745274383], 'true': [0.0, nan]}
{'': [1.5419764230904951e-18, 0.1646509005916501], 'false': [0.0014791820030464684, 0.17659735756751976], 'true': [1.5419764230904951e-18, nan]}
{'': [1.1564823173178713e-18, 0.1614678775506717], 'false': [0.001110313898924496, 0.1769202388024625], 'true': [1.1564823173178713e-18, nan]}
{'': [1.1564823173178713e-18, 0.15579253115131972], 'false': [0.1962924932242438, 0.1148252388165944], 'true': [1.1564823173178713e-18, nan]}
{'': [9.912705577010326e-19, 0.15888419634819523], 'false': [0.18964883557753334, 0.12842559901018524], 'true': [9.912705577010326e-19, nan]}
{'': [1.3877787807814458e-18, 0.1463478468209077], 'false': [2.6645352591003756e-17, 0.16025874643358], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.331
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.12544463852839186;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360614;  // std dev = 3.33e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.11231637819360667;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.09269127618926046;  // std dev = 1.40e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839685;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.08518475138839678;  // std dev = 7.45e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109172;  // std dev = 1.49e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109176;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.07877675473109146;  // std dev = 6.32e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333707;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.07324622576333682;  // std dev = 1.03e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.0684269778442027;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.06842697784420285;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202626;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.450', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.331 

Total Inference Time : 1.1024301052093506 

Total revision time: 5.556009382247925
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.5729072990417485 

Total Inference Time : 1.1024301052093506 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.649
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18661608838418378;  // std dev = 0.470, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19388066813746768;  // std dev = 5.367, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14877197922715227;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12702174874738797;  // std dev = 5.424, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08210106653804912;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08134366664589228;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05562790506620762;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05689504948214117;  // std dev = 0.474, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04009649770210122;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.012758225626910957;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.316', 'seconds']
Parameter learned model CLL:-0.38545 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.47, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.367, 80, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.424, 85, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.474, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
{'': [nan, 0.22057648249773662]}
{'': [nan, 0.23039999999999933], 'false': [nan, 0.23039999999999933]}
{'': [nan, 0.22551133383835537], 'false': [nan, 0.22551133383835537]}
{'': [nan, 0.226331360946746], 'false': [nan, 0.226331360946746]}
{'': [nan, 0.21893276745509999], 'false': [nan, 0.21893276745509999]}
{'': [nan, 0.22386794052801257], 'false': [nan, 0.22386794052801257]}
{'': [nan, 0.22057648249773548], 'false': [nan, 0.22057648249773548]}
{'': [nan, 0.2246900826446294]}
{'': [nan, 0.22304522165292823], 'false': [nan, 0.22304522165292823]}
{'': [nan, 0.21647490577266332], 'false': [nan, 0.21647490577266332]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.481
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 6.32e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10159632948783613;  // std dev = 5.96e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.28626158688103215;  // std dev = 0.396, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.09269127618926108;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2567862189960354;  // std dev = 0.019, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12218704360373406;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0880365020855009;  // std dev = 0.244, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21089884793375685;  // std dev = 0.017, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11079131055990503;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.07857004883510658;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.11735106034162358;  // std dev = 0.300, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.13883466183295617;  // std dev = 0.101, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.17669534371485826;  // std dev = 4.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.07290197732565368;  // std dev = 0.006, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15478107411151645;  // std dev = 0.028, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11546402656149651;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A) )
%   | | | then return -0.06828045976064577;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.08646863809120162;  // std dev = 0.196, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13559767950036494;  // std dev = 0.025, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10378220298291359;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06368173592889395;  // std dev = 0.009, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12555951131381454;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.791', 'seconds']
Refined model CLL: -0.066129


******************************************
Best model found
******************************************
Results 

CLL : -0.068143 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.481 

Total Inference Time : 0.8808584213256836 

Total revision time: 3.7412804412841796
Best scored revision CLL: -0.066129


Results 

CLL : -0.068143 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.758178358078003 

Total Inference Time : 0.8808584213256836 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.714
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21814893509951241;  // std dev = 0.480, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1555534706983549;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12322519093563544;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10103692405865526;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07923151358795621;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09285431745765418;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.062993090484705;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05297961302659494;  // std dev = 0.470, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.032962214953592396;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03791480681947566;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.210', 'seconds']
Parameter learned model CLL:-0.375866 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.48, 80, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.47, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
{'': [nan, 0.23040000000000088]}
{'': [nan, 0.21975425330812848], 'false': [nan, 0.21975425330812848]}
{'': [nan, 0.2164749057726654], 'false': [nan, 0.2164749057726654]}
{'': [nan, 0.2156584674067186], 'false': [nan, 0.2156584674067186]}
{'': [nan, 0.21403091557669351], 'false': [nan, 0.21403091557669351]}
{'': [nan, 0.22386794052801195], 'false': [nan, 0.22386794052801195]}
{'': [nan, 0.21975425330812956], 'false': [nan, 0.21975425330812956]}
{'': [nan, 0.22057648249773606]}
{'': [nan, 0.21729289271163346], 'false': [nan, 0.21729289271163346]}
{'': [nan, 0.22139922145328852], 'false': [nan, 0.22139922145328852]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.482
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( female(A) )
%   | | | then return 0.5275463194571225;  // std dev = 0.654, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.5263367491402023;  // std dev = 0.653, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.3992583584932079;  // std dev = 0.588, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.3984601160193005;  // std dev = 0.588, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.10258053455095294;  // std dev = 0.074, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.33104881296193983;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.24210743527146428;  // std dev = 0.000301, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09332374925073922;  // std dev = 0.069, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2622137763745469;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.20043111528870766;  // std dev = 0.000322, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08576160030168889;  // std dev = 0.064, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07861771533999404;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2147196220385093;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.17017778103626957;  // std dev = 0.000232, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07310824211606604;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18072736107438486;  // std dev = 0.000997, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14751686619669474;  // std dev = 0.000252, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15549269236896188;  // std dev = 0.000884, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12991305135371178;  // std dev = 0.000278, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06871655258582136;  // std dev = 0.037, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13614936457327168;  // std dev = 0.000792, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1159206624830179;  // std dev = 0.000291, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06443978959229912;  // std dev = 0.035, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.643', 'seconds']
Refined model CLL: -0.066744


******************************************
Best model found
******************************************
Results 

CLL : -0.075825 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.482 

Total Inference Time : 0.8790473937988281 

Total revision time: 3.84311856842041
Best scored revision CLL: -0.066744


Results 

CLL : -0.075825 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.860016485214233 

Total Inference Time : 0.8790473937988281 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.861
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.22178529873587707;  // std dev = 0.481, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.8289515275190188;  // std dev = 2.80e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.17104847248098087;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1481401574590994;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15660236847941883;  // std dev = 4.919, 152.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5773087581489339;  // std dev = 0.249, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.16793744672408908;  // std dev = 0.066, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4070637428523138;  // std dev = 2.328, 62.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   | else return -0.14527828619200375;  // std dev = 0.075, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09880093844225186;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.018953277426239232;  // std dev = 3.672, 179.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09034579956118396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.03701584911217998;  // std dev = 3.456, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2931381190616276;  // std dev = 2.328, 62.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   | else return -0.134141843968152;  // std dev = 0.104, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.27197763217601445;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.11739721930807269;  // std dev = 0.121, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06590863034896335;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.005518395260966742;  // std dev = 2.906, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.439', 'seconds']
Parameter learned model CLL:-0.15448 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false': [0.481, 98, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.8e-07, 0, 56], 'false,false': [0.0, 97, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [5.27e-09, 6, 0], 'false,false': [4.919, 96, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.249, 4, 56], 'false,false': [0.066, 108, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.328, 6, 56], 'false,false': [0.075, 119, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [3.672, 123, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.456, 109, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.328, 6, 56], 'false,false': [0.104, 121, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.121, 95, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [2.906, 111, 56]}]
{'': [0.0, 0.23140495867768615], 'true': [0.0, nan]}
{'': [nan, 0.23204750309709946], 'false': [1.395708945243054e-15, -3.6625914214438153e-17]}
{'': [nan, 0.15654935143190424], 'false': [4.625929269271485e-18, 0.1592022979120929]}
{'': [nan, 0.14976154704059952], 'false': [0.06222222222222159, 4.0253173873893035e-05]}
{'': [nan, 0.09867862456727243], 'false': [0.08740894901144679, 4.709063818986636e-05]}
{'': [0.0, 0.07362955234986664], 'false': [0.0, 0.07530944877382002], 'true': [0.0, nan]}
{'': [0.0, 0.0710402347481966], 'false': [0.0, 0.072378493510432], 'true': [0.0, nan]}
{'': [0.0, 0.07057044363526832], 'false': [0.08740894901144607, 8.875328697761587e-05], 'true': [0.0, nan]}
{'': [nan, 0.054416387558241734], 'false': [0.04826199367997693, 0.0001531762855722891]}
{'': [0.0, 0.049741972378964584], 'false': [-5.782411586589357e-19, 0.05057118226574818], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.267
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 4.71e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839108;  // std dev = 7.88e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360643;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.11231637819360624;  // std dev = 7.45e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0926912761892609;  // std dev = 6.32e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0851847513883969;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109155;  // std dev = 6.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( female(A) )
%   | | | then return 0.19945291311954882;  // std dev = 0.283, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.20013989995374792;  // std dev = 0.284, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.3882634683493425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17855107114556715;  // std dev = 0.000377, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09458071492239328;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333707;  // std dev = 4.59e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15384640506020242;  // std dev = 0.000334, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.08677236632460952;  // std dev = 4.71e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420265;  // std dev = 5.27e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06255661047847272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 2.36e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( female(A) )
%   | | | then return 0.1272298003539076;  // std dev = 0.211, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.13482853716555046;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.456', 'seconds']
Refined model CLL: -0.064776


******************************************
Best model found
******************************************
Results 

CLL : -0.075207 

AUC ROC : 0.999249 

AUC PR : 0.976306 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 1.267 

Total Inference Time : 0.9626178741455078 

Total revision time: 4.057531574249268
Best scored revision CLL: -0.064776


Results 

CLL : -0.075207 

AUC ROC : 0.999249 

AUC PR : 0.976306 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 4.08069775390625 

Total Inference Time : 0.9626178741455078 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.803
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20338703033760877;  // std dev = 0.475, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.723852160745277;  // std dev = 2.499, 65.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=58 */
%   | else return -0.1684555315624155;  // std dev = 1.05e-07, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14615668158626177;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.14418940530957397;  // std dev = 5.313, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5150714088281251;  // std dev = 0.366, 69.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=58 */
%   | else return -0.16335793465704745;  // std dev = 0.079, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4319610513670318;  // std dev = 2.651, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.1404508514487403;  // std dev = 0.106, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.19431551983738726;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.06111640240710693;  // std dev = 3.754, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08246252403984031;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.06354618397858776;  // std dev = 3.585, 159.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2679920834175838;  // std dev = 2.921, 68.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=58 */
%   | else return -0.13741315179693633;  // std dev = 0.179, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.2580547276756203;  // std dev = 2.332, 64.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=58 */
%   | else return -0.11995608342158372;  // std dev = 0.184, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.13460938584944063;  // std dev = 0.630, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.007951331112055642;  // std dev = 2.916, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.418', 'seconds']
Parameter learned model CLL:-0.173105 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 110, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.499, 7, 58], 'false,false': [1.05e-07, 117, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [5.313, 108, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.366, 11, 58], 'false,false': [0.079, 105, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.651, 8, 58], 'false,false': [0.106, 116, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.166, 4, 0], 'false,false': [3.754, 107, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.585, 101, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.921, 10, 58], 'false,false': [0.179, 118, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.332, 6, 58], 'false,false': [0.184, 108, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.63, 13, 0], 'false,false': [2.916, 118, 58]}]
{'': [nan, 0.22604875283446732]}
{'': [nan, 0.21712353580485555], 'false': [0.09609467455621279, 9.489085680556893e-17]}
{'': [0.0, 0.16493383196895858], 'false': [-1.1102230246251566e-17, 0.1700797839464252], 'true': [0.0, nan]}
{'': [nan, 0.16331707171944534], 'false': [0.13400546103759556, 5.95630976244308e-05]}
{'': [nan, 0.11442077018667979], 'false': [0.10651974288337906, 9.609706413065287e-05]}
{'': [nan, 0.08553920259698354], 'false': [0.027594449775325318, 0.08539965247155551]}
{'': [nan, 0.07934464574275168], 'false': [0.0, 0.08081758303458825]}
{'': [0.0, 0.08414781305193435], 'false': [0.12543252595155696, 0.00027043158743220305], 'true': [0.0, nan]}
{'': [nan, 0.06519624380786863], 'false': [0.08496093749999988, 0.0003146519658898857]}
{'': [nan, 0.048374902466149214], 'false': [0.030507102566707987, 0.0482967664512938]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true


Refining candidate
***************************
Model training time 1.572
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839105;  // std dev = 8.30e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 8.30e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783665;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926085;  // std dev = 7.22e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839679;  // std dev = 6.58e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13173848310111722;  // std dev = 0.129, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return -0.07269978617171326;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420264;  // std dev = 5.67e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13561642845015381;  // std dev = 0.009, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.06393564461209982;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06418980678464589;  // std dev = 0.000255, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.454', 'seconds']
Refined model CLL: -0.064697


******************************************
Best model found
******************************************
Results 

CLL : -0.076366 

AUC ROC : 0.998889 

AUC PR : 0.966587 

Precision : 0.800604 

Recall : 0.817901 

F1 : 0.80916 

Total Learning Time : 1.572 

Total Inference Time : 0.9838137626647949 

Total revision time: 4.331401109695435
Best scored revision CLL: -0.064697


Results 

CLL : -0.076366 

AUC ROC : 0.998889 

AUC PR : 0.966587 

Precision : 0.800604 

Recall : 0.817901 

F1 : 0.80916 

Total Learning Time : 4.354567289352417 

Total Inference Time : 0.9838137626647949 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2071685429426457;  // std dev = 0.477, 510.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6081225301296352;  // std dev = 5.362, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.024868256546483024;  // std dev = 6.476, 340.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16729628677991934;  // std dev = 0.106, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.17887297278180478;  // std dev = 9.871, 464.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4412214622627043;  // std dev = 0.433, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.050380867960428344;  // std dev = 6.469, 364.000 (wgt'ed) examples reached here.  /* #neg=315 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.32729986880619855;  // std dev = 5.823, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.030285907596095608;  // std dev = 6.418, 335.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13834981058764673;  // std dev = 0.034, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.09912849111117787;  // std dev = 8.813, 459.000 (wgt'ed) examples reached here.  /* #neg=281 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11878226948938592;  // std dev = 4.94e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.07721824980601001;  // std dev = 8.908, 453.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2342835352542787;  // std dev = 5.449, 168.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=129 */
%   | else return -0.055561342730231916;  // std dev = 6.431, 352.000 (wgt'ed) examples reached here.  /* #neg=303 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2241957827022177;  // std dev = 4.866, 158.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=129 */
%   | else return -0.034878438908788584;  // std dev = 6.375, 334.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10421945267554382;  // std dev = 0.353, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.04328521963896058;  // std dev = 8.369, 442.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.407', 'seconds']
Parameter learned model CLL:-0.319736 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false': [0.477, 332, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.362, 37, 129], 'false,false': [6.476, 291, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.106, 60, 0], 'false,false': [9.871, 286, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 18, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.433, 43, 129], 'false,false': [6.469, 315, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.823, 46, 129], 'false,false': [6.418, 286, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.034, 63, 0], 'false,false': [8.813, 281, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.94e-08, 59, 0], 'false,false': [8.908, 275, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.449, 39, 129], 'false,false': [6.431, 303, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.866, 29, 129], 'false,false': [6.375, 285, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.353, 63, 0], 'false,false': [8.369, 264, 178]}]
{'': [-6.938893903907228e-18, 0.2272049211841628], 'true': [-6.938893903907228e-18, nan]}
{'': [2.523234146875356e-18, 0.22803043322033226], 'false': [0.17321091595296637, 0.12334775086505148], 'true': [2.523234146875356e-18, nan]}
{'': [-1.734723475976807e-18, 0.198130458640831], 'false': [0.00018566379867823352, 0.21000541454783542], 'true': [-1.734723475976807e-18, nan]}
{'': [-9.25185853854297e-18, 0.19090347568256813], 'false': [0.18750000000000294, 0.11495997565006459], 'true': [-9.25185853854297e-18, nan]}
{'': [2.3129646346357427e-18, 0.17608620833363586], 'false': [0.19376326530612323, 0.12297579187993217], 'true': [2.3129646346357427e-18, nan]}
{'': [2.3129646346357427e-18, 0.15491559938208113], 'false': [0.0011492808231980815, 0.16921437335309095], 'true': [2.3129646346357427e-18, nan]}
{'': [-1.8503717077085942e-18, 0.15890513265331538], 'false': [4.139814668093804e-17, 0.17517451892597072], 'true': [-1.8503717077085942e-18, nan]}
{'': [6.938893903907229e-19, 0.15500723433257887], 'false': [0.1767321268511405, 0.11749682610483467], 'true': [6.938893903907229e-19, nan]}
{'': [5.337610695313253e-19, 0.14535685793863135], 'false': [0.14985579234097057, 0.12167399864713659], 'true': [5.337610695313253e-19, nan]}
{'': [2.523234146875356e-18, 0.14132345324874726], 'false': [0.0019800069680804807, 0.15847030520097594], 'true': [2.523234146875356e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.292
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1418510649004877;  // std dev = 4.71e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.141851064900488;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839133;  // std dev = 2.79e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, D) )
%   | then return -0.1123163781936062;  // std dev = 3.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360615;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.1123163781936068;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783621;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.09269127618926042;  // std dev = 1.67e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.0851847513883968;  // std dev = 1.97e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.08518475138839678;  // std dev = 7.60e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109172;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.07877675473109146;  // std dev = 6.50e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.07324622576333682;  // std dev = 1.03e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.24e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.0684269778442029;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.492', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.292 

Total Inference Time : 1.1059341430664062 

Total revision time: 5.495649930953979
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.5188161106109614 

Total Inference Time : 1.1059341430664062 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.675
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17283424978482695;  // std dev = 0.464, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7732810049466324;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else return -0.16421899505336718;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.14290303356462977;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.11515844640900325;  // std dev = 4.767, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5767172701013309;  // std dev = 0.300, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.154748627886084;  // std dev = 0.084, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3894705045540537;  // std dev = 2.606, 53.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=45 */
%   | else return -0.1350160423414254;  // std dev = 0.079, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09761126864549576;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.06034301371130376;  // std dev = 3.250, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08934460317782536;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.04944037396319118;  // std dev = 3.300, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.281863502902839;  // std dev = 2.461, 52.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=45 */
%   | else return -0.13192566518193471;  // std dev = 0.114, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.26835161366451127;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.11658399467853833;  // std dev = 0.121, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06540479164738132;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.022200039603662243;  // std dev = 3.125, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.506', 'seconds']
Parameter learned model CLL:-0.179556 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false': [0.464, 98, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.677, 3, 45], 'false,false': [0.0, 83, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [4.767, 98, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.3, 5, 45], 'false,false': [0.084, 88, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.606, 8, 45], 'false,false': [0.079, 81, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.86e-09, 9, 0], 'false,false': [3.25, 87, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [6.45e-09, 10, 0], 'false,false': [3.3, 83, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.461, 7, 45], 'false,false': [0.114, 82, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.121, 86, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [3.125, 94, 45]}]
{'': [0.0, 0.2156584674067201], 'true': [0.0, nan]}
{'': [nan, 0.22551133383835373], 'false': [0.05859375000000111, -3.7453306854824555e-17]}
{'': [nan, 0.15445125725948855], 'false': [0.0, 0.1589040076999937]}
{'': [nan, 0.15627866176113236], 'false': [0.0899999999999995, 8.106480051331159e-05]}
{'': [0.0, 0.11650541480323698], 'false': [0.12815948736205102, 7.718436217835832e-05], 'true': [0.0, nan]}
{'': [nan, 0.07640051870534596], 'false': [3.0839528461809902e-18, 0.08001712017337952]}
{'': [nan, 0.0802191132584065], 'false': [4.163336342344337e-18, 0.08509048728751425]}
{'': [nan, 0.0859642276783708], 'false': [0.11649408284023635, 0.00015967700219238077]}
{'': [0.0, 0.061579834671494874], 'false': [0.07496876301541015, 0.00016906880527542604], 'true': [0.0, nan]}
{'': [0.0, 0.06882731644179876], 'false': [0.0, 0.07027336181135783], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.37
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(B) )
%   | then return -0.11231637819360622;  // std dev = 6.83e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.399630796683461;  // std dev = 0.104, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783621;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.32366478096090856;  // std dev = 0.011, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.09269127618926098;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.08518475138839683;  // std dev = 4.21e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.25718690992907794;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07931481564380147;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(B) )
%   | then return -0.0787767547310916;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21118029090938809;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17813947216396606;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324144392668837;  // std dev = 0.000113, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0745400561004942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15353478693843514;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842442510138858;  // std dev = 8.69e-05, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.16964705100872712;  // std dev = 0.142, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(A, D) )
%   | then return -0.06415996606202022;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.06419228068077457;  // std dev = 1.67e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1346243227668643;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.532', 'seconds']
Refined model CLL: -0.064282


******************************************
Best model found
******************************************
Results 

CLL : -0.070418 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 1.37 

Total Inference Time : 0.8002197742462158 

Total revision time: 3.616730375289917
Best scored revision CLL: -0.064282


Results 

CLL : -0.070418 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 3.6398965549468993 

Total Inference Time : 0.8002197742462158 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.767
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19148226843284566;  // std dev = 0.471, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.833205491231549;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.07505138950239659;  // std dev = 3.014, 109.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.15662343663381326;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.12550571744441255;  // std dev = 4.898, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5780194933037763;  // std dev = 0.270, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | else return -0.06671964896277877;  // std dev = 2.986, 95.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5179390541651069;  // std dev = 5.96e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.07032322274391412;  // std dev = 3.008, 108.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.12161385137206991;  // std dev = 1.32e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.05179374777191611;  // std dev = 3.911, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.10920871533015268;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.05831130949217824;  // std dev = 3.803, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.31035988623042293;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.05818769613161013;  // std dev = 2.980, 90.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.24190467377871772;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.05111614755938758;  // std dev = 2.980, 92.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08969523206833573;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.060124294346178456;  // std dev = 3.241, 112.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.448', 'seconds']
Parameter learned model CLL:-0.215167 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false': [0.471, 90, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 35], 'false,false': [3.014, 99, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [5.27e-09, 7, 0], 'false,false': [4.898, 92, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.27, 3, 35], 'false,false': [2.986, 85, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [5.96e-08, 0, 35], 'false,false': [3.008, 98, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.32e-09, 7, 0], 'false,false': [3.911, 89, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [3.803, 82, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.98, 80, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.98, 82, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [3.241, 67, 45]}]
{'': [0.0, 0.22222222222222313], 'true': [0.0, nan]}
{'': [nan, 0.21484374999999928], 'false': [-1.3195793664116147e-15, 0.08332631933338921]}
{'': [nan, 0.1703007819060705], 'false': [3.96508223080413e-18, 0.17513298992630777]}
{'': [nan, 0.17263993881787376], 'false': [0.07271468144044317, 0.09384188132009766]}
{'': [nan, 0.12723623133886183], 'false': [1.0150610510858574e-16, 0.08377202928821459]}
{'': [nan, 0.10988888919671114], 'false': [3.96508223080413e-18, 0.11413650697556195]}
{'': [nan, 0.11256432127139421], 'false': [0.0, 0.11390190311684592]}
{'': [nan, 0.11284598165584539], 'false': [0.051132213294375596, 0.09864545850470235]}
{'': [nan, 0.10108262686743336], 'false': [0.05113221329437539, 0.09654452383989835]}
{'': [nan, 0.09250141112789653], 'false': [0.0, 0.0937594344883496]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.57
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.14185106490048766;  // std dev = 8.02e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.6750040411194098;  // std dev = 0.189, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( actor(B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( female(A) )
%   | | then return 0.598770833533905;  // std dev = 0.296, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.11231637819360622;  // std dev = 6.23e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( female(A) )
%   | | then return 0.5630809019565761;  // std dev = 0.062, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.5298992992244191;  // std dev = 0.162, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783615;  // std dev = 5.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.42789119316541374;  // std dev = 0.072, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.33139643185776635;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32554665936674254;  // std dev = 0.050, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.26324664510380563;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.343464758133134;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20635176882135506;  // std dev = 0.526, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.09348002430583456;  // std dev = 0.066, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.10055351462273542;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.08512330568831696;  // std dev = 5.96e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.26206930675867507;  // std dev = 0.065, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.2492806907907209;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07761213994694444;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( actor(B) )
%   | then return -0.07872398985088293;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0.2146379669057342;  // std dev = 0.056, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07316637504457867;  // std dev = 0.002, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.18068026783103863;  // std dev = 0.050, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.2509389993771937;  // std dev = 0.127, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06832431992093702;  // std dev = 0.002, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.155465359202752;  // std dev = 0.044, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.21757798480358356;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06330788324620838;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.06416228962952529;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13613376415400355;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.18102081882299048;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.508', 'seconds']
Refined model CLL: -0.068471


******************************************
Best model found
******************************************
Results 

CLL : -0.077336 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 1.57 

Total Inference Time : 0.8404295444488525 

Total revision time: 3.9769037837982175
Best scored revision CLL: -0.068471


Results 

CLL : -0.077336 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 4.0000699634552 

Total Inference Time : 0.8404295444488525 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.706
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16926004621062452;  // std dev = 0.463, 180.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17362037740413722;  // std dev = 6.092, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17472808976257817;  // std dev = 5.970, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13505784323358785;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08843532379277355;  // std dev = 6.128, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09468121432455283;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04580442535643229;  // std dev = 6.163, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07600889050467559;  // std dev = 0.480, 155.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0189712401836074;  // std dev = 6.171, 175.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05860085248158625;  // std dev = 5.970, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.105', 'seconds']
Parameter learned model CLL:-0.394869 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.463, 124, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.092, 110, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.97, 98, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.128, 114, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.163, 118, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.48, 99, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.171, 119, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.97, 98, 56]}]
{'': [nan, 0.21432098765432142]}
{'': [nan, 0.22354478153577959], 'false': [nan, 0.22354478153577959]}
{'': [nan, 0.23140495867768723], 'false': [nan, 0.23140495867768723]}
{'': [nan, 0.22815553182231887], 'false': [nan, 0.22815553182231887]}
{'': [nan, 0.22089965397923902], 'false': [nan, 0.22089965397923902]}
{'': [nan, 0.22815553182231646], 'false': [nan, 0.22815553182231646]}
{'': [nan, 0.2182586867485815], 'false': [nan, 0.2182586867485815]}
{'': [nan, 0.23075962539021933]}
{'': [nan, 0.21759999999999954], 'false': [nan, 0.21759999999999954]}
{'': [nan, 0.23140495867768657], 'false': [nan, 0.23140495867768657]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.489
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( female(A) )
%   | | | then return 0.689297767541692;  // std dev = 0.830, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 7.60e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5589528166351133;  // std dev = 0.028, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.22620333986164798;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.3819518099696463;  // std dev = 0.832, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.41664164982325913;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.10250065315338029;  // std dev = 0.088, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09261525093578682;  // std dev = 1.05e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32700536823479387;  // std dev = 0.053, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2577605978006825;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851202256675006;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( female(A) )
%   | | | then return 0.26593284583405813;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.23781838720310303;  // std dev = 0.461, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0787213448292958;  // std dev = 5.27e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2141271656050912;  // std dev = 0.023, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2565345897969682;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07319815576910198;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( female(A) )
%   | | then return 0.16918968262566628;  // std dev = 0.072, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.16466245023800866;  // std dev = 0.070, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06838489965285711;  // std dev = 4.21e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1569360046697499;  // std dev = 0.016, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2416318452400681;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06415471316342655;  // std dev = 4.47e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( female(A) )
%   | | | then return 0.13924890055650033;  // std dev = 2.11e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.12424541728416592;  // std dev = 0.330, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.442', 'seconds']
Refined model CLL: -0.070411


******************************************
Best model found
******************************************
Results 

CLL : -0.091334 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.489 

Total Inference Time : 0.9946980476379395 

Total revision time: 4.057459421157837
Best scored revision CLL: -0.070411


Results 

CLL : -0.091334 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.077928371429444 

Total Inference Time : 0.9946980476379395 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.801
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20338703033760883;  // std dev = 0.475, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16487780177091807;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13671698560282544;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13023345264598726;  // std dev = 6.162, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1292896453395685;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10506845233522664;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03938405407579584;  // std dev = 6.270, 180.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0463145795038814;  // std dev = 0.473, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05748474311689859;  // std dev = 6.102, 162.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03663668810940829;  // std dev = 6.143, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.214', 'seconds']
Parameter learned model CLL:-0.399183 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 110, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.162, 110, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 122, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 114, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.102, 104, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.143, 108, 58]}]
{'': [nan, 0.22604875283446732]}
{'': [nan, 0.22222222222222332], 'false': [nan, 0.22222222222222332]}
{'': [nan, 0.22094524793388431], 'false': [nan, 0.22094524793388431]}
{'': [nan, 0.22604875283446604], 'false': [nan, 0.22604875283446604]}
{'': [nan, 0.2323345617689479], 'false': [nan, 0.2323345617689479]}
{'': [nan, 0.23233456176894798], 'false': [nan, 0.23233456176894798]}
{'': [nan, 0.2183950617283948], 'false': [nan, 0.2183950617283948]}
{'': [nan, 0.22349918875067631]}
{'': [nan, 0.22984301173601537], 'false': [nan, 0.22984301173601537]}
{'': [nan, 0.2273189142110612], 'false': [nan, 0.2273189142110612]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.549
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11518118151308995;  // std dev = 0.331, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10133514423529442;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09247254502493459;  // std dev = 6.14e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0849990849491612;  // std dev = 3.33e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07861730292649072;  // std dev = 5.48e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.07310788425740196;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.20985532265284182;  // std dev = 0.335, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06830587130737163;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06402193737950829;  // std dev = 0.008, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.480', 'seconds']
Refined model CLL: -0.063926


******************************************
Best model found
******************************************
Results 

CLL : -0.069609 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.549 

Total Inference Time : 1.0718817710876465 

Total revision time: 4.3065191268920895
Best scored revision CLL: -0.063926


Results 

CLL : -0.069609 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.326988077163696 

Total Inference Time : 1.0718817710876465 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.112
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19527014722072042;  // std dev = 0.473, 528.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5453855918825081;  // std dev = 6.088, 181.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=129 */
%   | else return -0.03196247441583234;  // std dev = 6.509, 362.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16586936413375614;  // std dev = 0.132, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0.17163863724288753;  // std dev = 10.034, 486.000 (wgt'ed) examples reached here.  /* #neg=308 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.49023464882237;  // std dev = 0.413, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.04490548818348588;  // std dev = 6.464, 359.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3808413019267623;  // std dev = 5.283, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.030862202516228822;  // std dev = 6.434, 342.000 (wgt'ed) examples reached here.  /* #neg=293 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13817685253257808;  // std dev = 0.039, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.10387106388993346;  // std dev = 8.716, 455.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11748073721265878;  // std dev = 3.65e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.08770278307915175;  // std dev = 8.723, 443.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.25267145926558926;  // std dev = 5.126, 162.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=129 */
%   | else return -0.05811874130445902;  // std dev = 6.440, 372.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.15465847610811884;  // std dev = 5.555, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.047553390294754055;  // std dev = 6.433, 368.000 (wgt'ed) examples reached here.  /* #neg=319 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09624518951820017;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.014172150837907913;  // std dev = 8.842, 477.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.473', 'seconds']
Parameter learned model CLL:-0.310802 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 350, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.088, 52, 129], 'false,false': [6.509, 313, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.86e-09, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.132, 64, 0], 'false,false': [10.034, 308, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.413, 36, 129], 'false,false': [6.464, 310, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.283, 36, 129], 'false,false': [6.434, 293, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.039, 50, 0], 'false,false': [8.716, 277, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.65e-08, 51, 0], 'false,false': [8.723, 265, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.126, 33, 129], 'false,false': [6.44, 323, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.555, 41, 129], 'false,false': [6.433, 319, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.83e-08, 60, 0], 'false,false': [8.842, 299, 178]}]
{'': [-9.25185853854297e-18, 0.22347050045913963], 'true': [-9.25185853854297e-18, nan]}
{'': [2.523234146875356e-18, 0.22035007749729912], 'false': [0.20475565458930095, 0.11703702573181511], 'true': [2.523234146875356e-18, nan]}
{'': [0.0, 0.1947878076499689], 'false': [0.00027045892604344104, 0.2071480870461078], 'true': [0.0, nan]}
{'': [0.0, 0.19523497776662938], 'false': [0.17057851239669655, 0.11639201316486189], 'true': [0.0, nan]}
{'': [0.0, 0.1739259459665659], 'false': [0.16917614318190316, 0.12105486863113535], 'true': [0.0, nan]}
{'': [1.734723475976807e-18, 0.1558021159251169], 'false': [0.0015344294028958583, 0.16695389668770716], 'true': [1.734723475976807e-18, nan]}
{'': [-9.912705577010326e-19, 0.15792763759746006], 'false': [2.6122894697062506e-17, 0.1717625383175427], 'true': [-9.912705577010326e-19, nan]}
{'': [9.912705577010326e-19, 0.14727674948379782], 'false': [0.16220850480109644, 0.11147146012731177], 'true': [9.912705577010326e-19, nan]}
{'': [9.912705577010326e-19, 0.14311104622304435], 'false': [0.18150090680777012, 0.11245608188477935], 'true': [9.912705577010326e-19, nan]}
{'': [0.0, 0.1468032980578482], 'false': [5.551115123125783e-18, 0.1639068882993685], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.398
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1418510649004877;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839116;  // std dev = 2.58e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.1254446385283918;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360618;  // std dev = 3.49e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360632;  // std dev = 2.36e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.11231637819360658;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.09269127618926068;  // std dev = 7.88e-08, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.0851847513883968;  // std dev = 7.45e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.08518475138839678;  // std dev = 8.16e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109169;  // std dev = 2.11e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109175;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.07877675473109147;  // std dev = 7.15e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.07324622576333681;  // std dev = 9.88e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420262;  // std dev = 1.83e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.06842697784420282;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.776', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.398 

Total Inference Time : 1.1307811737060547 

Total revision time: 5.677762517929077
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.698231468200683 

Total Inference Time : 1.1307811737060547 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.639
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21529179224236955;  // std dev = 0.479, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16569117739033787;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11340344961107178;  // std dev = 5.579, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09290067251019529;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05740281869331534;  // std dev = 5.666, 157.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09882535415962562;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06575920796423043;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08079370378013044;  // std dev = 0.477, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02333103914568893;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04152152937617378;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.286', 'seconds']
Parameter learned model CLL:-0.376984 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.479, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.579, 101, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.666, 112, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
{'': [nan, 0.2295918367346948]}
{'': [nan, 0.22304522165292895], 'false': [nan, 0.22304522165292895]}
{'': [nan, 0.2132201163445295], 'false': [nan, 0.2132201163445295]}
{'': [nan, 0.2124114952103289], 'false': [nan, 0.2124114952103289]}
{'': [nan, 0.2044707696052589], 'false': [nan, 0.2044707696052589]}
{'': [nan, 0.2238679405280112], 'false': [nan, 0.2238679405280112]}
{'': [nan, 0.2189327674551007], 'false': [nan, 0.2189327674551007]}
{'': [nan, 0.22796630859374983]}
{'': [nan, 0.21403091557669418], 'false': [nan, 0.21403091557669418]}
{'': [nan, 0.22222222222222232], 'false': [nan, 0.22222222222222232]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.411
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8295775065280829;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.14185106490048768;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7238029642622229;  // std dev = 0.017, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.27551258449437854;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5596216259491705;  // std dev = 0.020, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.22340458937638266;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11214835021603403;  // std dev = 0.014, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10161166718676465;  // std dev = 4.83e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42068206093329635;  // std dev = 0.020, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1880170928162328;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09270411817979961;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3228638891111307;  // std dev = 0.018, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1616690144033133;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25664204020337966;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.13998409023197916;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08495445929065969;  // std dev = 0.021, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2107965637547434;  // std dev = 0.014, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12388702455429138;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.07857134304373391;  // std dev = 0.019, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.0732853045354487;  // std dev = 1.05e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17785878897292856;  // std dev = 0.012, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11077030050764745;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1533223623704497;  // std dev = 0.011, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10061043883470089;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.06801672291699011;  // std dev = 0.026, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1344588250329768;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09249997112534429;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06407772270388876;  // std dev = 0.018, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.716', 'seconds']
Refined model CLL: -0.066058


******************************************
Best model found
******************************************
Results 

CLL : -0.068881 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.411 

Total Inference Time : 0.9134945869445801 

Total revision time: 3.7092607498168944
Best scored revision CLL: -0.066058


Results 

CLL : -0.068881 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.729729700088501 

Total Inference Time : 0.9134945869445801 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.648
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18423589162125137;  // std dev = 0.469, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1445549474133289;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16757181163663673;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15834733296062878;  // std dev = 5.316, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1568796564710671;  // std dev = 5.204, 113.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0502023957753024;  // std dev = 5.526, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07588038957668136;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03648005520563778;  // std dev = 0.471, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03129708992314956;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.019689912877577428;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.168', 'seconds']
Parameter learned model CLL:-0.395441 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.316, 76, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.204, 68, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.526, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
{'': [nan, 0.21975425330812953]}
{'': [nan, 0.2140309155766958], 'false': [nan, 0.2140309155766958]}
{'': [nan, 0.22878045756091467], 'false': [nan, 0.22878045756091467]}
{'': [nan, 0.2335906017348541], 'false': [nan, 0.2335906017348541]}
{'': [nan, 0.2396428851123805], 'false': [nan, 0.2396428851123805]}
{'': [nan, 0.2181122448979592], 'false': [nan, 0.2181122448979592]}
{'': [nan, 0.22959183673469488], 'false': [nan, 0.22959183673469488]}
{'': [nan, 0.22222222222222168]}
{'': [nan, 0.22304522165292942], 'false': [nan, 0.22304522165292942]}
{'': [nan, 0.22139922145328655], 'false': [nan, 0.22139922145328655]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.481
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360622;  // std dev = 6.83e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926104;  // std dev = 2.79e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14652771257609323;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.05e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1291352689757512;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1152948690182349;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10404596413741515;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07710815171759036;  // std dev = 0.392, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06818121035718207;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09473859223841931;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06397495496757787;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08691955874622977;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.503', 'seconds']
Refined model CLL: -0.065391


******************************************
Best model found
******************************************
Results 

CLL : -0.072326 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.481 

Total Inference Time : 0.8330910205841064 

Total revision time: 3.706428817749024
Best scored revision CLL: -0.065391


Results 

CLL : -0.072326 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.7268977680206303 

Total Inference Time : 0.8330910205841064 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.769
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18184835706483143;  // std dev = 0.468, 173.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17809834322056592;  // std dev = 6.063, 163.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1768839577005219;  // std dev = 5.947, 152.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12103462448623313;  // std dev = 6.073, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07991044054698246;  // std dev = 6.163, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08046477560939563;  // std dev = 6.092, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07965845819110351;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.027765256997048512;  // std dev = 0.465, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03313246342966636;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.030079535887502243;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.176', 'seconds']
Parameter learned model CLL:-0.381168 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.468, 117, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.063, 107, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.947, 96, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.073, 108, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.163, 118, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.092, 110, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 121, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.119, 113, 56]}]
{'': [nan, 0.21891810618463733]}
{'': [nan, 0.22552598893447318], 'false': [nan, 0.22552598893447318]}
{'': [nan, 0.23268698060941825], 'false': [nan, 0.23268698060941825]}
{'': [nan, 0.22486615110053376], 'false': [nan, 0.22486615110053376]}
{'': [nan, 0.21825868674857893], 'false': [nan, 0.21825868674857893]}
{'': [nan, 0.22354478153578095], 'false': [nan, 0.22354478153578095]}
{'': [nan, 0.22815553182231668], 'false': [nan, 0.22815553182231668]}
{'': [nan, 0.21628523093619426]}
{'': [nan, 0.2202387059266103], 'false': [nan, 0.2202387059266103]}
{'': [nan, 0.22156086971744804], 'false': [nan, 0.22156086971744804]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.566
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( female(A) )
%   | | | then return 0.689297767541692;  // std dev = 0.830, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5347668786476982;  // std dev = 0.771, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.11334496676824073;  // std dev = 0.115, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42349099203736157;  // std dev = 0.046, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.3354044730768688;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10248149199540815;  // std dev = 0.106, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09253045588853402;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3247809629753869;  // std dev = 0.042, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2625543930636001;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08504824774843216;  // std dev = 4.71e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25795513000971176;  // std dev = 0.036, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.21643702028287964;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07865952887501672;  // std dev = 2.11e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21172655997713527;  // std dev = 0.032, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1801880681854763;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07314452324407482;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1785423461845568;  // std dev = 0.028, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15508700693250455;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06833794837769004;  // std dev = 4.71e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( female(A) )
%   | | | then return 0.14686989632899342;  // std dev = 0.286, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.15065349450459828;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1354552036532353;  // std dev = 0.024, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.15716465963308576;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A) )
%   | | | then return -0.06411328350598948;  // std dev = 4.59e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return -0.11033187475458896;  // std dev = 0.577, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.417', 'seconds']
Refined model CLL: -0.066887


******************************************
Best model found
******************************************
Results 

CLL : -0.081912 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.566 

Total Inference Time : 0.9714963436126709 

Total revision time: 4.159251890182495
Best scored revision CLL: -0.066887


Results 

CLL : -0.081912 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 30.395153245925904 

Total Inference Time : 0.9714963436126709 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.695
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20134420137170295;  // std dev = 0.475, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15585277696608024;  // std dev = 6.262, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13291068651395838;  // std dev = 6.262, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11151748546291242;  // std dev = 6.262, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10741683868760984;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11334195260823436;  // std dev = 6.070, 159.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06384423652599545;  // std dev = 6.200, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05696663993857862;  // std dev = 0.475, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06449273340138281;  // std dev = 6.081, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.033565737565899145;  // std dev = 6.162, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.206', 'seconds']
Parameter learned model CLL:-0.396715 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.262, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.262, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.262, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.07, 101, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.2, 114, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.081, 102, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.162, 110, 58]}]
{'': [nan, 0.22541227548055062]}
{'': [nan, 0.2190318654224265], 'false': [nan, 0.2190318654224265]}
{'': [nan, 0.21903186542242584], 'false': [nan, 0.21903186542242584]}
{'': [nan, 0.21903186542242722], 'false': [nan, 0.21903186542242722]}
{'': [nan, 0.22413734140419322], 'false': [nan, 0.22413734140419322]}
{'': [nan, 0.23171551758237416], 'false': [nan, 0.23171551758237416]}
{'': [nan, 0.22349918875067612], 'false': [nan, 0.22349918875067612]}
{'': [nan, 0.22541227548055126]}
{'': [nan, 0.23109375000000085], 'false': [nan, 0.23109375000000085]}
{'': [nan, 0.2260487528344674], 'false': [nan, 0.2260487528344674]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.514
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783638;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09422619281752986;  // std dev = 0.157, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.0850652140640016;  // std dev = 2.36e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07867410048990843;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07315710780544911;  // std dev = 6.93e-06, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06974504444074968;  // std dev = 0.174, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0640392750021787;  // std dev = 6.13e-06, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.630', 'seconds']
Refined model CLL: -0.063499


******************************************
Best model found
******************************************
Results 

CLL : -0.066024 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.514 

Total Inference Time : 1.0007708072662354 

Total revision time: 4.091997512817382
Best scored revision CLL: -0.063499


Results 

CLL : -0.066024 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 30.32789886856079 

Total Inference Time : 1.0007708072662354 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.137
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19273540126492195;  // std dev = 0.472, 532.000 (wgt'ed) examples reached here.  /* #neg=354 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5618448248200125;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.027764189047477416;  // std dev = 6.495, 352.000 (wgt'ed) examples reached here.  /* #neg=303 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16481440709359707;  // std dev = 0.096, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.19368800772744882;  // std dev = 9.835, 454.000 (wgt'ed) examples reached here.  /* #neg=276 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4388664090222184;  // std dev = 0.439, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.04632327311912015;  // std dev = 6.452, 357.000 (wgt'ed) examples reached here.  /* #neg=308 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3995903301324931;  // std dev = 5.090, 162.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=129 */
%   | else return -0.03003870530941997;  // std dev = 6.419, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13282536354119942;  // std dev = 7.21e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.08050220463186257;  // std dev = 9.041, 472.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12295260338095448;  // std dev = 0.256, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.061255541184106574;  // std dev = 9.033, 481.000 (wgt'ed) examples reached here.  /* #neg=303 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.22006310313193855;  // std dev = 5.636, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.0473652002854889;  // std dev = 6.410, 356.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.13845420096411976;  // std dev = 5.959, 178.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=129 */
%   | else return -0.038462576384023436;  // std dev = 6.404, 351.000 (wgt'ed) examples reached here.  /* #neg=302 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10384006706221773;  // std dev = 0.332, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.0547036602146691;  // std dev = 8.385, 447.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.689', 'seconds']
Parameter learned model CLL:-0.311601 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false': [0.472, 354, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.495, 303, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.096, 58, 0], 'false,false': [9.835, 276, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.439, 46, 129], 'false,false': [6.452, 308, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.09, 33, 129], 'false,false': [6.419, 283, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [7.45e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [7.21e-09, 51, 0], 'false,false': [9.041, 294, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.256, 55, 0], 'false,false': [9.033, 303, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.636, 43, 129], 'false,false': [6.41, 307, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.959, 49, 129], 'false,false': [6.404, 302, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.332, 59, 0], 'false,false': [8.385, 269, 178]}]
{'': [-6.938893903907228e-18, 0.2226383628243569], 'true': [-6.938893903907228e-18, nan]}
{'': [2.523234146875356e-18, 0.22326249548851165], 'false': [0.1976443550703806, 0.11982663997933617], 'true': [2.523234146875356e-18, nan]}
{'': [-1.5419764230904951e-18, 0.2018497700857859], 'false': [0.00015930546202232117, 0.21305703604800594], 'true': [-1.5419764230904951e-18, nan]}
{'': [-5.551115123125783e-18, 0.1935866813983924], 'false': [0.19264820700433924, 0.1166095377159293], 'true': [-5.551115123125783e-18, nan]}
{'': [0.0, 0.1765382683226044], 'false': [0.1599112237415214, 0.1241208179907163], 'true': [0.0, nan]}
{'': [4.270088556250602e-18, 0.16028645292159474], 'false': [5.659960517696876e-17, 0.17316779388012057], 'true': [4.270088556250602e-18, nan]}
{'': [1.1564823173178713e-18, 0.15549235175146847], 'false': [0.0011901073928076468, 0.1696541654427374], 'true': [1.1564823173178713e-18, nan]}
{'': [9.251858538542971e-19, 0.1536941052937636], 'false': [0.1846796423055076, 0.11542606803708476], 'true': [9.251858538542971e-19, nan]}
{'': [9.912705577010326e-19, 0.15165045533451332], 'false': [0.19950132559020342, 0.11685240770012631], 'true': [9.912705577010326e-19, nan]}
{'': [2.523234146875356e-18, 0.14176392881079386], 'false': [0.001869665328104273, 0.1572978290405293], 'true': [2.523234146875356e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.505
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.12544463852839188;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360617;  // std dev = 3.33e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360617;  // std dev = 3.33e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.11231637819360675;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783616;  // std dev = 4.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.09269127618926065;  // std dev = 8.16e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.0851847513883968;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.08518475138839678;  // std dev = 8.69e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 1.49e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.07877675473109148;  // std dev = 6.66e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.07324622576333685;  // std dev = 9.19e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.0684269778442027;  // std dev = 1.67e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return -0.06842697784420305;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.06419184008202625;  // std dev = 2.36e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.524', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.505 

Total Inference Time : 1.1269235610961914 

Total revision time: 5.841707508087158
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 32.07760886383056 

Total Inference Time : 1.1269235610961914 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.721
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21814893509951255;  // std dev = 0.480, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.711819455353086;  // std dev = 2.301, 51.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=45 */
%   | else return -0.1705334858233854;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.147746688840993;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.14971287193139698;  // std dev = 4.671, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5726772014019681;  // std dev = 0.300, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.16432598650026878;  // std dev = 0.095, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4368434820987209;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.1442708414200835;  // std dev = 0.065, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09896943926918399;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.043716002378187895;  // std dev = 3.275, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09048746010987484;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.03714300330977718;  // std dev = 3.291, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3659731021111489;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return -0.13214785050611447;  // std dev = 0.179, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.17292859885549772;  // std dev = 2.606, 53.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=45 */
%   | else return -0.11926740351636546;  // std dev = 0.106, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06601365393672308;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.00939016048221132;  // std dev = 2.877, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.528', 'seconds']
Parameter learned model CLL:-0.183879 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0], 'false': [0.48, 80, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.301, 6, 45], 'false,false': [0.0, 94, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [4.671, 80, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.3, 5, 45], 'false,false': [0.095, 80, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.121, 5, 45], 'false,false': [0.065, 81, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [3.275, 90, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [3.291, 87, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.384, 2, 45], 'false,false': [0.179, 109, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.606, 8, 45], 'false,false': [0.106, 63, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [2.877, 90, 45]}]
{'': [0.0, 0.23040000000000072], 'true': [0.0, nan]}
{'': [nan, 0.21403091557669437], 'false': [0.10380622837370122, -9.448706592554524e-18]}
{'': [0.0, 0.16700228967273095], 'false': [-1.2616170734376778e-17, 0.17454184341949056], 'true': [0.0, nan]}
{'': [nan, 0.16324635740677274], 'false': [0.0900000000000012, 0.0001123696405966712]}
{'': [0.0, 0.11407919290081718], 'false': [0.08999999999999997, 5.210710829460799e-05], 'true': [0.0, nan]}
{'': [nan, 0.07609852190914702], 'false': [0.0, 0.07946909134635553]}
{'': [0.0, 0.07913930078005521], 'false': [-2.3129646346357427e-18, 0.08202830106405033], 'true': [0.0, nan]}
{'': [0.0, 0.06471409544764334], 'false': [0.040742417383431276, 0.00029505374701281937], 'true': [0.0, nan]}
{'': [nan, 0.07983859224268923], 'false': [0.12815948736205068, 0.00017853649706224924]}
{'': [0.0, 0.05728867944628551], 'false': [-3.469446951953614e-18, 0.06131116670974774], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.38
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12749544182490344;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12702805606593476;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 5.87e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11211207272187278;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1029489388751396;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.10159632948783621;  // std dev = 5.27e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.09242258288420264;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2.98e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08495666660503666;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109162;  // std dev = 4.71e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07858086715953352;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09598472543338159;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07307626734468584;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07324622576333706;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06827818946617471;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420265;  // std dev = 4.15e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06406054775683974;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.480', 'seconds']
Refined model CLL: -0.064614


******************************************
Best model found
******************************************
Results 

CLL : -0.071041 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 1.38 

Total Inference Time : 0.8277757167816162 

Total revision time: 3.722677875518799
Best scored revision CLL: -0.064614


Results 

CLL : -0.071041 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 29.958579231262206 

Total Inference Time : 0.8277757167816162 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.662
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19649479976116643;  // std dev = 0.473, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14719302991716773;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1150220367836928;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17405795557332368;  // std dev = 5.276, 118.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1284980130886337;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07951477941673467;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04905244239145797;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05918816940667657;  // std dev = 0.476, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09550926437677579;  // std dev = 5.219, 114.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.015576637867307078;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.287', 'seconds']
Parameter learned model CLL:-0.396565 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.276, 73, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.476, 85, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.219, 69, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
{'': [nan, 0.2238679405280127]}
{'': [nan, 0.21565846740671843], 'false': [nan, 0.21565846740671843]}
{'': [nan, 0.2116051862673484], 'false': [nan, 0.2116051862673484]}
{'': [nan, 0.23592358517667417], 'false': [nan, 0.23592358517667417]}
{'': [nan, 0.23200475907198045], 'false': [nan, 0.23200475907198045]}
{'': [nan, 0.22469008264462875], 'false': [nan, 0.22469008264462875]}
{'': [nan, 0.21975425330812767], 'false': [nan, 0.21975425330812767]}
{'': [nan, 0.2263313609467462]}
{'': [nan, 0.23891966759002786], 'false': [nan, 0.23891966759002786]}
{'': [nan, 0.211605186267348], 'false': [nan, 0.211605186267348]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.356
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12544463852839144;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5019518115510934;  // std dev = 0.906, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11231637819360621;  // std dev = 7.88e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.4054148735329955;  // std dev = 0.591, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.4175135841583099;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.10320507192968609;  // std dev = 0.133, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09255607021128574;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( female(A) )
%   | | | then return 0.3112391760788677;  // std dev = 0.562, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.3207118471601494;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2625891823902857;  // std dev = 0.049, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.30769310133013095;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08546349026070532;  // std dev = 0.038, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.1843373243119624;  // std dev = 0.625, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.20853093454386407;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.08081659556817973;  // std dev = 0.183, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07298922851221398;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18379186640576223;  // std dev = 0.050, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.28658415991554165;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15781269678658416;  // std dev = 0.044, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.2343778705182026;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07086246576065233;  // std dev = 0.211, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06383411016936213;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13795765800017015;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1957320140663054;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.700', 'seconds']
Refined model CLL: -0.068486


******************************************
Best model found
******************************************
Results 

CLL : -0.075744 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.356 

Total Inference Time : 0.8660850524902344 

Total revision time: 3.620023601531982
Best scored revision CLL: -0.068486


Results 

CLL : -0.075744 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.85592495727539 

Total Inference Time : 0.8660850524902344 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.688
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19347827641687884;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17648619550613495;  // std dev = 6.063, 163.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1343922315092788;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1511139158236249;  // std dev = 5.958, 153.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07669208607062236;  // std dev = 6.179, 176.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07359717626003161;  // std dev = 6.128, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0672740087380891;  // std dev = 6.092, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02757048087169629;  // std dev = 0.463, 180.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04615462964324433;  // std dev = 6.101, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.057934471850198135;  // std dev = 6.002, 157.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.214', 'seconds']
Parameter learned model CLL:-0.385797 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 111, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.063, 107, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.958, 97, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.179, 120, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.128, 114, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.092, 110, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.463, 124, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.101, 111, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.002, 101, 56]}]
{'': [nan, 0.22288357416902752]}
{'': [nan, 0.22552598893447154], 'false': [nan, 0.22552598893447154]}
{'': [nan, 0.22023870592661127], 'false': [nan, 0.22023870592661127]}
{'': [nan, 0.2320475030970991], 'false': [nan, 0.2320475030970991]}
{'': [nan, 0.21694214876033116], 'false': [nan, 0.21694214876033116]}
{'': [nan, 0.22089965397923877], 'false': [nan, 0.22089965397923877]}
{'': [nan, 0.223544781535781], 'false': [nan, 0.223544781535781]}
{'': [nan, 0.21432098765431967]}
{'': [nan, 0.22288357416902727], 'false': [nan, 0.22288357416902727]}
{'': [nan, 0.22946164144590142], 'false': [nan, 0.22946164144590142]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.562
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8248156017661784;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283911;  // std dev = 7.15e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7229317860663924;  // std dev = 0.025, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2771874682044849;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 7.60e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( female(A) )
%   | | | then return 0.5545122820276269;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5120843711792681;  // std dev = 1.074, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4264735233218416;  // std dev = 0.069, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.33412948399992654;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10339588192828705;  // std dev = 0.220, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09254004543146384;  // std dev = 2.98e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3268240862801881;  // std dev = 0.062, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.26334908308016836;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08505638826334126;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.259357212101121;  // std dev = 0.054, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.21212810155876038;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2127207707895936;  // std dev = 0.047, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.18070839892791676;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A) )
%   | | | then return -0.07866652045041198;  // std dev = 6.05e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.22839186412331325;  // std dev = 0.519, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07296009357448774;  // std dev = 0.013, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17927376545260237;  // std dev = 0.042, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1544885947801989;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06763048828040515;  // std dev = 0.026, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1543981796334659;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1340336725873285;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06376709479479381;  // std dev = 0.018, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1353004067360102;  // std dev = 0.033, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12258903615738552;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.550', 'seconds']
Refined model CLL: -0.065964


******************************************
Best model found
******************************************
Results 

CLL : -0.082166 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.562 

Total Inference Time : 1.0090343952178955 

Total revision time: 4.168177127838135
Best scored revision CLL: -0.065964


Results 

CLL : -0.082166 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.185162544250488 

Total Inference Time : 1.0090343952178955 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.707
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19148226843284694;  // std dev = 0.471, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1337236259465728;  // std dev = 6.369, 193.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1222956113856927;  // std dev = 6.333, 188.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12787113459172456;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09331884237256569;  // std dev = 6.278, 181.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09328960279922786;  // std dev = 6.200, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04697821175767753;  // std dev = 6.333, 188.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.013607157096893049;  // std dev = 0.451, 204.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0697939452552202;  // std dev = 6.172, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04777702484563262;  // std dev = 6.209, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.155', 'seconds']
Parameter learned model CLL:-0.367249 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.369, 135, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.333, 130, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 123, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.2, 114, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.333, 130, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.451, 146, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.172, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.209, 115, 58]}]
{'': [nan, 0.2222222222222225]}
{'': [nan, 0.21020698542242636], 'false': [nan, 0.21020698542242636]}
{'': [nan, 0.213331824354911], 'false': [nan, 0.213331824354911]}
{'': [nan, 0.22222222222222393], 'false': [nan, 0.22222222222222393]}
{'': [nan, 0.21775892066786717], 'false': [nan, 0.21775892066786717]}
{'': [nan, 0.22349918875067712], 'false': [nan, 0.22349918875067712]}
{'': [nan, 0.21333182435490997], 'false': [nan, 0.21333182435490997]}
{'': [nan, 0.20347943098808244]}
{'': [nan, 0.22541227548054946], 'false': [nan, 0.22541227548054946]}
{'': [nan, 0.22286077049015937], 'false': [nan, 0.22286077049015937]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.419
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 3.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.14652771257609323;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0931851884496906;  // std dev = 0.054, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1291352689757512;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08829234286961854;  // std dev = 0.367, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.078515786264493;  // std dev = 2.79e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11529486901823491;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.10404596413741514;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.0734423081442791;  // std dev = 0.040, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09473859223841928;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06859556540288646;  // std dev = 0.038, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0639696228630217;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( female(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.12296070057029906;  // std dev = 0.305, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.475', 'seconds']
Refined model CLL: -0.06598


******************************************
Best model found
******************************************
Results 

CLL : -0.074688 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.419 

Total Inference Time : 1.0114829540252686 

Total revision time: 3.9857686290740966
Best scored revision CLL: -0.06598


Results 

CLL : -0.074688 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.00275404548645 

Total Inference Time : 1.0114829540252686 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.056
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18061270321545037;  // std dev = 0.467, 552.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5935341426256086;  // std dev = 5.578, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.024484789085006353;  // std dev = 6.488, 348.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16397787499099192;  // std dev = 0.101, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.16528822217041383;  // std dev = 10.044, 491.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.42416338831000844;  // std dev = 0.448, 179.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | else return -0.03510013256529026;  // std dev = 6.426, 346.000 (wgt'ed) examples reached here.  /* #neg=297 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.32849165805173314;  // std dev = 5.994, 179.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | else return -0.03481702383662734;  // std dev = 6.450, 354.000 (wgt'ed) examples reached here.  /* #neg=305 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1326455576403898;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.09223638592827613;  // std dev = 9.157, 465.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11811398554891907;  // std dev = 3.33e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.07583363871950834;  // std dev = 9.085, 468.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2437880291429134;  // std dev = 5.578, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.04391984330705437;  // std dev = 6.400, 347.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.14228512909437516;  // std dev = 6.027, 180.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=129 */
%   | else return -0.04975713505668824;  // std dev = 6.450, 383.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0977742391633117;  // std dev = 4.71e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0.016401389499457374;  // std dev = 8.981, 500.000 (wgt'ed) examples reached here.  /* #neg=322 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.415', 'seconds']
Parameter learned model CLL:-0.30117 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 7, 0], 'true,false': [0.0, 0, 0], 'false': [0.467, 374, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.578, 41, 129], 'false,false': [6.488, 299, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.101, 50, 0], 'false,false': [10.044, 313, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.448, 50, 129], 'false,false': [6.426, 297, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.994, 50, 129], 'false,false': [6.45, 305, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false': [9.157, 287, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.33e-08, 54, 0], 'false,false': [9.085, 290, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [1.32e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.578, 41, 129], 'false,false': [6.4, 298, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.027, 51, 129], 'false,false': [6.45, 334, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.71e-08, 65, 0], 'false,false': [8.981, 322, 178]}]
{'': [-7.93016446160826e-18, 0.2184808863684127], 'true': [-7.93016446160826e-18, nan]}
{'': [4.270088556250602e-18, 0.22554821782621193], 'false': [0.18301038062283928, 0.12097866296736903], 'true': [4.270088556250602e-18, nan]}
{'': [-1.982541115402065e-18, 0.19559844649117308], 'false': [0.00020371841158052018, 0.20547609856976456], 'true': [-1.982541115402065e-18, nan]}
{'': [-5.551115123125783e-18, 0.1943555031735625], 'false': [0.20032014955234165, 0.11935505403357094], 'true': [-5.551115123125783e-18, nan]}
{'': [0.0, 0.1749182586757937], 'false': [0.20073060219765718, 0.11753833232290872], 'true': [0.0, nan]}
{'': [1.734723475976807e-18, 0.16484410510345815], 'false': [-2.960594732333751e-17, 0.1803346678086423], 'true': [1.734723475976807e-18, nan]}
{'': [0.0, 0.16161454464430902], 'false': [2.05596856412066e-17, 0.17637109937802817], 'true': [0.0, nan]}
{'': [7.709882115452476e-19, 0.15767899888643136], 'false': [0.18301038062283753, 0.1180504571725661], 'true': [7.709882115452476e-19, nan]}
{'': [9.251858538542971e-19, 0.14643140994421128], 'false': [0.20177353708917384, 0.10863086222012669], 'true': [9.251858538542971e-19, nan]}
{'': [1.3877787807814458e-18, 0.1440880817815712], 'false': [3.416070845000482e-17, 0.16131980706497193], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.301
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.1254446385283919;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360614;  // std dev = 3.16e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.1123163781936067;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783619;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.0926912761892607;  // std dev = 1.01e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.67e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.08518475138839678;  // std dev = 7.88e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109166;  // std dev = 1.67e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.07877675473109144;  // std dev = 5.58e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.07324622576333689;  // std dev = 1.10e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06842697784420264;  // std dev = 4.71e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202619;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.06419184008202622;  // std dev = 4.71e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.514', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.301 

Total Inference Time : 1.1096134185791016 

Total revision time: 5.535067684173584
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.552053100585938 

Total Inference Time : 1.1096134185791016 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.66
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18188994229375685;  // std dev = 0.468, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13858837277515829;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15284618783281398;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15914265032594743;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11153598600539819;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05882620572496675;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07401338249645954;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05150588025236691;  // std dev = 0.472, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11793323885904229;  // std dev = 5.140, 109.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.008455479162096678;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.161', 'seconds']
Parameter learned model CLL:-0.405716 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.468, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.14, 64, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
{'': [nan, 0.21893276745510165]}
{'': [nan, 0.21160518626734792], 'false': [nan, 0.21160518626734792]}
{'': [nan, 0.22386794052801212], 'false': [nan, 0.22386794052801212]}
{'': [nan, 0.23280032249395363], 'false': [nan, 0.23280032249395363]}
{'': [nan, 0.2271498107084903], 'false': [nan, 0.2271498107084903]}
{'': [nan, 0.21647490577266432], 'false': [nan, 0.21647490577266432]}
{'': [nan, 0.22551133383835456], 'false': [nan, 0.22551133383835456]}
{'': [nan, 0.22304522165292837]}
{'': [nan, 0.24240383806076898], 'false': [nan, 0.24240383806076898]}
{'': [nan, 0.22057648249773565], 'false': [nan, 0.22057648249773565]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.519
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( female(A) )
%   | | | then return 0.4997262021679602;  // std dev = 0.639, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5362897848908588;  // std dev = 0.658, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783616;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42434638573760186;  // std dev = 0.026, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.17558224088228278;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( female(A) )
%   | | | then return 0.33143654605959866;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2968855282447056;  // std dev = 0.656, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2621832292608748;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1961751976022382;  // std dev = 0.000366, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2146981460015977;  // std dev = 0.000979, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.16706837668516608;  // std dev = 0.000396, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109165;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return -0.17815088278757307;  // std dev = 0.654, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07257731885099084;  // std dev = 0.018, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18071168084024133;  // std dev = 0.000859, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14505153136677712;  // std dev = 0.000353, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06812061692777523;  // std dev = 0.013, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15548084409106092;  // std dev = 0.000762, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12804009237527827;  // std dev = 0.000201, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0637685881769982;  // std dev = 0.015, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13614014545318417;  // std dev = 0.000683, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11423533363486489;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.625', 'seconds']
Refined model CLL: -0.070095


******************************************
Best model found
******************************************
Results 

CLL : -0.083658 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 1.519 

Total Inference Time : 0.8159103393554688 

Total revision time: 3.7221289672851565
Best scored revision CLL: -0.070095


Results 

CLL : -0.083658 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 3.73911438369751 

Total Inference Time : 0.8159103393554688 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.674
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20971143509951237;  // std dev = 0.477, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1794939075544244;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17274371072033826;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10369172439955772;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08997581397457276;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06578185824593856;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02683064518361379;  // std dev = 5.612, 150.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.038372590243898476;  // std dev = 0.465, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0421622126479811;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03588519292704338;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.313', 'seconds']
Parameter learned model CLL:-0.378039 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.612, 105, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
{'': [nan, 0.22796630859375092]}
{'': [nan, 0.22714981070848986], 'false': [nan, 0.22714981070848986]}
{'': [nan, 0.23280032249395333], 'false': [nan, 0.23280032249395333]}
{'': [nan, 0.22057648249773693], 'false': [nan, 0.22057648249773693]}
{'': [nan, 0.22222222222222224], 'false': [nan, 0.22222222222222224]}
{'': [nan, 0.2197542533081288], 'false': [nan, 0.2197542533081288]}
{'': [nan, 0.21000000000000138], 'false': [nan, 0.21000000000000138]}
{'': [nan, 0.2164749057726642]}
{'': [nan, 0.22057648249773493], 'false': [nan, 0.22057648249773493]}
{'': [nan, 0.2213992214532872], 'false': [nan, 0.2213992214532872]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.601
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.6827378447875044;  // std dev = 0.826, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 6.32e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.4989562164007366;  // std dev = 1.064, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783621;  // std dev = 5.27e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42866585253046813;  // std dev = 0.076, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.3254635873995851;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.27119028099334147;  // std dev = 0.799, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.338830814860592;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.09725313340466132;  // std dev = 0.372, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08482992562937113;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.264961668837718;  // std dev = 0.017, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.3252471882252831;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07847198687377892;  // std dev = 4.08e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.21665087459675503;  // std dev = 0.015, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07298177608953152;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( female(A) )
%   | | then return 0.1601145784139494;  // std dev = 0.097, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.16310586175728975;  // std dev = 0.098, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06819545014004663;  // std dev = 3.65e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( female(A) )
%   | | | then return 0.1371336946612329;  // std dev = 0.486, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.1608309896553499;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.14036229541176562;  // std dev = 0.000479, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.088963948463626;  // std dev = 0.562, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( actor(B) )
%   | | | then return -0.06398752372113713;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.37008699113323656;  // std dev = 0.000319, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.512', 'seconds']
Refined model CLL: -0.075723


******************************************
Best model found
******************************************
Results 

CLL : -0.094934 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.601 

Total Inference Time : 0.8792600631713867 

Total revision time: 3.9031113624572753
Best scored revision CLL: -0.075723


Results 

CLL : -0.094934 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.920096778869629 

Total Inference Time : 0.8792600631713867 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.774
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1856343152164726;  // std dev = 0.469, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.767349955745945;  // std dev = 1.932, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.16598337758738985;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1442600373112105;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.12206438082592848;  // std dev = 5.264, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6070297377770556;  // std dev = 0.249, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.15968730908140247;  // std dev = 0.032, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.46277962171862863;  // std dev = 1.932, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.1386115290746455;  // std dev = 0.057, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09771212741935358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.05940835482206871;  // std dev = 3.406, 157.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0894295533801205;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.04833882298872152;  // std dev = 3.327, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3220748711687224;  // std dev = 1.932, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.13233114924740966;  // std dev = 0.137, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.23350037276085367;  // std dev = 2.142, 61.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=56 */
%   | else return -0.11907801596348279;  // std dev = 0.106, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06528625618414506;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 2.4788158367381456E-4;  // std dev = 2.731, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.425', 'seconds']
Parameter learned model CLL:-0.155203 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 115, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.932, 4, 56], 'false,false': [0.0, 114, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [5.264, 118, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.249, 4, 56], 'false,false': [0.032, 107, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.932, 4, 56], 'false,false': [0.057, 109, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.406, 101, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [3.327, 105, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.932, 4, 56], 'false,false': [0.137, 102, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.142, 5, 56], 'false,false': [0.106, 114, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [2.731, 114, 56]}]
{'': [nan, 0.22023870592661018]}
{'': [nan, 0.2182586867485782], 'false': [0.06222222222221987, -2.7268635692547703e-17]}
{'': [0.0, 0.15826188004136182], 'false': [0.0, 0.15927497420516543], 'true': [0.0, nan]}
{'': [0.0, 0.1576848311229148], 'false': [0.062222222222222, 9.866040851166286e-06], 'true': [0.0, nan]}
{'': [nan, 0.10492675644391601], 'false': [0.062222222222222415, 2.982189730541469e-05]}
{'': [nan, 0.0726736691318784], 'false': [0.0, 0.07391188979377457]}
{'': [0.0, 0.06664003053359019], 'false': [-1.982541115402065e-18, 0.06874658460184763], 'true': [0.0, nan]}
{'': [nan, 0.07131235797296401], 'false': [0.06222222222222234, 0.00018363317193506427]}
{'': [nan, 0.054520459317742444], 'false': [0.07524858908895454, 9.764745073274053e-05]}
{'': [nan, 0.04251685286638569], 'false': [-5.782411586589357e-19, 0.043871036654810576]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.415
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839108;  // std dev = 7.60e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 7.60e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.10159632948783666;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return -0.22229133793120928;  // std dev = 0.336, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.08518475138839678;  // std dev = 3.49e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07642855658655216;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109161;  // std dev = 5.05e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07292630908855285;  // std dev = 0.017, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.1527438580936708;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0683722878736108;  // std dev = 0.008, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.05916965307158467;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.06421434684474402;  // std dev = 2.98e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13400703000801079;  // std dev = 5.16e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.361', 'seconds']
Refined model CLL: -0.063932


******************************************
Best model found
******************************************
Results 

CLL : -0.073977 

AUC ROC : 0.998476 

AUC PR : 0.957409 

Precision : 0.799401 

Recall : 0.819018 

F1 : 0.809091 

Total Learning Time : 1.415 

Total Inference Time : 0.9663186073303223 

Total revision time: 4.093986143112183
Best scored revision CLL: -0.063932


Results 

CLL : -0.073977 

AUC ROC : 0.998476 

AUC PR : 0.957409 

Precision : 0.799401 

Recall : 0.819018 

F1 : 0.809091 

Total Learning Time : 4.117898811340332 

Total Inference Time : 0.9663186073303223 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.805
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.183991631728727;  // std dev = 0.469, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7850635712220073;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return -0.16575610090913911;  // std dev = 1.12e-07, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14408539460892905;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13615933411204684;  // std dev = 5.274, 170.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6336972966233254;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return -0.16031014996325801;  // std dev = 0.068, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4359022146803921;  // std dev = 2.146, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.13992926137590192;  // std dev = 0.060, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09743200525134169;  // std dev = 2.28e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.040585597072852586;  // std dev = 3.495, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08919358313836104;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.038585464099393285;  // std dev = 3.577, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3090486100150894;  // std dev = 2.146, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.13047917420715216;  // std dev = 0.150, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.26880764767315574;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return -0.1167600135030931;  // std dev = 0.111, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06537814101587457;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.03636434933629285;  // std dev = 3.359, 204.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.373', 'seconds']
Parameter learned model CLL:-0.167877 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 120, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.689, 3, 58], 'false,false': [1.12e-07, 111, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [5.274, 112, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.18, 2, 58], 'false,false': [0.068, 99, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.146, 5, 58], 'false,false': [0.06, 102, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.28e-09, 7, 0], 'false,false': [3.495, 120, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [3.577, 107, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.146, 5, 58], 'false,false': [0.15, 135, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.689, 3, 58], 'false,false': [0.111, 102, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [3.359, 146, 58]}]
{'': [nan, 0.21966923368261612]}
{'': [nan, 0.22349918875067737], 'false': [0.04676162321956597, 1.1202250338560137e-16]}
{'': [0.0, 0.16211085282057716], 'false': [-2.3129646346357427e-18, 0.16360971740902236], 'true': [0.0, nan]}
{'': [nan, 0.1603174798158432], 'false': [0.0322222222222224, 4.612955522301372e-05]}
{'': [nan, 0.10618424330803562], 'false': [0.07306626354245353, 3.547219241385871e-05]}
{'': [nan, 0.06671645009731263], 'false': [1.982541115402065e-18, 0.06861936309825632]}
{'': [nan, 0.07468258044160922], 'false': [0.0, 0.07754852583470934]}
{'': [nan, 0.06527173270222042], 'false': [0.07306626354245387, 0.00016643444390514235]}
{'': [0.0, 0.05238920297859516], 'false': [0.04676162321956471, 0.00012031328389612381], 'true': [0.0, nan]}
{'': [nan, 0.052507932240930075], 'false': [-2.523234146875356e-18, 0.055296173470029165]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.381
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.14185106490048763;  // std dev = 8.56e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10338300427213128;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783628;  // std dev = 2.98e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09254112685615477;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926086;  // std dev = 7.07e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.0851847513883969;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.23816076512742565;  // std dev = 0.074, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.07877675473109157;  // std dev = 6.66e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21161430106692086;  // std dev = 0.010, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.10551684641400697;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17845733875487124;  // std dev = 0.009, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09122141544807524;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.0732462257633371;  // std dev = 4.47e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15377561978300666;  // std dev = 0.008, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.08621048782608046;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.06842697784420265;  // std dev = 5.67e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06382348975910483;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 2.47e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13481214004619443;  // std dev = 0.007, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.08202129270196729;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.314', 'seconds']
Refined model CLL: -0.064688


******************************************
Best model found
******************************************
Results 

CLL : -0.072786 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 1.381 

Total Inference Time : 0.9460101127624512 

Total revision time: 4.115334878921509
Best scored revision CLL: -0.064688


Results 

CLL : -0.072786 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 4.139247547149658 

Total Inference Time : 0.9460101127624512 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.043
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1959098459154477;  // std dev = 0.473, 527.000 (wgt'ed) examples reached here.  /* #neg=349 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6144074463428414;  // std dev = 5.305, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.030920484778959433;  // std dev = 6.505, 359.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16534571459863676;  // std dev = 0.107, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.1616096094468869;  // std dev = 10.027, 490.000 (wgt'ed) examples reached here.  /* #neg=312 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4376972323738188;  // std dev = 0.437, 174.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=129 */
%   | else return -0.02073337863044112;  // std dev = 6.371, 310.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.30558002357513486;  // std dev = 6.121, 182.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=129 */
%   | else return -0.02795475003932147;  // std dev = 6.412, 331.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14370592402254784;  // std dev = 0.044, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.09553855980753613;  // std dev = 8.955, 468.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11996618661647401;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.0906321316988174;  // std dev = 8.920, 437.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.19534836097112337;  // std dev = 6.003, 179.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | else return -0.060854932757117314;  // std dev = 6.445, 368.000 (wgt'ed) examples reached here.  /* #neg=319 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.16773802678205033;  // std dev = 5.776, 174.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=129 */
%   | else return -0.03556255919151839;  // std dev = 6.380, 330.000 (wgt'ed) examples reached here.  /* #neg=281 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09893323878449228;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.021902163399722292;  // std dev = 8.921, 474.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.585', 'seconds']
Parameter learned model CLL:-0.308149 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 349, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.305, 36, 129], 'false,false': [6.505, 310, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.48e-09, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.107, 49, 0], 'false,false': [10.027, 312, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.437, 45, 129], 'false,false': [6.371, 261, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [2.28e-09, 17, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.121, 53, 129], 'false,false': [6.412, 282, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.044, 68, 0], 'false,false': [8.955, 290, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [8.92, 259, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.003, 50, 129], 'false,false': [6.445, 319, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.776, 45, 129], 'false,false': [6.38, 281, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [8.921, 296, 178]}]
{'': [-1.4802973661668754e-17, 0.2236784779407292], 'true': [-1.4802973661668754e-17, nan]}
{'': [0.0, 0.22430219684167507], 'false': [0.17057851239669738, 0.11786066216121657], 'true': [0.0, nan]}
{'': [1.295260195396016e-17, 0.19538005460055008], 'false': [0.00023244778815231397, 0.20517665310708866], 'true': [1.295260195396016e-17, nan]}
{'': [1.3877787807814458e-18, 0.20100563363988463], 'false': [0.19121030650042115, 0.1309507618201875], 'true': [1.3877787807814458e-18, nan]}
{'': [4.89804275569922e-18, 0.17864826838745068], 'false': [0.2058483003108513, 0.12422516460893308], 'true': [4.89804275569922e-18, nan]}
{'': [0.0, 0.15619937581429008], 'false': [0.0019671544465087063, 0.17134765820637032], 'true': [0.0, nan]}
{'': [-1.8503717077085942e-18, 0.1650733401281159], 'false': [-1.8817339400426382e-18, 0.18208442925446858], 'true': [-1.8503717077085942e-18, nan]}
{'': [9.251858538542971e-19, 0.15625943784638693], 'false': [0.2013045785087849, 0.112868852088768], 'true': [9.251858538542971e-19, nan]}
{'': [5.337610695313253e-19, 0.1563125387316265], 'false': [0.19173602853745608, 0.1233656186586335], 'true': [5.337610695313253e-19, nan]}
{'': [2.8912057932946786e-18, 0.1507624993914627], 'false': [-1.881733940042638e-17, 0.16791202842933073], 'true': [2.8912057932946786e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.307
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.12544463852839183;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.16e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360615;  // std dev = 2.98e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783617;  // std dev = 4.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.09269127618926082;  // std dev = 6.50e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.29e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.08518475138839678;  // std dev = 6.83e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109175;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.07877675473109146;  // std dev = 6.14e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.07324622576333686;  // std dev = 1.12e-07, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.06842697784420285;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202623;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.06419184008202625;  // std dev = 2.58e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.704', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.307 

Total Inference Time : 1.0991640090942383 

Total revision time: 5.497023677825927
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.520936346054077 

Total Inference Time : 1.0991640090942383 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.758
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19649479976116652;  // std dev = 0.473, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7325077152318529;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.16749228476814781;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14541832579507033;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.14769555595365472;  // std dev = 4.654, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6307805180388386;  // std dev = 0.202, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return -0.162551911918004;  // std dev = 0.079, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4054668079829716;  // std dev = 2.301, 51.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=45 */
%   | else return -0.13925862191122987;  // std dev = 0.105, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09812565565419915;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.055403146473004455;  // std dev = 3.152, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08977771963340085;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.02934411394402368;  // std dev = 3.312, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.22004864794140913;  // std dev = 2.860, 55.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=45 */
%   | else return -0.1318973639500952;  // std dev = 0.146, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.2877953304056189;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else return -0.11572340188340217;  // std dev = 0.164, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06575822625509363;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.009960128151236154;  // std dev = 2.755, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.587', 'seconds']
Parameter learned model CLL:-0.185632 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 88, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.121, 5, 45], 'false,false': [0.0, 98, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [4.654, 83, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.202, 2, 45], 'false,false': [0.079, 83, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.301, 6, 45], 'false,false': [0.105, 90, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [3.152, 83, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [3.312, 88, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.86, 10, 45], 'false,false': [0.146, 85, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.677, 3, 45], 'false,false': [0.164, 99, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [2.755, 74, 45]}]
{'': [0.0, 0.22386794052801265], 'true': [0.0, nan]}
{'': [nan, 0.21160518626734776], 'false': [0.08999999999999986, -5.890979314337566e-17]}
{'': [0.0, 0.16463616662874941], 'false': [-3.96508223080413e-18, 0.1691848163711359], 'true': [0.0, nan]}
{'': [0.0, 0.1600560094911967], 'false': [0.04074241738343129, 7.53726229138757e-05], 'true': [0.0, nan]}
{'': [0.0, 0.1061306584995805], 'false': [0.10380622837370275, 0.00012148455924729549], 'true': [0.0, nan]}
{'': [nan, 0.07356311382347688], 'false': [-4.163336342344337e-18, 0.0776021818675582]}
{'': [nan, 0.07856158101499112], 'false': [-1.734723475976807e-18, 0.08248198262705489]}
{'': [0.0, 0.08813876312675296], 'false': [0.14876033057851232, 0.00025140200556240076], 'true': [0.0, nan]}
{'': [nan, 0.055123536785583876], 'false': [0.05859375000000017, 0.0002728892291215069]}
{'': [0.0, 0.058810919932243765], 'false': [-1.261617073437678e-18, 0.06376210067743829], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.292
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.32e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4026818723398488;  // std dev = 0.086, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.10159632948783617;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.15499015347462253;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.32315964267816044;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14468260510093597;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.09269127618926103;  // std dev = 3.16e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.25684230951170745;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.12851236754095874;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.07877675473109166;  // std dev = 3.80e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21093704340080494;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11403973295398222;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.16061683264823046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17796119164860044;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10324472862848529;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15339962810512714;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09385828757878308;  // std dev = 3.23e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420265;  // std dev = 4.28e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1345188603854724;  // std dev = 0.005, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08640932732959876;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.390', 'seconds']
Refined model CLL: -0.065324


******************************************
Best model found
******************************************
Results 

CLL : -0.071059 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 1.292 

Total Inference Time : 0.7910230159759521 

Total revision time: 3.6257651329040526
Best scored revision CLL: -0.065324


Results 

CLL : -0.071059 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 3.649677801132202 

Total Inference Time : 0.7910230159759521 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.696
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20430278125335852;  // std dev = 0.476, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.7288520501243666;  // std dev = 1.895, 39.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | else return -0.04663262779933506;  // std dev = 2.963, 82.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.16214828922969574;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15677659896549426;  // std dev = 4.844, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5914689425983453;  // std dev = 0.270, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | else return -0.08149731541862192;  // std dev = 2.995, 97.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.47556114721107423;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.05534225028545397;  // std dev = 2.968, 87.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.12550316460314004;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.07956741326004518;  // std dev = 3.850, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11236372886196619;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.04915338570829388;  // std dev = 3.928, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.2783471265283485;  // std dev = 1.895, 39.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | else return -0.07023339909766195;  // std dev = 2.976, 92.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.26371801590090665;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.0667905769866404;  // std dev = 2.988, 97.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.08978944102921309;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.040805638447651005;  // std dev = 3.359, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.507', 'seconds']
Parameter learned model CLL:-0.22015 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.476, 85, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.895, 4, 35], 'false,false': [2.963, 72, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [4.844, 81, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.27, 3, 35], 'false,false': [2.995, 87, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.968, 77, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [3.85, 75, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [3.928, 82, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.895, 4, 35], 'false,false': [2.976, 82, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.988, 87, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [3.359, 77, 45]}]
{'': [nan, 0.22633136094674647]}
{'': [0.0, 0.23359060173485569], 'false': [0.09204470742932386, 0.10707911957168316], 'true': [0.0, nan]}
{'': [nan, 0.18285522069988347], 'false': [0.0, 0.18622920146099614]}
{'': [nan, 0.1785009574904873], 'false': [0.07271468144044228, 0.09246466149431387]}
{'': [nan, 0.14532473127459572], 'false': [0.05113221329437558, 0.10128070334045604]}
{'': [nan, 0.121516925777782], 'false': [0.0, 0.12352914302210118]}
{'': [0.0, 0.12002771245106825], 'false': [0.0, 0.1215134509680922], 'true': [0.0, nan]}
{'': [nan, 0.12040887939483191], 'false': [0.09204470742932294, 0.09625857047692528]}
{'': [0.0, 0.10258035305283572], 'false': [0.051132213294375596, 0.09204274143959712], 'true': [0.0, nan]}
{'': [0.0, 0.09068006620448107], 'false': [1.1564823173178713e-18, 0.09250058210322826], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.637
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( female(A) )
%   | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( female(A) )
%   | | then return 0.7278056532693119;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.6361400788776209;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.16838644805875277;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( female(A) )
%   | | then return 0.483581935066963;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.575838017736499;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10133567007950013;  // std dev = 0.011, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4381924127404917;  // std dev = 0.035, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.5619231634234346;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.3078527143268266;  // std dev = 0.151, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.2970340056833042;  // std dev = 0.154, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else return -0.09493284827488183;  // std dev = 0.168, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08076852130866052;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.08503050900552628;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0.2710645190813979;  // std dev = 0.021, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07497131381973034;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.07864429343930814;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.22092561032792185;  // std dev = 0.018, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.5667075899341547;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07300471177691706;  // std dev = 0.006, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.18524664264730278;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.42329776772444516;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.06819953235982447;  // std dev = 0.006, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.15889973919314934;  // std dev = 0.014, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.32648105119556875;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07482390390646675;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13879527891233778;  // std dev = 0.013, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.25750258904723855;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06563175354978644;  // std dev = 0.128, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.410', 'seconds']
Refined model CLL: -0.07179


******************************************
Best model found
******************************************
Results 

CLL : -0.087071 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 1.637 

Total Inference Time : 0.7577571868896484 

Total revision time: 3.8958175735473635
Best scored revision CLL: -0.07179


Results 

CLL : -0.087071 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 3.919730241775513 

Total Inference Time : 0.7577571868896484 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.696
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20814893509951354;  // std dev = 0.477, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1765553879126527;  // std dev = 6.053, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11920660905022569;  // std dev = 6.195, 178.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10517604380483875;  // std dev = 6.171, 175.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09826526484372522;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06526416476069193;  // std dev = 6.187, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02358782390832958;  // std dev = 6.318, 195.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08623459732214717;  // std dev = 0.478, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.025656028557097917;  // std dev = 6.211, 180.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.023889912616173323;  // std dev = 6.195, 178.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.271', 'seconds']
Parameter learned model CLL:-0.364954 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.053, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.195, 122, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.171, 119, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.119, 113, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.187, 121, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.318, 139, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 102, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.211, 124, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.195, 122, 56]}]
{'': [nan, 0.22750000000000026]}
{'': [nan, 0.2261850327693939], 'false': [nan, 0.2261850327693939]}
{'': [nan, 0.2156293397298331], 'false': [nan, 0.2156293397298331]}
{'': [nan, 0.21759999999999807], 'false': [nan, 0.21759999999999807]}
{'': [nan, 0.22156086971744643], 'false': [nan, 0.22156086971744643]}
{'': [nan, 0.21628523093619412], 'false': [nan, 0.21628523093619412]}
{'': [nan, 0.204707429322813], 'false': [nan, 0.204707429322813]}
{'': [nan, 0.22880948565935028]}
{'': [nan, 0.2143209876543208], 'false': [nan, 0.2143209876543208]}
{'': [nan, 0.21562933972983117], 'false': [nan, 0.21562933972983117]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.506
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8248156017661784;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( female(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.6616355223478173;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5669585795743266;  // std dev = 0.084, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.43120266673570795;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4262387770835841;  // std dev = 0.083, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.33207458097194975;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3266786090384155;  // std dev = 0.075, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.26293914152052933;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2592664217010479;  // std dev = 0.065, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2137066426787721;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.08518475138839682;  // std dev = 5.48e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | | else return -0.2390807314671996;  // std dev = 0.562, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07839606112142011;  // std dev = 0.021, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21266180998223513;  // std dev = 0.057, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.17999750688772725;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.1603534881357286;  // std dev = 0.062, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.18569108731439962;  // std dev = 3.80e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.07331392224147011;  // std dev = 0.078, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06788461006516414;  // std dev = 0.022, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( female(A) )
%   | | | then return 0.15061571812097085;  // std dev = 1.05e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.13764325098975452;  // std dev = 0.458, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06381481711250743;  // std dev = 0.019, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( female(A) )
%   | | | then return 0.13234342338598207;  // std dev = 2.69e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.13039531951236444;  // std dev = 0.332, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.491', 'seconds']
Refined model CLL: -0.070792


******************************************
Best model found
******************************************
Results 

CLL : -0.096826 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.506 

Total Inference Time : 0.9954941272735596 

Total revision time: 4.026455738067627
Best scored revision CLL: -0.070792


Results 

CLL : -0.096826 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.04754648399353 

Total Inference Time : 0.9954941272735596 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.708
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18957750652808503;  // std dev = 0.471, 175.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1539120247740348;  // std dev = 6.278, 181.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14054383432624024;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13790746725530034;  // std dev = 6.143, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07310929571582322;  // std dev = 6.333, 188.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12298128483847706;  // std dev = 6.036, 156.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.053341348890722895;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054006001129892595;  // std dev = 0.473, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01586679832704895;  // std dev = 6.325, 187.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06490035511820011;  // std dev = 6.081, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.130', 'seconds']
Parameter learned model CLL:-0.386237 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 117, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 123, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.143, 108, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.333, 130, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.036, 98, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 114, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.325, 129, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.081, 102, 58]}]
{'': [nan, 0.22158367346938804]}
{'': [nan, 0.21775892066786695], 'false': [nan, 0.21775892066786695]}
{'': [nan, 0.2209452479338827], 'false': [nan, 0.2209452479338827]}
{'': [nan, 0.22731891421105982], 'false': [nan, 0.22731891421105982]}
{'': [nan, 0.2133318243549124], 'false': [nan, 0.2133318243549124]}
{'': [nan, 0.2335634451019081], 'false': [nan, 0.2335634451019081]}
{'': [nan, 0.2196692336826164], 'false': [nan, 0.2196692336826164]}
{'': [nan, 0.2234991887506759]}
{'': [nan, 0.21396093682976197], 'false': [nan, 0.21396093682976197]}
{'': [nan, 0.2310937499999997], 'false': [nan, 0.2310937499999997]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.461
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783621;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0958889622057082;  // std dev = 0.382, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08493589143483164;  // std dev = 3.49e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08212113657723269;  // std dev = 0.436, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07282018077076914;  // std dev = 3.94e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06805351913900673;  // std dev = 4.26e-05, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.06386226471876075;  // std dev = 4.02e-05, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.473', 'seconds']
Refined model CLL: -0.063871


******************************************
Best model found
******************************************
Results 

CLL : -0.070667 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 1.461 

Total Inference Time : 1.0482349395751953 

Total revision time: 4.083430856704712
Best scored revision CLL: -0.063871


Results 

CLL : -0.070667 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 4.104521602630616 

Total Inference Time : 1.0482349395751953 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.092
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20923374772278258;  // std dev = 0.477, 507.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5807238820822824;  // std dev = 5.679, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.034289892022399335;  // std dev = 6.510, 363.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16618846420854394;  // std dev = 0.102, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0.19177459019866522;  // std dev = 9.803, 451.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4352478245585001;  // std dev = 0.438, 174.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=129 */
%   | else return -0.035753907110366565;  // std dev = 6.409, 327.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.31172688083360633;  // std dev = 6.036, 180.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=129 */
%   | else return -0.047808090538565634;  // std dev = 6.475, 372.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1329865371414813;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.09184726547520561;  // std dev = 8.998, 467.000 (wgt'ed) examples reached here.  /* #neg=289 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12253358474206108;  // std dev = 0.243, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.07601661044612067;  // std dev = 8.997, 460.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2871967996465238;  // std dev = 4.934, 159.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=129 */
%   | else return -0.042917405473613036;  // std dev = 6.379, 331.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1618604782190907;  // std dev = 5.584, 171.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=129 */
%   | else return -0.051282633105054;  // std dev = 6.434, 380.000 (wgt'ed) examples reached here.  /* #neg=331 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1032990323841657;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.032036491618889266;  // std dev = 8.598, 463.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.421', 'seconds']
Parameter learned model CLL:-0.313202 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 12, 0], 'true,false': [0.0, 0, 0], 'false': [0.477, 329, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.679, 43, 129], 'false,false': [6.51, 314, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.102, 61, 0], 'false,false': [9.803, 273, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.438, 45, 129], 'false,false': [6.409, 278, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.036, 51, 129], 'false,false': [6.475, 323, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [7.45e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 55, 0], 'false,false': [8.998, 289, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.243, 59, 0], 'false,false': [8.997, 282, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 16, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.934, 30, 129], 'false,false': [6.379, 282, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.584, 42, 129], 'false,false': [6.434, 331, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.341, 60, 0], 'false,false': [8.598, 285, 178]}]
{'': [-1.1564823173178714e-17, 0.2278242669685575], 'true': [-1.1564823173178714e-17, nan]}
{'': [4.270088556250602e-18, 0.22201414970740002], 'false': [0.18750000000000178, 0.1167649447138579], 'true': [4.270088556250602e-18, nan]}
{'': [8.540177112501205e-18, 0.20114331029334462], 'false': [0.00016928720301928146, 0.21305966196545656], 'true': [8.540177112501205e-18, nan]}
{'': [-3.96508223080413e-18, 0.19885583725267833], 'false': [0.1917360285374533, 0.12559721793430095], 'true': [-3.96508223080413e-18, nan]}
{'': [0.0, 0.17035997489109223], 'false': [0.20243544145590656, 0.11268782839591043], 'true': [0.0, nan]}
{'': [4.270088556250602e-18, 0.15986879505037627], 'false': [-5.0464682937507114e-17, 0.17337085114471756], 'true': [4.270088556250602e-18, nan]}
{'': [0.0, 0.16005384599193465], 'false': [0.0009972052551047424, 0.17597306954287298], 'true': [0.0, nan]}
{'': [0.0, 0.1566030742397868], 'false': [0.15307938768245052, 0.12293431970754387], 'true': [0.0, nan]}
{'': [9.912705577010326e-19, 0.14142460071794105], 'false': [0.18231406457568197, 0.10892538083904812], 'true': [9.912705577010326e-19, nan]}
{'': [1.3877787807814458e-18, 0.14344013705278608], 'false': [0.0019368268600481779, 0.15967627106589213], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.367
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.1254446385283919;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.16e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.11231637819360671;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.0926912761892607;  // std dev = 1.05e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.0851847513883968;  // std dev = 1.29e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.08518475138839678;  // std dev = 6.50e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109166;  // std dev = 3.57e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.07877675473109144;  // std dev = 6.66e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.07324622576333685;  // std dev = 1.13e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(B) )
%   | then return -0.06842697784420287;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.14788296060053138;  // std dev = 0.437, 182.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=178 */
%   | | else return -0.06842697784420267;  // std dev = 2.98e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13457213725424913;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06456287885635756;  // std dev = 0.035, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.486', 'seconds']
Refined model CLL: -0.065637


******************************************
Best model found
******************************************
Results 

CLL : -0.063546 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.367 

Total Inference Time : 1.0955102443695068 

Total revision time: 5.572534688949585
Best scored revision CLL: -0.065637


Results 

CLL : -0.063546 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.593625434875488 

Total Inference Time : 1.0955102443695068 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.746
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2270013941159059;  // std dev = 0.482, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1770478724750229;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10766299375297995;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11719056367913552;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1068547285623537;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05384527501021204;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10499869577019406;  // std dev = 5.316, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04787852212548622;  // std dev = 0.472, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.056472950134390035;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04734125809940464;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.345', 'seconds']
Parameter learned model CLL:-0.403203 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.482, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.316, 76, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
{'': [nan, 0.2328003224939541]}
{'': [nan, 0.22714981070849047], 'false': [nan, 0.22714981070849047]}
{'': [nan, 0.21241149521032976], 'false': [nan, 0.21241149521032976]}
{'': [nan, 0.2222222222222225], 'false': [nan, 0.2222222222222225]}
{'': [nan, 0.2255113338383544], 'false': [nan, 0.2255113338383544]}
{'': [nan, 0.21403091557669526], 'false': [nan, 0.21403091557669526]}
{'': [nan, 0.2335906017348539], 'false': [nan, 0.2335906017348539]}
{'': [nan, 0.2230452216529291]}
{'': [nan, 0.22878045756091506], 'false': [nan, 0.22878045756091506]}
{'': [nan, 0.2295918367346945], 'false': [nan, 0.2295918367346945]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.46
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1254446385283915;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.66e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.5408515929432428;  // std dev = 0.097, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42104770526022717;  // std dev = 7.30e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.17851455070811847;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32310875557213287;  // std dev = 1.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15381874450080454;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2568071026101899;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.23504861808051222;  // std dev = 0.538, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return -0.08823331543309117;  // std dev = 0.227, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2136651378282938;  // std dev = 0.011, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.16469126657645028;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07918179964809106;  // std dev = 0.046, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07301213583075962;  // std dev = 1.83e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17995757731239168;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1443431179458679;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0682220354199022;  // std dev = 3.07e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15491111165923252;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12705079625190271;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then return 0.1356969017217535;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.0643656905220508;  // std dev = 0.027, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.550', 'seconds']
Refined model CLL: -0.069026


******************************************
Best model found
******************************************
Results 

CLL : -0.073272 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.46 

Total Inference Time : 0.8374679088592529 

Total revision time: 3.788869291305542
Best scored revision CLL: -0.069026


Results 

CLL : -0.073272 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.8099600372314453 

Total Inference Time : 0.8374679088592529 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.717
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21529179224236955;  // std dev = 0.479, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13808945995014169;  // std dev = 5.579, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1529889608441726;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1039098707628001;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09043197491563927;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0884725281273541;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.035193119401367254;  // std dev = 5.604, 149.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07507592996111083;  // std dev = 0.477, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06262426761089304;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04418125120423275;  // std dev = 5.424, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.276', 'seconds']
Parameter learned model CLL:-0.389925 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.479, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.579, 101, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.604, 104, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.424, 85, 45]}]
{'': [nan, 0.2295918367346948]}
{'': [nan, 0.21322011634452934], 'false': [nan, 0.21322011634452934]}
{'': [nan, 0.22551133383835567], 'false': [nan, 0.22551133383835567]}
{'': [nan, 0.2172928927116349], 'false': [nan, 0.2172928927116349]}
{'': [nan, 0.21893276745510146], 'false': [nan, 0.21893276745510146]}
{'': [nan, 0.2238679405280107], 'false': [nan, 0.2238679405280107]}
{'': [nan, 0.21080131525606885], 'false': [nan, 0.21080131525606885]}
{'': [nan, 0.22714981070849033]}
{'': [nan, 0.227966308593749], 'false': [nan, 0.227966308593749]}
{'': [nan, 0.22633136094674466], 'false': [nan, 0.22633136094674466]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.621
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783617;  // std dev = 5.05e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926108;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07877675473109165;  // std dev = 4.94e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420265;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1318999668258744;  // std dev = 0.948, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13644445194319638;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.483', 'seconds']
Refined model CLL: -0.066318


******************************************
Best model found
******************************************
Results 

CLL : -0.080987 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.621 

Total Inference Time : 0.8204855918884277 

Total revision time: 3.9240755443573
Best scored revision CLL: -0.066318


Results 

CLL : -0.080987 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.945166290283203 

Total Inference Time : 0.8204855918884277 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.778
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1856343152164726;  // std dev = 0.469, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1318889628381431;  // std dev = 6.270, 188.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1564097981330898;  // std dev = 6.073, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14916367263835292;  // std dev = 5.991, 156.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07378280850295353;  // std dev = 6.219, 181.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04714062215411901;  // std dev = 6.278, 189.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06750292987220353;  // std dev = 6.146, 172.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09480004667836704;  // std dev = 0.482, 153.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04497770221977592;  // std dev = 6.101, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.001833472984787225;  // std dev = 6.270, 188.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.193', 'seconds']
Parameter learned model CLL:-0.369864 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 132, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.073, 108, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.991, 100, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.219, 125, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 133, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.146, 116, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.482, 97, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.101, 111, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 132, 56]}]
{'': [nan, 0.2202387059266102]}
{'': [nan, 0.20914440923494645], 'false': [nan, 0.20914440923494645]}
{'': [nan, 0.22486615110053781], 'false': [nan, 0.22486615110053781]}
{'': [nan, 0.23011176857330748], 'false': [nan, 0.23011176857330748]}
{'': [nan, 0.21366869143188583], 'false': [nan, 0.21366869143188583]}
{'': [nan, 0.2085048010973933], 'false': [nan, 0.2085048010973933]}
{'': [nan, 0.21957815035154285], 'false': [nan, 0.21957815035154285]}
{'': [nan, 0.23204750309709896]}
{'': [nan, 0.22288357416902846], 'false': [nan, 0.22288357416902846]}
{'': [nan, 0.20914440923494693], 'false': [nan, 0.20914440923494693]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.558
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8248156017661784;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283913;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7229317860663922;  // std dev = 0.025, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2765196442875728;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5587683352894276;  // std dev = 0.031, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.22628396848759622;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11323378587781978;  // std dev = 0.110, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10151262414616186;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( female(A) )
%   | | | then return 0.41584614352213894;  // std dev = 7.30e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.4036422067276784;  // std dev = 0.599, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09262118595770674;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3247510349401024;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.25707398226488587;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08512526323369583;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2579331133874446;  // std dev = 0.033, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2136908254362698;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07872567092043135;  // std dev = 3.94e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21171005727864325;  // std dev = 0.028, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1802573012925811;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07320190895614954;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1785296453027136;  // std dev = 0.025, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15315998784736806;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06838818513382638;  // std dev = 3.49e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15383183957670563;  // std dev = 0.022, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.13255805337402632;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0641576121405452;  // std dev = 3.94e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1348569730685742;  // std dev = 0.020, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12206381725419652;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.361', 'seconds']
Refined model CLL: -0.066515


******************************************
Best model found
******************************************
Results 

CLL : -0.085362 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.558 

Total Inference Time : 0.9452724456787109 

Total revision time: 4.186137233734131
Best scored revision CLL: -0.066515


Results 

CLL : -0.085362 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 30.41675165748596 

Total Inference Time : 0.9452724456787109 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.705
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2096640866146651;  // std dev = 0.477, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15650605510601034;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1611558873297147;  // std dev = 6.123, 164.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13059773436616862;  // std dev = 6.143, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08760608911395075;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06031368455523712;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06908940598074506;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03829564973310234;  // std dev = 0.467, 180.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05141872155242435;  // std dev = 6.172, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.016166854742270947;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.142', 'seconds']
Parameter learned model CLL:-0.378841 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 107, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.123, 106, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.143, 108, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.467, 122, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.172, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
{'': [nan, 0.2279522497704318]}
{'': [nan, 0.2196692336826148], 'false': [nan, 0.2196692336826148]}
{'': [nan, 0.22858417608566553], 'false': [nan, 0.22858417608566553]}
{'': [nan, 0.22731891421106043], 'false': [nan, 0.22731891421106043]}
{'': [nan, 0.2209452479338838], 'false': [nan, 0.2209452479338838]}
{'': [nan, 0.2171235358048539], 'false': [nan, 0.2171235358048539]}
{'': [nan, 0.22413734140419164], 'false': [nan, 0.22413734140419164]}
{'': [nan, 0.21839506172839643]}
{'': [nan, 0.2254122754805495], 'false': [nan, 0.2254122754805495]}
{'': [nan, 0.21712353580485422], 'false': [nan, 0.21712353580485422]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.544
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 8.16e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10159632948783667;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( female(A) )
%   | | | then return 0.301025984143511;  // std dev = 0.403, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.3101117670742672;  // std dev = 0.408, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.96e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2577919767226333;  // std dev = 0.006, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1221323233940553;  // std dev = 0.000900, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109155;  // std dev = 6.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21160670152985428;  // std dev = 0.005, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1095797475981664;  // std dev = 0.001, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1784515485991677;  // std dev = 0.005, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09909299088270024;  // std dev = 0.000811, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07343784856053462;  // std dev = 0.026, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0684147639115153;  // std dev = 4.34e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15377108476673124;  // std dev = 0.004, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09096558497212102;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06418106361029598;  // std dev = 1.67e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13480850140319;  // std dev = 0.004, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08361903012991893;  // std dev = 0.000643, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.596', 'seconds']
Refined model CLL: -0.065972


******************************************
Best model found
******************************************
Results 

CLL : -0.080947 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 1.544 

Total Inference Time : 0.9891021251678467 

Total revision time: 4.129899906158448
Best scored revision CLL: -0.065972


Results 

CLL : -0.080947 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 30.36051432991028 

Total Inference Time : 0.9891021251678467 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.133
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20445243704503374;  // std dev = 0.476, 514.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5813951753933962;  // std dev = 5.679, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.024062051745246997;  // std dev = 6.474, 339.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16525871613130788;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.18126781329245284;  // std dev = 9.907, 463.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4982067482190828;  // std dev = 0.399, 161.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=129 */
%   | else return -0.044808920683217596;  // std dev = 6.444, 352.000 (wgt'ed) examples reached here.  /* #neg=303 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4045531777197129;  // std dev = 4.796, 157.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=129 */
%   | else return -0.04495086506040686;  // std dev = 6.475, 366.000 (wgt'ed) examples reached here.  /* #neg=317 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13300711853803837;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.06215434005497926;  // std dev = 9.126, 485.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12219536216491667;  // std dev = 0.279, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0.059617990256520294;  // std dev = 9.029, 470.000 (wgt'ed) examples reached here.  /* #neg=292 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.26355494335125307;  // std dev = 4.934, 159.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=129 */
%   | else return -0.042105206387838975;  // std dev = 6.413, 346.000 (wgt'ed) examples reached here.  /* #neg=297 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.17953555260330978;  // std dev = 5.187, 163.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=129 */
%   | else return -0.03793053104876372;  // std dev = 6.423, 350.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10420538664020404;  // std dev = 0.376, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.03584866733840386;  // std dev = 8.375, 463.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.428', 'seconds']
Parameter learned model CLL:-0.314655 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 12, 0], 'true,false': [0.0, 0, 0], 'false': [0.476, 336, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.679, 43, 129], 'false,false': [6.474, 290, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.63e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 58, 0], 'false,false': [9.907, 285, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.399, 32, 129], 'false,false': [6.444, 303, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.796, 28, 129], 'false,false': [6.475, 317, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [7.9e-09, 59, 0], 'false,false': [9.126, 307, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 16, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.279, 74, 0], 'false,false': [9.029, 292, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [1.32e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.934, 30, 129], 'false,false': [6.413, 297, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.187, 34, 129], 'false,false': [6.423, 301, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 4, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.376, 71, 0], 'false,false': [8.375, 285, 178]}]
{'': [-1.1564823173178714e-17, 0.2263773864857937], 'true': [-1.1564823173178714e-17, nan]}
{'': [3.96508223080413e-18, 0.2269982115570923], 'false': [0.18750000000000036, 0.1236501596749078], 'true': [3.96508223080413e-18, nan]}
{'': [6.938893903907228e-18, 0.20024797328141425], 'false': [-4.976861834526564e-17, 0.21196513071815828], 'true': [6.938893903907228e-18, nan]}
{'': [0.0, 0.1944255451122517], 'false': [0.1592531152347485, 0.11797213825838382], 'true': [0.0, nan]}
{'': [-1.0675221390626506e-18, 0.16660971726653084], 'false': [0.14653738488376913, 0.11456518109198033], 'true': [-1.0675221390626506e-18, nan]}
{'': [1.5419764230904951e-18, 0.15676692649616839], 'false': [6.39789539614497e-17, 0.17170667520061353], 'true': [1.5419764230904951e-18, nan]}
{'': [-1.734723475976807e-18, 0.1538921421881272], 'false': [0.0010495550422262969, 0.1734601185645205], 'true': [-1.734723475976807e-18, nan]}
{'': [6.30808536718839e-19, 0.14979485935226455], 'false': [0.1530793876824496, 0.1188695105932027], 'true': [6.30808536718839e-19, nan]}
{'': [5.782411586589357e-19, 0.14313162584972636], 'false': [0.16507960404983216, 0.11788379558677452], 'true': [5.782411586589357e-19, nan]}
{'': [0.0, 0.13388940479980313], 'false': [0.001994152782226297, 0.1515072373377301], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.342
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.12544463852839188;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360614;  // std dev = 3.33e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360633;  // std dev = 2.36e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.1123163781936067;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783624;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926098;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.09269127618926064;  // std dev = 8.43e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.67e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.08518475138839678;  // std dev = 8.69e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109179;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109168;  // std dev = 3.16e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.07877675473109144;  // std dev = 5.77e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.0732462257633368;  // std dev = 1.06e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06842697784420292;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.06419184008202625;  // std dev = 2.58e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.551', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.342 

Total Inference Time : 1.0832574367523193 

Total revision time: 5.60627851486206
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 31.836892938613893 

Total Inference Time : 1.0832574367523193 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.648
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1914822684328456;  // std dev = 0.471, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12352807187670954;  // std dev = 5.651, 155.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1668875566666257;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09498822160163092;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10843196595159212;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06550093447314902;  // std dev = 5.562, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11251842048791558;  // std dev = 5.316, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05175835083272194;  // std dev = 0.471, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.048746552945304986;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0193257745538415;  // std dev = 5.680, 159.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.287', 'seconds']
Parameter learned model CLL:-0.374111 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.651, 110, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.562, 99, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.316, 76, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.68, 114, 45]}]
{'': [nan, 0.2222222222222232]}
{'': [nan, 0.20603537981269424], 'false': [nan, 0.20603537981269424]}
{'': [nan, 0.2279663085937506], 'false': [nan, 0.2279663085937506]}
{'': [nan, 0.21241149521032968], 'false': [nan, 0.21241149521032968]}
{'': [nan, 0.22304522165292984], 'false': [nan, 0.22304522165292984]}
{'': [nan, 0.2148437499999991], 'false': [nan, 0.2148437499999991]}
{'': [nan, 0.23359060173485463], 'false': [nan, 0.23359060173485463]}
{'': [nan, 0.22222222222222204]}
{'': [nan, 0.2246900826446288], 'false': [nan, 0.2246900826446288]}
{'': [nan, 0.2029191883232479], 'false': [nan, 0.2029191883232479]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.373
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11622599213548987;  // std dev = 0.330, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10124003678715301;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09587410037715643;  // std dev = 0.298, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08830901063947441;  // std dev = 0.283, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07806414108933435;  // std dev = 1.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then return 0.16644361589384712;  // std dev = 0.051, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return -0.07696449810992291;  // std dev = 0.323, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15412758703708201;  // std dev = 4.47e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08537837726823959;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A) )
%   | | | then return -0.0676113741613191;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.11960998046304544;  // std dev = 0.285, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06297450461110274;  // std dev = 0.010, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13508636112986225;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0789429924190068;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.746', 'seconds']
Refined model CLL: -0.064692


******************************************
Best model found
******************************************
Results 

CLL : -0.068015 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.373 

Total Inference Time : 0.8560142517089844 

Total revision time: 3.646948429107666
Best scored revision CLL: -0.064692


Results 

CLL : -0.068015 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.877562852859498 

Total Inference Time : 0.8560142517089844 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.636
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.24945328292559954;  // std dev = 0.488, 115.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18213553788302123;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11402474282642606;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10652540390275644;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07826894512474242;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09335654368112288;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05482778094361936;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06689136020105056;  // std dev = 0.477, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.014013701928998083;  // std dev = 5.562, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.005376288429702601;  // std dev = 5.628, 152.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.163', 'seconds']
Parameter learned model CLL:-0.37509 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.488, 70, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.562, 99, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.628, 107, 45]}]
{'': [nan, 0.23818525519848852]}
{'': [nan, 0.22959183673469488], 'false': [nan, 0.22959183673469488]}
{'': [nan, 0.2164749057726633], 'false': [nan, 0.2164749057726633]}
{'': [nan, 0.22057648249773645], 'false': [nan, 0.22057648249773645]}
{'': [nan, 0.2172928927116347], 'false': [nan, 0.2172928927116347]}
{'': [nan, 0.22714981070849063], 'false': [nan, 0.22714981070849063]}
{'': [nan, 0.2205764824977365], 'false': [nan, 0.2205764824977365]}
{'': [nan, 0.22796630859374914]}
{'': [nan, 0.21484374999999992], 'false': [nan, 0.21484374999999992]}
{'': [nan, 0.20840547091412773], 'false': [nan, 0.20840547091412773]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.426
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( female(A) )
%   | | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( female(A) )
%   | | | then return 0.6861389866026452;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.6846861293705284;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5741918060434308;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.425666302499003;  // std dev = 0.000652, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783624;  // std dev = 4.83e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.43162679858614533;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.3260051043513294;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926105;  // std dev = 2.11e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( female(A) )
%   | | | then return 0.3053873655578885;  // std dev = 0.577, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.33066577368163674;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839678;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( female(A) )
%   | | | then return 0.2662315249088308;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2128713007184475;  // std dev = 0.797, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109164;  // std dev = 4.47e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.22017184881939475;  // std dev = 0.018, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.3784316384583899;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18469923447097966;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.29168609290732694;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420265;  // std dev = 4.34e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1584880342206988;  // std dev = 0.014, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.23809397189090087;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( female(A) )
%   | | | then return 0.10970742362201637;  // std dev = 0.457, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.14038794046384329;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.451', 'seconds']
Refined model CLL: -0.074526


******************************************
Best model found
******************************************
Results 

CLL : -0.101252 

AUC ROC : 0.997289 

AUC PR : 0.901152 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.426 

Total Inference Time : 0.8223483562469482 

Total revision time: 3.621173107147217
Best scored revision CLL: -0.074526


Results 

CLL : -0.101252 

AUC ROC : 0.997289 

AUC PR : 0.901152 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 29.85178753089905 

Total Inference Time : 0.8223483562469482 

Run: 3
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.772
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18373033044835074;  // std dev = 0.469, 172.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15986142429048023;  // std dev = 6.146, 172.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15880879743000204;  // std dev = 6.043, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13986107657875385;  // std dev = 6.013, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1317824494088348;  // std dev = 5.936, 151.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05983053806258735;  // std dev = 6.154, 173.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02704923403857543;  // std dev = 6.249, 185.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03709482438342096;  // std dev = 0.466, 176.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01736742431730993;  // std dev = 6.234, 183.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04310676286356895;  // std dev = 6.101, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.176', 'seconds']
Parameter learned model CLL:-0.372424 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 116, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.146, 116, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.043, 105, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.013, 102, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.936, 95, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.154, 117, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.249, 129, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 120, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.234, 127, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.101, 111, 56]}]
{'': [nan, 0.2195781503515417]}
{'': [nan, 0.21957815035154093], 'false': [nan, 0.21957815035154093]}
{'': [nan, 0.22684310018903422], 'false': [nan, 0.22684310018903422]}
{'': [nan, 0.22880948565935114], 'false': [nan, 0.22880948565935114]}
{'': [nan, 0.23332309986404087], 'false': [nan, 0.23332309986404087]}
{'': [nan, 0.2189181061846358], 'false': [nan, 0.2189181061846358]}
{'': [nan, 0.2110737764791827], 'false': [nan, 0.2110737764791827]}
{'': [nan, 0.21694214876032883]}
{'': [nan, 0.2123682403177158], 'false': [nan, 0.2123682403177158]}
{'': [nan, 0.2228835741690264], 'false': [nan, 0.2228835741690264]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.487
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360617;  // std dev = 9.54e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5122901261050012;  // std dev = 0.913, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783638;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.422957148784473;  // std dev = 0.039, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.17750876730361914;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926094;  // std dev = 5.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.324414616953793;  // std dev = 0.035, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.15119683472029308;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.67e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2577031480569358;  // std dev = 0.031, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.13497100747876406;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21154748692483896;  // std dev = 0.027, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11952167917005119;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17841034916108248;  // std dev = 0.024, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10819376096768014;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420264;  // std dev = 5.48e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1537413025143329;  // std dev = 0.021, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.09692464433385473;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13478626150995485;  // std dev = 0.019, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08847416283319176;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.409', 'seconds']
Refined model CLL: -0.066055


******************************************
Best model found
******************************************
Results 

CLL : -0.087941 

AUC ROC : 0.996995 

AUC PR : 0.899071 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.487 

Total Inference Time : 0.9369468688964844 

Total revision time: 4.067801651000977
Best scored revision CLL: -0.066055


Results 

CLL : -0.087941 

AUC ROC : 0.996995 

AUC PR : 0.899071 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.084506448745728 

Total Inference Time : 0.9369468688964844 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.71
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16502724197782043;  // std dev = 0.461, 189.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16453333430377526;  // std dev = 6.245, 177.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1543006376725678;  // std dev = 6.182, 170.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10375597513858849;  // std dev = 6.302, 184.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11391555468248477;  // std dev = 6.172, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07951825997635004;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05879017249383934;  // std dev = 6.262, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.031664241457048325;  // std dev = 0.462, 188.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08619652068861643;  // std dev = 6.048, 157.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07314254186885372;  // std dev = 6.025, 155.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.169', 'seconds']
Parameter learned model CLL:-0.393581 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.461, 131, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.245, 119, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.182, 112, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.302, 126, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.172, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.262, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.462, 130, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.048, 99, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.025, 97, 58]}]
{'': [nan, 0.21270401164581096]}
{'': [nan, 0.22030706374285652], 'false': [nan, 0.22030706374285652]}
{'': [nan, 0.22477508650519157], 'false': [nan, 0.22477508650519157]}
{'': [nan, 0.21585538752362932], 'false': [nan, 0.21585538752362932]}
{'': [nan, 0.22541227548054812], 'false': [nan, 0.22541227548054812]}
{'': [nan, 0.22094524793388495], 'false': [nan, 0.22094524793388495]}
{'': [nan, 0.21903186542242611], 'false': [nan, 0.21903186542242611]}
{'': [nan, 0.2133318243549121]}
{'': [nan, 0.23295062680027598], 'false': [nan, 0.23295062680027598]}
{'': [nan, 0.23417273673257097], 'false': [nan, 0.23417273673257097]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.515
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360617;  // std dev = 9.54e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.09668838370982018;  // std dev = 0.382, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08763690045422697;  // std dev = 0.366, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A) )
%   | | | then return -0.07830999548070056;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return -0.15663276800495207;  // std dev = 0.440, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07244764007323992;  // std dev = 0.014, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06774277581307868;  // std dev = 0.014, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0636772283147225;  // std dev = 0.011, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( female(A) )
%   | | | then return 0.12387197689281078;  // std dev = 0.208, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.12854969371521088;  // std dev = 0.210, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.566', 'seconds']
Refined model CLL: -0.065022


******************************************
Best model found
******************************************
Results 

CLL : -0.071971 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.515 

Total Inference Time : 1.0416896343231201 

Total revision time: 4.137483930587768
Best scored revision CLL: -0.065022


Results 

CLL : -0.071971 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.154188728332519 

Total Inference Time : 1.0416896343231201 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.129
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1921076593021351;  // std dev = 0.472, 533.000 (wgt'ed) examples reached here.  /* #neg=355 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6600416369088128;  // std dev = 4.725, 156.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=129 */
%   | else return -0.025671065374492735;  // std dev = 6.487, 347.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1653423547781095;  // std dev = 0.115, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.16634024423897698;  // std dev = 9.924, 478.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.42314841835899153;  // std dev = 0.440, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.03665943027516653;  // std dev = 6.430, 342.000 (wgt'ed) examples reached here.  /* #neg=293 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.33564964696869215;  // std dev = 5.699, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.043833356935180964;  // std dev = 6.481, 373.000 (wgt'ed) examples reached here.  /* #neg=324 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1385418658943964;  // std dev = 0.041, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.09804257688848053;  // std dev = 8.876, 455.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11733212446237598;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.08911722148068682;  // std dev = 8.699, 448.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2383663504405168;  // std dev = 5.314, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.05471032740011013;  // std dev = 6.429, 374.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.174236985135147;  // std dev = 5.394, 167.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=129 */
%   | else return -0.03912287863857456;  // std dev = 6.411, 339.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10396661567590271;  // std dev = 0.350, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.04402013822397698;  // std dev = 8.464, 440.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.509', 'seconds']
Parameter learned model CLL:-0.315895 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false': [0.472, 355, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.725, 27, 129], 'false,false': [6.487, 298, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.115, 58, 0], 'false,false': [9.924, 300, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.44, 46, 129], 'false,false': [6.43, 293, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.699, 44, 129], 'false,false': [6.481, 324, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.18e-08, 17, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.041, 46, 0], 'false,false': [8.876, 277, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 17, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 45, 0], 'false,false': [8.699, 270, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.314, 37, 129], 'false,false': [6.429, 325, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.394, 38, 129], 'false,false': [6.411, 290, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.35, 52, 0], 'false,false': [8.464, 262, 178]}]
{'': [-1.2810265668751807e-17, 0.22243029473158335], 'true': [-1.2810265668751807e-17, nan]}
{'': [3.96508223080413e-18, 0.22864799275915013], 'false': [0.14312130177515187, 0.12127000473386806], 'true': [3.96508223080413e-18, nan]}
{'': [0.0, 0.19439380947004833], 'false': [0.00022789966455806642, 0.2060492604548892], 'true': [0.0, nan]}
{'': [0.0, 0.19290433037985794], 'false': [0.19376326530612054, 0.12089988441552112], 'true': [0.0, nan]}
{'': [0.0, 0.16759215693183446], 'false': [0.18775081924513196, 0.11261372628244377], 'true': [0.0, nan]}
{'': [8.163404592832034e-18, 0.16207223167914891], 'false': [0.0016656189688202502, 0.17315000001288738], 'true': [8.163404592832034e-18, nan]}
{'': [-2.44902137784961e-18, 0.1570128972965787], 'false': [-2.4671622769447924e-18, 0.1688938967556475], 'true': [-2.44902137784961e-18, nan]}
{'': [8.673617379884035e-19, 0.14710614691009097], 'false': [0.17009667645811674, 0.11049736109407228], 'true': [8.673617379884035e-19, nan]}
{'': [6.938893903907229e-19, 0.14878395051412194], 'false': [0.17421646371459737, 0.12123104763042461], 'true': [6.938893903907229e-19, nan]}
{'': [7.709882115452476e-19, 0.14793909260499777], 'false': [0.002357930539064489, 0.16282949650017736], 'true': [7.709882115452476e-19, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.254
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.12544463852839186;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.11231637819360682;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926098;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.09269127618926064;  // std dev = 6.99e-08, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 2.24e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08518475138839678;  // std dev = 7.60e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109179;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109169;  // std dev = 2.79e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109172;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.07877675473109146;  // std dev = 6.99e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333707;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.07324622576333696;  // std dev = 9.77e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.89e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.06842697784420283;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.530', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.254 

Total Inference Time : 1.1474382877349854 

Total revision time: 5.557350023269653
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.574054821014404 

Total Inference Time : 1.1474382877349854 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.624
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17505034355021643;  // std dev = 0.465, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16880995055883108;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1597787520041445;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13955260917072057;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12660594934936725;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0778642234244139;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08448838589743672;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.042643950974688725;  // std dev = 0.473, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.025156618759898938;  // std dev = 5.694, 161.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.044154620290452785;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.323', 'seconds']
Parameter learned model CLL:-0.38792 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.354, 79, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.694, 116, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
{'': [nan, 0.21647490577266518]}
{'': [nan, 0.22222222222222213], 'false': [nan, 0.22222222222222213]}
{'': [nan, 0.22714981070849039], 'false': [nan, 0.22714981070849039]}
{'': [nan, 0.22878045756091533], 'false': [nan, 0.22878045756091533]}
{'': [nan, 0.23200475907197968], 'false': [nan, 0.23200475907197968]}
{'': [nan, 0.22469008264462878], 'false': [nan, 0.22469008264462878]}
{'': [nan, 0.23120447450572265], 'false': [nan, 0.23120447450572265]}
{'': [nan, 0.22386794052801112]}
{'': [nan, 0.20138111955557259], 'false': [nan, 0.20138111955557259]}
{'': [nan, 0.2255113338383546], 'false': [nan, 0.2255113338383546]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.395
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.14185106490048766;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360621;  // std dev = 7.45e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.09269127618926108;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08518475138839683;  // std dev = 4.08e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109165;  // std dev = 4.28e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420267;  // std dev = 3.94e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.611', 'seconds']
Refined model CLL: -0.064459


******************************************
Best model found
******************************************
Results 

CLL : -0.066772 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.395 

Total Inference Time : 0.8796632289886475 

Total revision time: 3.6323215427398683
Best scored revision CLL: -0.064459


Results 

CLL : -0.066772 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.6490263404846193 

Total Inference Time : 0.8796632289886475 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.671
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18903128804068875;  // std dev = 0.471, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13759988995811315;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.139655846965849;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12727503669482088;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12123057652693638;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04747816271642947;  // std dev = 5.612, 150.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.048756443518361385;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08321568326187943;  // std dev = 0.478, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.020350322527304003;  // std dev = 5.579, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06227208694087432;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.279', 'seconds']
Parameter learned model CLL:-0.381491 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.612, 105, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.579, 101, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
{'': [nan, 0.2213992214532882]}
{'': [nan, 0.2116051862673504], 'false': [nan, 0.2116051862673504]}
{'': [nan, 0.21975425330812967], 'false': [nan, 0.21975425330812967]}
{'': [nan, 0.2230452216529305], 'false': [nan, 0.2230452216529305]}
{'': [nan, 0.227966308593751], 'false': [nan, 0.227966308593751]}
{'': [nan, 0.2100000000000009], 'false': [nan, 0.2100000000000009]}
{'': [nan, 0.21403091557669482], 'false': [nan, 0.21403091557669482]}
{'': [nan, 0.22878045756091567]}
{'': [nan, 0.2132201163445297], 'false': [nan, 0.2132201163445297]}
{'': [nan, 0.2287804575609153], 'false': [nan, 0.2287804575609153]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.445
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( female(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.6361400788776209;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.565374765230389;  // std dev = 0.069, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.4412216330886798;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11431418132618283;  // std dev = 0.141, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4250377188349616;  // std dev = 0.068, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.3307107903911547;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10241674446723413;  // std dev = 0.093, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0924545370693774;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32585514858656367;  // std dev = 0.061, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.25395223853303756;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08498379639609224;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( female(A) )
%   | | | then return 0.2508864777903857;  // std dev = 2.11e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2272237218293163;  // std dev = 0.644, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.1868846964545756;  // std dev = 0.466, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.20422500691129444;  // std dev = 0.463, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.0828855687132981;  // std dev = 0.236, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07280693968719731;  // std dev = 3.49e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1843430581834016;  // std dev = 0.045, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.2937116913928054;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0680423244582231;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1582261647944257;  // std dev = 0.040, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.2387134250377505;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06385235163808319;  // std dev = 2.69e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13827735131170224;  // std dev = 0.036, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.19986456891330862;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.474', 'seconds']
Refined model CLL: -0.069026


******************************************
Best model found
******************************************
Results 

CLL : -0.077738 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.445 

Total Inference Time : 0.8644351959228516 

Total revision time: 3.738708320617676
Best scored revision CLL: -0.069026


Results 

CLL : -0.077738 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.755413118362427 

Total Inference Time : 0.8644351959228516 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.72
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16415986406126204;  // std dev = 0.461, 183.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.8194242493105955;  // std dev = 0.991, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return -0.16303189104028112;  // std dev = 3.65e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.14198842778981022;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1299835798159584;  // std dev = 5.169, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6306900476455946;  // std dev = 0.182, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.1566489925893445;  // std dev = 0.078, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.47944919891018906;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.1382588954732127;  // std dev = 0.041, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09658414790452959;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.04881351968235468;  // std dev = 3.413, 155.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08847875049545283;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.026182052056433206;  // std dev = 3.394, 173.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3111789651623198;  // std dev = 1.932, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return -0.12824177711323592;  // std dev = 0.127, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2570682952547228;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.11602088370514678;  // std dev = 0.088, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06506477710609525;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.0084771066202564;  // std dev = 2.445, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.392', 'seconds']
Parameter learned model CLL:-0.154153 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.461, 127, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.991, 1, 56], 'false,false': [3.65e-08, 118, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [5.169, 113, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.182, 2, 56], 'false,false': [0.078, 103, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.39, 2, 56], 'false,false': [0.041, 115, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.413, 99, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [3.394, 117, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.932, 4, 56], 'false,false': [0.127, 111, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.088, 128, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [2.445, 110, 56]}]
{'': [nan, 0.21236824031771667]}
{'': [nan, 0.21760000000000113], 'false': [0.017236072637735925, 1.129040364025583e-17]}
{'': [nan, 0.15514964045103283], 'false': [-2.3129646346357427e-18, 0.15812183949521125]}
{'': [nan, 0.1549009492393948], 'false': [0.03329369797859725, 5.9810632152673197e-05]}
{'': [nan, 0.09620737775525917], 'false': [0.03329369797859621, 1.4802709653196343e-05]}
{'': [nan, 0.0737619946531448], 'false': [0.0, 0.07513369398042345]}
{'': [nan, 0.06478986415078916], 'false': [1.1564823173178713e-18, 0.06659622655818137]}
{'': [nan, 0.06590618847153609], 'false': [0.06222222222222243, 0.0001464378101494848]}
{'': [0.0, 0.04532993446203537], 'false': [0.048261993679976925, 6.113043786953008e-05], 'true': [0.0, nan]}
{'': [0.0, 0.034584917681141344], 'false': [-1.734723475976807e-18, 0.03600299823469992], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.351
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(B) )
%   | then return -0.11231637819360618;  // std dev = 8.56e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1015963294878364;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926086;  // std dev = 6.91e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( female(A) )
%   | | then return 0.24301663564242218;  // std dev = 0.063, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.24382700943756003;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.0787767547310916;  // std dev = 5.67e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2117096941217251;  // std dev = 0.000506, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10617513407656766;  // std dev = 0.000101, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17852686356067762;  // std dev = 0.000444, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.0965187665285114;  // std dev = 5.77e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333707;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15382807077316799;  // std dev = 0.000394, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.08843229734210016;  // std dev = 5.84e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06842697784420264;  // std dev = 5.48e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13485289044343435;  // std dev = 0.000354, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08154004965627995;  // std dev = 6.07e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.333', 'seconds']
Refined model CLL: -0.064743


******************************************
Best model found
******************************************
Results 

CLL : -0.07695 

AUC ROC : 0.99814 

AUC PR : 0.950369 

Precision : 0.799401 

Recall : 0.819018 

F1 : 0.809091 

Total Learning Time : 1.351 

Total Inference Time : 0.9246275424957275 

Total revision time: 3.9007891616821286
Best scored revision CLL: -0.064743


Results 

CLL : -0.07695 

AUC ROC : 0.99814 

AUC PR : 0.950369 

Precision : 0.799401 

Recall : 0.819018 

F1 : 0.809091 

Total Learning Time : 3.923981328964233 

Total Inference Time : 0.9246275424957275 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.854
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18399163172872693;  // std dev = 0.469, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7697277700586017;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.16575610090913895;  // std dev = 1.25e-07, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.14408539460892908;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.11318160644728613;  // std dev = 5.400, 186.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5292154746408858;  // std dev = 0.352, 68.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=58 */
%   | else return -0.1559060940795404;  // std dev = 0.095, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4173994036256935;  // std dev = 2.772, 67.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=58 */
%   | else return -0.13637237780346032;  // std dev = 0.085, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.21541322037171703;  // std dev = 0.179, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.07335254293359399;  // std dev = 3.737, 155.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08065048476397098;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.03282578191635528;  // std dev = 3.837, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3413851933302901;  // std dev = 2.146, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.12927851899375595;  // std dev = 0.199, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.21928505874667037;  // std dev = 2.651, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.1162781375975143;  // std dev = 0.165, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0595384357589781;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.011287754005977051;  // std dev = 3.025, 164.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.526', 'seconds']
Parameter learned model CLL:-0.170035 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 120, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.934, 4, 58], 'false,false': [1.25e-07, 102, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [5.4, 128, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.352, 10, 58], 'false,false': [0.095, 116, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.772, 9, 58], 'false,false': [0.085, 111, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.179, 10, 0], 'false,false': [3.737, 97, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [7.45e-09, 12, 0], 'false,false': [3.837, 121, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.146, 5, 58], 'false,false': [0.199, 120, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.651, 8, 58], 'false,false': [0.165, 118, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [3.025, 106, 58]}]
{'': [nan, 0.21966923368261607]}
{'': [nan, 0.22858417608566475], 'false': [0.06035379812695247, 1.523835523995313e-16]}
{'': [nan, 0.15294105609617742], 'false': [0.0, 0.15678983367157284]}
{'': [nan, 0.15528429420417367], 'false': [0.12412774656654696, 7.768193816030609e-05]}
{'': [nan, 0.11520505985441318], 'false': [0.11472681470520438, 6.432891289326588e-05]}
{'': [nan, 0.09134032336297339], 'false': [0.03209345590520773, 0.09010902517789031]}
{'': [nan, 0.07785971642774063], 'false': [4.625929269271485e-18, 0.08227034464483432]}
{'': [nan, 0.07537783126562983], 'false': [0.07306626354245421, 0.00032893002404033776]}
{'': [0.0, 0.06425827643205997], 'false': [0.10651974288337905, 0.0002304229474617949], 'true': [0.0, nan]}
{'': [nan, 0.05285651085652552], 'false': [-6.938893903907229e-19, 0.0557911729070405]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.521
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return -0.22308877321364282;  // std dev = 0.271, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.11231637819360621;  // std dev = 7.15e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5219822959992896;  // std dev = 0.146, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.40472866407449415;  // std dev = 0.129, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return -0.17943083612938593;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32735551284546055;  // std dev = 0.037, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.14453047960333504;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.0926110507073282;  // std dev = 0.009, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08510771483294101;  // std dev = 0.008, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25970674789751713;  // std dev = 0.032, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.13362566541249402;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07495115752297325;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.07878816814692048;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21295950032112285;  // std dev = 0.028, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.11889873600096534;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.1794436725813966;  // std dev = 0.024, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09869525343104718;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07308358777396025;  // std dev = 0.012, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.1545236563371643;  // std dev = 0.022, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09389791898878233;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.06837204229313429;  // std dev = 0.006, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.058971498767101574;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(B) )
%   | then return -0.06421367476274494;  // std dev = 4.53e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1353960295317737;  // std dev = 0.019, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09160006768409888;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.289', 'seconds']
Refined model CLL: -0.065627


******************************************
Best model found
******************************************
Results 

CLL : -0.07843 

AUC ROC : 0.99881 

AUC PR : 0.964909 

Precision : 0.800604 

Recall : 0.817901 

F1 : 0.80916 

Total Learning Time : 1.521 

Total Inference Time : 0.9595284461975098 

Total revision time: 4.2966148853302
Best scored revision CLL: -0.065627


Results 

CLL : -0.07843 

AUC ROC : 0.99881 

AUC PR : 0.964909 

Precision : 0.800604 

Recall : 0.817901 

F1 : 0.80916 

Total Learning Time : 4.319807052612305 

Total Inference Time : 0.9595284461975098 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.135
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19210765930213516;  // std dev = 0.472, 533.000 (wgt'ed) examples reached here.  /* #neg=355 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5744978703305633;  // std dev = 5.776, 174.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=129 */
%   | else return -0.026881440014262185;  // std dev = 6.492, 350.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1631774501595871;  // std dev = 2.11e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.20354170741650313;  // std dev = 9.732, 441.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.40903097874442784;  // std dev = 0.452, 181.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=129 */
%   | else return -0.05346833413700982;  // std dev = 6.472, 374.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.37153702173214576;  // std dev = 5.472, 168.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=129 */
%   | else return -0.03504100586609369;  // std dev = 6.431, 348.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13164855986800483;  // std dev = 7.45e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.07992261239113084;  // std dev = 9.068, 483.000 (wgt'ed) examples reached here.  /* #neg=305 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12201454994300125;  // std dev = 0.247, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.09882649307026481;  // std dev = 8.784, 429.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.23213910250155523;  // std dev = 5.502, 169.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=129 */
%   | else return -0.04270554980273934;  // std dev = 6.373, 328.000 (wgt'ed) examples reached here.  /* #neg=279 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.18767990623067385;  // std dev = 5.362, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.03689865119761315;  // std dev = 6.375, 333.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10878231625371228;  // std dev = 0.473, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.01831280972213444;  // std dev = 8.753, 477.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.469', 'seconds']
Parameter learned model CLL:-0.313628 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false': [0.472, 355, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.776, 45, 129], 'false,false': [6.492, 301, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.11e-08, 43, 0], 'false,false': [9.732, 263, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.452, 52, 129], 'false,false': [6.472, 325, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.472, 39, 129], 'false,false': [6.431, 299, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 58, 0], 'false,false': [9.068, 305, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.247, 53, 0], 'false,false': [8.784, 251, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.502, 40, 129], 'false,false': [6.373, 279, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.362, 37, 129], 'false,false': [6.375, 284, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.473, 63, 0], 'false,false': [8.753, 299, 178]}]
{'': [-9.25185853854297e-18, 0.22243029473158327], 'true': [-9.25185853854297e-18, nan]}
{'': [4.270088556250602e-18, 0.22430219684167446], 'false': [0.1917360285374593, 0.12040000000000266], 'true': [4.270088556250602e-18, nan]}
{'': [9.912705577010326e-18, 0.20655212369518572], 'false': [1.0327656043024712e-17, 0.21474426213435902], 'true': [9.912705577010326e-18, nan]}
{'': [0.0, 0.1892602118900698], 'false': [0.20475565458930087, 0.11200087114422771], 'true': [0.0, nan]}
{'': [0.0, 0.174478526451901], 'false': [0.1782525510204089, 0.11883612552514355], 'true': [0.0, nan]}
{'': [2.3129646346357427e-18, 0.156269954589916], 'false': [5.74253288599219e-17, 0.1702363685078519], 'true': [2.3129646346357427e-18, nan]}
{'': [-9.912705577010326e-19, 0.16497463605481014], 'false': [0.001148629926292981, 0.17985145196205954], 'true': [-9.912705577010326e-19, nan]}
{'': [0.0, 0.15959539789930433], 'false': [0.1791365550572916, 0.12384043781870875], 'true': [0.0, nan]}
{'': [6.30808536718839e-19, 0.15025394150273272], 'false': [0.17321091595296903, 0.12203177245813698], 'true': [6.30808536718839e-19, nan]}
{'': [2.8912057932946786e-18, 0.14395380602847838], 'false': [0.0035505809395287775, 0.16061309158790915], 'true': [2.8912057932946786e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 2.408
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.12544463852839186;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.11231637819360667;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783623;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.09269127618926049;  // std dev = 1.19e-07, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.29e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.08518475138839678;  // std dev = 9.06e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 1.49e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109176;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.07877675473109146;  // std dev = 6.14e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333707;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return -0.07324622576333684;  // std dev = 9.88e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.0684269778442027;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.06842697784420271;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06419184008202626;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.447', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.408 

Total Inference Time : 1.1799635887145996 

Total revision time: 5.760775583267211
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.783967750549316 

Total Inference Time : 1.1799635887145996 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.688
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20971143509951246;  // std dev = 0.477, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7490240451908738;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.16934330174790263;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1468364518985111;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.1599731687550653;  // std dev = 4.575, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.49736018592225506;  // std dev = 0.373, 54.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return -0.1641251619862699;  // std dev = 0.116, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4282065337716997;  // std dev = 2.301, 51.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=45 */
%   | else return -0.1431676155819559;  // std dev = 0.103, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09852152652302064;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.06353910323716108;  // std dev = 3.391, 117.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09011081533002298;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.03205028642467986;  // std dev = 3.504, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.33420967617864034;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.131328528337589;  // std dev = 0.197, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.23758510794365822;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.11904953802673718;  // std dev = 0.146, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06581839465351645;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.005586965308094008;  // std dev = 2.794, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.593', 'seconds']
Parameter learned model CLL:-0.186496 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 83, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.0, 85, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [7.45e-09, 9, 0], 'false,false': [4.575, 76, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.373, 9, 45], 'false,false': [0.116, 99, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.301, 6, 45], 'false,false': [0.103, 109, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [3.391, 72, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [3.504, 81, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.197, 88, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.121, 5, 45], 'false,false': [0.146, 74, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [2.794, 89, 45]}]
{'': [nan, 0.22796630859375083]}
{'': [nan, 0.22304522165292828], 'false': [0.07496876301540929, -9.404242090942502e-17]}
{'': [nan, 0.16704595443087272], 'false': [6.1679056923619804e-18, 0.17295401944057084]}
{'': [nan, 0.14903523814542433], 'false': [0.138888888888888, 0.0001356579385834921]}
{'': [nan, 0.10404724020625038], 'false': [0.10380622837370261, 9.819879778030961e-05]}
{'': [nan, 0.09188820642065243], 'false': [0.0, 0.09827023633697651]}
{'': [0.0, 0.09308352149646723], 'false': [-1.982541115402065e-18, 0.09746938957353819], 'true': [0.0, nan]}
{'': [0.0, 0.07688829770940005], 'false': [0.07496876301541015, 0.000442055269648578], 'true': [0.0, nan]}
{'': [nan, 0.06706747058225021], 'false': [0.08999999999999986, 0.000286925246173953]}
{'': [0.0, 0.05665422728742509], 'false': [0.0, 0.05824024390105513], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.212
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783615;  // std dev = 5.96e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926098;  // std dev = 4.47e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839691;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 4.94e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109166;  // std dev = 4.15e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420267;  // std dev = 3.49e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.468', 'seconds']
Refined model CLL: -0.06565


******************************************
Best model found
******************************************
Results 

CLL : -0.07379 

AUC ROC : 0.998709 

AUC PR : 0.960275 

Precision : 0.80814 

Recall : 0.824926 

F1 : 0.816446 

Total Learning Time : 1.212 

Total Inference Time : 0.7831313610076904 

Total revision time: 3.457539939880371
Best scored revision CLL: -0.06565


Results 

CLL : -0.07379 

AUC ROC : 0.998709 

AUC PR : 0.960275 

Precision : 0.80814 

Recall : 0.824926 

F1 : 0.816446 

Total Learning Time : 3.4807321071624755 

Total Inference Time : 0.7831313610076904 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.649
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19905802600860328;  // std dev = 0.474, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7071499978189129;  // std dev = 2.092, 40.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=35 */
%   | else return -0.06475721867593318;  // std dev = 2.995, 97.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.15899843082523205;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.12090875617920177;  // std dev = 5.037, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6300902077910753;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.06432485226012567;  // std dev = 2.979, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4330736170915465;  // std dev = 1.895, 39.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | else return -0.06358835235057221;  // std dev = 2.994, 98.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1242689529063872;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.07025880820251847;  // std dev = 3.948, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.11136437668549067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.08658637856958401;  // std dev = 3.857, 114.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3900443517457189;  // std dev = 1.19e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.08239409581477324;  // std dev = 3.003, 104.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3021311190240498;  // std dev = 2.11e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.0659867289287058;  // std dev = 2.995, 100.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08813477822618283;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.0446832436825558;  // std dev = 3.277, 118.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.408', 'seconds']
Parameter learned model CLL:-0.217506 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.474, 87, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.092, 5, 35], 'false,false': [2.995, 87, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [5.037, 97, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.226, 2, 35], 'false,false': [2.979, 81, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.895, 4, 35], 'false,false': [2.994, 88, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [3.948, 85, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [3.857, 69, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.19e-07, 0, 35], 'false,false': [3.003, 94, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.11e-08, 0, 35], 'false,false': [2.995, 90, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [3.277, 73, 45]}]
{'': [nan, 0.22469008264462897]}
{'': [nan, 0.220576482497736], 'false': [0.10937499999999911, 0.09246466149431419]}
{'': [nan, 0.17516889976282446], 'false': [0.0, 0.1786719196754715]}
{'': [nan, 0.18320437835934472], 'false': [0.05113221329437481, 0.09751456394616052]}
{'': [nan, 0.14184645324890138], 'false': [0.0920447074293226, 0.09144470248694424]}
{'': [nan, 0.11925267972518232], 'false': [0.0, 0.11988114505486719]}
{'': [nan, 0.12970337780775953], 'false': [0.0, 0.13050039194019294]}
{'': [nan, 0.10694387811206532], 'false': [4.0602442043434295e-16, 0.08673364923172035]}
{'': [nan, 0.09247903210275246], 'false': [1.2688263138573217e-17, 0.08971427667687941]}
{'': [nan, 0.0891977220538303], 'false': [1.1564823173178713e-18, 0.09102808983415336]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;workedunder(A, B) :- genre(A, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.443
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( female(A) )
%   | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( female(A) )
%   | then return 0.6861389866026452;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5647888558383583;  // std dev = 0.062, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.4261983954648746;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.42458699858992943;  // std dev = 0.061, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.33217400385775114;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926105;  // std dev = 2.11e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( female(A) )
%   | then return 0.33358895365678637;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.26797283000265737;  // std dev = 0.163, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2.98e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.26305133064506064;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.32829598808810645;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.21530840345004018;  // std dev = 0.005, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.2600400490126729;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07877675473109161;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.18112184228398107;  // std dev = 0.004, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( actor(B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( female(A) )
%   | | then return 0.12551758172213787;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.07177921265788909;  // std dev = 0.486, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15579075108241286;  // std dev = 0.004, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.29924476246309967;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.06842697784420265;  // std dev = 5.00e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( female(A) )
%   | | then return 0.06438845342442934;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.1700730014082219;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0.13263542023919234;  // std dev = 0.333, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.349', 'seconds']
Refined model CLL: -0.074996


******************************************
Best model found
******************************************
Results 

CLL : -0.099026 

AUC ROC : 0.999456 

AUC PR : 0.981685 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.443 

Total Inference Time : 0.7971611022949219 

Total revision time: 3.657737247467041
Best scored revision CLL: -0.074996


Results 

CLL : -0.099026 

AUC ROC : 0.999456 

AUC PR : 0.981685 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.6809294147491456 

Total Inference Time : 0.7971611022949219 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.693
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2038279474451926;  // std dev = 0.476, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16284364325046358;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11681165599227045;  // std dev = 6.219, 181.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13642768825281243;  // std dev = 6.043, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13338487015212946;  // std dev = 5.947, 152.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09014151209214179;  // std dev = 6.033, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06811208176253312;  // std dev = 6.053, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06754468653291025;  // std dev = 0.480, 156.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03177800436180789;  // std dev = 6.092, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03984530317788679;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.240', 'seconds']
Parameter learned model CLL:-0.399574 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.476, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.119, 113, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.219, 125, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.043, 105, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.947, 96, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.033, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.053, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.48, 100, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.092, 110, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
{'': [nan, 0.22618503276939517]}
{'': [nan, 0.22156086971744676], 'false': [nan, 0.22156086971744676]}
{'': [nan, 0.21366869143188508], 'false': [nan, 0.21366869143188508]}
{'': [nan, 0.22684310018903683], 'false': [nan, 0.22684310018903683]}
{'': [nan, 0.23268698060941703], 'false': [nan, 0.23268698060941703]}
{'': [nan, 0.22750000000000128], 'false': [nan, 0.22750000000000128]}
{'': [nan, 0.22618503276939522], 'false': [nan, 0.22618503276939522]}
{'': [nan, 0.2301117685733063]}
{'': [nan, 0.2235447815357807], 'false': [nan, 0.2235447815357807]}
{'': [nan, 0.22815553182231674], 'false': [nan, 0.22815553182231674]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.569
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.45e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 7.88e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( female(A) )
%   | | | then return 0.39897394438523337;  // std dev = 0.510, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.40020992037010517;  // std dev = 0.510, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0926912761892609;  // std dev = 6.14e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3246238383692052;  // std dev = 0.001, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.14427522689075367;  // std dev = 0.000125, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 6.14e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25783982440931164;  // std dev = 0.000884, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12736045922189856;  // std dev = 0.000159, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21164029700091827;  // std dev = 0.000771, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11388519010555836;  // std dev = 0.000125, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17847605702524816;  // std dev = 0.000678, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10289929967507114;  // std dev = 0.000125, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420265;  // std dev = 5.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1537895898185102;  // std dev = 0.000601, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.0937881841726073;  // std dev = 0.000121, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( female(A) )
%   | | | then return 0.11965978364039727;  // std dev = 0.301, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.1347533767481535;  // std dev = 2.79e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.347', 'seconds']
Refined model CLL: -0.065906


******************************************
Best model found
******************************************
Results 

CLL : -0.081457 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.569 

Total Inference Time : 0.9677958488464355 

Total revision time: 4.049132263183594
Best scored revision CLL: -0.065906


Results 

CLL : -0.081457 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.069322263717652 

Total Inference Time : 0.9677958488464355 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.711
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1821712814682287;  // std dev = 0.468, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16782879917456242;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1770870291686185;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09645837018970703;  // std dev = 6.302, 184.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0976430516292757;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09778415038958616;  // std dev = 6.133, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.024747908553688892;  // std dev = 6.383, 195.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05958556518372738;  // std dev = 0.473, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03795322886255999;  // std dev = 6.245, 177.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03573079899976719;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.118', 'seconds']
Parameter learned model CLL:-0.377736 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.468, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.302, 126, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.133, 107, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.383, 137, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 114, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.245, 119, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
{'': [nan, 0.2190318654224278]}
{'': [nan, 0.2222222222222236], 'false': [nan, 0.2222222222222236]}
{'': [nan, 0.23233456176894757], 'false': [nan, 0.23233456176894757]}
{'': [nan, 0.21585538752362965], 'false': [nan, 0.21585538752362965]}
{'': [nan, 0.2222222222222222], 'false': [nan, 0.2222222222222222]}
{'': [nan, 0.22795224977043377], 'false': [nan, 0.22795224977043377]}
{'': [nan, 0.20896778435240163], 'false': [nan, 0.20896778435240163]}
{'': [nan, 0.22349918875067765]}
{'': [nan, 0.22030706374285924], 'false': [nan, 0.22030706374285924]}
{'': [nan, 0.22222222222222332], 'false': [nan, 0.22222222222222332]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.517
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.1254446385283911;  // std dev = 7.60e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 9.06e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1123163781936064;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926083;  // std dev = 7.45e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 6.41e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109161;  // std dev = 6.14e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then return 0.17285340073665678;  // std dev = 0.248, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420264;  // std dev = 5.58e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15329378018924641;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08588024243607224;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13443619941259197;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07937363314182268;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.396', 'seconds']
Refined model CLL: -0.065219


******************************************
Best model found
******************************************
Results 

CLL : -0.075625 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 1.517 

Total Inference Time : 1.012648582458496 

Total revision time: 4.112701013565063
Best scored revision CLL: -0.065219


Results 

CLL : -0.075625 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 4.132891014099121 

Total Inference Time : 1.012648582458496 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.123
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19463286704657837;  // std dev = 0.473, 529.000 (wgt'ed) examples reached here.  /* #neg=351 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5615807391695419;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.029592370714289724;  // std dev = 6.500, 356.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1698602274818306;  // std dev = 0.188, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.19515712070844568;  // std dev = 9.845, 449.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.46401126194519227;  // std dev = 0.424, 169.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=129 */
%   | else return -0.04410123808091695;  // std dev = 6.444, 350.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.32379998577615227;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.042296028431914295;  // std dev = 6.460, 365.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13649384127964495;  // std dev = 0.037, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.08491725004644753;  // std dev = 9.042, 478.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11632402462767553;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.06942512488835971;  // std dev = 9.080, 469.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.22230068007799628;  // std dev = 5.728, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.037892005089863005;  // std dev = 6.371, 330.000 (wgt'ed) examples reached here.  /* #neg=281 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1952890945757034;  // std dev = 5.394, 167.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=129 */
%   | else return -0.04261492994219979;  // std dev = 6.417, 351.000 (wgt'ed) examples reached here.  /* #neg=302 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1029258581987338;  // std dev = 0.335, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.03384435833724244;  // std dev = 8.557, 475.000 (wgt'ed) examples reached here.  /* #neg=297 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.447', 'seconds']
Parameter learned model CLL:-0.310368 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 351, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.5, 307, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.188, 58, 0], 'false,false': [9.845, 271, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.424, 40, 129], 'false,false': [6.444, 301, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.46, 316, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.037, 49, 0], 'false,false': [9.042, 300, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [9.08, 291, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [1.32e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.728, 44, 129], 'false,false': [6.371, 281, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.394, 38, 129], 'false,false': [6.417, 302, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.335, 63, 0], 'false,false': [8.557, 297, 178]}]
{'': [-1.2810265668751807e-17, 0.22326249548851232], 'true': [-1.2810265668751807e-17, nan]}
{'': [3.7007434154171884e-18, 0.22243029473157805], 'false': [0.1976443550703831, 0.11869555611665314], 'true': [3.7007434154171884e-18, nan]}
{'': [-1.5419764230904951e-18, 0.2047414109641677], 'false': [0.0006074877523997962, 0.21586842513803073], 'true': [-1.5419764230904951e-18, nan]}
{'': [0.0, 0.19532474381905898], 'false': [0.18005698592628464, 0.11862726579728942], 'true': [0.0, nan]}
{'': [0.0, 0.17101535195611078], 'false': [0.19764435507038347, 0.11433337574011147], 'true': [0.0, nan]}
{'': [1.5419764230904951e-18, 0.15938949298868701], 'false': [0.0013935027708365307, 0.17102763087484232], 'true': [1.5419764230904951e-18, nan]}
{'': [0.0, 0.16032985129151675], 'false': [-1.784287003861859e-17, 0.17579342116739563], 'true': [0.0, nan]}
{'': [1.1564823173178713e-18, 0.16120019473803873], 'false': [0.18964883557753354, 0.12300163697632657], 'true': [1.1564823173178713e-18, nan]}
{'': [6.30808536718839e-19, 0.1480319185026708], 'false': [0.1742222362817828, 0.11732404777811238], 'true': [6.30808536718839e-19, nan]}
{'': [2.8912057932946786e-18, 0.13823795317345874], 'false': [0.0017796966205224447, 0.15414613685796721], 'true': [2.8912057932946786e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.45
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.1254446385283919;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360617;  // std dev = 3.16e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.11231637819360685;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1015963294878362;  // std dev = 3.65e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.09269127618926071;  // std dev = 6.32e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.08518475138839678;  // std dev = 7.45e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.07877675473109146;  // std dev = 7.15e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.07324622576333692;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06842697784420282;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202616;  // std dev = 5.27e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.542', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.45 

Total Inference Time : 1.1228737831115723 

Total revision time: 5.846486375808716
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.866676376342774 

Total Inference Time : 1.1228737831115723 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.631
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18661608838418378;  // std dev = 0.470, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19102352528032485;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15186203000372214;  // std dev = 5.424, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10456905355635887;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09822932558937554;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07749260240234143;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0949825393425591;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370822442697839;  // std dev = 0.468, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.022126356599519663;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03167011432976842;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.270', 'seconds']
Parameter learned model CLL:-0.387488 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.47, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.424, 85, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.468, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
{'': [nan, 0.22057648249773662]}
{'': [nan, 0.2295918367346932], 'false': [nan, 0.2295918367346932]}
{'': [nan, 0.22633136094674602], 'false': [nan, 0.22633136094674602]}
{'': [nan, 0.2189327674551005], 'false': [nan, 0.2189327674551005]}
{'': [nan, 0.22304522165292945], 'false': [nan, 0.22304522165292945]}
{'': [nan, 0.22222222222222118], 'false': [nan, 0.22222222222222118]}
{'': [nan, 0.23200475907198057], 'false': [nan, 0.23200475907198057]}
{'': [nan, 0.21893276745510137]}
{'': [nan, 0.21729289271163485], 'false': [nan, 0.21729289271163485]}
{'': [nan, 0.22222222222222185], 'false': [nan, 0.22222222222222185]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.373
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14185106490048768;  // std dev = 6.83e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5362897848908588;  // std dev = 0.658, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return -0.11231637819360625;  // std dev = 5.58e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783616;  // std dev = 5.96e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42102430022370757;  // std dev = 0.013, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1788989916976969;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32309431125020965;  // std dev = 0.012, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.154421498446451;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25679810146622734;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.13531558279553887;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08505016935808371;  // std dev = 0.010, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07878652203428965;  // std dev = 3.16e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21090605309981375;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11974503312444076;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07325469879011617;  // std dev = 4.15e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17793861381285112;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10722673598218672;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06843439438645235;  // std dev = 3.16e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15338260081590027;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.098019567589594;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419838366280406;  // std dev = 1.67e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13450563594783516;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08564202954086622;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.582', 'seconds']
Refined model CLL: -0.066504


******************************************
Best model found
******************************************
Results 

CLL : -0.071399 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 1.373 

Total Inference Time : 0.8345508575439453 

Total revision time: 3.6038451709747314
Best scored revision CLL: -0.066504


Results 

CLL : -0.071399 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 3.624035171508789 

Total Inference Time : 0.8345508575439453 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.649
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17957750652808366;  // std dev = 0.467, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15628196000955294;  // std dev = 5.526, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12906655030357442;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1864155346628904;  // std dev = 5.219, 114.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06961061937132855;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08213464707408438;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05419224788674016;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.043389952832263004;  // std dev = 0.468, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0679548568253169;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05378868260873895;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.196', 'seconds']
Parameter learned model CLL:-0.39464 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.467, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.526, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.219, 69, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.468, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
{'': [nan, 0.2181122448979602]}
{'': [nan, 0.21811224489796058], 'false': [nan, 0.21811224489796058]}
{'': [nan, 0.21647490577266465], 'false': [nan, 0.21647490577266465]}
{'': [nan, 0.23891966759002795], 'false': [nan, 0.23891966759002795]}
{'': [nan, 0.2140309155766939], 'false': [nan, 0.2140309155766939]}
{'': [nan, 0.2230452216529307], 'false': [nan, 0.2230452216529307]}
{'': [nan, 0.21893276745509938], 'false': [nan, 0.21893276745509938]}
{'': [nan, 0.21893276745510137]}
{'': [nan, 0.2295918367346927], 'false': [nan, 0.2295918367346927]}
{'': [nan, 0.22959183673469324], 'false': [nan, 0.22959183673469324]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.532
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839144;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( female(A) )
%   | | | then return 0.3958840044230538;  // std dev = 0.508, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.39494358791282524;  // std dev = 0.508, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32554308224152206;  // std dev = 0.000692, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14378551433697567;  // std dev = 0.000116, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.79e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25846615296743364;  // std dev = 0.000604, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12696349545297345;  // std dev = 0.000114, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109161;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( female(A) )
%   | | | then return 0.19843807045218256;  // std dev = 0.319, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.19800263563693168;  // std dev = 0.319, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.1554705462361282;  // std dev = 0.086, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.18094705651089793;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07405883667162054;  // std dev = 0.061, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06837519634673435;  // std dev = 3.33e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1572910878079185;  // std dev = 0.011, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15650618178306538;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06414615126149945;  // std dev = 3.41e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( female(A) )
%   | | | then return 0.12752860139343333;  // std dev = 0.268, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.12417467233888173;  // std dev = 0.268, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.448', 'seconds']
Refined model CLL: -0.069689


******************************************
Best model found
******************************************
Results 

CLL : -0.084453 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.532 

Total Inference Time : 0.8477270603179932 

Total revision time: 3.749506956100464
Best scored revision CLL: -0.069689


Results 

CLL : -0.084453 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.7696969566345215 

Total Inference Time : 0.8477270603179932 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.729
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19347827641687884;  // std dev = 0.472, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13563061600024867;  // std dev = 6.249, 185.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11920372117293146;  // std dev = 6.234, 183.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10379762350677324;  // std dev = 6.219, 181.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12476044224118109;  // std dev = 6.043, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09603212647308372;  // std dev = 6.073, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09998910311678727;  // std dev = 5.970, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03832729219319795;  // std dev = 0.467, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06532640628048327;  // std dev = 6.002, 157.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.036432534010790496;  // std dev = 6.073, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.160', 'seconds']
Parameter learned model CLL:-0.388244 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 111, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.249, 129, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.234, 127, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.219, 125, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.043, 105, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.073, 108, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.97, 98, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.467, 118, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.002, 101, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.073, 108, 56]}]
{'': [nan, 0.22288357416902752]}
{'': [nan, 0.21107377647918066], 'false': [nan, 0.21107377647918066]}
{'': [nan, 0.21236824031771812], 'false': [nan, 0.21236824031771812]}
{'': [nan, 0.21366869143188416], 'false': [nan, 0.21366869143188416]}
{'': [nan, 0.22684310018903572], 'false': [nan, 0.22684310018903572]}
{'': [nan, 0.2248661511005329], 'false': [nan, 0.2248661511005329]}
{'': [nan, 0.23140495867768615], 'false': [nan, 0.23140495867768615]}
{'': [nan, 0.21825868674857857]}
{'': [nan, 0.2294616414458999], 'false': [nan, 0.2294616414458999]}
{'': [nan, 0.22486615110053468], 'false': [nan, 0.22486615110053468]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.454
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.88e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 6.99e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( female(A) )
%   | | | then return 0.5093193460607749;  // std dev = 0.911, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4229324703304599;  // std dev = 0.042, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.17617582954471644;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32439929984574795;  // std dev = 0.038, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.15304122035082526;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A) )
%   | | | then return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return -0.21024652888857026;  // std dev = 0.526, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08471851101472468;  // std dev = 0.022, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2576935606626646;  // std dev = 0.033, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1331700975047721;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07863008780800052;  // std dev = 0.011, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2115412414372076;  // std dev = 0.029, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11984975617862623;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07282050129007189;  // std dev = 0.021, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1784061016239802;  // std dev = 0.025, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.10701563597008941;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06769354993655469;  // std dev = 0.023, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1537383004325254;  // std dev = 0.022, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.0982925293907626;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0642349698741875;  // std dev = 0.007, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( female(A) )
%   | | | then return 0.1375662556243307;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.11778341818164456;  // std dev = 0.306, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.364', 'seconds']
Refined model CLL: -0.066126


******************************************
Best model found
******************************************
Results 

CLL : -0.084872 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.454 

Total Inference Time : 0.9727575778961182 

Total revision time: 4.023914249420166
Best scored revision CLL: -0.066126


Results 

CLL : -0.084872 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 30.25449338722229 

Total Inference Time : 0.9727575778961182 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.8
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1768302537808323;  // std dev = 0.466, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17441309931996837;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1592045973382272;  // std dev = 6.143, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14657135926759235;  // std dev = 6.081, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08591009273752105;  // std dev = 6.245, 177.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0754636681485412;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05885552129909797;  // std dev = 6.227, 175.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.045147846755942196;  // std dev = 0.470, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03400898992934584;  // std dev = 6.245, 177.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.038403020327718564;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.156', 'seconds']
Parameter learned model CLL:-0.38291 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.143, 108, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.081, 102, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.245, 119, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.227, 117, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.47, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.245, 119, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
{'': [nan, 0.2171235358048548]}
{'': [nan, 0.22413734140419536], 'false': [nan, 0.22413734140419536]}
{'': [nan, 0.22731891421105965], 'false': [nan, 0.22731891421105965]}
{'': [nan, 0.2310937499999985], 'false': [nan, 0.2310937499999985]}
{'': [nan, 0.22030706374285633], 'false': [nan, 0.22030706374285633]}
{'': [nan, 0.22222222222222002], 'false': [nan, 0.22222222222222002]}
{'': [nan, 0.22158367346938596], 'false': [nan, 0.22158367346938596]}
{'': [nan, 0.22094524793388415]}
{'': [nan, 0.22030706374285852], 'false': [nan, 0.22030706374285852]}
{'': [nan, 0.2241373414041918], 'false': [nan, 0.2241373414041918]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.465
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360625;  // std dev = 7.45e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783666;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09269127618926093;  // std dev = 5.58e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839683;  // std dev = 5.67e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109157;  // std dev = 6.23e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333713;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.14221191352520066;  // std dev = 0.216, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.14707281101834074;  // std dev = 0.218, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.06842697784420265;  // std dev = 5.58e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202626;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1348621910143218;  // std dev = 0.002, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0782867997034014;  // std dev = 0.000480, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.391', 'seconds']
Refined model CLL: -0.064465


******************************************
Best model found
******************************************
Results 

CLL : -0.06906 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.465 

Total Inference Time : 1.047945261001587 

Total revision time: 4.164518489837647
Best scored revision CLL: -0.064465


Results 

CLL : -0.06906 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 30.39509762763977 

Total Inference Time : 1.047945261001587 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.112
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2058051850995085;  // std dev = 0.476, 512.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5247538529878194;  // std dev = 6.287, 186.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=129 */
%   | else return -0.013731242969714733;  // std dev = 6.434, 316.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.17062179427178148;  // std dev = 0.150, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.18483165571041948;  // std dev = 9.968, 462.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.45383310973604063;  // std dev = 0.435, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.043934211723615495;  // std dev = 6.432, 344.000 (wgt'ed) examples reached here.  /* #neg=295 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.35172374162537734;  // std dev = 5.728, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.03210041412831593;  // std dev = 6.412, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1429156152668928;  // std dev = 0.044, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.11025577334123435;  // std dev = 8.925, 431.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12304884551474264;  // std dev = 0.238, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.06868719462614553;  // std dev = 9.075, 459.000 (wgt'ed) examples reached here.  /* #neg=281 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.20800266145320598;  // std dev = 5.869, 176.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=129 */
%   | else return -0.04935477857934874;  // std dev = 6.387, 335.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.17271101372147804;  // std dev = 5.661, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.03693474304780256;  // std dev = 6.372, 321.000 (wgt'ed) examples reached here.  /* #neg=272 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09913825037329539;  // std dev = 1.49e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0.03536357132332753;  // std dev = 8.617, 462.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.439', 'seconds']
Parameter learned model CLL:-0.314616 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false': [0.476, 334, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.287, 57, 129], 'false,false': [6.434, 267, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.15, 71, 0], 'false,false': [9.968, 284, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.435, 44, 129], 'false,false': [6.432, 295, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.728, 44, 129], 'false,false': [6.412, 283, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.044, 68, 0], 'false,false': [8.925, 253, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.238, 67, 0], 'false,false': [9.075, 281, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.869, 47, 129], 'false,false': [6.387, 286, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.661, 44, 129], 'false,false': [6.372, 272, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.49e-08, 57, 0], 'false,false': [8.617, 284, 178]}]
{'': [-6.938893903907228e-18, 0.22679138183594033], 'true': [-6.938893903907228e-18, nan]}
{'': [3.96508223080413e-18, 0.22885351026174278], 'false': [0.21253902185223783, 0.13101866688031036], 'true': [3.96508223080413e-18, nan]}
{'': [8.540177112501205e-18, 0.20104491034337044], 'false': [0.0003179076923677984, 0.21506208251913092], 'true': [8.540177112501205e-18, nan]}
{'': [1.734723475976807e-18, 0.1984567243844515], 'false': [0.18909080211022622, 0.12025664319614351], 'true': [1.734723475976807e-18, nan]}
{'': [0.0, 0.17956745730343956], 'false': [0.18964883557753334, 0.12384583278903108], 'true': [0.0, nan]}
{'': [2.3129646346357427e-18, 0.1674463219016156], 'false': [0.0018959893833262987, 0.18483114064866113], 'true': [2.3129646346357427e-18, nan]}
{'': [-1.261617073437678e-18, 0.16076335354514015], 'false': [0.0008472954564654053, 0.1794235179236033], 'true': [-1.261617073437678e-18, nan]}
{'': [9.912705577010326e-19, 0.16220606746517455], 'false': [0.1957321797520648, 0.12178025103837381], 'true': [9.912705577010326e-19, nan]}
{'': [0.0, 0.15705421592838503], 'false': [0.18521437602021454, 0.12648568924060197], 'true': [0.0, nan]}
{'': [1.3877787807814458e-18, 0.1448266318870438], 'false': [3.895519384649672e-18, 0.1607080084224586], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.406
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.12544463852839197;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360614;  // std dev = 3.16e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.11231637819360674;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.10159632948783662;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.09269127618926072;  // std dev = 7.30e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.05e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.08518475138839678;  // std dev = 7.88e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.0787767547310917;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.0732462257633368;  // std dev = 1.05e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.0684269778442027;  // std dev = 1.39e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.06842697784420282;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.483', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.406 

Total Inference Time : 1.095383882522583 

Total revision time: 5.626217477798463
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 31.856796615600587 

Total Inference Time : 1.095383882522583 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.658
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16220298915356618;  // std dev = 0.460, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2122349533768807;  // std dev = 5.303, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12311029941598421;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11471447402074235;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10215703057385266;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11045176702543;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09499299189076484;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05568750740725056;  // std dev = 0.477, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.021801424344029718;  // std dev = 5.680, 159.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02586673609333249;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.223', 'seconds']
Parameter learned model CLL:-0.383895 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.46, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.303, 75, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.354, 79, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.68, 114, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
{'': [nan, 0.21160518626734948]}
{'': [nan, 0.23437499999999956], 'false': [nan, 0.23437499999999956]}
{'': [nan, 0.2164749057726647], 'false': [nan, 0.2164749057726647]}
{'': [nan, 0.22057648249773623], 'false': [nan, 0.22057648249773623]}
{'': [nan, 0.2230452216529303], 'false': [nan, 0.2230452216529303]}
{'': [nan, 0.23120447450572262], 'false': [nan, 0.23120447450572262]}
{'': [nan, 0.23280032249395397], 'false': [nan, 0.23280032249395397]}
{'': [nan, 0.22714981070849058]}
{'': [nan, 0.20291918832324563], 'false': [nan, 0.20291918832324563]}
{'': [nan, 0.21975425330812973], 'false': [nan, 0.21975425330812973]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.483
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.50e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839683;  // std dev = 4.08e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109162;  // std dev = 4.59e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420267;  // std dev = 3.73e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.13301942123878663;  // std dev = 0.548, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.09765249111194474;  // std dev = 0.540, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.552', 'seconds']
Refined model CLL: -0.065086


******************************************
Best model found
******************************************
Results 

CLL : -0.07109 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 1.483 

Total Inference Time : 0.8591504096984863 

Total revision time: 3.730714288711548
Best scored revision CLL: -0.065086


Results 

CLL : -0.07109 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 29.96129342651367 

Total Inference Time : 0.8591504096984863 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.661
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18423589162125137;  // std dev = 0.469, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20611094627340276;  // std dev = 5.316, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1608540895723919;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08321435463317205;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09322835863416691;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07113172839256623;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08286178753203521;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08356086535669353;  // std dev = 0.482, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.012054639089066878;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.020906169016001872;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.315', 'seconds']
Parameter learned model CLL:-0.387583 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.316, 76, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.482, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
{'': [nan, 0.21975425330812953]}
{'': [nan, 0.2335906017348554], 'false': [nan, 0.2335906017348554]}
{'': [nan, 0.22959183673469316], 'false': [nan, 0.22959183673469316]}
{'': [nan, 0.212411495210329], 'false': [nan, 0.212411495210329]}
{'': [nan, 0.2213992214532863], 'false': [nan, 0.2213992214532863]}
{'': [nan, 0.21975425330812978], 'false': [nan, 0.21975425330812978]}
{'': [nan, 0.22796630859375058], 'false': [nan, 0.22796630859375058]}
{'': [nan, 0.23280032249395405]}
{'': [nan, 0.2156584674067195], 'false': [nan, 0.2156584674067195]}
{'': [nan, 0.21975425330812795], 'false': [nan, 0.21975425330812795]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.411
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.14185106490048763;  // std dev = 8.02e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7279810357883602;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.27219434673068826;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.563756614304969;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.22147858383847271;  // std dev = 0.000271, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11212706175140107;  // std dev = 0.014, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1016136105577034;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42376556641186647;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.185687753220725;  // std dev = 0.000300, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32495345812550425;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15917384966085754;  // std dev = 0.000221, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.09248480980948523;  // std dev = 0.018, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08521425202158113;  // std dev = 5.27e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25806443913325033;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.13904319060548342;  // std dev = 0.000177, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07880208580708989;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21179865680061208;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12321803588776636;  // std dev = 0.000160, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17859199401378542;  // std dev = 0.000891, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11058631175488501;  // std dev = 0.000154, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07283136933554522;  // std dev = 0.027, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1538774005227848;  // std dev = 0.000791, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10015501476836264;  // std dev = 0.000133, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07196674718429259;  // std dev = 0.285, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06402377121674527;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13489135006428918;  // std dev = 0.000709, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09148317057320678;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.627', 'seconds']
Refined model CLL: -0.065115


******************************************
Best model found
******************************************
Results 

CLL : -0.069343 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.411 

Total Inference Time : 0.8537986278533936 

Total revision time: 3.677522394180298
Best scored revision CLL: -0.065115


Results 

CLL : -0.069343 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.90810153198242 

Total Inference Time : 0.8537986278533936 

Run: 4
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.693
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1781489350995135;  // std dev = 0.466, 175.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.221257152651224;  // std dev = 5.863, 145.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12045993473086009;  // std dev = 6.179, 176.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.134673839359449;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08616609608991618;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07391655945814092;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08714828132348013;  // std dev = 5.991, 156.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0479348646456524;  // std dev = 0.473, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03396221598984733;  // std dev = 6.110, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02094257702864927;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.156', 'seconds']
Parameter learned model CLL:-0.385773 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 119, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.863, 89, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.179, 120, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.119, 113, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.991, 100, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 110, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.11, 112, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
{'': [nan, 0.2176000000000004]}
{'': [nan, 0.23705112960761038], 'false': [nan, 0.23705112960761038]}
{'': [nan, 0.21694214876033283], 'false': [nan, 0.21694214876033283]}
{'': [nan, 0.22815553182231943], 'false': [nan, 0.22815553182231943]}
{'': [nan, 0.2202387059266093], 'false': [nan, 0.2202387059266093]}
{'': [nan, 0.22156086971744773], 'false': [nan, 0.22156086971744773]}
{'': [nan, 0.23011176857330762], 'false': [nan, 0.23011176857330762]}
{'': [nan, 0.22354478153578125]}
{'': [nan, 0.22222222222222254], 'false': [nan, 0.22222222222222254]}
{'': [nan, 0.22023870592660902], 'false': [nan, 0.22023870592660902]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.549
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( female(A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.6649625702277708;  // std dev = 1.156, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.69e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5623144202428033;  // std dev = 0.050, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.22437231106191638;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4227119259348037;  // std dev = 0.050, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.18430372923275753;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( female(A) )
%   | | | then return 0.30086585584961306;  // std dev = 0.473, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.3137980882452037;  // std dev = 0.478, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.67e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( female(A) )
%   | | | then return 0.22451655218494124;  // std dev = 0.636, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.264650474517244;  // std dev = 5.16e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.21618625375615522;  // std dev = 3.33e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1864414716853816;  // std dev = 0.636, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109158;  // std dev = 6.23e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | | else return -0.25497477703984467;  // std dev = 0.610, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.1649040241572141;  // std dev = 0.088, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.17077271618926887;  // std dev = 0.085, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.2871752977031247;  // std dev = 0.551, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06755686029419004;  // std dev = 0.046, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( female(A) )
%   | | | then return 0.15854135693315058;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.145855534567062;  // std dev = 0.475, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06328456275330176;  // std dev = 0.047, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1408980214277296;  // std dev = 0.017, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.3577848391582892;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.366', 'seconds']
Refined model CLL: -0.07257


******************************************
Best model found
******************************************
Results 

CLL : -0.099917 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.549 

Total Inference Time : 0.9809372425079346 

Total revision time: 4.072206871032715
Best scored revision CLL: -0.07257


Results 

CLL : -0.099917 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.088701622009277 

Total Inference Time : 0.9809372425079346 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.688
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.22064893509951355;  // std dev = 0.481, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15865804785362314;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12066442793314647;  // std dev = 6.302, 184.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13735494601941411;  // std dev = 6.133, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08766088686188968;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07139173069283553;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06319849095609385;  // std dev = 6.227, 175.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.037866318212604576;  // std dev = 0.466, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.004403815410454372;  // std dev = 6.404, 198.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03641236915296965;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.115', 'seconds']
Parameter learned model CLL:-0.366722 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.481, 102, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.302, 126, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.133, 107, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.227, 117, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.404, 140, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
{'': [nan, 0.23109375000000018]}
{'': [nan, 0.22094524793388537], 'false': [nan, 0.22094524793388537]}
{'': [nan, 0.2158553875236276], 'false': [nan, 0.2158553875236276]}
{'': [nan, 0.22795224977043282], 'false': [nan, 0.22795224977043282]}
{'': [nan, 0.2196692336826162], 'false': [nan, 0.2196692336826162]}
{'': [nan, 0.2196692336826175], 'false': [nan, 0.2196692336826175]}
{'': [nan, 0.2215836734693864], 'false': [nan, 0.2215836734693864]}
{'': [nan, 0.21712353580485538]}
{'': [nan, 0.20712172227323677], 'false': [nan, 0.20712172227323677]}
{'': [nan, 0.21966923368261557], 'false': [nan, 0.21966923368261557]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.457
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.7672398441904211;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7256724630259697;  // std dev = 0.065, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.27153796410727393;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12702710739839806;  // std dev = 0.154, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1121587005846484;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5615382889923348;  // std dev = 0.081, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.22388214684154928;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10146635615636676;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4221702819465553;  // std dev = 0.080, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1919682783372951;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09258243992919916;  // std dev = 6.14e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( female(A) )
%   | | | then return 0.337015904378072;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.3046816594326772;  // std dev = 0.475, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08509237529824251;  // std dev = 4.94e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25887444833789147;  // std dev = 0.041, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.20733109764974827;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07869742725531301;  // std dev = 1.49e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21237560030302405;  // std dev = 0.036, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.17603772152978467;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1790180654514811;  // std dev = 0.031, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.15094787336297713;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.0751187575388111;  // std dev = 0.140, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06824318804356877;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1542025412257728;  // std dev = 0.028, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1337196227821631;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13514652244366163;  // std dev = 0.025, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11729452382733546;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.06488473714186961;  // std dev = 0.081, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.438', 'seconds']
Refined model CLL: -0.067082


******************************************
Best model found
******************************************
Results 

CLL : -0.08083 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 1.457 

Total Inference Time : 0.9743330478668213 

Total revision time: 4.022454042434692
Best scored revision CLL: -0.067082


Results 

CLL : -0.08083 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 4.0389487934112545 

Total Inference Time : 0.9743330478668213 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.075
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17714535087011776;  // std dev = 0.466, 558.000 (wgt'ed) examples reached here.  /* #neg=380 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5940119740560077;  // std dev = 5.578, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.024410409223953607;  // std dev = 6.490, 349.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1630218003093349;  // std dev = 0.101, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0.18584064935993513;  // std dev = 9.865, 465.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4494923169815997;  // std dev = 0.432, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.0461754864027336;  // std dev = 6.465, 363.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3794326800651325;  // std dev = 5.294, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.03163622905406201;  // std dev = 6.434, 345.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13626808924669687;  // std dev = 0.036, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.07013602639030454;  // std dev = 9.175, 488.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12159385856292118;  // std dev = 0.259, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.04554164669093349;  // std dev = 9.259, 508.000 (wgt'ed) examples reached here.  /* #neg=330 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2300355792538573;  // std dev = 5.608, 171.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=129 */
%   | else return -0.04398895159976008;  // std dev = 6.433, 355.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.15600612658788288;  // std dev = 5.803, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.025936461017107088;  // std dev = 6.378, 338.000 (wgt'ed) examples reached here.  /* #neg=289 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0983329698469486;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.02047915859856326;  // std dev = 8.912, 488.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.549', 'seconds']
Parameter learned model CLL:-0.302163 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 17, 0], 'true,false': [0.0, 0, 0], 'false': [0.466, 380, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.578, 41, 129], 'false,false': [6.49, 300, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.101, 66, 0], 'false,false': [9.865, 287, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.432, 43, 129], 'false,false': [6.465, 314, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.294, 36, 129], 'false,false': [6.434, 296, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.036, 58, 0], 'false,false': [9.175, 310, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.259, 53, 0], 'false,false': [9.259, 330, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.608, 42, 129], 'false,false': [6.433, 306, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.803, 46, 129], 'false,false': [6.378, 289, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.86e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 58, 0], 'false,false': [8.912, 310, 178]}]
{'': [-3.2653618371328133e-18, 0.21723770249611646], 'true': [-3.2653618371328133e-18, nan]}
{'': [2.7755575615628915e-18, 0.22534071376330977], 'false': [0.18301038062283612, 0.12068866429668262], 'true': [2.7755575615628915e-18, nan]}
{'': [-1.734723475976807e-18, 0.19653252034937868], 'false': [0.00015472968626564692, 0.20927832085496786], 'true': [-1.734723475976807e-18, nan]}
{'': [-2.135044278125301e-18, 0.19181375216379995], 'false': [0.18693388462171492, 0.11513889129407615], 'true': [-2.135044278125301e-18, nan]}
{'': [0.0, 0.17310082776040017], 'false': [0.16985564442702103, 0.11998363289012207], 'true': [0.0, nan]}
{'': [1.5419764230904951e-18, 0.1583526508863184], 'false': [0.0013169314810386535, 0.1724911751130044], 'true': [1.5419764230904951e-18, nan]}
{'': [0.0, 0.155311569047106], 'false': [0.001261618091662932, 0.16874464242098344], 'true': [0.0, nan]}
{'': [9.251858538542971e-19, 0.15494200267660743], 'false': [0.18391647670868894, 0.11657407727878395], 'true': [9.251858538542971e-19, nan]}
{'': [5.337610695313253e-19, 0.15238171135947987], 'false': [0.19243972731140185, 0.12034913206757265], 'true': [5.337610695313253e-19, nan]}
{'': [3.469446951953614e-18, 0.14681560016483564], 'false': [-7.656710514656252e-18, 0.1627654592440246], 'true': [3.469446951953614e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.335
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.12544463852839197;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360617;  // std dev = 3.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.1123163781936067;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783623;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( director(B), actor(A) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926085;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.09269127618926047;  // std dev = 1.28e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839682;  // std dev = 1.49e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839683;  // std dev = 3.49e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.08518475138839678;  // std dev = 7.88e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109169;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.07877675473109147;  // std dev = 5.96e-08, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333707;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.0732462257633369;  // std dev = 1.07e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420271;  // std dev = 1.18e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.06842697784420282;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202616;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.06419184008202625;  // std dev = 2.58e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.507', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.335 

Total Inference Time : 1.1100468635559082 

Total revision time: 5.57990876197815
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.596403512954712 

Total Inference Time : 1.1100468635559082 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.646
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17064893509951218;  // std dev = 0.464, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1529821302306333;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16558600317164449;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12599000381786118;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11464569960580287;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07795824686125914;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03357412429770583;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.018897022289113125;  // std dev = 0.457, 152.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04992501074349221;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.042180750171461584;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.319', 'seconds']
Parameter learned model CLL:-0.376282 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.464, 99, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.457, 107, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
{'': [nan, 0.214843750000001]}
{'': [nan, 0.2164749057726655], 'false': [nan, 0.2164749057726655]}
{'': [nan, 0.2279663085937501], 'false': [nan, 0.2279663085937501]}
{'': [nan, 0.22386794052801176], 'false': [nan, 0.22386794052801176]}
{'': [nan, 0.22714981070849005], 'false': [nan, 0.22714981070849005]}
{'': [nan, 0.2222222222222233], 'false': [nan, 0.2222222222222233]}
{'': [nan, 0.2116051862673486], 'false': [nan, 0.2116051862673486]}
{'': [nan, 0.20840547091412712]}
{'': [nan, 0.2213992214532863], 'false': [nan, 0.2213992214532863]}
{'': [nan, 0.22222222222222282], 'false': [nan, 0.22222222222222282]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.449
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048766;  // std dev = 8.02e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.50e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.388674144511302;  // std dev = 0.713, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return -0.10159632948783617;  // std dev = 5.67e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.2817752171821295;  // std dev = 0.447, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3135987665142769;  // std dev = 0.463, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.0851847513883968;  // std dev = 1.90e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.26220645335111314;  // std dev = 0.002, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1085161636630948;  // std dev = 0.353, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2150948078051762;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2036040245533103;  // std dev = 0.379, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return -0.07746898343134528;  // std dev = 0.007, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07228211045964952;  // std dev = 0.007, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18195657943332677;  // std dev = 0.004, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.20087564706396757;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06735239514353639;  // std dev = 0.005, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15642085394741775;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.17035308445993155;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06351191765267034;  // std dev = 0.006, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1368711319563623;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14796664220392994;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.737', 'seconds']
Refined model CLL: -0.068829


******************************************
Best model found
******************************************
Results 

CLL : -0.073825 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.449 

Total Inference Time : 0.8549091815948486 

Total revision time: 3.6858362865447996
Best scored revision CLL: -0.068829


Results 

CLL : -0.073825 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.702331037521362 

Total Inference Time : 0.8549091815948486 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.649
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17505034355021643;  // std dev = 0.465, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19547661722549764;  // std dev = 5.367, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1088326187143272;  // std dev = 5.604, 149.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07053823607345365;  // std dev = 5.687, 160.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09646648545879846;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06422841957267719;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0971073013256513;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03359602570098514;  // std dev = 0.460, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04660324696867281;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.019552288617732942;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.204', 'seconds']
Parameter learned model CLL:-0.362295 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.367, 80, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.604, 104, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.687, 115, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.46, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
{'': [nan, 0.21647490577266518]}
{'': [nan, 0.2303999999999999], 'false': [nan, 0.2303999999999999]}
{'': [nan, 0.21080131525606957], 'false': [nan, 0.21080131525606957]}
{'': [nan, 0.2021484375], 'false': [nan, 0.2021484375]}
{'': [nan, 0.21729289271163452], 'false': [nan, 0.21729289271163452]}
{'': [nan, 0.2116051862673495], 'false': [nan, 0.2116051862673495]}
{'': [nan, 0.22714981070849072], 'false': [nan, 0.22714981070849072]}
{'': [nan, 0.21160518626734756]}
{'': [nan, 0.21893276745510082], 'false': [nan, 0.21893276745510082]}
{'': [nan, 0.21241149521032804], 'false': [nan, 0.21241149521032804]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.464
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7237223348029779;  // std dev = 0.029, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.27183560975990667;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 6.99e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( female(A) )
%   | | | then return 0.4916476758554809;  // std dev = 1.063, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.5650312846643489;  // std dev = 5.16e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.4320434037867812;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.39175193939250014;  // std dev = 0.742, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783615;  // std dev = 5.87e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.29106955757970265;  // std dev = 0.519, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09143195561958206;  // std dev = 0.037, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.33170577951886554;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.4273697524356522;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B) )
%   | | | then return 0.26266089484025057;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08528293939053494;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.08446297621495664;  // std dev = 0.023, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.327646976719383;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21503409515335065;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.2589874885748281;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07954659289199001;  // std dev = 0.073, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.16380037990792076;  // std dev = 0.079, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.16463527571058817;  // std dev = 0.080, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.07312480121005104;  // std dev = 0.073, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1578801404844175;  // std dev = 0.004, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.24097190930903079;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06940085487080314;  // std dev = 0.092, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06368480226851539;  // std dev = 0.020, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( female(A) )
%   | | | then return 0.1233541576035172;  // std dev = 0.331, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.12389468972561973;  // std dev = 0.330, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.546', 'seconds']
Refined model CLL: -0.072189


******************************************
Best model found
******************************************
Results 

CLL : -0.088107 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.464 

Total Inference Time : 0.8920702934265137 

Total revision time: 3.762937152862549
Best scored revision CLL: -0.072189


Results 

CLL : -0.088107 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.7794319038391113 

Total Inference Time : 0.8920702934265137 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.735
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1763307532813317;  // std dev = 0.466, 176.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.8008177837142614;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.16469945766504782;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14327284155999398;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.14344773761591312;  // std dev = 5.109, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6127581444713815;  // std dev = 0.220, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.16016567101722365;  // std dev = 0.077, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4658077733558717;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.14002771726622235;  // std dev = 0.061, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09692790506053549;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.04559670311173575;  // std dev = 3.286, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08876868480720049;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.04531458339992285;  // std dev = 3.318, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3290288004196038;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.1310782758642788;  // std dev = 0.154, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.2551067966587627;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.11924956126850356;  // std dev = 0.082, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06489675269182711;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.006216992716210224;  // std dev = 2.452, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.367', 'seconds']
Parameter learned model CLL:-0.156796 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 120, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.39, 2, 56], 'false,false': [8.43e-08, 108, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [5.109, 106, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.22, 3, 56], 'false,false': [0.077, 108, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.061, 104, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [3.286, 114, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [3.318, 102, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.154, 112, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.082, 96, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [2.452, 110, 56]}]
{'': [nan, 0.21694214876033094]}
{'': [nan, 0.2235447815357842], 'false': [0.03329369797859896, 6.579099405186112e-17]}
{'': [0.0, 0.16011952617168196], 'false': [0.0, 0.16109376543902879], 'true': [0.0, nan]}
{'': [nan, 0.1535809098109013], 'false': [0.04826199367997791, 5.479303383411812e-05]}
{'': [nan, 0.10225782237966255], 'false': [0.04826199367997647, 3.6317610323965965e-05]}
{'': [0.0, 0.0615504130927894], 'false': [0.0, 0.06353394743822875], 'true': [0.0, nan]}
{'': [nan, 0.06746429462613145], 'false': [0.0, 0.06969050234618857]}
{'': [nan, 0.06463100975665512], 'false': [0.04826199367997725, 0.00021179359946521537]}
{'': [nan, 0.05145357931006502], 'false': [0.048261993679977, 7.044057739450059e-05]}
{'': [nan, 0.0351120600586356], 'false': [1.1564823173178713e-18, 0.03620475793807299]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.378
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.822434649385226;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7229214324831329;  // std dev = 0.027, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.27873872542569383;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1254446385283913;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 8.16e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5587597968977284;  // std dev = 0.033, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2278326750859898;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.42004580917628775;  // std dev = 0.033, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.17550019608400397;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783637;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32243584472955655;  // std dev = 0.029, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.15411834231627328;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0926912761892608;  // std dev = 7.60e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0851847513883969;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.58e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25635227822665724;  // std dev = 0.025, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.14143068345690937;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07877675473109179;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21059335389388031;  // std dev = 0.022, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.12529948439135852;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17771068788152575;  // std dev = 0.020, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10491397694970069;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333707;  // std dev = 4.08e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15321063649638758;  // std dev = 0.017, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10436064845637828;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420265;  // std dev = 5.67e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06122501680076622;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 2.79e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1343720296970087;  // std dev = 0.016, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09348781917517265;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.545', 'seconds']
Refined model CLL: -0.064756


******************************************
Best model found
******************************************
Results 

CLL : -0.07476 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 1.378 

Total Inference Time : 0.9752826690673828 

Total revision time: 3.9877270107269283
Best scored revision CLL: -0.064756


Results 

CLL : -0.07476 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 4.01101001548767 

Total Inference Time : 0.9752826690673828 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.77
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.22292880931334993;  // std dev = 0.481, 159.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.7210970194457529;  // std dev = 2.499, 65.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=58 */
%   | else return -0.17121067286194025;  // std dev = 1.44e-07, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1732502206546791;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.14419286131383585;  // std dev = 5.288, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5770446446451324;  // std dev = 0.291, 64.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=58 */
%   | else return -0.1645279870216995;  // std dev = 0.115, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.48445297234928214;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return -0.14291636490785278;  // std dev = 0.107, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.19990070608702343;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.06323907649567138;  // std dev = 3.407, 159.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.08099700949801018;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.04073034742719116;  // std dev = 3.417, 170.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3393044808103575;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return -0.13587403947968862;  // std dev = 0.179, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2623466459807311;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return -0.12039750919217118;  // std dev = 0.170, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.059181252096492616;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.01741913629732355;  // std dev = 3.094, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.524', 'seconds']
Parameter learned model CLL:-0.17497 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.481, 101, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.499, 7, 58], 'false,false': [1.44e-07, 123, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.137, 6, 0], 'false,false': [5.288, 107, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.291, 6, 58], 'false,false': [0.115, 124, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.689, 3, 58], 'false,false': [0.107, 126, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.178, 8, 0], 'false,false': [3.407, 101, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [3.417, 112, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.689, 3, 58], 'false,false': [0.179, 104, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.689, 3, 58], 'false,false': [0.17, 109, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [3.094, 115, 58]}]
{'': [nan, 0.2317155175823743]}
{'': [0.0, 0.21333182435491085], 'false': [0.09609467455621147, 1.6969262490205646e-16], 'true': [0.0, nan]}
{'': [nan, 0.16701762456346758], 'false': [0.0031215470379131333, 0.16944168858453604]}
{'': [0.0, 0.1524719872972429], 'false': [0.08496093749999933, 0.00010619821079234236], 'true': [0.0, nan]}
{'': [0.0, 0.10182447206322075], 'false': [0.04676162321956449, 9.081667359710552e-05], 'true': [0.0, nan]}
{'': [-1.1564823173178713e-18, 0.07419200727779302], 'false': [0.03165561274320376, 0.07301519507699528], 'true': [-1.1564823173178713e-18, nan]}
{'': [0.0, 0.06774316627539749], 'false': [1.1564823173178713e-18, 0.06868168219143604], 'true': [0.0, nan]}
{'': [nan, 0.07009610895345038], 'false': [0.04676162321956474, 0.00030709325691450864]}
{'': [0.0, 0.05065190015291609], 'false': [0.04676162321956466, 0.00026386062597050534], 'true': [0.0, nan]}
{'': [0.0, 0.05354528066547025], 'false': [0.0, 0.055343881831055645], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;false;genre(B, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.426
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.1254446385283913;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1126252784367777;  // std dev = 0.018, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.10156813823749455;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09268694700265495;  // std dev = 2.37e-05, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.09266767137327982;  // std dev = 4.71e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.08516471783122873;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.08518508875519654;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07875955200238981;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.0787595520023896;  // std dev = 5.27e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877704442184477;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07324647706875666;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07323130226382359;  // std dev = 2.79e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.06842719781633921;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.06841391487545677;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.29372103335611777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.0641803144893893;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(B) )
%   | | then return -0.06418031448938935;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( female(A) )
%   | | | then return 0.12456897933317349;  // std dev = 0.193, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.12892500272156004;  // std dev = 0.196, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.394', 'seconds']
Refined model CLL: -0.064294


******************************************
Best model found
******************************************
Results 

CLL : -0.071686 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 1.426 

Total Inference Time : 0.9913685321807861 

Total revision time: 4.18126668548584
Best scored revision CLL: -0.064294


Results 

CLL : -0.071686 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 4.204549690246582 

Total Inference Time : 0.9913685321807861 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18061270321545048;  // std dev = 0.467, 552.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.607165703034203;  // std dev = 5.418, 167.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=129 */
%   | else return -0.017253133009720752;  // std dev = 6.461, 331.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16785712734846334;  // std dev = 0.143, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.1816161762079616;  // std dev = 9.903, 464.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4340170928499408;  // std dev = 0.440, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.05140605532115095;  // std dev = 6.481, 375.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.31101936306668077;  // std dev = 6.079, 181.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=129 */
%   | else return -0.02593116536889543;  // std dev = 6.410, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13675273702442453;  // std dev = 0.034, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0.0732129041207697;  // std dev = 9.278, 490.000 (wgt'ed) examples reached here.  /* #neg=312 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.12095539078060273;  // std dev = 0.242, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0.06906362873475126;  // std dev = 9.041, 491.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.21156146452391814;  // std dev = 5.940, 178.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=129 */
%   | else return -0.04583971245063044;  // std dev = 6.423, 343.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.21377841559490193;  // std dev = 5.291, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.04678879045689716;  // std dev = 6.449, 374.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1098463204855097;  // std dev = 0.467, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.043125284491104594;  // std dev = 8.555, 465.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.427', 'seconds']
Parameter learned model CLL:-0.30655 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false': [0.467, 374, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.418, 38, 129], 'false,false': [6.461, 282, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.143, 42, 0], 'false,false': [9.903, 286, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.44, 46, 129], 'false,false': [6.481, 326, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.079, 52, 129], 'false,false': [6.41, 283, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.034, 57, 0], 'false,false': [9.278, 312, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.242, 66, 0], 'false,false': [9.041, 313, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.94, 49, 129], 'false,false': [6.423, 294, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.291, 37, 129], 'false,false': [6.449, 325, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.467, 52, 0], 'false,false': [8.555, 287, 178]}]
{'': [-1.2810265668751807e-17, 0.21848088636841267], 'true': [-1.2810265668751807e-17, nan]}
{'': [2.7755575615628915e-18, 0.22967371494008332], 'false': [0.17576822403098183, 0.12612152134427612], 'true': [2.7755575615628915e-18, nan]}
{'': [-1.5419764230904951e-18, 0.20313951916494752], 'false': [0.00048696783441555996, 0.21134566437472221], 'true': [-1.5419764230904951e-18, nan]}
{'': [-5.551115123125783e-18, 0.18896958462169497], 'false': [0.19321300773136044, 0.1120143464373823], 'true': [-5.551115123125783e-18, nan]}
{'': [0.0, 0.17805526377027964], 'false': [0.204157638081959, 0.12376636220298295], 'true': [0.0, nan]}
{'': [1.3877787807814458e-18, 0.16162247726510107], 'false': [0.0011718422832251722, 0.1756932169774835], 'true': [1.3877787807814458e-18, nan]}
{'': [0.0, 0.15061338883028844], 'false': [0.0008851745471177118, 0.1664613735246899], 'true': [0.0, nan]}
{'': [0.0, 0.16181105981916086], 'false': [0.1982119960509014, 0.12028458777113116], 'true': [0.0, nan]}
{'': [9.912705577010326e-19, 0.14330084300821294], 'false': [0.16862846830685777, 0.11118766116886822], 'true': [9.912705577010326e-19, nan]}
{'': [1.3877787807814458e-18, 0.14408945265143558], 'false': [0.004191179553421505, 0.15738038100783774], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 2.478
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.1254446385283918;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360617;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.11231637819360664;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783621;  // std dev = 3.49e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.09269127618926068;  // std dev = 1.01e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.0851847513883968;  // std dev = 1.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.05e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.08518475138839678;  // std dev = 7.88e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 1.49e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109172;  // std dev = 1.83e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.07877675473109147;  // std dev = 7.30e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.07324622576333684;  // std dev = 1.02e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.0684269778442027;  // std dev = 1.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.06842697784420289;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202618;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.772', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.478 

Total Inference Time : 1.1639206409454346 

Total revision time: 5.69589210319519
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.719175107955932 

Total Inference Time : 1.1639206409454346 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.696
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19649479976116654;  // std dev = 0.473, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.7325077152318529;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.1674922847681478;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.14541832579507039;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.16885889258288253;  // std dev = 4.605, 117.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5686617549741144;  // std dev = 0.300, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.16591119237992993;  // std dev = 0.077, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.45168710207064605;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.14210517460124023;  // std dev = 0.094, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0975778259935288;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.05033612267876198;  // std dev = 3.298, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08931643260657497;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.025553704699764642;  // std dev = 3.451, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3027306778940293;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | else return -0.1331128005135947;  // std dev = 0.140, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.15069707927314527;  // std dev = 2.860, 55.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=45 */
%   | else return -0.11910866952077656;  // std dev = 0.118, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06515888537080512;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.01445160457917997;  // std dev = 2.638, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.516', 'seconds']
Parameter learned model CLL:-0.184373 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 88, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.121, 5, 45], 'false,false': [0.0, 80, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [4.605, 72, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.3, 5, 45], 'false,false': [0.077, 89, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.094, 76, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [3.298, 78, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.451, 82, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.121, 5, 45], 'false,false': [0.14, 84, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.86, 10, 45], 'false,false': [0.118, 84, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 6, 0], 'false,false': [2.638, 84, 45]}]
{'': [nan, 0.22386794052801262]}
{'': [0.0, 0.226331360946745], 'false': [0.08999999999999986, -8.326672684688674e-17], 'true': [0.0, nan]}
{'': [nan, 0.17558637380752617], 'false': [0.0, 0.18127098882944695]}
{'': [nan, 0.15669653239190118], 'false': [0.09000000000000113, 6.670484708572537e-05]}
{'': [nan, 0.11349245227080516], 'false': [0.07496876301541039, 0.00011510103618130698]}
{'': [nan, 0.08579453862750862], 'false': [-1.3877787807814458e-18, 0.08842749117777098]}
{'': [nan, 0.09130984097135013], 'false': [0.0, 0.09378283617836104]}
{'': [0.0, 0.07816165788974863], 'false': [0.09000000000000004, 0.00023460117736310134], 'true': [0.0, nan]}
{'': [0.0, 0.07636831887811482], 'false': [0.14876033057851237, 0.00016495420960469626], 'true': [0.0, nan]}
{'': [0.0, 0.05180532401729552], 'false': [5.782411586589357e-19, 0.05393319263336271], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;false;genre(B, E).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 1.246
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.1410366438935132;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10131531300262865;  // std dev = 0.007, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09209445806045166;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0924195117753842;  // std dev = 0.008, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08301567895619653;  // std dev = 3.10e-06, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.08522783854826958;  // std dev = 1.29e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08523127193194115;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07691101316531705;  // std dev = 2.89e-06, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.07881375164629215;  // std dev = 1.29e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.0788166996229936;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07162777580854386;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07328087667088075;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07314604171514495;  // std dev = 0.004, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.06845730755057637;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06838508716198555;  // std dev = 0.003, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0670084381439036;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.06276567442959692;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.06422878007227038;  // std dev = 7.45e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( female(A) )
%   | | | then return 0.11748822756301082;  // std dev = 0.190, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.12834344059829675;  // std dev = 0.195, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.412', 'seconds']
Refined model CLL: -0.065211


******************************************
Best model found
******************************************
Results 

CLL : -0.071993 

AUC ROC : 0.999357 

AUC PR : 0.977788 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 1.246 

Total Inference Time : 0.8245716094970703 

Total revision time: 3.574509231567383
Best scored revision CLL: -0.065211


Results 

CLL : -0.071993 

AUC ROC : 0.999357 

AUC PR : 0.977788 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 3.597792236328125 

Total Inference Time : 0.8245716094970703 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.66
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19396983062190037;  // std dev = 0.472, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7788054438546959;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.0691012864049755;  // std dev = 3.003, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1577412211587139;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17209072488979832;  // std dev = 4.742, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6041124095470021;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.0911125890077418;  // std dev = 3.014, 112.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4586985773638456;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.06930234402362671;  // std dev = 2.998, 103.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1199094832766583;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.07597784988961055;  // std dev = 3.856, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.10782073518777849;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.04710776737741894;  // std dev = 3.818, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.3425612626554892;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.0775004114828327;  // std dev = 3.000, 105.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.16956314558594276;  // std dev = 2.092, 40.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=35 */
%   | else return -0.0411252754490604;  // std dev = 2.958, 81.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.08789248907692492;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.03634417479138185;  // std dev = 3.433, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.458', 'seconds']
Parameter learned model CLL:-0.215446 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 89, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [3.003, 92, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [4.742, 75, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.226, 2, 35], 'false,false': [3.014, 102, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.998, 93, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [3.856, 75, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [3.73e-09, 7, 0], 'false,false': [3.818, 88, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.986, 1, 35], 'false,false': [3.0, 95, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.092, 5, 35], 'false,false': [2.958, 71, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [3.433, 78, 45]}]
{'': [nan, 0.22304522165293034]}
{'': [nan, 0.21893276745510185], 'false': [0.05113221329437621, 0.08842752787389485]}
{'': [nan, 0.18472630769613424], 'false': [0.0, 0.18737452507200061]}
{'': [nan, 0.1638770128009637], 'false': [0.051132213294375777, 0.08109958244486455]}
{'': [nan, 0.1319386228956397], 'false': [0.051132213294375124, 0.08728728237447693]}
{'': [0.0, 0.11974981307679101], 'false': [0.0, 0.12391007290705947], 'true': [0.0, nan]}
{'': [nan, 0.10527213362466115], 'false': [1.982541115402065e-18, 0.10961263019113068]}
{'': [nan, 0.10428945165548728], 'false': [0.027006172839506275, 0.08573504984312239]}
{'': [nan, 0.11831535399898876], 'false': [0.10937499999999996, 0.10805609213779714]}
{'': [nan, 0.09390997259543735], 'false': [0.0, 0.09583296571645604]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;workedunder(A, B) :- genre(A, D).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.432
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( female(A) )
%   | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7279810357883602;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.2719381060372728;  // std dev = 0.000429, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.17705623627810715;  // std dev = 0.290, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.563756614304969;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.22152276949887423;  // std dev = 0.000271, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.42376556641186647;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.18571981973153032;  // std dev = 0.000300, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10483060050724072;  // std dev = 0.290, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09200209155318205;  // std dev = 0.012, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32495345812550425;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.15923837183204734;  // std dev = 0.000280, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.0800855946835931;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.08498662638452802;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25806443913325033;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.13898470314786865;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.14788586600104525;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then return -0.07860660173973621;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.21179865680061208;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.12323683027893563;  // std dev = 0.000160, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07287778539198089;  // std dev = 0.012, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( female(A) )
%   | then return 0.1664158935402326;  // std dev = 0.058, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.16615409604682638;  // std dev = 0.059, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06791108934851066;  // std dev = 0.017, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15548622509997323;  // std dev = 0.000913, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12792838909791265;  // std dev = 0.000207, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.0941230014066223;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.13614433289486924;  // std dev = 0.000818, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1143330232812758;  // std dev = 0.000182, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06478795385409368;  // std dev = 0.058, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.543', 'seconds']
Refined model CLL: -0.066556


******************************************
Best model found
******************************************
Results 

CLL : -0.077065 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 1.432 

Total Inference Time : 0.7861239910125732 

Total revision time: 3.6665248794555665
Best scored revision CLL: -0.066556


Results 

CLL : -0.077065 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 3.6898078842163087 

Total Inference Time : 0.7861239910125732 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.699
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20814893509951354;  // std dev = 0.477, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1472605563579344;  // std dev = 6.187, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13664989171497904;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0743478296909702;  // std dev = 6.318, 195.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12012578970926321;  // std dev = 6.053, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0821866664826263;  // std dev = 6.128, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06852498613467586;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06935214411327643;  // std dev = 0.476, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.013939800225570004;  // std dev = 6.242, 184.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.004583352573712277;  // std dev = 6.270, 188.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.129', 'seconds']
Parameter learned model CLL:-0.363044 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.187, 121, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.318, 139, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.053, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.128, 114, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.119, 113, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.476, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.242, 128, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 132, 56]}]
{'': [nan, 0.22750000000000026]}
{'': [nan, 0.21628523093619206], 'false': [nan, 0.21628523093619206]}
{'': [nan, 0.22023870592660985], 'false': [nan, 0.22023870592660985]}
{'': [nan, 0.20470742932281555], 'false': [nan, 0.20470742932281555]}
{'': [nan, 0.22618503276939336], 'false': [nan, 0.22618503276939336]}
{'': [nan, 0.22089965397923722], 'false': [nan, 0.22089965397923722]}
{'': [nan, 0.2215608697174464], 'false': [nan, 0.2215608697174464]}
{'': [nan, 0.2261850327693945]}
{'': [nan, 0.21172022684309882], 'false': [nan, 0.21172022684309882]}
{'': [nan, 0.2091444092349472], 'false': [nan, 0.2091444092349472]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.607
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.689297767541692;  // std dev = 0.830, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.6913094771863096;  // std dev = 0.831, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.12544463852839108;  // std dev = 7.74e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5625484866787079;  // std dev = 0.002, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.22237444301884268;  // std dev = 0.000492, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( female(A) )
%   | | | then return 0.38109448620524394;  // std dev = 0.831, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.4226249533344918;  // std dev = 5.96e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 5.77e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.328813282861644;  // std dev = 0.036, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.25680576109670333;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2606990647356389;  // std dev = 0.031, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2081682980369064;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08540759061503615;  // std dev = 0.022, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2174477633479749;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.18494966880720268;  // std dev = 0.534, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return -0.07896843571933629;  // std dev = 0.020, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07321809260412594;  // std dev = 4.21e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1818654986579161;  // std dev = 0.006, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.20850031528417068;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06840235181379845;  // std dev = 3.57e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15635218390719946;  // std dev = 0.005, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.17617383031781395;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1368178016687772;  // std dev = 0.005, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1519488424248115;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06706114206647333;  // std dev = 0.293, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.559', 'seconds']
Refined model CLL: -0.066214


******************************************
Best model found
******************************************
Results 

CLL : -0.074726 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.607 

Total Inference Time : 1.0194463729858398 

Total revision time: 4.1639535484313965
Best scored revision CLL: -0.066214


Results 

CLL : -0.074726 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.18423486328125 

Total Inference Time : 1.0194463729858398 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.726
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19340905070645;  // std dev = 0.472, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18659608304184372;  // std dev = 6.123, 164.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11384824989526166;  // std dev = 6.333, 188.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15866250277601937;  // std dev = 6.036, 156.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08859653458022526;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05599141633183086;  // std dev = 6.310, 185.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11320656495056475;  // std dev = 5.989, 152.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07132611227834287;  // std dev = 0.481, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.012570161789424019;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04487089996162261;  // std dev = 6.123, 164.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.126', 'seconds']
Parameter learned model CLL:-0.396058 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 115, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.123, 106, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.333, 130, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.036, 98, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.31, 127, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.989, 94, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.481, 102, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.123, 106, 58]}]
{'': [nan, 0.2228607704901603]}
{'': [nan, 0.2285841760856642], 'false': [nan, 0.2285841760856642]}
{'': [nan, 0.21333182435491121], 'false': [nan, 0.21333182435491121]}
{'': [nan, 0.23356344510190594], 'false': [nan, 0.23356344510190594]}
{'': [nan, 0.2209452479338845], 'false': [nan, 0.2209452479338845]}
{'': [nan, 0.21522279035792505], 'false': [nan, 0.21522279035792505]}
{'': [nan, 0.2359764542936284], 'false': [nan, 0.2359764542936284]}
{'': [nan, 0.23109375000000046]}
{'': [nan, 0.2171235358048547], 'false': [nan, 0.2171235358048547]}
{'': [nan, 0.2285841760856637], 'false': [nan, 0.2285841760856637]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.447
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11344709731564977;  // std dev = 0.143, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10149317013049763;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09260489498154688;  // std dev = 2.58e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851114355635206;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07871379610351698;  // std dev = 4.08e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07319160665820236;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06837898070786971;  // std dev = 1.76e-05, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06414966568355962;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.473', 'seconds']
Refined model CLL: -0.063973


******************************************
Best model found
******************************************
Results 

CLL : -0.069521 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.447 

Total Inference Time : 1.041457176208496 

Total revision time: 4.07732333946228
Best scored revision CLL: -0.063973


Results 

CLL : -0.069521 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.097604654312134 

Total Inference Time : 1.041457176208496 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.022
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20378000306067354;  // std dev = 0.476, 515.000 (wgt'ed) examples reached here.  /* #neg=337 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.60859784806293;  // std dev = 5.362, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.035719257758730076;  // std dev = 6.519, 369.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16356487593074936;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.18938594650311474;  // std dev = 9.783, 453.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4620521511662511;  // std dev = 0.419, 167.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=129 */
%   | else return -0.03971996252193193;  // std dev = 6.428, 340.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.31254301065840834;  // std dev = 5.905, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.04264444357717365;  // std dev = 6.464, 362.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13263388969323048;  // std dev = 1.86e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.09903504369844515;  // std dev = 8.951, 441.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13118618322637612;  // std dev = 0.434, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.05754908486875199;  // std dev = 8.993, 491.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2497708706882904;  // std dev = 5.281, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.05929118952445663;  // std dev = 6.459, 378.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1511372302337961;  // std dev = 5.728, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.03828463545032586;  // std dev = 6.409, 349.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10221278447223989;  // std dev = 0.341, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.04387959952519204;  // std dev = 8.597, 440.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.463', 'seconds']
Parameter learned model CLL:-0.311741 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 12, 0], 'true,false': [0.0, 0, 0], 'false': [0.476, 337, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.362, 37, 129], 'false,false': [6.519, 320, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.47e-08, 43, 0], 'false,false': [9.783, 275, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.419, 38, 129], 'false,false': [6.428, 291, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.905, 48, 129], 'false,false': [6.464, 313, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 59, 0], 'false,false': [8.951, 263, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.434, 59, 0], 'false,false': [8.993, 313, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.281, 36, 129], 'false,false': [6.459, 329, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.728, 44, 129], 'false,false': [6.409, 300, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.341, 58, 0], 'false,false': [8.597, 262, 178]}]
{'': [-1.1564823173178714e-17, 0.22617023282119236], 'true': [-1.1564823173178714e-17, nan]}
{'': [0.0, 0.22201414970740113], 'false': [0.17321091595297142, 0.11515779114430455], 'true': [0.0, nan]}
{'': [8.540177112501205e-18, 0.20281503174269697], 'false': [4.6474452193611206e-17, 0.21126700308672058], 'true': [8.540177112501205e-18, nan]}
{'': [-5.551115123125783e-18, 0.1950192482571846], 'false': [0.17576822403097778, 0.12154300996865496], 'true': [-5.551115123125783e-18, nan]}
{'': [0.0, 0.1700254091686964], 'false': [0.1970031071731607, 0.11540610601094976], 'true': [0.0, nan]}
{'': [2.523234146875356e-18, 0.16581614279945361], 'false': [3.7634678800852764e-18, 0.1816670435296797], 'true': [2.523234146875356e-18, nan]}
{'': [1.0675221390626506e-18, 0.15079992053340555], 'false': [0.0031943678610275696, 0.16471547466781591], 'true': [1.0675221390626506e-18, nan]}
{'': [0.0, 0.14839757330539508], 'false': [0.16900958099517469, 0.11037504936441599], 'true': [0.0, nan]}
{'': [0.0, 0.14949936352997456], 'false': [0.1896488355775331, 0.11770571217158787], 'true': [0.0, nan]}
{'': [1.3877787807814458e-18, 0.15084550231996988], 'false': [0.002006603991447232, 0.16797944614410934], 'true': [1.3877787807814458e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.347
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.12544463852839188;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360621;  // std dev = 3.16e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.11231637819360682;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783627;  // std dev = 1.83e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.09269127618926067;  // std dev = 7.30e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.08518475138839678;  // std dev = 7.60e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07877675473109169;  // std dev = 1.49e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.07877675473109146;  // std dev = 5.16e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.07324622576333681;  // std dev = 1.05e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.06842697784420287;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202616;  // std dev = 7.45e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.504', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.347 

Total Inference Time : 1.2775988578796387 

Total revision time: 5.661435884475708
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.681717199325561 

Total Inference Time : 1.2775988578796387 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.638
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17283424978482687;  // std dev = 0.464, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19292386208948953;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12671032693565282;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16525106409801113;  // std dev = 5.290, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09143142826621665;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0429513331857797;  // std dev = 5.604, 149.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07351762214025508;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09611433052961034;  // std dev = 0.485, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07309984418916864;  // std dev = 5.303, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02598571311899048;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.215', 'seconds']
Parameter learned model CLL:-0.407536 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.464, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.29, 74, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.604, 104, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.485, 74, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.303, 75, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
{'': [nan, 0.21565846740672015]}
{'': [nan, 0.22959183673469316], 'false': [nan, 0.22959183673469316]}
{'': [nan, 0.21729289271163515], 'false': [nan, 0.21729289271163515]}
{'': [nan, 0.23515288468328494], 'false': [nan, 0.23515288468328494]}
{'': [nan, 0.2222222222222217], 'false': [nan, 0.2222222222222217]}
{'': [nan, 0.21080131525606893], 'false': [nan, 0.21080131525606893]}
{'': [nan, 0.22469008264462853], 'false': [nan, 0.22469008264462853]}
{'': [nan, 0.23515288468328602]}
{'': [nan, 0.23437499999999942], 'false': [nan, 0.23437499999999942]}
{'': [nan, 0.22551133383835506], 'false': [nan, 0.22551133383835506]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.514
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.69e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.10159632948783617;  // std dev = 5.37e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.08518475138839679;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return -0.12744928337007871;  // std dev = 0.528, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0785952433770882;  // std dev = 0.007, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07286983560629162;  // std dev = 0.009, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06834333371006535;  // std dev = 0.005, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.06387829540024241;  // std dev = 0.008, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.694', 'seconds']
Refined model CLL: -0.065677


******************************************
Best model found
******************************************
Results 

CLL : -0.072664 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 1.514 

Total Inference Time : 0.8393969535827637 

Total revision time: 3.7064443130493165
Best scored revision CLL: -0.065677


Results 

CLL : -0.072664 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.743929 

Recall : 1.0 

F1 : 0.853165 

Total Learning Time : 3.72672562789917 

Total Inference Time : 0.8393969535827637 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.628
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19649479976116643;  // std dev = 0.473, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1585946717535922;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14503481884827266;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1546665234512455;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07113476762725722;  // std dev = 5.562, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10537098507391454;  // std dev = 5.367, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.026874411981782892;  // std dev = 5.604, 149.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05035131608031483;  // std dev = 0.471, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06352573359633772;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06477416998895692;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.341', 'seconds']
Parameter learned model CLL:-0.398892 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.473, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.562, 99, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.367, 80, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.604, 104, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
{'': [nan, 0.2238679405280127]}
{'': [nan, 0.21975425330812784], 'false': [nan, 0.21975425330812784]}
{'': [nan, 0.22304522165292898], 'false': [nan, 0.22304522165292898]}
{'': [nan, 0.23280032249395247], 'false': [nan, 0.23280032249395247]}
{'': [nan, 0.21484375000000122], 'false': [nan, 0.21484375000000122]}
{'': [nan, 0.23039999999999983], 'false': [nan, 0.23039999999999983]}
{'': [nan, 0.2108013152560699], 'false': [nan, 0.2108013152560699]}
{'': [nan, 0.22139922145328733]}
{'': [nan, 0.22878045756091503], 'false': [nan, 0.22878045756091503]}
{'': [nan, 0.2328003224939523], 'false': [nan, 0.2328003224939523]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.449
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048766;  // std dev = 7.45e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783616;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( female(A) )
%   | | | then return 0.24099070115457757;  // std dev = 0.333, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2403741123974075;  // std dev = 0.333, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.18667353460724073;  // std dev = 0.431, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.2122211807872589;  // std dev = 2.36e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07929798562746862;  // std dev = 0.038, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07321085184546121;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( female(A) )
%   | | then return 0.1697779716395029;  // std dev = 0.061, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.1655700428012322;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1572609341540205;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14689467540818033;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06839601351726186;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13752389387085556;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12914749936123887;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.0646216422631646;  // std dev = 0.036, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.514', 'seconds']
Refined model CLL: -0.066878


******************************************
Best model found
******************************************
Results 

CLL : -0.073944 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.449 

Total Inference Time : 0.8744325637817383 

Total revision time: 3.6769557971954345
Best scored revision CLL: -0.066878


Results 

CLL : -0.073944 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.697237112045288 

Total Inference Time : 0.8744325637817383 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.775
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18950988184507572;  // std dev = 0.471, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1971157854013053;  // std dev = 5.970, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12429761901505973;  // std dev = 6.171, 175.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1318169593567957;  // std dev = 6.043, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12925549405338566;  // std dev = 5.947, 152.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06594056187576403;  // std dev = 6.128, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06499821625678692;  // std dev = 6.073, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.053904367419414;  // std dev = 0.475, 163.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0266159454525481;  // std dev = 6.137, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03289642311399295;  // std dev = 6.082, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.158', 'seconds']
Parameter learned model CLL:-0.389244 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 113, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.97, 98, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.171, 119, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.043, 105, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.947, 96, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.128, 114, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.073, 108, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 107, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.137, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.082, 109, 56]}]
{'': [nan, 0.22156086971744715]}
{'': [nan, 0.2314049586776875], 'false': [nan, 0.2314049586776875]}
{'': [nan, 0.21760000000000262], 'false': [nan, 0.21760000000000262]}
{'': [nan, 0.22684310018903445], 'false': [nan, 0.22684310018903445]}
{'': [nan, 0.2326869806094188], 'false': [nan, 0.2326869806094188]}
{'': [nan, 0.22089965397923692], 'false': [nan, 0.22089965397923692]}
{'': [nan, 0.22486615110053623], 'false': [nan, 0.22486615110053623]}
{'': [nan, 0.22552598893447118]}
{'': [nan, 0.2202387059266092], 'false': [nan, 0.2202387059266092]}
{'': [nan, 0.22420569329660203], 'false': [nan, 0.22420569329660203]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.545
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else if ( female(A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.6913094771863096;  // std dev = 0.831, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5589621067898783;  // std dev = 0.026, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.224243700503811;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11524443190915773;  // std dev = 0.188, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then return 0.4201923719708212;  // std dev = 0.026, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1022480523917658;  // std dev = 0.102, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09239065704098583;  // std dev = 3.94e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.322532696983738;  // std dev = 0.023, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.2583441106319512;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08492955954199981;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25641680677429074;  // std dev = 0.020, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.21335094395220852;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07855758193090785;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2106379795157359;  // std dev = 0.018, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.18187187699035962;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17774281225591368;  // std dev = 0.015, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15340254431299852;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07335658214931932;  // std dev = 0.034, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06824138607931314;  // std dev = 1.05e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15323460523003574;  // std dev = 0.014, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.13672962728249707;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06402806708051163;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return 0.12988580644233438;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.540', 'seconds']
Refined model CLL: -0.066432


******************************************
Best model found
******************************************
Results 

CLL : -0.076505 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.545 

Total Inference Time : 1.0340728759765625 

Total revision time: 4.183798379898072
Best scored revision CLL: -0.066432


Results 

CLL : -0.076505 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 30.41436297416687 

Total Inference Time : 1.0340728759765625 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.721
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20338703033760883;  // std dev = 0.475, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15738716506679823;  // std dev = 6.253, 178.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17542334180975536;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09836130471069243;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12256844252842101;  // std dev = 6.091, 161.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08670930726188099;  // std dev = 6.153, 167.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11424489026047667;  // std dev = 5.939, 148.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0482667145186256;  // std dev = 0.477, 166.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.040130056780938686;  // std dev = 6.133, 165.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.013176107680393017;  // std dev = 6.340, 189.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.168', 'seconds']
Parameter learned model CLL:-0.394319 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 110, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.253, 120, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.091, 103, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.153, 109, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.939, 90, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 108, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.133, 107, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.34, 131, 58]}]
{'': [nan, 0.22604875283446732]}
{'': [nan, 0.21966923368261693], 'false': [nan, 0.21966923368261693]}
{'': [nan, 0.23233456176894876], 'false': [nan, 0.23233456176894876]}
{'': [nan, 0.21712353580485289], 'false': [nan, 0.21712353580485289]}
{'': [nan, 0.23046950349137654], 'false': [nan, 0.23046950349137654]}
{'': [nan, 0.22668435583922106], 'false': [nan, 0.22668435583922106]}
{'': [nan, 0.2383126369612861], 'false': [nan, 0.2383126369612861]}
{'': [nan, 0.2273189142110618]}
{'': [nan, 0.22795224977043074], 'false': [nan, 0.22795224977043074]}
{'': [nan, 0.21270401164581004], 'false': [nan, 0.21270401164581004]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.681
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283913;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360625;  // std dev = 7.60e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10159632948783638;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926098;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08924741183978287;  // std dev = 0.384, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07848242757336643;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07299065992988754;  // std dev = 1.98e-05, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06820319975596313;  // std dev = 1.86e-05, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06399439472570255;  // std dev = 1.76e-05, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.520', 'seconds']
Refined model CLL: -0.063863


******************************************
Best model found
******************************************
Results 

CLL : -0.06964 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.681 

Total Inference Time : 1.0305593013763428 

Total revision time: 4.236897518157959
Best scored revision CLL: -0.063863


Results 

CLL : -0.06964 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 30.46746211242676 

Total Inference Time : 1.0305593013763428 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1914822684328418;  // std dev = 0.471, 534.000 (wgt'ed) examples reached here.  /* #neg=356 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5620190505535844;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.03291472734768645;  // std dev = 6.515, 366.000 (wgt'ed) examples reached here.  /* #neg=317 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1638448834187267;  // std dev = 0.097, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0.18334705633533938;  // std dev = 9.932, 467.000 (wgt'ed) examples reached here.  /* #neg=289 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.47157489485551224;  // std dev = 0.422, 168.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=129 */
%   | else return -0.03309666753702588;  // std dev = 6.416, 327.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.378965627405644;  // std dev = 5.294, 165.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=129 */
%   | else return -0.045652641548115526;  // std dev = 6.483, 371.000 (wgt'ed) examples reached here.  /* #neg=322 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1319270483034523;  // std dev = 5.59e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.09620168926158776;  // std dev = 8.926, 449.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11753803558859667;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.0580926422695491;  // std dev = 9.096, 477.000 (wgt'ed) examples reached here.  /* #neg=299 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.19345188685104311;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=129 */
%   | else return -0.05383328232810182;  // std dev = 6.445, 370.000 (wgt'ed) examples reached here.  /* #neg=321 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.18140288077091082;  // std dev = 5.503, 169.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=129 */
%   | else return -0.04779797115675749;  // std dev = 6.451, 380.000 (wgt'ed) examples reached here.  /* #neg=331 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10354093481712551;  // std dev = 0.342, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.040372616570768544;  // std dev = 8.536, 465.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.433', 'seconds']
Parameter learned model CLL:-0.308008 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 15, 0], 'true,false': [0.0, 0, 0], 'false': [0.471, 356, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.515, 317, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.32e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.097, 62, 0], 'false,false': [9.932, 289, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [5.27e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.422, 39, 129], 'false,false': [6.416, 278, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.294, 36, 129], 'false,false': [6.483, 322, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.59e-09, 43, 0], 'false,false': [8.926, 271, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 19, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.08e-08, 58, 0], 'false,false': [9.096, 299, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.915, 48, 129], 'false,false': [6.445, 321, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [3.73e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.503, 40, 129], 'false,false': [6.451, 331, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.342, 50, 0], 'false,false': [8.536, 287, 178]}]
{'': [-1.4802973661668754e-17, 0.22222222222222496], 'true': [-1.4802973661668754e-17, nan]}
{'': [2.7755575615628915e-18, 0.2203500774972981], 'false': [0.1976443550703807, 0.11595598554749154], 'true': [2.7755575615628915e-18, nan]}
{'': [5.046468293750712e-18, 0.1989709670074644], 'false': [0.00015124925288841656, 0.21123890820886834], 'true': [5.046468293750712e-18, nan]}
{'': [3.0839528461809902e-18, 0.2005679244287617], 'false': [0.17766631216496878, 0.12589249878843733], 'true': [3.0839528461809902e-18, nan]}
{'': [0.0, 0.16911813584038488], 'false': [0.16985839085485396, 0.11328590582195007], 'true': [0.0, nan]}
{'': [1.5419764230904951e-18, 0.1660718930120667], 'false': [2.581914010756178e-17, 0.1774278790156913], 'true': [1.5419764230904951e-18, nan]}
{'': [-4.382459307730881e-18, 0.15761489806154358], 'false': [2.871266442996095e-17, 0.173435745318754], 'true': [-4.382459307730881e-18, nan]}
{'': [8.673617379884035e-19, 0.1532661013449795], 'false': [0.19764435507038267, 0.11224940737009807], 'true': [8.673617379884035e-19, nan]}
{'': [9.912705577010326e-19, 0.14216314591386264], 'false': [0.17919274122243695, 0.10952335057976312], 'true': [9.912705577010326e-19, nan]}
{'': [0.0, 0.14353586868033216], 'false': [0.0023332020526568263, 0.15670816370826252], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.251
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.12544463852839186;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.1123163781936068;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783619;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.09269127618926068;  // std dev = 3.65e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839678;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.08518475138839678;  // std dev = 8.16e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.07877675473109144;  // std dev = 6.66e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.07324622576333684;  // std dev = 9.88e-08, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.24e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.0684269778442029;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.468', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.251 

Total Inference Time : 1.14290189743042 

Total revision time: 5.49250197982788
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 31.723066574096677 

Total Inference Time : 1.14290189743042 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.638
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21529179224236955;  // std dev = 0.479, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1607526348091263;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12285918504131849;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09214189448512562;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1136253568094253;  // std dev = 5.435, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.115237562395268;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08145709495101097;  // std dev = 5.390, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02757021533280852;  // std dev = 0.465, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02870810811395362;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03478211300588835;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.159', 'seconds']
Parameter learned model CLL:-0.38753 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.479, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.435, 86, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.39, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
{'': [nan, 0.2295918367346948]}
{'': [nan, 0.22139922145328672], 'false': [nan, 0.22139922145328672]}
{'': [nan, 0.21647490577266476], 'false': [nan, 0.21647490577266476]}
{'': [nan, 0.21241149521033004], 'false': [nan, 0.21241149521033004]}
{'': [nan, 0.2255113338383545], 'false': [nan, 0.2255113338383545]}
{'': [nan, 0.2320047590719804], 'false': [nan, 0.2320047590719804]}
{'': [nan, 0.22878045756091472], 'false': [nan, 0.22878045756091472]}
{'': [nan, 0.216474905772665]}
{'': [nan, 0.21893276745510087], 'false': [nan, 0.21893276745510087]}
{'': [nan, 0.2230452216529294], 'false': [nan, 0.2230452216529294]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.357
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839152;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839678;  // std dev = 3.49e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109164;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07253839249996279;  // std dev = 0.352, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06790434114695608;  // std dev = 0.338, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.520', 'seconds']
Refined model CLL: -0.064302


******************************************
Best model found
******************************************
Results 

CLL : -0.067567 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.357 

Total Inference Time : 0.8301010131835938 

Total revision time: 3.560826654434204
Best scored revision CLL: -0.064302


Results 

CLL : -0.067567 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.791391248703004 

Total Inference Time : 0.8301010131835938 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.637
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16220298915356618;  // std dev = 0.460, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15638388954709365;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10324746791609393;  // std dev = 5.659, 156.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08532043838428015;  // std dev = 5.666, 157.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12553747289424572;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07955944119648335;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06938604632090918;  // std dev = 5.526, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.088984172434961;  // std dev = 0.478, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08580155382894192;  // std dev = 5.329, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.056360796250327104;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.241', 'seconds']
Parameter learned model CLL:-0.391823 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.46, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.659, 111, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.666, 112, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.526, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.329, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
{'': [nan, 0.21160518626734948]}
{'': [nan, 0.2172928927116335], 'false': [nan, 0.2172928927116335]}
{'': [nan, 0.2052514792899409], 'false': [nan, 0.2052514792899409]}
{'': [nan, 0.20447076960525742], 'false': [nan, 0.20447076960525742]}
{'': [nan, 0.2246900826446287], 'false': [nan, 0.2246900826446287]}
{'': [nan, 0.2164749057726649], 'false': [nan, 0.2164749057726649]}
{'': [nan, 0.21811224489795936], 'false': [nan, 0.21811224489795936]}
{'': [nan, 0.2287804575609143]}
{'': [nan, 0.23280032249395383], 'false': [nan, 0.23280032249395383]}
{'': [nan, 0.22959183673469388], 'false': [nan, 0.22959183673469388]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.531
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048766;  // std dev = 8.02e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.3759847910666182;  // std dev = 0.704, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.4175135841583099;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32537002952575705;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14482183857468311;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839678;  // std dev = 4.59e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2583537855007234;  // std dev = 0.027, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1265644307564806;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109162;  // std dev = 4.59e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( female(A) )
%   | | | then return 0.2153965994969891;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.1814450821425685;  // std dev = 0.439, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1806730961802016;  // std dev = 0.004, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.13541212051054446;  // std dev = 0.000767, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420265;  // std dev = 4.71e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( female(A) )
%   | | | then return 0.15593804915175824;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.14296635814226996;  // std dev = 0.269, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.13680722516735533;  // std dev = 0.002, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.643', 'seconds']
Refined model CLL: -0.069296


******************************************
Best model found
******************************************
Results 

CLL : -0.081454 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.531 

Total Inference Time : 0.8226356506347656 

Total revision time: 3.7683589630126955
Best scored revision CLL: -0.069296


Results 

CLL : -0.081454 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 29.998923557281493 

Total Inference Time : 0.8226356506347656 

Run: 5
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.705
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21257931484634898;  // std dev = 0.478, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17593191436454172;  // std dev = 6.053, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15400065568108637;  // std dev = 6.033, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13302377747980257;  // std dev = 6.013, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0676650279784752;  // std dev = 6.203, 179.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08775742659710944;  // std dev = 6.053, 162.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02122477986980807;  // std dev = 6.278, 189.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06006990741352433;  // std dev = 0.474, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.006297394598582431;  // std dev = 6.270, 188.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05932382326656081;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.270', 'seconds']
Parameter learned model CLL:-0.377979 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 102, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.053, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.033, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.013, 102, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.203, 123, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.053, 106, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 133, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.474, 109, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 132, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
{'': [nan, 0.2288094856593497]}
{'': [nan, 0.22618503276939456], 'false': [nan, 0.22618503276939456]}
{'': [nan, 0.22749999999999765], 'false': [nan, 0.22749999999999765]}
{'': [nan, 0.22880948565934955], 'false': [nan, 0.22880948565934955]}
{'': [nan, 0.2149745638400807], 'false': [nan, 0.2149745638400807]}
{'': [nan, 0.2261850327693963], 'false': [nan, 0.2261850327693963]}
{'': [nan, 0.2085048010973952], 'false': [nan, 0.2085048010973952]}
{'': [nan, 0.22420569329660373]}
{'': [nan, 0.20914440923494712], 'false': [nan, 0.20914440923494712]}
{'': [nan, 0.22815553182231768], 'false': [nan, 0.22815553182231768]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.554
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839108;  // std dev = 7.88e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11542214627828015;  // std dev = 0.331, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10131320256571448;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09245416594648745;  // std dev = 7.88e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.084983318160372;  // std dev = 1.84e-05, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07860391208770955;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1609453542931088;  // std dev = 0.062, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else if ( actor(A) )
%   | | then return -0.07309626465500087;  // std dev = 3.07e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.12665492340087137;  // std dev = 0.142, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06809121107657007;  // std dev = 0.009, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15383234915403496;  // std dev = 0.008, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.0849500016594071;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13485636979409077;  // std dev = 0.007, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.07924791251138441;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06394327826897772;  // std dev = 0.007, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.525', 'seconds']
Refined model CLL: -0.064191


******************************************
Best model found
******************************************
Results 

CLL : -0.071305 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.554 

Total Inference Time : 1.0407793521881104 

Total revision time: 4.145817455291748
Best scored revision CLL: -0.064191


Results 

CLL : -0.071305 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.162018474578858 

Total Inference Time : 1.0407793521881104 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.684
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18769438964496815;  // std dev = 0.470, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1506711347863303;  // std dev = 6.294, 183.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1788711438742879;  // std dev = 6.059, 158.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09985968017787451;  // std dev = 6.294, 183.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09880281966187685;  // std dev = 6.218, 174.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.060782756465857894;  // std dev = 6.310, 185.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0708785318278856;  // std dev = 6.209, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05686564080034004;  // std dev = 0.472, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06586731059009292;  // std dev = 6.112, 163.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02583834125262473;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.238', 'seconds']
Parameter learned model CLL:-0.383297 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.47, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.294, 125, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.059, 100, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.294, 125, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.218, 116, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.31, 127, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.209, 115, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.472, 115, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.112, 105, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
{'': [nan, 0.22094524793388456]}
{'': [nan, 0.21648899638687522], 'false': [nan, 0.21648899638687522]}
{'': [nan, 0.23233456176894524], 'false': [nan, 0.23233456176894524]}
{'': [nan, 0.21648899638687344], 'false': [nan, 0.21648899638687344]}
{'': [nan, 0.22222222222222388], 'false': [nan, 0.22222222222222388]}
{'': [nan, 0.21522279035792563], 'false': [nan, 0.21522279035792563]}
{'': [nan, 0.2228607704901599], 'false': [nan, 0.2228607704901599]}
{'': [nan, 0.22286077049015912]}
{'': [nan, 0.22921449809928796], 'false': [nan, 0.22921449809928796]}
{'': [nan, 0.22094524793388493], 'false': [nan, 0.22094524793388493]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.597
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.69e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839682;  // std dev = 5.77e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07877675473109161;  // std dev = 5.87e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333717;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06842697784420264;  // std dev = 6.14e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06419184008202626;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.364', 'seconds']
Refined model CLL: -0.064583


******************************************
Best model found
******************************************
Results 

CLL : -0.074747 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 1.597 

Total Inference Time : 0.9965498447418213 

Total revision time: 4.1384898242950445
Best scored revision CLL: -0.064583


Results 

CLL : -0.074747 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.736364 

Recall : 1.0 

F1 : 0.848168 

Total Learning Time : 4.154690843582154 

Total Inference Time : 0.9965498447418213 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.183
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21132353827411166;  // std dev = 0.478, 504.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6573528859367992;  // std dev = 4.725, 156.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=129 */
%   | else return -0.024169597514467817;  // std dev = 6.471, 337.000 (wgt'ed) examples reached here.  /* #neg=288 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.16619385054349387;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.1668272506807577;  // std dev = 9.886, 474.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.45943757135747504;  // std dev = 0.416, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.04989647126869453;  // std dev = 6.475, 362.000 (wgt'ed) examples reached here.  /* #neg=313 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3354274157194879;  // std dev = 5.557, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.02697195401376537;  // std dev = 6.412, 328.000 (wgt'ed) examples reached here.  /* #neg=279 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.13518068203946254;  // std dev = 3.23e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0.09931377859708321;  // std dev = 8.797, 440.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1201416973777736;  // std dev = 2.11e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.06564739408977281;  // std dev = 8.801, 473.000 (wgt'ed) examples reached here.  /* #neg=295 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2057081779067217;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=129 */
%   | else return -0.04848814867167718;  // std dev = 6.409, 343.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.15544893669495988;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=129 */
%   | else return -0.04303638316429239;  // std dev = 6.407, 363.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10445334625537113;  // std dev = 0.349, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.03763341123252616;  // std dev = 8.556, 451.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.394', 'seconds']
Parameter learned model CLL:-0.314422 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false': [0.478, 326, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [4.725, 27, 129], 'false,false': [6.471, 288, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [9.886, 296, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.416, 37, 129], 'false,false': [6.475, 313, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [1.32e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.557, 41, 129], 'false,false': [6.412, 279, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [3.23e-09, 74, 0], 'false,false': [8.797, 262, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 18, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.11e-08, 49, 0], 'false,false': [8.801, 295, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 7, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.629, 42, 129], 'false,false': [6.409, 294, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.629, 42, 129], 'false,false': [6.407, 314, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.349, 71, 0], 'false,false': [8.556, 273, 178]}]
{'': [-2.7755575615628915e-18, 0.22844230284706762], 'true': [-2.7755575615628915e-18, nan]}
{'': [2.523234146875356e-18, 0.2306942221527375], 'false': [0.14312130177514695, 0.12425926088985441], 'true': [2.523234146875356e-18, nan]}
{'': [-1.982541115402065e-18, 0.1956805604536103], 'false': [-5.978123978750843e-17, 0.20618382615595243], 'true': [-1.982541115402065e-18, nan]}
{'': [-3.96508223080413e-18, 0.18977138751283154], 'false': [0.17321091595297228, 0.11580497325931893], 'true': [-3.96508223080413e-18, nan]}
{'': [2.135044278125301e-18, 0.17409530567674034], 'false': [0.18167817994810806, 0.12533250372930885], 'true': [2.135044278125301e-18, nan]}
{'': [2.3129646346357427e-18, 0.15733192428849066], 'false': [9.00180830777154e-18, 0.17587578315329028], 'true': [2.3129646346357427e-18, nan]}
{'': [-3.854941057726238e-18, 0.15133486381191727], 'false': [9.063045098980869e-18, 0.1637721032636823], 'true': [-3.854941057726238e-18, nan]}
{'': [9.912705577010326e-19, 0.15591253232210045], 'false': [0.18528778085564845, 0.11977104217519026], 'true': [9.912705577010326e-19, nan]}
{'': [6.30808536718839e-19, 0.14478960140917665], 'false': [0.18528778085564843, 0.11309623839614182], 'true': [6.30808536718839e-19, nan]}
{'': [0.0, 0.1428540755877526], 'false': [0.0017151794716615027, 0.1623273156136009], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.211
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.12544463852839183;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360614;  // std dev = 3.16e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360618;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.11231637819360678;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783626;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.0926912761892607;  // std dev = 6.99e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.83e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.08518475138839678;  // std dev = 7.60e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109176;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.07877675473109146;  // std dev = 7.15e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.07324622576333686;  // std dev = 1.11e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420262;  // std dev = 2.47e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.0684269778442027;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.624', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.211 

Total Inference Time : 1.0728847980499268 

Total revision time: 5.4496626319885255
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.465863651275635 

Total Inference Time : 1.0728847980499268 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.696
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17957750652808366;  // std dev = 0.467, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18641588858098151;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13599197697989662;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1513543170920957;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07804931667536658;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09048652174292839;  // std dev = 5.424, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05761826513821163;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09014523769115838;  // std dev = 0.484, 120.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01333265798200946;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.012754105456740427;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.273', 'seconds']
Parameter learned model CLL:-0.388472 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.467, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.424, 85, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.484, 75, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
{'': [nan, 0.2181122448979602]}
{'': [nan, 0.22796630859375122], 'false': [nan, 0.22796630859375122]}
{'': [nan, 0.2205764824977361], 'false': [nan, 0.2205764824977361]}
{'': [nan, 0.23200475907198162], 'false': [nan, 0.23200475907198162]}
{'': [nan, 0.2172928927116331], 'false': [nan, 0.2172928927116331]}
{'': [nan, 0.22633136094674547], 'false': [nan, 0.22633136094674547]}
{'': [nan, 0.22139922145328667], 'false': [nan, 0.22139922145328667]}
{'': [nan, 0.2343750000000007]}
{'': [nan, 0.2164749057726641], 'false': [nan, 0.2164749057726641]}
{'': [nan, 0.21729289271163427], 'false': [nan, 0.21729289271163427]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.633
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11231637819360622;  // std dev = 7.30e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 1.49e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08518475138839685;  // std dev = 3.80e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109172;  // std dev = 2.79e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420267;  // std dev = 3.07e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.09807397045096287;  // std dev = 0.311, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0639889837896497;  // std dev = 0.006, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.519', 'seconds']
Refined model CLL: -0.064638


******************************************
Best model found
******************************************
Results 

CLL : -0.06801 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.633 

Total Inference Time : 0.8586797714233398 

Total revision time: 3.921658519744873
Best scored revision CLL: -0.064638


Results 

CLL : -0.06801 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.937859539031982 

Total Inference Time : 0.8586797714233398 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.646
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17064893509951218;  // std dev = 0.464, 144.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14013477583398315;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17596061271975103;  // std dev = 5.367, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10495884683199161;  // std dev = 5.544, 142.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12155995392794638;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05182081017319948;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07621373164390755;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07719262417593062;  // std dev = 0.478, 127.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.013257421279531684;  // std dev = 5.588, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028122912658788538;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.163', 'seconds']
Parameter learned model CLL:-0.376698 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.464, 99, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.367, 80, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.544, 97, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 82, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.588, 102, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
{'': [nan, 0.214843750000001]}
{'': [nan, 0.21160518626734987], 'false': [nan, 0.21160518626734987]}
{'': [nan, 0.2303999999999994], 'false': [nan, 0.2303999999999994]}
{'': [nan, 0.21647490577266496], 'false': [nan, 0.21647490577266496]}
{'': [nan, 0.22796630859374917], 'false': [nan, 0.22796630859374917]}
{'': [nan, 0.211605186267349], 'false': [nan, 0.211605186267349]}
{'': [nan, 0.22386794052801107], 'false': [nan, 0.22386794052801107]}
{'': [nan, 0.22878045756091395]}
{'': [nan, 0.2124114952103288], 'false': [nan, 0.2124114952103288]}
{'': [nan, 0.2189327674550999], 'false': [nan, 0.2189327674550999]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.406
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360624;  // std dev = 6.99e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926105;  // std dev = 1.49e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08709864827424277;  // std dev = 0.181, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07863797328786346;  // std dev = 4.59e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07312582001169621;  // std dev = 2.69e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0683213626310922;  // std dev = 1.64e-05, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0640986660646683;  // std dev = 1.55e-05, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.466', 'seconds']
Refined model CLL: -0.064056


******************************************
Best model found
******************************************
Results 

CLL : -0.066776 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.406 

Total Inference Time : 0.8642985820770264 

Total revision time: 3.647328092575073
Best scored revision CLL: -0.064056


Results 

CLL : -0.066776 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.663529111862182 

Total Inference Time : 0.8642985820770264 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.709
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.174533115890474;  // std dev = 0.465, 177.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.7847002430177414;  // std dev = 1.687, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.16445229935513897;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1430826321090539;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.1431802386510835;  // std dev = 5.137, 163.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.6331696708417843;  // std dev = 0.182, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.16069331233530917;  // std dev = 0.060, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.49855475684759065;  // std dev = 0.991, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return -0.13960519385347087;  // std dev = 0.061, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09679971120156397;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.0431897612873755;  // std dev = 3.330, 164.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0886605802704754;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.05819438459900819;  // std dev = 3.210, 145.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.33474709420292165;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.13408381239669573;  // std dev = 0.107, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.19842408302670753;  // std dev = 2.328, 62.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   | else return -0.11659416369960951;  // std dev = 0.140, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06480098280111364;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.004689675156749373;  // std dev = 2.466, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.395', 'seconds']
Parameter learned model CLL:-0.15725 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 121, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.687, 3, 56], 'false,false': [0.0, 111, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [5.137, 107, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.182, 2, 56], 'false,false': [0.06, 123, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.991, 1, 56], 'false,false': [0.061, 93, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [3.33, 108, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [3.21, 89, 56]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.39, 2, 56], 'false,false': [0.107, 95, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.328, 6, 56], 'false,false': [0.14, 93, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [2.466, 112, 56]}]
{'': [nan, 0.21628523093619362]}
{'': [0.0, 0.2208996539792401], 'false': [0.04826199367997809, -2.000401846171453e-17], 'true': [0.0, nan]}
{'': [nan, 0.15848516510474275], 'false': [-3.96508223080413e-18, 0.16191701167648637]}
{'': [0.0, 0.14792434297804213], 'false': [0.033293697978596944, 2.9368732002751352e-05], 'true': [0.0, nan]}
{'': [0.0, 0.10252226714852773], 'false': [0.017236072637734835, 4.016426301233139e-05], 'true': [0.0, nan]}
{'': [nan, 0.06647669418992606], 'false': [0.0, 0.06763148048914784]}
{'': [0.0, 0.06908206399989425], 'false': [-1.1564823173178713e-18, 0.07108368988566603], 'true': [0.0, nan]}
{'': [nan, 0.06443287741722895], 'false': [0.033293697978596576, 0.00012037309951257473]}
{'': [nan, 0.05890683229198703], 'false': [0.08740894901144654, 0.00021082283747159326]}
{'': [nan, 0.036018147600420304], 'false': [0.0, 0.0362039676583654]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;false;genre(B, E).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.386
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12544463852839108;  // std dev = 7.88e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return -0.16838644805875283;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.11231637819360643;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.11231637819360625;  // std dev = 6.66e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( female(A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.5122901261050012;  // std dev = 0.164, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.422957148784473;  // std dev = 0.039, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.177957950818995;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.10154726418744361;  // std dev = 0.005, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1807292863087708;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.32441461695379287;  // std dev = 0.035, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15206949383668777;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.09258112523487694;  // std dev = 0.008, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08412975918096308;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.08519715966146185;  // std dev = 3.65e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2577031480569357;  // std dev = 0.031, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.13431593959938398;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.07772827524763747;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.07878740938870439;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2115474869248389;  // std dev = 0.027, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.1202065998854004;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.1784103491610825;  // std dev = 0.024, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10531125753040359;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0731990181276711;  // std dev = 0.005, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.1451366657658303;  // std dev = 0.046, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   else return -0.06840853229112333;  // std dev = 0.003, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06309670391431461;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(B) )
%   | then return -0.06420396391729363;  // std dev = 3.41e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13579282746830473;  // std dev = 0.019, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.11094821756520441;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.265', 'seconds']
Refined model CLL: -0.065079


******************************************
Best model found
******************************************
Results 

CLL : -0.075505 

AUC ROC : 0.999923 

AUC PR : 0.997625 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 1.386 

Total Inference Time : 0.9232840538024902 

Total revision time: 3.925876588821411
Best scored revision CLL: -0.065079


Results 

CLL : -0.075505 

AUC ROC : 0.999923 

AUC PR : 0.997625 

Precision : 1.0 

Recall : 0.819018 

F1 : 0.900506 

Total Learning Time : 3.949156970977783 

Total Inference Time : 0.9232840538024902 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.721
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23477231172289006;  // std dev = 0.485, 154.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7477371335306161;  // std dev = 2.146, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.17289778710430462;  // std dev = 1.63e-07, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.14955119054298655;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.168119627188017;  // std dev = 5.114, 151.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.5356565674258735;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.16967143574809362;  // std dev = 0.111, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4490329161592252;  // std dev = 2.146, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.14628058718925815;  // std dev = 0.114, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09942510460522182;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.044276984925098746;  // std dev = 3.643, 168.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1556531430216872;  // std dev = 0.355, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.033306745311911884;  // std dev = 3.670, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3214047282977906;  // std dev = 2.081, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | else return -0.13741573169088223;  // std dev = 0.160, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.25973416619892536;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12220854508882396;  // std dev = 0.133, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06190029964361485;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.013337476568895454;  // std dev = 2.827, 152.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.542', 'seconds']
Parameter learned model CLL:-0.176894 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.485, 96, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.146, 5, 58], 'false,false': [1.63e-07, 117, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.29e-08, 13, 0], 'false,false': [5.114, 93, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.326, 8, 58], 'false,false': [0.111, 128, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.146, 5, 58], 'false,false': [0.114, 129, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 8, 0], 'false,false': [3.643, 110, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.355, 6, 0], 'false,false': [3.67, 111, 58]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.081, 5, 58], 'false,false': [0.16, 127, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.934, 4, 58], 'false,false': [0.133, 119, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [2.827, 94, 58]}]
{'': [nan, 0.234778208804183]}
{'': [nan, 0.21839506172839554], 'false': [0.0730662635424532, 2.277380563333654e-16]}
{'': [nan, 0.1668276172067989], 'false': [1.2810265668751807e-17, 0.17319091993258343]}
{'': [nan, 0.14797175215444833], 'false': [0.1065197428833804, 9.708837272366655e-05]}
{'': [nan, 0.10217320465692716], 'false': [0.07306626354245326, 0.00010132377535146635]}
{'': [0.0, 0.07632087798873033], 'false': [3.469446951953614e-18, 0.0790165559422132], 'true': [0.0, nan]}
{'': [nan, 0.07884743407498518], 'false': [0.02098404309262181, 0.07967755544035623]}
{'': [0.0, 0.06959392483675797], 'false': [0.0687690024628173, 0.00020039348855424642], 'true': [0.0, nan]}
{'': [0.0, 0.053624293580483554], 'false': [0.06035379812695112, 0.00014814001346017197], 'true': [0.0, nan]}
{'': [nan, 0.05165419694916678], 'false': [0.0, 0.052564125298373676]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, D).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;false;genre(B, E).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.406
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839133;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(B) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.5995358205444193;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0787767547310916;  // std dev = 5.67e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333714;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06842697784420264;  // std dev = 5.27e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.440', 'seconds']
Refined model CLL: -0.064085


******************************************
Best model found
******************************************
Results 

CLL : -0.073694 

AUC ROC : 0.998467 

AUC PR : 0.957288 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 1.406 

Total Inference Time : 0.9256036281585693 

Total revision time: 3.9563752670288084
Best scored revision CLL: -0.064085


Results 

CLL : -0.073694 

AUC ROC : 0.998467 

AUC PR : 0.957288 

Precision : 1.0 

Recall : 0.817901 

F1 : 0.89983 

Total Learning Time : 3.9796556491851804 

Total Inference Time : 0.9256036281585693 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.005
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19527014722072053;  // std dev = 0.473, 528.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5698212667049234;  // std dev = 5.823, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.043895897742717765;  // std dev = 6.554, 397.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1630638717563896;  // std dev = 0.100, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0.20154216317471677;  // std dev = 9.750, 445.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4431419801937209;  // std dev = 0.435, 173.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=129 */
%   | else return -0.032978589089488614;  // std dev = 6.403, 328.000 (wgt'ed) examples reached here.  /* #neg=279 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.33347958528406285;  // std dev = 5.823, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.04828247702544056;  // std dev = 6.483, 378.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1348678794413063;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.10506125051436942;  // std dev = 8.864, 447.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11631295133669248;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.08178120204867804;  // std dev = 8.970, 440.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.20577596012622867;  // std dev = 5.802, 175.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=129 */
%   | else return -0.051737218748222395;  // std dev = 6.413, 346.000 (wgt'ed) examples reached here.  /* #neg=297 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.19045172816084696;  // std dev = 5.393, 167.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=129 */
%   | else return -0.03199386120817724;  // std dev = 6.364, 322.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10370086354633926;  // std dev = 0.331, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.04669184440691551;  // std dev = 8.384, 449.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.399', 'seconds']
Parameter learned model CLL:-0.31676 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 350, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.823, 46, 129], 'false,false': [6.554, 348, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [2.95e-09, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.1, 57, 0], 'false,false': [9.75, 267, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.435, 44, 129], 'false,false': [6.403, 279, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.823, 46, 129], 'false,false': [6.483, 329, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.032, 67, 0], 'false,false': [8.864, 269, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [8.97, 262, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.802, 46, 129], 'false,false': [6.413, 297, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.393, 38, 129], 'false,false': [6.364, 273, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.331, 52, 0], 'false,false': [8.384, 271, 178]}]
{'': [-9.25185853854297e-18, 0.2234705004591396], 'true': [-9.25185853854297e-18, nan]}
{'': [3.96508223080413e-18, 0.2143503349797101], 'false': [0.19376326530612517, 0.10819179107792053], 'true': [3.96508223080413e-18, nan]}
{'': [8.540177112501205e-18, 0.20277634451437965], 'false': [0.0001752644111649447, 0.2136329901955217], 'true': [8.540177112501205e-18, nan]}
{'': [0.0, 0.19836843785694297], 'false': [0.18906499549755243, 0.12499697774866378], 'true': [0.0, nan]}
{'': [0.0, 0.16884694834040406], 'false': [0.19376326530612273, 0.11119064419068418], 'true': [0.0, nan]}
{'': [2.523234146875356e-18, 0.15951691069576962], 'false': [0.0010347136391375246, 0.17576777528179116], 'true': [2.523234146875356e-18, nan]}
{'': [0.0, 0.1675348999452677], 'false': [-2.1769078914218755e-18, 0.18287773831326795], 'true': [0.0, nan]}
{'': [-6.938893903907229e-19, 0.1583295803782893], 'false': [0.19233933871072875, 0.1188540601797312], 'true': [-6.938893903907229e-19, nan]}
{'': [6.938893903907229e-19, 0.15342954442966447], 'false': [0.1741712383577876, 0.12577343179921185], 'true': [6.938893903907229e-19, nan]}
{'': [7.709882115452476e-19, 0.1426080744325468], 'false': [0.0021051096150615425, 0.15653255933854598], 'true': [7.709882115452476e-19, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.221
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.12544463852839183;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360615;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.11231637819360674;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783624;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.09269127618926074;  // std dev = 7.88e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 7.45e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.08518475138839678;  // std dev = 7.15e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109169;  // std dev = 3.33e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.07877675473109146;  // std dev = 6.32e-08, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return -0.07324622576333681;  // std dev = 1.02e-07, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( director(B), actor(A) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06419184008202625;  // std dev = 2.58e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.512', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.221 

Total Inference Time : 1.1004202365875244 

Total revision time: 5.347889114379883
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.371169496536255 

Total Inference Time : 1.1004202365875244 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.685
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17729787126972504;  // std dev = 0.466, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6685007826685379;  // std dev = 2.739, 54.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return -0.1648325506647947;  // std dev = 6.99e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14337524503083907;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17287870631383528;  // std dev = 4.657, 121.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6234651030547199;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | else return -0.1617331999720604;  // std dev = 0.111, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4577499837237087;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.1398851145688869;  // std dev = 0.107, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09686723505237002;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.05326694545577395;  // std dev = 3.268, 125.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.08871752505089733;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.04024451268568588;  // std dev = 3.254, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.2852510902642232;  // std dev = 2.301, 51.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=45 */
%   | else return -0.1309168556797179;  // std dev = 0.184, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.25492890669759016;  // std dev = 1.917, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return -0.11891170974295821;  // std dev = 0.130, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.06489176435160703;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.005944336173720561;  // std dev = 2.579, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.437', 'seconds']
Parameter learned model CLL:-0.187606 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false': [0.466, 96, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [2.739, 9, 45], 'false,false': [6.99e-08, 82, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [4.657, 76, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.242, 3, 45], 'false,false': [0.111, 84, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.107, 79, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [3.268, 80, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [3.254, 83, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.301, 6, 45], 'false,false': [0.184, 84, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.917, 4, 45], 'false,false': [0.13, 69, 0]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [2.579, 85, 45]}]
{'': [0.0, 0.21729289271163515], 'true': [0.0, nan]}
{'': [nan, 0.22139922145328833], 'false': [0.13888888888888953, 5.95729427847645e-17]}
{'': [0.0, 0.17591336421558576], 'false': [-2.7755575615628915e-18, 0.1792136003170184], 'true': [0.0, nan]}
{'': [nan, 0.16407038384315584], 'false': [0.058593750000000076, 0.00014770055701342409]}
{'': [nan, 0.11317623735548187], 'false': [0.07496876301541057, 0.0001462799680092166]}
{'': [nan, 0.08065489547697284], 'false': [-4.163336342344337e-18, 0.08543763732573423]}
{'': [0.0, 0.07924058328990588], 'false': [-1.982541115402065e-18, 0.08271169379790444], 'true': [0.0, nan]}
{'': [0.0, 0.08017754327850765], 'false': [0.10380622837370249, 0.0004020468563844209], 'true': [0.0, nan]}
{'': [nan, 0.06520884693872328], 'false': [0.07496876301541001, 0.00024328595443254316]}
{'': [nan, 0.04945469076237298], 'false': [-1.3877787807814458e-18, 0.051170951544432214]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(B, D).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(B, D).;true;true
4;;workedunder(A, B) :- genre(B, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.264
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839147;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.50e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3027204798111313;  // std dev = 0.105, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926107;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.08518475138839678;  // std dev = 4.08e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.25776717044505826;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08732300727423953;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109164;  // std dev = 4.41e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21158952504041093;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0806097500642216;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(B, D) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.17843917039077947;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, A), movie(D, B) )
%   | then return 0.15376183951140437;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07002873400413906;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06503981864760536;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13480138290886087;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.06409568773142334;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.393', 'seconds']
Refined model CLL: -0.064618


******************************************
Best model found
******************************************
Results 

CLL : -0.071197 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 1.264 

Total Inference Time : 0.8242454528808594 

Total revision time: 3.5601466884613036
Best scored revision CLL: -0.064618


Results 

CLL : -0.071197 

AUC ROC : 0.999645 

AUC PR : 0.987448 

Precision : 1.0 

Recall : 0.824926 

F1 : 0.904065 

Total Learning Time : 3.5834270706176756 

Total Inference Time : 0.8242454528808594 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.638
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20166038548119178;  // std dev = 0.475, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.7528388269940919;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | else return -0.04163152610384278;  // std dev = 2.955, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.16246898951921546;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.13978392214311675;  // std dev = 4.898, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.6416762760531026;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.07471111376524646;  // std dev = 2.986, 94.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.4619506237904112;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.07387295551224261;  // std dev = 3.002, 104.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.12444172260519298;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.05552429713959839;  // std dev = 3.902, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.1115043723974221;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.02581031517562035;  // std dev = 3.962, 147.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.38243050675185947;  // std dev = 5.96e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.05434508915883584;  // std dev = 2.967, 87.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, D) )
%   | then return 0.242935422878427;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else return -0.054181114927008764;  // std dev = 2.979, 94.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, D) )
%   | then return -0.09149662648635036;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.0069462706278057805;  // std dev = 3.563, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.398', 'seconds']
Parameter learned model CLL:-0.209455 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.475, 86, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.662, 3, 35], 'false,false': [2.955, 69, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [4.898, 87, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.164, 1, 35], 'false,false': [2.986, 84, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [3.002, 94, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 2, 0], 'false,false': [3.902, 88, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [3.962, 102, 45]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [5.96e-08, 0, 35], 'false,false': [2.967, 77, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [1.375, 2, 35], 'false,false': [2.979, 84, 10]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'false': 'genre(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [3.73e-09, 7, 0], 'false,false': [3.563, 95, 45]}]
{'': [nan, 0.22551133383835528]}
{'': [nan, 0.23668639053254406], 'false': [0.07271468144044323, 0.11055920525556816]}
{'': [nan, 0.180380470356594], 'false': [0.0, 0.181749973120443]}
{'': [nan, 0.17881877960447623], 'false': [0.027006172839506792, 0.09483983853640422]}
{'': [nan, 0.13291962855248304], 'false': [0.051132213294375416, 0.08667696371966221]}
{'': [nan, 0.11327247345025389], 'false': [0.0, 0.11449600012659299]}
{'': [nan, 0.1032864678336947], 'false': [0.0, 0.1067628175830165]}
{'': [nan, 0.11119494140315819], 'false': [1.0150610510858574e-16, 0.10119860211437157]}
{'': [nan, 0.10008049174960107], 'false': [0.05113221329437555, 0.09441381944621444]}
{'': [nan, 0.08680808218959987], 'false': [1.982541115402065e-18, 0.09068700991849757]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;workedunder(A, B) :- genre(A, D).;true;true
5;;workedunder(A, B) :- genre(A, D).;true;true
6;;workedunder(A, B) :- genre(A, D).;true;true
7;;workedunder(A, B) :- genre(B, D).;true;true
9;;workedunder(A, B) :- genre(A, D).;true;true


Refining candidate
***************************
Model training time 1.41
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(B) )
%   | then return -0.11231637819360624;  // std dev = 6.14e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.3027377983188709;  // std dev = 0.084, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else return -0.09941749301942814;  // std dev = 0.391, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.08466204906329233;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B) )
%   | then return -0.08466204906329214;  // std dev = 5.58e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2568496902161517;  // std dev = 0.012, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.12225450673861418;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.07832773437776612;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( actor(B) )
%   | then return -0.0783277343777662;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.2109425586891793;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10902636339140266;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( female(A) )
%   | then return 0.16128135959653112;  // std dev = 0.063, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.1646680804802875;  // std dev = 0.062, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( actor(B) )
%   | then return -0.0728565616954828;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( female(A) )
%   | | then return 0.1766797520538178;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12367199020152501;  // std dev = 0.249, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06808578899583369;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15558440066099904;  // std dev = 0.016, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11576062985547461;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C) )
%   then return -0.06389072356562932;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.0638907235656294;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.1362214410955145;  // std dev = 0.014, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10540753758195462;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.449', 'seconds']
Refined model CLL: -0.065665


******************************************
Best model found
******************************************
Results 

CLL : -0.072077 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 1.41 

Total Inference Time : 0.7657337188720703 

Total revision time: 3.5754481773376465
Best scored revision CLL: -0.065665


Results 

CLL : -0.072077 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.873057 

Recall : 1.0 

F1 : 0.932227 

Total Learning Time : 3.5987285594940186 

Total Inference Time : 0.7657337188720703 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.699
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1856343152164726;  // std dev = 0.469, 171.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1558557028723815;  // std dev = 6.163, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18714360078608663;  // std dev = 5.912, 149.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13317781796295264;  // std dev = 6.023, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10734690179905337;  // std dev = 6.033, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08490512386035313;  // std dev = 6.043, 161.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07927160808603027;  // std dev = 5.991, 156.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05405126563852873;  // std dev = 0.477, 160.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.022077945086364247;  // std dev = 6.128, 170.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.023275689515215723;  // std dev = 6.101, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.138', 'seconds']
Parameter learned model CLL:-0.394138 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.469, 115, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.163, 118, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.912, 93, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.023, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.033, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.043, 105, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.991, 100, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.477, 104, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.128, 114, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.101, 111, 56]}]
{'': [nan, 0.2202387059266102]}
{'': [nan, 0.21825868674857815], 'false': [nan, 0.21825868674857815]}
{'': [nan, 0.23458402774649806], 'false': [nan, 0.23458402774649806]}
{'': [nan, 0.22815553182231754], 'false': [nan, 0.22815553182231754]}
{'': [nan, 0.2274999999999995], 'false': [nan, 0.2274999999999995]}
{'': [nan, 0.22684310018903533], 'false': [nan, 0.22684310018903533]}
{'': [nan, 0.23011176857330626], 'false': [nan, 0.23011176857330626]}
{'': [nan, 0.2274999999999991]}
{'': [nan, 0.2208996539792383], 'false': [nan, 0.2208996539792383]}
{'': [nan, 0.2228835741690267], 'false': [nan, 0.2228835741690267]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.439
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.7936328060672536;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.6837591264966688;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.6989752683546022;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.12681239583400364;  // std dev = 0.142, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11218008315520359;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5704235996126442;  // std dev = 0.045, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.42979213863994514;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.101483983499543;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( female(A) )
%   | | | then return 0.3955082217585001;  // std dev = 0.743, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.43461860214718956;  // std dev = 8.43e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09259720184525885;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( female(A) )
%   | | | then return 0.30302279977630214;  // std dev = 0.744, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.3070912691638244;  // std dev = 0.745, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08510490556090142;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2674320408827755;  // std dev = 0.004, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.5018965804105145;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07870818822958371;  // std dev = 2.58e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2183816744811248;  // std dev = 0.004, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.3786389068459736;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07318674133678353;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( female(A) )
%   | | then return 0.16584320607833827;  // std dev = 0.089, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.18383840045324976;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06837490751410152;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15860336438189662;  // std dev = 0.006, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.3326721355170463;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06414589640226231;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return 0.13150105390891637;  // std dev = 0.053, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.615', 'seconds']
Refined model CLL: -0.073898


******************************************
Best model found
******************************************
Results 

CLL : -0.104405 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.439 

Total Inference Time : 0.9414751529693604 

Total revision time: 3.9528815631866454
Best scored revision CLL: -0.073898


Results 

CLL : -0.104405 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 3.9728824977874755 

Total Inference Time : 0.9414751529693604 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.676
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15866706981453937;  // std dev = 0.458, 193.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16173857422833215;  // std dev = 6.262, 179.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1331926214339183;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13272201975409723;  // std dev = 6.191, 171.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10049483905129476;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07316438276469264;  // std dev = 6.278, 181.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06839941473947793;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04065988642381174;  // std dev = 0.465, 184.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03949247199662608;  // std dev = 6.270, 180.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.024410563062598825;  // std dev = 6.302, 184.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.199', 'seconds']
Parameter learned model CLL:-0.365235 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.458, 135, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.262, 121, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.191, 113, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 123, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.465, 126, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 122, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.302, 126, 58]}]
{'': [nan, 0.21020698542242786]}
{'': [nan, 0.21903186542243028], 'false': [nan, 0.21903186542243028]}
{'': [nan, 0.21712353580485558], 'false': [nan, 0.21712353580485558]}
{'': [nan, 0.2241373414041933], 'false': [nan, 0.2241373414041933]}
{'': [nan, 0.2209452479338828], 'false': [nan, 0.2209452479338828]}
{'': [nan, 0.21775892066786925], 'false': [nan, 0.21775892066786925]}
{'': [nan, 0.22094524793388473], 'false': [nan, 0.22094524793388473]}
{'': [nan, 0.21585538752362923]}
{'': [nan, 0.21839506172839435], 'false': [nan, 0.21839506172839435]}
{'': [nan, 0.21585538752362926], 'false': [nan, 0.21585538752362926]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.498
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1254446385283911;  // std dev = 7.45e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 7.88e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1015963294878364;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 5.05e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 6.23e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08158074430946925;  // std dev = 0.293, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07305611515402766;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06826054468870789;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A) )
%   | | | then return -0.06404497567956387;  // std dev = 4.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.10092451063653715;  // std dev = 0.350, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.429', 'seconds']
Refined model CLL: -0.063677


******************************************
Best model found
******************************************
Results 

CLL : -0.068629 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.498 

Total Inference Time : 1.0289065837860107 

Total revision time: 4.066034053802491
Best scored revision CLL: -0.063677


Results 

CLL : -0.068629 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 4.086034988403321 

Total Inference Time : 1.0289065837860107 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.086
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19655197692460352;  // std dev = 0.473, 526.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5572188434991441;  // std dev = 5.959, 178.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=129 */
%   | else return -0.029472088610365012;  // std dev = 6.499, 355.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1653232597695218;  // std dev = 0.096, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.16651319210359114;  // std dev = 10.080, 488.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4318409484134991;  // std dev = 0.446, 178.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=129 */
%   | else return -0.0327286580427035;  // std dev = 6.417, 331.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3788896492493475;  // std dev = 5.452, 168.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=129 */
%   | else return -0.02254235152741933;  // std dev = 6.397, 319.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.14038031664231937;  // std dev = 0.036, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.07952059792095317;  // std dev = 9.119, 485.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11984543136612859;  // std dev = 2.58e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.06360559633744221;  // std dev = 9.234, 470.000 (wgt'ed) examples reached here.  /* #neg=292 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.23147328467211253;  // std dev = 5.679, 172.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=129 */
%   | else return -0.05282012954470124;  // std dev = 6.440, 361.000 (wgt'ed) examples reached here.  /* #neg=312 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.1262594882959867;  // std dev = 6.192, 184.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=129 */
%   | else return -0.027931547216792724;  // std dev = 6.369, 326.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.10574623759694718;  // std dev = 0.322, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.0373890271278674;  // std dev = 8.655, 479.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.460', 'seconds']
Parameter learned model CLL:-0.305933 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 17, 0], 'true,false': [0.0, 0, 0], 'false': [0.473, 348, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.959, 49, 129], 'false,false': [6.499, 306, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.86e-09, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.096, 51, 0], 'false,false': [10.08, 310, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 14, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.446, 49, 129], 'false,false': [6.417, 282, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 19, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.452, 39, 129], 'false,false': [6.397, 270, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [9.13e-09, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.036, 54, 0], 'false,false': [9.119, 307, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.58e-08, 60, 0], 'false,false': [9.234, 292, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 20, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.679, 43, 129], 'false,false': [6.44, 312, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 9, 0], 'true,false': [0.0, 0, 0], 'false,true': [6.192, 55, 129], 'false,false': [6.369, 277, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.322, 59, 0], 'false,false': [8.655, 301, 178]}]
{'': [-3.2653618371328133e-18, 0.22388642310862078], 'true': [-3.2653618371328133e-18, nan]}
{'': [2.7755575615628915e-18, 0.22243029473157905], 'false': [0.19950132559020536, 0.11897639357270653], 'true': [2.7755575615628915e-18, nan]}
{'': [0.0, 0.19797064509220014], 'false': [0.0001790838656509456, 0.20822239919440771], 'true': [0.0, nan]}
{'': [-3.96508223080413e-18, 0.19956468760954044], 'false': [0.199004471558036, 0.12439083272404589], 'true': [-3.96508223080413e-18, nan]}
{'': [7.304098846218135e-18, 0.1814836565351982], 'false': [0.1769395520380131, 0.12828581373768658], 'true': [7.304098846218135e-18, nan]}
{'': [5.551115123125783e-18, 0.158769038573052], 'false': [0.0012826891086557197, 0.1714589884662026], 'true': [5.551115123125783e-18, nan]}
{'': [0.0, 0.16426748656686463], 'false': [1.1102230246251566e-17, 0.1814278855595555], 'true': [0.0, nan]}
{'': [-1.3877787807814458e-18, 0.15598712957816824], 'false': [0.1875, 0.11489105075749155], 'true': [-1.3877787807814458e-18, nan]}
{'': [0.0, 0.16018447934550495], 'false': [0.20835848560295794, 0.12441664056802758], 'true': [0.0, nan]}
{'': [0.0, 0.14142605048834903], 'false': [0.00175451222921379, 0.15638305883308765], 'true': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.212
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.12544463852839186;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360617;  // std dev = 3.33e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.11231637819360658;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1015963294878362;  // std dev = 4.21e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.09269127618926071;  // std dev = 8.94e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 1.83e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.08518475138839678;  // std dev = 7.60e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109169;  // std dev = 2.69e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.07877675473109147;  // std dev = 6.99e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.07324622576333689;  // std dev = 1.10e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.24e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.06842697784420268;  // std dev = 2.11e-08, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06419184008202626;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.409', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.212 

Total Inference Time : 1.0964395999908447 

Total revision time: 5.558559558868408
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 5.578560493469238 

Total Inference Time : 1.0964395999908447 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.62
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.177297871269725;  // std dev = 0.466, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13516744933520472;  // std dev = 5.612, 150.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12392713115794059;  // std dev = 5.579, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12967872660663496;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09365440627845491;  // std dev = 5.535, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12063324423638025;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11625863026015792;  // std dev = 5.276, 118.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.044977452840827485;  // std dev = 0.471, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028414280373473155;  // std dev = 5.507, 138.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06220664468098195;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.171', 'seconds']
Parameter learned model CLL:-0.399046 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.612, 105, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.579, 101, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.535, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.354, 79, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.276, 73, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.471, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.507, 93, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
{'': [nan, 0.2172928927116352]}
{'': [nan, 0.21000000000000127], 'false': [nan, 0.21000000000000127]}
{'': [nan, 0.21322011634452986], 'false': [nan, 0.21322011634452986]}
{'': [nan, 0.22222222222222224], 'false': [nan, 0.22222222222222224]}
{'': [nan, 0.21729289271163396], 'false': [nan, 0.21729289271163396]}
{'': [nan, 0.23120447450572323], 'false': [nan, 0.23120447450572323]}
{'': [nan, 0.23592358517667295], 'false': [nan, 0.23592358517667295]}
{'': [nan, 0.2222222222222212]}
{'': [nan, 0.2197542533081275], 'false': [nan, 0.2197542533081275]}
{'': [nan, 0.2320047590719806], 'false': [nan, 0.2320047590719806]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.433
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8025933795439559;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else return -0.14185106490048768;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7278411685452969;  // std dev = 0.032, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.26945161617006347;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5636405054061939;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.2217305631535223;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11180726724949734;  // std dev = 0.023, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42369808222098376;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.18413363533341057;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10152108420844147;  // std dev = 0.012, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.3157594837668504;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3008865927062262;  // std dev = 0.668, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return -0.09396937497605719;  // std dev = 0.100, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08513070475863406;  // std dev = 2.36e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.261988910352805;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.20425754197061363;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2145687104217383;  // std dev = 0.034, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.17390763385886404;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08042511590871804;  // std dev = 0.142, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.18062167610492957;  // std dev = 0.030, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14804706960238093;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07435739520353665;  // std dev = 0.136, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06821061269635499;  // std dev = 1.05e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15541579181553114;  // std dev = 0.026, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1313536185918478;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06400090663432058;  // std dev = 2.98e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13609155582849222;  // std dev = 0.024, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11912148001175141;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.642', 'seconds']
Refined model CLL: -0.067008


******************************************
Best model found
******************************************
Results 

CLL : -0.069406 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.433 

Total Inference Time : 0.8168389797210693 

Total revision time: 3.6023149757385253
Best scored revision CLL: -0.067008


Results 

CLL : -0.069406 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.6223159103393554 

Total Inference Time : 0.8168389797210693 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.627
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.177297871269725;  // std dev = 0.466, 141.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16363460261987614;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11544406795811785;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10777050098650998;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12367854591884084;  // std dev = 5.413, 129.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10967712377361374;  // std dev = 5.379, 126.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08311179174183869;  // std dev = 5.402, 128.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.007124671884467186;  // std dev = 0.455, 154.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.044344927307369886;  // std dev = 5.487, 136.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05046570060408171;  // std dev = 5.424, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.286', 'seconds']
Parameter learned model CLL:-0.383107 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.466, 96, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.413, 84, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.379, 81, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.402, 83, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.455, 109, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.487, 91, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.424, 85, 45]}]
{'': [nan, 0.2172928927116352]}
{'': [nan, 0.22057648249773681], 'false': [nan, 0.22057648249773681]}
{'': [nan, 0.2116051862673487], 'false': [nan, 0.2116051862673487]}
{'': [nan, 0.21565846740671948], 'false': [nan, 0.21565846740671948]}
{'': [nan, 0.2271498107084901], 'false': [nan, 0.2271498107084901]}
{'': [nan, 0.22959183673469347], 'false': [nan, 0.22959183673469347]}
{'': [nan, 0.22796630859375008], 'false': [nan, 0.22796630859375008]}
{'': [nan, 0.20682239838083863]}
{'': [nan, 0.2213992214532878], 'false': [nan, 0.2213992214532878]}
{'': [nan, 0.22633136094674508], 'false': [nan, 0.22633136094674508]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.362
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783613;  // std dev = 5.96e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.22181885107629976;  // std dev = 0.416, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0920819324927531;  // std dev = 0.021, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0843170268944619;  // std dev = 0.024, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07829079504001339;  // std dev = 0.020, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07285598396573012;  // std dev = 0.018, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06757447077620435;  // std dev = 0.022, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( female(A) )
%   | | | then return 0.14352840659625943;  // std dev = 0.217, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.14312773479202415;  // std dev = 0.216, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13510297603594615;  // std dev = 0.000157, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07814325359274212;  // std dev = 2.36e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06375914634780977;  // std dev = 0.019, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.551', 'seconds']
Refined model CLL: -0.065649


******************************************
Best model found
******************************************
Results 

CLL : -0.07519 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 1.362 

Total Inference Time : 0.8166611194610596 

Total revision time: 3.5333012714385985
Best scored revision CLL: -0.065649


Results 

CLL : -0.07519 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.742291 

Recall : 1.0 

F1 : 0.852086 

Total Learning Time : 3.5533022060394286 

Total Inference Time : 0.8166611194610596 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.748
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17275567667254715;  // std dev = 0.464, 178.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15949121087483428;  // std dev = 6.154, 173.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19627727378159565;  // std dev = 5.875, 146.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10283436293631606;  // std dev = 6.163, 174.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06560207100414973;  // std dev = 6.249, 185.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09438744741338999;  // std dev = 6.063, 163.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.098769324155189;  // std dev = 5.958, 153.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06517740312823422;  // std dev = 0.478, 159.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.060745588052493193;  // std dev = 5.981, 155.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01986621268553302;  // std dev = 6.110, 168.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.105', 'seconds']
Parameter learned model CLL:-0.395091 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.464, 122, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.154, 117, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.875, 90, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.163, 118, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.249, 129, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.063, 107, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.958, 97, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.478, 103, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.981, 99, 56]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.11, 112, 56]}]
{'': [nan, 0.21562933972983248]}
{'': [nan, 0.21891810618463564], 'false': [nan, 0.21891810618463564]}
{'': [nan, 0.23644210921373465], 'false': [nan, 0.23644210921373465]}
{'': [nan, 0.21825868674857865], 'false': [nan, 0.21825868674857865]}
{'': [nan, 0.2110737764791827], 'false': [nan, 0.2110737764791827]}
{'': [nan, 0.2255259889344737], 'false': [nan, 0.2255259889344737]}
{'': [nan, 0.23204750309709984], 'false': [nan, 0.23204750309709984]}
{'': [nan, 0.22815553182231607]}
{'': [nan, 0.2307596253902189], 'false': [nan, 0.2307596253902189]}
{'': [nan, 0.22222222222222127], 'false': [nan, 0.22222222222222127]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.478
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.56e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.1015963294878364;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.09269127618926089;  // std dev = 6.32e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.77e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07877675473109157;  // std dev = 6.50e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( female(A) )
%   | | | then return 0.19945291311954882;  // std dev = 0.283, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.20013989995374792;  // std dev = 0.284, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17855107114556715;  // std dev = 0.000377, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09456111029766544;  // std dev = 4.80e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07341290145989232;  // std dev = 0.021, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15384640506020247;  // std dev = 0.000334, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08677391986494723;  // std dev = 4.71e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06860040893384192;  // std dev = 0.020, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06417141247101579;  // std dev = 4.59e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13486718428300845;  // std dev = 0.000300, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.08012191642695907;  // std dev = 5.55e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.494', 'seconds']
Refined model CLL: -0.064846


******************************************
Best model found
******************************************
Results 

CLL : -0.076538 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 1.478 

Total Inference Time : 0.9717311859130859 

Total revision time: 4.08646576499939
Best scored revision CLL: -0.064846


Results 

CLL : -0.076538 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 30.317227531433105 

Total Inference Time : 0.9717311859130859 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos examples: 324
Target test neg examples: 10813

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.678
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1683093629070002;  // std dev = 0.463, 187.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17166122310666673;  // std dev = 6.209, 173.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1319791624877483;  // std dev = 6.278, 181.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10067836844449812;  // std dev = 6.325, 187.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09203958002905889;  // std dev = 6.286, 182.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.086367068316746;  // std dev = 6.236, 176.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08377141261553267;  // std dev = 6.172, 169.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08440893602311637;  // std dev = 0.480, 161.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06500953372201196;  // std dev = 6.102, 162.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.015561051747754743;  // std dev = 6.270, 180.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.143', 'seconds']
Parameter learned model CLL:-0.384367 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.463, 129, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.209, 115, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.278, 123, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.325, 129, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.286, 124, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.236, 118, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.172, 111, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.48, 103, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.102, 104, 58]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.27, 122, 58]}]
{'': [nan, 0.21396093682976386]}
{'': [nan, 0.22286077049015782], 'false': [nan, 0.22286077049015782]}
{'': [nan, 0.21775892066786756], 'false': [nan, 0.21775892066786756]}
{'': [nan, 0.213960936829762], 'false': [nan, 0.213960936829762]}
{'': [nan, 0.21712353580485427], 'false': [nan, 0.21712353580485427]}
{'': [nan, 0.22094524793388295], 'false': [nan, 0.22094524793388295]}
{'': [nan, 0.2254122754805483], 'false': [nan, 0.2254122754805483]}
{'': [nan, 0.23046950349137893]}
{'': [nan, 0.2298430117360162], 'false': [nan, 0.2298430117360162]}
{'': [nan, 0.21839506172839368], 'false': [nan, 0.21839506172839368]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.577
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10373660041358565;  // std dev = 0.236, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.09251143709656875;  // std dev = 5.67e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2381543928715953;  // std dev = 0.469, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.08503210243533489;  // std dev = 1.05e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07864566202032199;  // std dev = 2.79e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( female(A) )
%   | | | then return 0.1946602104418949;  // std dev = 0.309, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.21259251798971324;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07313249140293253;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17921930434252395;  // std dev = 0.000487, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.12744260299768215;  // std dev = 0.000117, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06832741483202671;  // std dev = 3.49e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15435232030959534;  // std dev = 0.000432, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.11399223532314622;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06410398829468901;  // std dev = 2.11e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13526148310591019;  // std dev = 0.000387, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return -0.10296384958935871;  // std dev = 7.82e-05, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.411', 'seconds']
Refined model CLL: -0.065662


******************************************
Best model found
******************************************
Results 

CLL : -0.072608 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.577 

Total Inference Time : 0.995743989944458 

Total revision time: 4.16757119178772
Best scored revision CLL: -0.065662


Results 

CLL : -0.072608 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 30.398332958221435 

Total Inference Time : 0.995743989944458 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos examples: 204
Target test neg examples: 10693

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.137
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20244293896798046;  // std dev = 0.475, 517.000 (wgt'ed) examples reached here.  /* #neg=339 #pos=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.12544463852839138;  // std dev = 1.86e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.5905002031396629;  // std dev = 5.578, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.031068424311317677;  // std dev = 6.502, 357.000 (wgt'ed) examples reached here.  /* #neg=308 #pos=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1640187429663004;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.17804966708977965;  // std dev = 9.919, 468.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=178 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.4294812965346814;  // std dev = 0.442, 176.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=129 */
%   | else return -0.038915328570782004;  // std dev = 6.429, 342.000 (wgt'ed) examples reached here.  /* #neg=293 #pos=49 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.3573972751997252;  // std dev = 5.578, 170.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | else return -0.046584869887201515;  // std dev = 6.477, 382.000 (wgt'ed) examples reached here.  /* #neg=333 #pos=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.1370695780421466;  // std dev = 0.035, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0.08026619886959391;  // std dev = 9.106, 478.000 (wgt'ed) examples reached here.  /* #neg=300 #pos=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.11761478055796794;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.057008658165412375;  // std dev = 9.106, 498.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.25333980260676797;  // std dev = 5.362, 166.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=129 */
%   | else return -0.04960932040438525;  // std dev = 6.432, 373.000 (wgt'ed) examples reached here.  /* #neg=324 #pos=49 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(B, D) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, E) )
%   | then return 0.16813556529212706;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=129 */
%   | else return -0.03091807232889589;  // std dev = 6.393, 336.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( genre(A, D) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.09855749517753547;  // std dev = 2.89e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.023232406509116024;  // std dev = 8.804, 481.000 (wgt'ed) examples reached here.  /* #neg=303 #pos=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.436', 'seconds']
Parameter learned model CLL:-0.305965 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)'}, {'true,true': [0.0, 16, 0], 'true,false': [0.0, 0, 0], 'false': [0.475, 339, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [1.86e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.578, 41, 129], 'false,false': [6.502, 308, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [3.48e-09, 15, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [9.919, 290, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.442, 47, 129], 'false,false': [6.429, 293, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [0.0, 5, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.578, 41, 129], 'false,false': [6.477, 333, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [5.27e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.035, 61, 0], 'false,false': [9.106, 300, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(A, E)'}, {'true,true': [3.73e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false': [9.106, 320, 178]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(B, E)'}, {'true,true': [9.31e-10, 8, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.362, 37, 129], 'false,false': [6.432, 324, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(B, D)', 'false': 'genre(B, E)'}, {'true,true': [2.63e-09, 12, 0], 'true,false': [0.0, 0, 0], 'false,true': [5.629, 42, 129], 'false,false': [6.393, 287, 49]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'genre(A, D)', 'false': 'genre(A, E)'}, {'true,true': [1.61e-09, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [2.89e-08, 42, 0], 'false,false': [8.804, 303, 178]}]
{'': [-6.938893903907228e-18, 0.22575564276869137], 'true': [-6.938893903907228e-18, nan]}
{'': [2.3129646346357427e-18, 0.22367847794072682], 'false': [0.18301038062283798, 0.11841599384852268], 'true': [2.3129646346357427e-18, nan]}
{'': [1.295260195396016e-17, 0.19992674885065415], 'false': [-3.047671047990626e-17, 0.21021546732945864], 'true': [1.295260195396016e-17, nan]}
{'': [-2.135044278125301e-18, 0.19531976578006968], 'false': [0.1951980236746583, 0.12083880641747435], 'true': [-2.135044278125301e-18, nan]}
{'': [0.0, 0.1671357979763946], 'false': [0.18301038062284045, 0.10980983896102507], 'true': [0.0, nan]}
{'': [2.3129646346357427e-18, 0.15871619136529086], 'false': [0.0011974726923564426, 0.17347226564157375], 'true': [2.3129646346357427e-18, nan]}
{'': [1.1564823173178713e-18, 0.15154088121452816], 'false': [-3.700743415417188e-17, 0.1665199643713751], 'true': [1.1564823173178713e-18, nan]}
{'': [8.673617379884035e-19, 0.14966006230176568], 'false': [0.17321091595296764, 0.11091335193148037], 'true': [8.673617379884035e-19, nan]}
{'': [5.782411586589357e-19, 0.15196852008912648], 'false': [0.1852877808556486, 0.12164764490344362], 'true': [5.782411586589357e-19, nan]}
{'': [2.523234146875356e-18, 0.14928993509048727], 'false': [1.9825411154020653e-17, 0.16113448651319207], 'true': [2.523234146875356e-18, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;false;genre(A, E).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
Model training time 2.533
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( movie(D, A), movie(D, B) )
%   | then if ( actor(A), director(B) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1418510649004877;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.12544463852839116;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.1254446385283919;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360621;  // std dev = 2.11e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5553664367462833;  // std dev = 5.90e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.11231637819360679;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.4175135841583096;  // std dev = 3.77e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.10159632948783626;  // std dev = 2.58e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.32071184716014917;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.09269127618926072;  // std dev = 5.58e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.0851847513883968;  // std dev = 1.29e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2551722425694888;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.08518475138839679;  // std dev = 7.45e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.08518475138839678;  // std dev = 7.30e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.20975771563253506;  // std dev = 3.00e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.0787767547310917;  // std dev = 2.58e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.07877675473109148;  // std dev = 6.83e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527825;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.07324622576333693;  // std dev = 1.03e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.06842697784420268;  // std dev = 2.24e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.0684269778442029;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then if ( actor(A), director(B) )
%   | | | then return 0.13400703000801098;  // std dev = 7.60e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.464', 'seconds']
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.533 

Total Inference Time : 1.0435457229614258 

Total revision time: 5.75058500289917
Best scored revision CLL: -0.065435


Results 

CLL : -0.063555 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 31.981346769332887 

Total Inference Time : 1.0435457229614258 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos examples: 337
Target test neg examples: 12345

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.708
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2043027812533585;  // std dev = 0.476, 130.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16976201735012317;  // std dev = 5.457, 133.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12095249754700604;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1525260281132592;  // std dev = 5.342, 123.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07464466737203558;  // std dev = 5.553, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06750827439486319;  // std dev = 5.526, 140.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0739886771675987;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03304003014636561;  // std dev = 0.464, 143.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0038298485718907533;  // std dev = 5.644, 154.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.026006632055525017;  // std dev = 5.758, 171.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.290', 'seconds']
Parameter learned model CLL:-0.355374 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.476, 85, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.457, 88, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.342, 78, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.553, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.526, 95, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.464, 98, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.644, 109, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.758, 126, 45]}]
{'': [nan, 0.2263313609467465]}
{'': [nan, 0.22386794052801345], 'false': [nan, 0.22386794052801345]}
{'': [nan, 0.21565846740671937], 'false': [nan, 0.21565846740671937]}
{'': [nan, 0.23200475907198137], 'false': [nan, 0.23200475907198137]}
{'': [nan, 0.2156584674067189], 'false': [nan, 0.2156584674067189]}
{'': [nan, 0.2181122448979592], 'false': [nan, 0.2181122448979592]}
{'': [nan, 0.224690082644628], 'false': [nan, 0.224690082644628]}
{'': [nan, 0.21565846740672015]}
{'': [nan, 0.2068223983808388], 'false': [nan, 0.2068223983808388]}
{'': [nan, 0.19390581717451488], 'false': [nan, 0.19390581717451488]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.432
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0.8155957436101503;  // std dev = 0.202, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7279812424281439;  // std dev = 2.06e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.27201875757185534;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12716903992890283;  // std dev = 0.146, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11214456784523624;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5637567869988659;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.22159026497457143;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42376566767616136;  // std dev = 1.19e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.18572768933144307;  // std dev = 1.29e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.10250550758835507;  // std dev = 0.107, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.0924844498688096;  // std dev = 4.08e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3249535091045246;  // std dev = 5.96e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15926045542325565;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2580644633666947;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1390741155297099;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08929584268826082;  // std dev = 0.332, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( female(A) )
%   | | | then return 0.2117986675502068;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19318526368051558;  // std dev = 0.460, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return -0.08246507032827138;  // std dev = 0.317, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.0725666458956278;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.18066742020987772;  // std dev = 0.008, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1464576854719872;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06783179809834211;  // std dev = 2.11e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1554476092957479;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12880068315398488;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13611442924906267;  // std dev = 0.006, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.11546048578536984;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06426882910189106;  // std dev = 0.051, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.540', 'seconds']
Refined model CLL: -0.067623


******************************************
Best model found
******************************************
Results 

CLL : -0.073015 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.432 

Total Inference Time : 0.8750729560852051 

Total revision time: 3.7358740711212155
Best scored revision CLL: -0.067623


Results 

CLL : -0.073015 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.966635837554932 

Total Inference Time : 0.8750729560852051 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos examples: 337
Target test neg examples: 12165

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 0.641
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23630019560371418;  // std dev = 0.485, 119.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16270450548456203;  // std dev = 5.467, 134.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=45 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12608278715763654;  // std dev = 5.516, 139.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=45 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11004968232458326;  // std dev = 5.497, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10312428399830563;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05336747097424095;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0409204229928359;  // std dev = 5.579, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09346352604981586;  // std dev = 0.482, 122.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.038907991377511164;  // std dev = 5.477, 135.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0014818677539848383;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.256', 'seconds']
Parameter learned model CLL:-0.378533 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.485, 74, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.467, 89, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.516, 94, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.497, 92, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.446, 87, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.571, 100, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.579, 101, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)'}, {'true': [0.0, 0, 0], 'false': [0.482, 77, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(B, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.477, 90, 45]}]
['workedunder(A, B)', {'': 'movie(A, C), movie(B, C)', 'false': 'movie(A, D)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.596, 103, 45]}]
{'': [nan, 0.2351528846832859]}
{'': [nan, 0.22304522165292978], 'false': [nan, 0.22304522165292978]}
{'': [nan, 0.21893276745509982], 'false': [nan, 0.21893276745509982]}
{'': [nan, 0.22057648249773582], 'false': [nan, 0.22057648249773582]}
{'': [nan, 0.22469008264462761], 'false': [nan, 0.22469008264462761]}
{'': [nan, 0.21403091557669326], 'false': [nan, 0.21403091557669326]}
{'': [nan, 0.21322011634452903], 'false': [nan, 0.21322011634452903]}
{'': [nan, 0.2328003224939531]}
{'': [nan, 0.22222222222222182], 'false': [nan, 0.22222222222222182]}
{'': [nan, 0.21160518626734848], 'false': [nan, 0.21160518626734848]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
1;false;movie(B, D).;true;true
2;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
2;false;movie(A, D).;true;true
3;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
3;false;movie(B, D).;true;true
4;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
4;false;movie(B, D).;true;true
5;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
5;false;movie(A, D).;true;true
6;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
6;false;movie(A, D).;true;true
7;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
8;false;movie(B, D).;true;true
9;;workedunder(A, B) :- movie(A, C), movie(B, C).;true;true
9;false;movie(A, D).;true;true


Refining candidate
***************************
Model training time 1.409
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( female(A) )
%   | | then return 0.7781489350995119;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.7275794276357728;  // std dev = 0.053, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.2741827496304922;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12874425447010748;  // std dev = 0.217, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11198782242275067;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.5634213764231398;  // std dev = 0.066, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.22035403715128976;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.42356920264965486;  // std dev = 0.065, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1872608172816474;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.10434229002957725;  // std dev = 0.273, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.3248547297814417;  // std dev = 0.059, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.15613192053524466;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09537625148491115;  // std dev = 0.258, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(E, A), movie(E, B) )
%   | | | then return 0.2580176013536462;  // std dev = 0.051, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.13712902830037707;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08562336632079702;  // std dev = 0.099, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.07813756736637444;  // std dev = 1.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.21177796061776671;  // std dev = 0.045, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12473505808947091;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.07269144798215404;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17858461524065264;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11226984592725858;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(B, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06794115013947734;  // std dev = 2.79e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.15387694590336956;  // std dev = 0.035, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1039659920121387;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(A, C), movie(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.06376302087137614;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.13489453022424908;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0918270385792568;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.600', 'seconds']
Refined model CLL: -0.065369


******************************************
Best model found
******************************************
Results 

CLL : -0.072414 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 1.409 

Total Inference Time : 0.8509762287139893 

Total revision time: 3.6374249935150145
Best scored revision CLL: -0.065369


Results 

CLL : -0.072414 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 29.86818675994873 

Total Inference Time : 0.8509762287139893 

