Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.692
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048253211933291;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028035107823828898;  // std dev = 0.273, 191.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10136302007497643;  // std dev = 0.997, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7614150525235914;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12182050533911534;  // std dev = 3.228, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5428348730316211;  // std dev = 1.677, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7324854167789216;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8218864116989426;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6011230080706439;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681749668766044;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4570638557654933;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044665428279847465;  // std dev = 3.699, 222.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=21 */
%   | | | else return 0.03152531147373326;  // std dev = 2.833, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5065737052460342;  // std dev = 2.342, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11760190229020177;  // std dev = 0.025, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | | else return -0.1256929989033722;  // std dev = 0.003, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1532930683971537;  // std dev = 0.157, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24189692505610308;  // std dev = 2.580, 81.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=73 */
%   | else return 0.4135869179485433;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32136547842377383;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5951385836845072;  // std dev = 1.026, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08485788102092184;  // std dev = 2.355, 262.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=9 */
%   | | else return -0.10464394426528618;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02851930109391262;  // std dev = 3.576, 278.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2677190429225656;  // std dev = 0.105, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4894356151737007;  // std dev = 1.511, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11762418441335386;  // std dev = 0.071, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.11291126858697695;  // std dev = 0.139, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2917874385233119;  // std dev = 1.530, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.0788145301492848;  // std dev = 2.125, 254.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.009997613275556153;  // std dev = 0.744, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20643242680767263;  // std dev = 0.099, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.21831207884521403;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03791203661496579;  // std dev = 0.156, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.008918605062266435;  // std dev = 1.433, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.10648056819701572;  // std dev = 1.654, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16846128201095775;  // std dev = 0.170, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2569386178408176;  // std dev = 1.116, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09108489753081696;  // std dev = 0.051, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4197068921213532;  // std dev = 0.948, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11025520204623351;  // std dev = 0.134, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19406023589522983;  // std dev = 0.800, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.14978041811414733;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0848409272268395;  // std dev = 0.031, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07897346006964524;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06519276531081777;  // std dev = 0.713, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.014254367838417105;  // std dev = 1.366, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21431015504582085;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05103493992059757;  // std dev = 1.385, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.419', 'seconds']
Parameter learned model CLL:-0.111036 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 177, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.445, 24, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 169, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.997, 27, 1], 'false,false,false,true': [0.092, 0, 4], 'false,false,false,false': [3.228, 44, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.677, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.129, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.699, 201, 21], 'false,false,false,false': [2.833, 48, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.342, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 153, 0], 'false,true,false,false': [0.003, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.157, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.58, 8, 73], 'true,false': [0.133, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.026, 1, 23], 'false,false,true,false': [2.355, 253, 9], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.576, 187, 91], 'false,true': [0.105, 0, 13], 'false,false,true': [1.511, 1, 22], 'false,false,false,true': [0.071, 21, 0], 'false,false,false,false': [0.139, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.53, 2, 107], 'true,false': [2.125, 243, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.744, 24, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.099, 0, 80], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 162, 22], 'false,false,false,true': [1.433, 43, 13], 'false,false,false,false': [1.654, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.17, 2, 77], 'false,true,true,true': [1.116, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.051, 195, 0], 'false,false,true': [0.948, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.8, 0, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.031, 174, 0], 'true,false,false,true': [3.73e-09, 8, 0], 'true,false,false,false': [0.713, 11, 2], 'false,true': [1.366, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.385, 18, 8]}]
{'': [0.22116411534354072, 0.2239854318418315], 'false': [0.24256837098691986, 0.19834710743801665], 'false,true': [0.07100591715976314, -6.938893903907228e-18], 'true': [0.03598567560485849, 0.009388827744210432], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.9068237259098733e-16, 0.05536332179930797]}
{'': [0.023556432034522363, 0.10303309984100668], 'false': [0.07431612378187989, 0.153848124701622], 'false,false': [0.03548317417287559, 0.18408330830365383], 'false,false,false': [0.0021356759716520957, 0.1708400738315278], 'false,true': [nan, 0.07431612378187989], 'false,false,true': [nan, 0.03548317417287559]}
{'': [0.037873329156858614, 0.093226248039962], 'false': [nan, 0.09322624803996196], 'false,false': [0.05246913580246905, 0.07819870032294278], 'false,false,false': [0.06161704878746929, 0.13600449793115507], 'false,false,true': [-1.9737298215558337e-16, 0.0987654320987653], 'true': [0.038499608994492104, 0.014681476303207855], 'true,true': [0.03854095591550399, 0.0], 'true,false': [0.003278937622510303, 0.004137252183039786]}
{'': [0.042521564281591165, 0.00028940116536305035], 'false': [1.4829765196242573e-05, 0.0005126843330552586], 'false,false': [nan, 0.0005126843330552586], 'false,false,false': [nan, 0.0005126843330552586], 'false,true': [nan, 1.4829765196240352e-05], 'false,true,false': [3.940616498611809e-06, 1.960484985038559e-07]}
{'': [0.07986274904140284, 0.05834635315945079], 'true': [0.08220208455973328, 0.004400925425659952], 'false': [0.00014652916105078692, 0.054978405083915584], 'false,false': [0.058611306427055004, -1.4538634846281813e-17], 'false,false,true': [0.04384762763021377, 0.02116131074951821], 'false,true': [0.00014652916105078692, nan]}
{'': [0.04599757223559323, 0.09275208914507528], 'false': [0.0008430409079293044, 0.10089324149947569], 'false,false': [0.09929938118296923, 0.00041183457221634264], 'true': [nan, 0.04599757223559368], 'true,false': [nan, 0.04599757223559323], 'false,false,false': [0.00023804415069350338, 0.000497639978504101]}
{'': [0.04775299520062717, 0.01730294592851419], 'true': [0.021485143842663857, 0.01778383753324625], 'false': [nan, 0.01730294592851419], 'false,false': [nan, 0.01730294592851419], 'false,false,false': [nan, 0.01730294592851419]}
{'': [0.00014119783930960226, 0.03682240469044766], 'false': [nan, 0.03682240469044751], 'false,false': [0.024422683581765373, 0.06046301684206617], 'false,false,false': [0.036693572769751125, 0.10515841506750816], 'true': [0.00012295509450686027, 0.0007332235996788533], 'true,false': [0.0007332235996788533, nan]}
{'': [0.028879221985205223, 0.03343686408590926], 'false': [0.020468362963283193, 0.07849999321483418], 'false,false': [0.04992749602679986, 0.0004823672986970266], 'false,true': [0.03774783084383594, 1.3565851327988444e-05], 'false,true,true': [0.03774783084383594, nan], 'false,false,false': [nan, 0.0004823672986970266]}
{'': [0.02084225383238951, 0.06395475469180284], 'false': [0.056555133589067, 0.0719899146834935], 'false,false': [0.0, 0.07377139474578044], 'false,false,false': [nan, 0.07377139474578044], 'true': [0.006365381067106007, 0.002638048663814272], 'true,true': [0.00680324091001735, 2.7994993245239463e-06], 'true,false': [5.506244131834111e-06, 0.02426555587306853], 'true,false,false': [1.734723475976807e-18, 0.03912585990852558]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 32.365
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.132922493471917;  // std dev = 0.094, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.10814893509951236;  // std dev = 0.433, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.6747654537343046;  // std dev = 0.213, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | else return 0.7204437752584203;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7313271915017043;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.720243994631001;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1264274570092973;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.002030270359260216;  // std dev = 0.300, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09612442670626695;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7507219186171546;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11626415949557276;  // std dev = 3.130, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5684704790195164;  // std dev = 0.041, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.43891252880267445;  // std dev = 0.960, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7198830019133348;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6691435761666938;  // std dev = 0.321, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5558756028803518;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09803064369926313;  // std dev = 1.146, 121.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=3 */
%   | | | else return 0.0218646256584472;  // std dev = 2.235, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09957397175633025;  // std dev = 1.994, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.11735557047031153;  // std dev = 2.347, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.43251244254251825;  // std dev = 0.201, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.3582618538129662;  // std dev = 0.975, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(H, A), follows(H, D) )
%   | | | then return 0.3255480500362254;  // std dev = 0.956, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.16697964591222011;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.5114913080813299;  // std dev = 0.362, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2391621993779236;  // std dev = 0.727, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return 0.5571366748831498;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7137073681964577;  // std dev = 0.261, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11975067145237853;  // std dev = 0.024, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.3048361383575235;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.3328550000050222;  // std dev = 0.031, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.40537579990978045;  // std dev = 0.111, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.03155694946566079;  // std dev = 1.049, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.21852492559733014;  // std dev = 0.899, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33529303333079036;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05712927777596202;  // std dev = 2.044, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   | | | else return 0.06542002007999297;  // std dev = 2.436, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | else return -0.09562340616178959;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23015789470393366;  // std dev = 1.412, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.397893635894465;  // std dev = 0.275, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09066565397518925;  // std dev = 0.053, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.28151451871295896;  // std dev = 0.138, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.047994833473228166;  // std dev = 0.173, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27860705043472045;  // std dev = 0.158, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.45221180798045285;  // std dev = 0.322, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.593375027506458;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1359031921244381;  // std dev = 0.034, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2231683522786142;  // std dev = 0.200, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23365849733585695;  // std dev = 0.124, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.38674345286020423;  // std dev = 0.372, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return -0.08109692536888038;  // std dev = 0.586, 160.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=1 */
%   | | | else return -0.09849907814328712;  // std dev = 0.415, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.323804703446183;  // std dev = 0.226, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1282806843052224;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07068094905835073;  // std dev = 0.778, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.048699915831104716;  // std dev = 1.351, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17244022397669836;  // std dev = 0.112, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.26969598146804885;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.022337794334944705;  // std dev = 0.938, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.30362419741565927;  // std dev = 0.436, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07967407180646624;  // std dev = 0.102, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.28682845554177283;  // std dev = 0.254, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12563540892075148;  // std dev = 0.061, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.015202942976247694;  // std dev = 0.551, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.1364401828534527;  // std dev = 1.190, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.1606110016125955;  // std dev = 0.018, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( tweets(D, F), follows(A, D) )
%   | | | then return -0.0954452636519355;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.22216083540721068;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return -0.11284733666911882;  // std dev = 0.468, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.20373988347364022;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.1985683781209123;  // std dev = 0.072, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07444114191573502;  // std dev = 0.104, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3292501571563608;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13362314116219612;  // std dev = 0.036, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10954167783351247;  // std dev = 1.701, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return 0.18520458648766008;  // std dev = 0.345, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05511163587500532;  // std dev = 0.239, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06450307701467915;  // std dev = 0.046, 175.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10911968464631143;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.021522122637503537;  // std dev = 0.133, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.32499578696427056;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0018128473952287911;  // std dev = 0.445, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.03261092914495289;  // std dev = 1.009, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '54.755', 'seconds']
Refined model CLL: -0.105281


******************************************
Best model found
******************************************
Results 

CLL : -0.103071 

AUC ROC : 0.994374 

AUC PR : 0.344863 

Precision : 0.33698 

Recall : 0.987179 

F1 : 0.502447 

Total Learning Time : 32.365 

Total Inference Time : 53.22228384017944 

Total revision time: 110.84548385810852
Best scored revision CLL: -0.105281


Results 

CLL : -0.103071 

AUC ROC : 0.994374 

AUC PR : 0.344863 

Precision : 0.33698 

Recall : 0.987179 

F1 : 0.502447 

Total Learning Time : 115.50630791854859 

Total Inference Time : 53.22228384017944 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.877
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.17321742825019656;  // std dev = 0.465, 73.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6924367827533994;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03991535280623622;  // std dev = 0.259, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05249193575294882;  // std dev = 1.780, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6505654547483153;  // std dev = 0.843, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13038842536992837;  // std dev = 4.919, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5496068029422783;  // std dev = 1.454, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7348121726166491;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5125484388774117;  // std dev = 0.855, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5997306978017294;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5666711407032735;  // std dev = 6.66e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015659625841853507;  // std dev = 4.577, 256.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=34 */
%   | | | else return 0.09246337950741401;  // std dev = 4.003, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5483058338223535;  // std dev = 2.258, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12146695376404962;  // std dev = 0.062, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | | else return -0.13296583932998568;  // std dev = 0.018, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1712259128166832;  // std dev = 0.259, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3008506344045568;  // std dev = 1.421, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4743552124115704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2984021713801945;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5081023490039951;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6004747480408144;  // std dev = 1.054, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10370005336581743;  // std dev = 1.786, 251.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=5 */
%   | | else return 0.008295480545289181;  // std dev = 0.304, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023101452809252212;  // std dev = 3.294, 242.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2507612208427333;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4949647022754871;  // std dev = 1.613, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12808584277449916;  // std dev = 0.215, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.12614051275334615;  // std dev = 0.190, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27985602019627825;  // std dev = 1.705, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08875026168271137;  // std dev = 1.669, 272.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05637688461057384;  // std dev = 2.154, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19003399105567934;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25800696970217196;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.036365279553897484;  // std dev = 0.166, 146.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010011569462688686;  // std dev = 2.029, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0.040342566737645566;  // std dev = 2.540, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16077018855436775;  // std dev = 0.130, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.19661601970050263;  // std dev = 1.895, 42.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09232182209541955;  // std dev = 0.105, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34233178939672143;  // std dev = 1.578, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.115635532797106;  // std dev = 0.284, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1416856477164176;  // std dev = 2.097, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | | else return 0.1656725033089663;  // std dev = 0.375, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0827733644579937;  // std dev = 0.033, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09577694205283768;  // std dev = 0.037, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.006598046968584157;  // std dev = 0.961, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.0061424438100583095;  // std dev = 1.806, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2040094061137735;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02747612632100881;  // std dev = 1.986, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.686', 'seconds']
Parameter learned model CLL:-0.112185 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [6.14e-08, 60, 0], 'false,false': [0.465, 50, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 166, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.78, 42, 4], 'false,false,false,true': [0.843, 1, 8], 'false,false,false,false': [4.919, 95, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.454, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.855, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [6.66e-08, 0, 15], 'false,false,false,true': [4.577, 222, 34], 'false,false,false,false': [4.003, 66, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.258, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 186, 0], 'false,true,false,false': [0.018, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 79, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.421, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.054, 1, 39], 'false,false,true,false': [1.786, 246, 5], 'false,false,false': [0.304, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.294, 160, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.613, 1, 52], 'false,false,false,true': [0.215, 80, 0], 'false,false,false,false': [0.19, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.705, 2, 121], 'true,false': [1.669, 265, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.154, 49, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 127, 19], 'false,false,false,true': [2.029, 102, 28], 'false,false,false,false': [2.54, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.13, 2, 78], 'false,true,true,true': [1.895, 4, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.105, 214, 0], 'false,false,true': [1.578, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 104, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.097, 4, 85], 'true,true,false': [0.375, 0, 19], 'true,false,true': [0.033, 180, 0], 'true,false,false,true': [0.037, 29, 0], 'true,false,false,false': [0.961, 19, 4], 'false,true': [1.806, 53, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.986, 46, 21]}]
{'': [0.21674740484429272, 0.2115045665758701], 'true': [0.01851192595229848, 0.01680181167360644], 'false': [0.20761245674740594, 0.21580033777444274], 'false,true': [7.105427357601002e-16, 6.29126380620922e-17], 'true,false': [-1.8924256101565169e-16, 0.06420927467300819], 'false,true,true': [0.0, 0.0]}
{'': [0.03360866050145281, 0.12394503694500507], 'false': [0.06690989689774679, 0.16828025065689986], 'false,false': [0.06885652013928982, 0.18880850668291035], 'false,false,false': [0.0790401787531881, 0.179214886343251], 'false,false,true': [nan, 0.06885652013928982], 'false,true': [nan, 0.06690989689774679]}
{'': [0.037148705900973654, 0.12042316313157397], 'false': [nan, 0.12042316313157411], 'false,false': [0.0017843825559935261, 0.10940076717598346], 'false,false,false': [0.08181890549844087, 0.18006260567114205], 'true': [0.030655492713364856, 0.0741928968092916], 'true,false': [0.01606922025729296, 0.08121716382603121], 'true,true': [0.030655492713364856, nan], 'false,false,true': [0.005464671577730525, 2.9605947323337506e-16]}
{'': [0.0322739216852638, 0.0006847284802311334], 'false': [3.784123910245083e-05, 0.000847684834318042], 'false,false': [nan, 0.000847684834318042], 'false,false,false': [nan, 0.000847684834318042], 'false,true': [nan, 3.7841239102456725e-05], 'false,true,false': [2.0837385411501352e-05, 8.087332738551666e-06]}
{'': [0.0256238906677827, 0.07822544251415348], 'false': [0.002002789966494934, 0.07729909835972083], 'false,false': [0.07356547218473963, 0.09241593883445041], 'false,false,true': [0.027748051114927907, 0.012707307398585423], 'true': [0.0255719457318429, 0.0], 'false,true': [8.921631702873966e-06, 0.0]}
{'': [0.04484226144573348, 0.08199440940340462], 'false': [0.0015096028237895959, 0.0857993832166418], 'false,false': [0.049070502940801244, 0.0005258632065713867], 'true': [nan, 0.04484226144573382], 'true,false': [nan, 0.04484226144573348], 'false,false,false': [0.0005794772319959535, 0.0004682320127503533]}
{'': [0.04354732237154766, 0.060276010451162924], 'false': [nan, 0.06027601045116272], 'false,false': [nan, 0.060276010451162924], 'false,false,false': [nan, 0.060276010451162924], 'true': [0.023634940478495566, 0.010242748473724264]}
{'': [0.0001984351836723519, 0.04235093129621858], 'false': [nan, 0.04235093129621864], 'false,false': [0.02770982251704913, 0.05189029978474907], 'false,false,false': [0.03167659913141873, 0.08486626924407836], 'true': [9.223777188101396e-05, 9.401549578554047e-05], 'true,false': [9.401549578554047e-05, nan]}
{'': [0.01696170727750801, 0.039109389082411614], 'false': [0.02551381394623124, 0.06057655842454247], 'false,false': [0.05925420039331129, 0.000776129654872649], 'false,true': [0.0854609007176893, 5.172750046569833e-05], 'false,true,true': [0.0854609007176893, nan], 'false,false,false': [nan, 0.000776129654872649]}
{'': [0.027228550005618506, 0.04981182749442166], 'false': [0.04181635546650271, 0.058054036847148896], 'false,false': [0.0, 0.05888368885574472], 'false,false,false': [nan, 0.05888368885574465], 'true': [0.04209040613375644, 0.004548872345306396], 'true,true': [0.04939775568879232, 0.007387095553881133], 'true,false': [5.896809696555779e-06, 0.01973213389417045], 'true,false,false': [4.679151905581179e-05, 0.04011752558112519]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.915
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.12438381599219148;  // std dev = 0.131, 229.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.6869088336801711;  // std dev = 0.182, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return 0.7318215851838669;  // std dev = 0.206, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.12139159230086002;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.5916385716615795;  // std dev = 1.669, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else return -0.12737351089554164;  // std dev = 8.16e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6566096241406822;  // std dev = 1.681, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return -0.1266140403337094;  // std dev = 0.041, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09986684166876753;  // std dev = 1.447, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.11530054233495221;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5676714916292316;  // std dev = 0.203, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.49036125102993283;  // std dev = 0.992, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4390715685092789;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.30833406274261754;  // std dev = 0.643, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5647893765618449;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6071938085976365;  // std dev = 0.216, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11387493357335968;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0690637219680355;  // std dev = 2.956, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.16423566125276481;  // std dev = 2.832, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.43333628315349165;  // std dev = 0.430, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3947270995813455;  // std dev = 0.709, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5664748536870087;  // std dev = 0.128, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6226637610870482;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7766725149152287;  // std dev = 0.093, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10287945651108284;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.10287945651108274;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.14234779356926552;  // std dev = 0.317, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.279010267911317;  // std dev = 1.381, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.32324744751959783;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.39878012170845356;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5145998198879354;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3241844186843126;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08932753800445044;  // std dev = 0.539, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | | | else return -0.004839170069654966;  // std dev = 1.607, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05169459403842255;  // std dev = 2.410, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
%   | | | else return 0.10446946200278244;  // std dev = 2.029, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2670129044935705;  // std dev = 0.016, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.215728132794119;  // std dev = 0.150, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then return -0.054003037131303985;  // std dev = 0.128, 159.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=14 */
%   | | else return -0.0903523867111024;  // std dev = 0.101, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.29547150899599517;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18672371160101434;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22259591348066646;  // std dev = 0.912, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4336039405583275;  // std dev = 0.996, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.11920114068355281;  // std dev = 0.035, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(C, D) )
%   | | then if ( follows(A, C), tweets(A, E) )
%   | | | then return 0.15932504693789248;  // std dev = 1.372, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.21655746604894954;  // std dev = 0.048, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.1835899729107669;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.2231575613863316;  // std dev = 0.036, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3332821258643138;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08331018310891716;  // std dev = 0.004, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1376534128879383;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.003331118366798254;  // std dev = 1.750, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.025294524790728003;  // std dev = 2.026, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17487143849094305;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.29395778198299927;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return -0.011212222183365284;  // std dev = 0.825, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.28448549572266324;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07702385775909894;  // std dev = 0.003, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2982017274903698;  // std dev = 0.258, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10313930093559624;  // std dev = 0.065, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.012422443552667944;  // std dev = 1.229, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return -0.003338661852274174;  // std dev = 1.726, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.14145626441426207;  // std dev = 0.987, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.16459452863186372;  // std dev = 0.084, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.05797295098299334;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.08825752929215978;  // std dev = 0.453, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.16914445081872626;  // std dev = 0.160, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07212385027217252;  // std dev = 0.003, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.24578088155480074;  // std dev = 0.996, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4333081426042105;  // std dev = 0.301, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1156935341788741;  // std dev = 0.034, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1516343291768017;  // std dev = 0.026, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.07133154564709332;  // std dev = 0.046, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.044126779096629445;  // std dev = 0.077, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.004770141970180485;  // std dev = 0.999, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
%   | | | else return 0.03161705264106334;  // std dev = 0.368, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.033469020386835496;  // std dev = 0.145, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24954993385173485;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.009323701202199225;  // std dev = 0.981, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0.09705859954977203;  // std dev = 1.199, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.563', 'seconds']
Refined model CLL: -0.100312


******************************************
Best model found
******************************************
Results 

CLL : -0.098756 

AUC ROC : 0.993261 

AUC PR : 0.360546 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 22.915 

Total Inference Time : 29.525928020477295 

Total revision time: 82.97086805534363
Best scored revision CLL: -0.100312


Results 

CLL : -0.098756 

AUC ROC : 0.993261 

AUC PR : 0.360546 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 87.6316921157837 

Total Inference Time : 29.525928020477295 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.413
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7268773225641322;  // std dev = 0.141, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.031212779132145065;  // std dev = 0.268, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08320819354583711;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7486990275884147;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10512645789533973;  // std dev = 3.232, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5469767981172483;  // std dev = 1.470, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7313270128579574;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.817445315662038;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5879547322892604;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5605207179893047;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5605207179893047;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04054470076047986;  // std dev = 3.665, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return 0.03939946938458778;  // std dev = 2.806, 57.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4953025257769844;  // std dev = 2.477, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1182148221995558;  // std dev = 0.024, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12648692681504803;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16075365841689254;  // std dev = 0.152, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2937024207087078;  // std dev = 1.624, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4108687791167377;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20208472242779038;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6349545554247219;  // std dev = 0.190, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08714667080548949;  // std dev = 2.332, 266.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=9 */
%   | | else return -0.12001161129605013;  // std dev = 0.054, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035870955081904056;  // std dev = 3.459, 252.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20131776072303986;  // std dev = 0.975, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44947177654127213;  // std dev = 1.611, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11154166872098357;  // std dev = 0.085, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.11708527839428363;  // std dev = 0.176, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22677486190304635;  // std dev = 2.904, 115.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=107 */
%   | else return -0.08049115603044621;  // std dev = 2.243, 254.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.029409404628902788;  // std dev = 1.077, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19610367588932937;  // std dev = 1.001, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2429179544671043;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043587320623573914;  // std dev = 0.150, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006150201961062195;  // std dev = 1.628, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.1045058957603195;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17080965018189354;  // std dev = 0.159, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2326958874766504;  // std dev = 1.650, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09078132715854713;  // std dev = 0.050, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4675808465836453;  // std dev = 0.598, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11306969515444182;  // std dev = 0.143, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16635872305047267;  // std dev = 1.906, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.1666471664390078;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08460107033733531;  // std dev = 0.030, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07739413771360248;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.0036823653843198524;  // std dev = 0.478, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0335283105735497;  // std dev = 1.068, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.27827032989398237;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025899424594904817;  // std dev = 1.418, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.230', 'seconds']
Parameter learned model CLL:-0.110314 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 168, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.141, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 175, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.101, 0, 4], 'false,false,false,false': [3.232, 47, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.47, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.138, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.665, 189, 21], 'false,false,false,false': [2.806, 46, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.477, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.024, 172, 0], 'false,true,false,false': [0.003, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.624, 3, 73], 'true,false': [0.139, 0, 4], 'false,true,true': [1.338, 2, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.19, 0, 23], 'false,false,true,false': [2.332, 257, 9], 'false,false,false': [0.054, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.459, 161, 91], 'false,true': [0.975, 1, 13], 'false,false,true': [1.611, 2, 22], 'false,false,false,true': [0.085, 29, 0], 'false,false,false,false': [0.176, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.904, 8, 107], 'true,false': [2.243, 243, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.077, 24, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.001, 1, 80], 'true,false,true': [0.035, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 184, 22], 'false,false,false,true': [1.628, 46, 13], 'false,false,false,false': [1.905, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.159, 2, 77], 'false,true,true,true': [1.65, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.05, 226, 0], 'false,false,true': [0.598, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.143, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.906, 3, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.03, 164, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.478, 8, 2], 'false,true': [1.068, 20, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.418, 22, 8]}]
{'': [0.226448387413001, 0.22222222222222235], 'true': [0.027500889996442155, 0.010049215388182988], 'false': [0.22837370242214483, 0.2140309155766945], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.691768418476429e-16, 0.06420927467300835], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00024167978768023952, 0.10126817927454536], 'false': [0.07203187241309542, 0.15629586265863774], 'false,false': [0.04750000000000004, 0.17666674620851827], 'false,false,false': [0.0025624097825737158, 0.16318440532564873], 'false,true': [nan, 0.07203187241309542], 'false,false,true': [nan, 0.04750000000000004]}
{'': [0.029933518000493504, 0.09520826578370872], 'false': [nan, 0.09520826578370865], 'false,false': [0.0, 0.08085498322989056], 'false,false,false': [0.06395141669743035, 0.138104596443836], 'true': [0.030073433928646868, 0.016021379058106078], 'true,true': [0.030025572542839305, 0.0], 'true,false': [0.0034414963177541447, 0.004756011142689476], 'false,false,true': [-9.868649107779169e-17, -1.1102230246251565e-16]}
{'': [0.04757564442987457, 0.00030954162498184675], 'false': [1.3308640852421579e-05, 0.0006626091219848077], 'false,false': [nan, 0.0006626091219848077], 'false,false,false': [nan, 0.0006626091219848077], 'false,true': [nan, 1.3308640852415295e-05], 'false,true,false': [3.435450724270521e-06, 2.4653321305523336e-07]}
{'': [0.03387860643805625, 0.05952447281642454], 'false': [0.09418282548476459, 0.05412291578886085], 'false,true': [0.09418282548476459, nan], 'false,false': [0.05713973377472715, 0.002897969138591333], 'false,false,true': [0.0015778286176378548, 0.020446054984644395], 'true': [0.03472219206764866, 0.004808921710332342]}
{'': [0.04747257815749557, 0.0843595108794414], 'false': [0.06785839443646574, 0.08251465262319364], 'false,false': [0.10808781976722974, 0.0004888540240421085], 'true': [nan, 0.04747257815749543], 'true,false': [nan, 0.04747257815749557], 'false,false,false': [0.0002494926338288367, 0.0006164024070988661]}
{'': [0.05674568841321096, 0.036227519462917294], 'true': [0.07334994813290703, 0.019804091268951392], 'false': [nan, 0.036227519462917294], 'false,false': [nan, 0.036227519462917294], 'false,false,false': [nan, 0.036227519462917294]}
{'': [0.012150556801198196, 0.03963383536710426], 'false': [nan, 0.0396338353671048], 'false,false': [0.022498451088859582, 0.07994316276912852], 'false,false,false': [0.04491938978793892, 0.16495152251617134], 'true': [0.012382447595722417, 0.0006202120208058798], 'true,false': [0.0006202120208058798, nan]}
{'': [0.02522551788739312, 0.03457231555079464], 'false': [0.022369927471630278, 0.08322626588010289], 'false,false': [0.021065346618977944, 0.0006158400696326351], 'false,true': [0.0800378105587867, 1.0861764601977764e-05], 'false,true,true': [0.0800378105587867, nan], 'false,false,false': [nan, 0.0006158400696326351]}
{'': [0.027244419639213976, 0.05992786327353228], 'false': [0.035659472236054174, 0.08384142294718808], 'false,false': [0.24999999999999994, 0.06698173200538622], 'false,false,false': [nan, 0.06698173200538622], 'true': [0.0342611367533324, 0.0015412396650394385], 'true,true': [0.03743952458901197, 5.1028333132801465e-06], 'true,false': [5.558828561092723e-06, 0.010447108302361225], 'true,false,false': [0.0, 0.022857715527948658]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 22.41
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7209398185222214;  // std dev = 0.120, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.21947341221095465;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5720816057312035;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.747737429336789;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10759425717474294;  // std dev = 1.448, 142.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=3 */
%   | | | else return 0.02342637546012029;  // std dev = 2.667, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10498755712779405;  // std dev = 2.162, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.444259799880748;  // std dev = 1.756, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5102281816126499;  // std dev = 1.693, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.3559159345997869;  // std dev = 1.191, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.5483766012554958;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6817140976275072;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5550043010156342;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09926729163718234;  // std dev = 1.476, 163.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=3 */
%   | | | else return 0.004190243979924323;  // std dev = 2.695, 73.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09748489925416125;  // std dev = 2.124, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.16021829089821712;  // std dev = 2.181, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.42817110085022486;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.328334724175892;  // std dev = 1.498, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else return 0.5219719652000391;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4172450544668403;  // std dev = 2.98e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6594647958368897;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.7230199356133385;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(H, A) )
%   | then return -0.1135560316833341;  // std dev = 0.015, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( tweets(A, I) )
%   | | then return -0.14939187999653497;  // std dev = 1.97e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.2686001759571131;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.31829940741364426;  // std dev = 0.849, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.34654169194534984;  // std dev = 0.190, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.028891397561960668;  // std dev = 1.212, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.2607293297449402;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3205298034827796;  // std dev = 3.94e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5547141249260268;  // std dev = 0.147, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0932640038053767;  // std dev = 2.060, 260.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=9 */
%   | | else return -0.09429643774256663;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.26362733428418283;  // std dev = 0.050, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.17306373271958458;  // std dev = 1.283, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.31447571246983874;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04359794951117249;  // std dev = 0.148, 197.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=20 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.28927801020645266;  // std dev = 0.153, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1439369100638817;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2870238218153179;  // std dev = 0.967, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5702557387675052;  // std dev = 0.124, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12486719613618281;  // std dev = 0.037, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.21572310064761094;  // std dev = 0.043, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.11383120502834171;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2240387275286594;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3021320936633165;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3603185705850094;  // std dev = 0.090, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.09651778645215003;  // std dev = 0.293, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.1262134220263913;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09935024751812077;  // std dev = 0.410, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.05391596029439685;  // std dev = 1.420, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, G) )
%   | | | then return 0.10531352730523666;  // std dev = 1.899, 52.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | | | else return 0.18206664257126198;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20020874542178593;  // std dev = 0.063, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.24549632622435075;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then return -0.06460174989524742;  // std dev = 0.072, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | else return 0.00205304926756294;  // std dev = 0.177, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2126804732058026;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.006855444879508026;  // std dev = 1.086, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return -0.02480833470798152;  // std dev = 1.374, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.14161374083332234;  // std dev = 0.992, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.17460647180445754;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17526437818372334;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.12110218254877413;  // std dev = 0.945, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.22555001414498385;  // std dev = 1.049, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.22315433214740146;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.03227497235515402;  // std dev = 0.123, 230.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=32 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.34334439553739465;  // std dev = 0.093, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.15128921856019492;  // std dev = 0.039, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1421134571414867;  // std dev = 0.879, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.2958166478150822;  // std dev = 0.498, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.07913662353809496;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07517868268065088;  // std dev = 0.031, 229.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.18997549942201425;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11623799611849273;  // std dev = 0.039, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3097702278739035;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0999824581621864;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.02060389910166007;  // std dev = 0.245, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.898', 'seconds']
Refined model CLL: -0.108365


******************************************
Best model found
******************************************
Results 

CLL : -0.110494 

AUC ROC : 0.995304 

AUC PR : 0.433621 

Precision : 0.345212 

Recall : 0.99359 

F1 : 0.512397 

Total Learning Time : 22.41 

Total Inference Time : 21.94224524497986 

Total revision time: 69.45166020202637
Best scored revision CLL: -0.108365


Results 

CLL : -0.110494 

AUC ROC : 0.995304 

AUC PR : 0.433621 

Precision : 0.345212 

Recall : 0.99359 

F1 : 0.512397 

Total Learning Time : 69.54559831428529 

Total Inference Time : 21.94224524497986 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 7.192
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.05094197399139684;  // std dev = 0.287, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.19638422921715865;  // std dev = 0.473, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7035179639182907;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03967071772966404;  // std dev = 0.256, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07481059633578059;  // std dev = 1.803, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7545473342930272;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12245708346245666;  // std dev = 4.960, 139.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5639940362057632;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.4360518821751105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7319222510301668;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5935391293127771;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5964634460841789;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5639481178248894;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01578842797055853;  // std dev = 4.604, 259.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=34 */
%   | | | else return 0.041333557694007844;  // std dev = 4.144, 110.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5246756351272895;  // std dev = 3.015, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12110592869013707;  // std dev = 0.051, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return -0.12649592132397258;  // std dev = 0.013, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1630469455042315;  // std dev = 0.251, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3083166683145834;  // std dev = 1.146, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47273360779745;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30163755204026765;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5065708539042291;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.587349503608879;  // std dev = 1.472, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.10452575134845682;  // std dev = 1.814, 288.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=5 */
%   | | else return 0.001063519537805051;  // std dev = 0.297, 78.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024148376688908152;  // std dev = 3.285, 245.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2526419266463341;  // std dev = 0.178, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5108520792153896;  // std dev = 1.431, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12108519783526793;  // std dev = 0.186, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.1269194047638777;  // std dev = 0.196, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2736945482597187;  // std dev = 2.006, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08736095264685667;  // std dev = 1.688, 248.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033300724965263116;  // std dev = 2.265, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16680867412887082;  // std dev = 1.417, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2579198932006955;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04849128108705524;  // std dev = 0.163, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.030373877815441534;  // std dev = 2.471, 143.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=28 */
%   | | | else return 0.045712993650836156;  // std dev = 2.586, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15707307798217063;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29049885914842055;  // std dev = 0.910, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09108679078744072;  // std dev = 0.090, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40544554741691163;  // std dev = 0.770, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11495680173294269;  // std dev = 0.226, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1632623821519831;  // std dev = 1.633, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.11009707226454676;  // std dev = 1.072, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08201587690512341;  // std dev = 0.021, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09285001068426298;  // std dev = 0.021, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.01970719047061355;  // std dev = 0.960, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.025578909374896597;  // std dev = 1.299, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1729595726087435;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034446249870315464;  // std dev = 1.957, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.717', 'seconds']
Parameter learned model CLL:-0.11086 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 165, 0], 'true,false,false': [0.287, 40, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 53, 0], 'false,false': [0.473, 45, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.803, 57, 4], 'false,false,false,true': [0.127, 0, 8], 'false,false,false,false': [4.96, 99, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.174, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.604, 225, 34], 'false,false,false,false': [4.144, 87, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.015, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.051, 173, 0], 'false,true,false,false': [0.013, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.251, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.146, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.472, 2, 39], 'false,false,true,false': [1.814, 283, 5], 'false,false,false': [0.297, 65, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.285, 163, 82], 'false,true': [0.178, 0, 22], 'false,false,true': [1.431, 1, 52], 'false,false,false,true': [0.186, 84, 0], 'false,false,false,false': [0.196, 73, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.006, 3, 121], 'true,false': [1.688, 241, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.265, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.417, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 155, 19], 'false,false,false,true': [2.471, 115, 28], 'false,false,false,false': [2.586, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.156, 2, 78], 'false,true,true,true': [0.91, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 209, 0], 'false,false,true': [0.77, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.226, 79, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.633, 2, 85], 'true,true,false': [1.072, 1, 19], 'true,false,true': [0.021, 171, 0], 'true,false,false,true': [0.021, 27, 0], 'true,false,false,false': [0.96, 24, 4], 'false,true': [1.299, 45, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.957, 44, 21]}]
{'': [0.225306122448982, 0.21990837151187081], 'true': [0.01851192595229848, 0.01877246400036619], 'false': [0.21631148854350374, 0.22383217993079688], 'false,true': [0.03698224852071082, 5.86532918669894e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.6417843515668981e-16, 0.0826446280991734]}
{'': [0.023055383773414984, 0.11903573333902855], 'false': [0.06544005093013022, 0.15962828761324827], 'false,false': [0.05326617156775833, 0.18802528575342678], 'false,false,false': [0.0020267417003936306, 0.176986668666825], 'false,true': [nan, 0.06544005093013022], 'false,false,true': [nan, 0.05326617156775833]}
{'': [0.025042395353013846, 0.11580299858589929], 'false': [nan, 0.1158029985859004], 'false,false': [0.0017261168519336848, 0.1046776770759541], 'false,false,false': [0.08184427054786077, 0.15614973593257453], 'true': [0.026361341581931534, 0.011000722404746003], 'true,true': [0.01225492374859329, 0.0], 'true,false': [0.016263727612682393, 0.0038043986218834758], 'false,false,true': [0.0052862328590468355, 0.0]}
{'': [0.05647257522588331, 0.0005744839069396925], 'false': [1.734044558754738e-05, 0.0007252572433789711], 'false,false': [nan, 0.0007252572433789711], 'false,false,false': [nan, 0.0007252572433789711], 'false,true': [nan, 1.734044558754738e-05], 'false,true,false': [1.4970976381205322e-05, 4.679216698845314e-06]}
{'': [0.01697433414180293, 0.07404765547185461], 'false': [0.0019129787794686262, 0.0725554755793937], 'false,false': [0.06881200806657409, 0.08804200867248212], 'false,false,true': [0.052856209526209175, 0.01142894584288229], 'true': [0.01684976482308616, 0.0], 'false,true': [8.739232115106965e-06, 0.0]}
{'': [0.044055054754048244, 0.08209414911658822], 'false': [0.0014406059318015389, 0.08610837728422636], 'false,false': [0.038658510612174755, 0.0004723288451042692], 'true': [nan, 0.044055054754048154], 'true,false': [nan, 0.044055054754048244], 'false,false,false': [0.0004116596688907583, 0.0005239285537583458]}
{'': [0.04744691780539972, 0.057017848837540304], 'false': [nan, 0.057017848837540255], 'false,false': [nan, 0.057017848837540304], 'false,false,false': [nan, 0.057017848837540304], 'true': [0.03244836843474183, 0.011492500912429747]}
{'': [0.02328073615489685, 0.04547415323077809], 'false': [nan, 0.04547415323077842], 'false,false': [0.026423006925626127, 0.05973306221013818], 'false,false,false': [0.04270030243208109, 0.08800137402519963], 'true': [0.02363546105334904, 9.450716074618781e-05], 'true,false': [9.450716074618781e-05, nan]}
{'': [0.024276069717573352, 0.03835902612495344], 'false': [0.022343536519763625, 0.06584571516585348], 'false,false': [0.014831167962499258, 0.0006444017827872814], 'false,true': [0.02181210442724926, 3.8990038588726355e-05], 'false,true,true': [0.02181210442724926, nan], 'false,false,false': [nan, 0.0006444017827872814]}
{'': [0.026106919627925818, 0.04058922076129802], 'false': [0.02412252082344612, 0.057706857801192175], 'false,false': [0.0, 0.058909738781783336], 'false,false,false': [nan, 0.058909738781783356], 'true': [0.03610204445890164, 0.004536736096785009], 'true,true': [0.030655315697214622, 0.0574970915324068], 'true,false': [2.479770520916727e-06, 0.01810671704315217], 'true,false,false': [1.5972815615531804e-05, 0.03292506238951212]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 34.211
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.12438381599219143;  // std dev = 0.131, 229.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7076407356905915;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7368439860009439;  // std dev = 0.201, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7232657356905925;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1273735108955418;  // std dev = 4.21e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.10556224816256435;  // std dev = 0.134, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.015483631961600802;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.08780889477525679;  // std dev = 1.175, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6217488243063802;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.16293952220033467;  // std dev = 4.584, 118.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5478886005308204;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6321750274574955;  // std dev = 0.092, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5920299015349667;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5557361536688347;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22240282033550132;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11031668648267992;  // std dev = 0.672, 146.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=1 */
%   | | | else return 0.016977321917303157;  // std dev = 2.697, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06393090650712491;  // std dev = 3.195, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0.13836275577926999;  // std dev = 3.373, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.399930299570785;  // std dev = 1.399, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.09349329117635678;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5762964986237156;  // std dev = 0.284, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, G) )
%   | | | then return 0.4161333509113743;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5135878519605952;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.5703913816066739;  // std dev = 0.179, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7043339192233584;  // std dev = 0.350, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(K, A) )
%   | then return -0.11040577522310853;  // std dev = 0.009, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.1691094843557265;  // std dev = 0.241, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.31919153052740407;  // std dev = 0.125, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.23505587268219544;  // std dev = 1.026, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.13695669229714785;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.10689313435400022;  // std dev = 0.851, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.333283074475581;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4677278270858438;  // std dev = 0.416, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1000569924196706;  // std dev = 0.121, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03859274505453472;  // std dev = 2.735, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.11117590035920591;  // std dev = 2.338, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.24272034679816024;  // std dev = 1.012, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.3043607824816424;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08820877329517382;  // std dev = 0.052, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.27112960206029035;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07388123655055084;  // std dev = 0.098, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2756834627467422;  // std dev = 0.067, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.34450505491003186;  // std dev = 1.953, 32.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=28 */
%   | | | else return 0.511956501936285;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.13316486406604075;  // std dev = 0.035, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then return 0.21267732275145096;  // std dev = 0.116, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.39105226933995957;  // std dev = 0.095, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09372132802489824;  // std dev = 0.018, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.11436805589784207;  // std dev = 1.185, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.36404591154264093;  // std dev = 0.274, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.11230131154587285;  // std dev = 0.033, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.21021144958548835;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05365423733737482;  // std dev = 0.607, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return 0.0320734817938844;  // std dev = 1.714, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16885084582035773;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.19869630252287418;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.322050152735225;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.31409047402202284;  // std dev = 0.979, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.16499163960695015;  // std dev = 1.496, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.07765790338085815;  // std dev = 0.081, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1774053402500363;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.012266858202184568;  // std dev = 1.712, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 7.329978623944787E-4;  // std dev = 2.000, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16696527291900135;  // std dev = 0.018, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.03262120210563554;  // std dev = 0.858, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.17965205645633764;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15340989909759897;  // std dev = 0.091, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2352274191618003;  // std dev = 0.361, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07169073775180677;  // std dev = 0.083, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2941376022452436;  // std dev = 0.942, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.35435370000466926;  // std dev = 0.458, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1221771837101985;  // std dev = 0.020, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.12672839312167536;  // std dev = 0.132, 88.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=86 */
%   | | else return 0.1644732491433848;  // std dev = 0.052, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.05948627213208061;  // std dev = 0.054, 190.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2299816833350243;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1020874591033672;  // std dev = 0.013, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.00504456535941605;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.19537379096882643;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03540095057440012;  // std dev = 1.199, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.03617425696242119;  // std dev = 1.303, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '17.767', 'seconds']
Refined model CLL: -0.102775


******************************************
Best model found
******************************************
Results 

CLL : -0.101646 

AUC ROC : 0.993573 

AUC PR : 0.386664 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 34.211 

Total Inference Time : 92.05554509162903 

Total revision time: 157.47840822029113
Best scored revision CLL: -0.102775


Results 

CLL : -0.101646 

AUC ROC : 0.993573 

AUC PR : 0.386664 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 157.57234633255004 

Total Inference Time : 92.05554509162903 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.473
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.28672036367094095;  // std dev = 0.495, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030157014542846;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.025367079165099234;  // std dev = 0.277, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09841540244419045;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.45033103730831403;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1502932345873237;  // std dev = 3.093, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5409996705980181;  // std dev = 1.677, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.23017685200448154;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8192871711474128;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4797444930302138;  // std dev = 0.774, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5663899695397578;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45527885842864674;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040200064844528705;  // std dev = 3.644, 205.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=21 */
%   | | | else return 0.02579721599420024;  // std dev = 2.786, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5074534237529587;  // std dev = 2.185, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11879664947008613;  // std dev = 0.041, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return -0.1255273229516625;  // std dev = 0.000706, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17225675172037377;  // std dev = 0.240, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3217378634990184;  // std dev = 1.083, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.48012224445924423;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3199795453945379;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6252332171111095;  // std dev = 0.161, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08640491962356626;  // std dev = 2.261, 242.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=9 */
%   | | else return -0.10694436781394435;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026611768090178928;  // std dev = 3.476, 271.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2654110688889558;  // std dev = 0.089, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5282040864569129;  // std dev = 0.656, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11942489170342452;  // std dev = 0.158, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.11929274861917025;  // std dev = 0.212, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.21699057485387335;  // std dev = 2.980, 116.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=107 */
%   | else return -0.0783488072228951;  // std dev = 1.977, 235.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04818170236430135;  // std dev = 0.642, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19276322241511684;  // std dev = 0.995, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22361169460508085;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03923559400519145;  // std dev = 0.156, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013937448279668814;  // std dev = 1.599, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.028367484507455586;  // std dev = 1.689, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1751422871767701;  // std dev = 0.155, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2623332007679735;  // std dev = 1.109, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09136408223941604;  // std dev = 0.039, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3899463269118442;  // std dev = 0.988, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10321579520309777;  // std dev = 0.154, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1781379297147686;  // std dev = 1.477, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14398951589915;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08471516001784615;  // std dev = 0.028, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08273929835967907;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.0010684765711217875;  // std dev = 0.449, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02508118630155616;  // std dev = 1.016, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2577422284058797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03149498018348949;  // std dev = 1.362, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.969', 'seconds']
Parameter learned model CLL:-0.11152 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 185, 0], 'true,false,false': [0.266, 24, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.495, 12, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 162, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [1.023, 2, 4], 'false,false,false,false': [3.093, 36, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.677, 3, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.774, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.644, 184, 21], 'false,false,false,false': [2.786, 47, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.185, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 184, 0], 'false,true,false,false': [0.000706, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.24, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.083, 1, 73], 'true,false': [0.139, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.161, 0, 23], 'false,false,true,false': [2.261, 233, 9], 'false,false,false': [2.63e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.476, 180, 91], 'false,true': [0.089, 0, 13], 'false,false,true': [0.656, 0, 22], 'false,false,false,true': [0.158, 40, 0], 'false,false,false,false': [0.212, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.98, 9, 107], 'true,false': [1.977, 224, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.642, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 80], 'true,false,true': [0.03, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 170, 22], 'false,false,false,true': [1.599, 47, 13], 'false,false,false,false': [1.689, 25, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.155, 2, 77], 'false,true,true,true': [1.109, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 182, 0], 'false,false,true': [0.988, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.477, 2, 94], 'true,true,false': [0.002, 0, 9], 'true,false,true': [0.028, 197, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.449, 7, 2], 'false,true': [1.016, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.362, 19, 8]}]
{'': [0.22151678293146723, 0.23268698060941828], 'false': [0.22222222222222174, 0.2448979591836735], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true': [0.027500889996442155, 0.009388827744210432], 'true,false': [-2.1124243495570547e-16, 0.07100591715976336], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02355533798428529, 0.10503168254247539], 'false': [0.07673388737002948, 0.15569506938506297], 'false,false': [0.03443877551020406, 0.18814845697397106], 'false,false,false': [0.17431784516870216, 0.18055933748739084], 'false,true': [nan, 0.07673388737002948], 'false,false,true': [nan, 0.03443877551020406]}
{'': [0.05224341278377612, 0.09621409965609268], 'false': [nan, 0.09621409965609275], 'false,false': [0.0524691358024691, 0.08077177691808182], 'false,false,false': [0.06479050984170069, 0.1338622084117495], 'false,false,true': [-4.9343245538895844e-17, 0.09876543209876537], 'true': [0.046682901273129476, 0.11004591598518385], 'true,false': [0.0033185846000792774, 0.11979706846408278], 'true,true': [0.03853628114626899, 0.25000000000000006]}
{'': [0.037013976452643524, 0.0006241558110341443], 'false': [1.3758051830703444e-05, 0.0012224761094175314], 'false,false': [nan, 0.0012224761094175314], 'false,false,false': [nan, 0.0012224761094175314], 'false,true': [nan, 1.3758051830701426e-05], 'false,true,false': [9.034085348650404e-06, 1.3852792382331971e-08]}
{'': [0.01651498694231086, 0.060364417005102464], 'false': [0.00014586418086596156, 0.057049172211508736], 'false,false': [0.059531041416436, 6.4051328343759035e-18], 'false,false,true': [0.001121742214009774, 0.021128137444034956], 'true': [0.015860063114826444, 0.004831907266420382], 'false,true': [0.00014586418086596156, nan]}
{'': [0.04458614332004573, 0.0710474005259501], 'false': [0.0006078399142007012, 0.07265710308750892], 'false,false': [0.019589815404718228, 0.0008130256060432952], 'true': [nan, 0.04458614332004639], 'true,false': [nan, 0.04458614332004573], 'false,false,false': [0.0006253954858707417, 0.0009761741105153324]}
{'': [0.05573555013597495, 0.02290312563324476], 'true': [0.07656641847277076, 0.016626467360845318], 'false': [nan, 0.02290312563324476], 'false,false': [nan, 0.02290312563324476], 'false,false,false': [nan, 0.02290312563324476]}
{'': [0.011958128706551852, 0.0358025192487852], 'false': [nan, 0.03580251924878489], 'false,false': [0.02441434576698985, 0.05795688183050005], 'false,false,false': [0.042616660414060155, 0.08388549441465225], 'true': [0.012219531616138504, 0.0004426134327154205], 'true,false': [0.0004426134327154205, nan]}
{'': [0.023889079715535326, 0.03282280019402389], 'false': [0.021982325609565194, 0.06549521288417641], 'false,false': [0.054196267179899865, 0.0005265401119117946], 'false,true': [0.037271273980460005, 8.486934880794735e-06], 'false,true,true': [0.037271273980460005, nan], 'false,false,false': [nan, 0.0005265401119117946]}
{'': [0.021836146742871255, 0.04522122991144265], 'false': [0.027910529644367715, 0.06797650122184944], 'false,false': [0.0, 0.06866601308210114], 'false,false,false': [nan, 0.06866601308210114], 'true': [0.02087477033870769, 0.0011825882556406276], 'true,true': [0.022731793683878423, 3.5980024082338247e-07], 'true,false': [4.043696418026003e-06, 0.009595852278392195], 'true,false,false': [0.0, 0.022386266413520414]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 36.433
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.7500408269914042;  // std dev = 1.889, 37.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=33 */
%   | | else return 0.6763307532813304;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else return -0.08470820775763062;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6672509009736272;  // std dev = 0.226, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else return 0.7392466439293047;  // std dev = 0.156, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.343547385277125;  // std dev = 1.088, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7471362555179552;  // std dev = 0.124, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.12644434599419552;  // std dev = 0.033, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6425503352878773;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1420744691189684;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5556659684826317;  // std dev = 0.138, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.477644800063243;  // std dev = 0.268, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.28457999249234256;  // std dev = 0.444, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.6537833172369609;  // std dev = 0.219, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5802708775879462;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.0973005157384019;  // std dev = 1.342, 151.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | | else return -0.006155605699865966;  // std dev = 2.192, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18193559765852182;  // std dev = 1.557, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.09526138596980643;  // std dev = 2.354, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.417634496717402;  // std dev = 0.977, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.20396901655992306;  // std dev = 1.326, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4444939526166453;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5535098633580801;  // std dev = 0.166, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.470051432829491;  // std dev = 0.200, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5293076490105014;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7590048067011808;  // std dev = 0.105, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(H, A) )
%   | then return -0.10657858864420504;  // std dev = 0.005, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.17909942135516213;  // std dev = 0.296, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.29006637708509714;  // std dev = 1.385, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.3398705124502851;  // std dev = 0.070, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3551112150968627;  // std dev = 0.060, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.40053887327432686;  // std dev = 0.238, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3361313441077086;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4794686261034795;  // std dev = 0.431, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08143478659815062;  // std dev = 1.908, 225.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=9 */
%   | | else return -0.09840873906081088;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2546184656696104;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3036571264268322;  // std dev = 0.913, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.08894885274173199;  // std dev = 0.037, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.04804475874663163;  // std dev = 0.122, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.29628410590585197;  // std dev = 0.150, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16785132195248847;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.32248087687588534;  // std dev = 0.270, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5576007735987147;  // std dev = 0.271, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12003382649335835;  // std dev = 0.038, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.22118917127959722;  // std dev = 0.083, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.25905097845802355;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.45428243200767743;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27298493855174905;  // std dev = 0.156, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.08273133887625612;  // std dev = 0.054, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.1833051621619114;  // std dev = 0.905, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09398436365486518;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09310022658463683;  // std dev = 0.645, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.060012338989355145;  // std dev = 1.313, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.14291105177639682;  // std dev = 1.393, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18200014962402639;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.11309428395151176;  // std dev = 0.971, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.09045795026013354;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.24046574288077588;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.048231448968043746;  // std dev = 0.107, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.03076882309174865;  // std dev = 0.209, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.01086816405415701;  // std dev = 0.673, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.042384534687924996;  // std dev = 1.238, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.16607193891534475;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 3.9537124871170866E-4;  // std dev = 1.503, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.19906870898060813;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.17789080130200588;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.17317262700767322;  // std dev = 1.016, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.2202537121120003;  // std dev = 0.168, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07365057686097945;  // std dev = 0.051, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.32936525635968783;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13424034104739316;  // std dev = 0.048, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15408086615743627;  // std dev = 0.088, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.09031217245692583;  // std dev = 0.208, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06531942104804872;  // std dev = 0.030, 188.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1326209624527942;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.028300464631571706;  // std dev = 0.458, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | | else return 0.027200180140676784;  // std dev = 0.511, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20864737556711077;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.030442441411978473;  // std dev = 0.627, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.0173521465008666;  // std dev = 1.063, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '40.693', 'seconds']
Refined model CLL: -0.101912


******************************************
Best model found
******************************************
Results 

CLL : -0.104376 

AUC ROC : 0.994681 

AUC PR : 0.366886 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 36.433 

Total Inference Time : 35.92936396598816 

Total revision time: 97.80861292457581
Best scored revision CLL: -0.101912


Results 

CLL : -0.104376 

AUC ROC : 0.994681 

AUC PR : 0.366886 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 97.86781893348694 

Total Inference Time : 35.92936396598816 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 7.294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0.17759337954395607;  // std dev = 0.466, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149723939853092;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.037806067277517806;  // std dev = 0.258, 184.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07247537752743433;  // std dev = 1.800, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.755198242379551;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11578528156676834;  // std dev = 4.985, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5613915974607684;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7322233143972162;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5943669173059939;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5943966245739112;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611293176955581;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.009970447044055898;  // std dev = 4.587, 247.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=34 */
%   | | | else return 0.045706145907221926;  // std dev = 4.130, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5171621546806777;  // std dev = 3.217, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12194432534059528;  // std dev = 0.054, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | | else return -0.12715617501457044;  // std dev = 0.009, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15961059597816846;  // std dev = 0.242, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2958078160573084;  // std dev = 1.524, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4768460128278338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30136204027514646;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5112841968779963;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6405671219726274;  // std dev = 0.339, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10234629880166539;  // std dev = 1.812, 249.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=5 */
%   | | else return 0.03364059766532246;  // std dev = 0.319, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022008261572969107;  // std dev = 3.074, 261.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2528277688729435;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4889659654029471;  // std dev = 1.748, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12650386951430379;  // std dev = 0.193, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.12466025191916678;  // std dev = 0.158, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28802197447992295;  // std dev = 1.537, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08534246987146911;  // std dev = 1.703, 235.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036777673732585156;  // std dev = 2.267, 87.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1902652313047532;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25768492591294023;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04120348636667703;  // std dev = 0.148, 168.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.004715122163135196;  // std dev = 2.030, 112.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=28 */
%   | | | else return 0.04162121350055791;  // std dev = 2.539, 79.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1523440654810781;  // std dev = 0.169, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28152377705649045;  // std dev = 0.886, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09292964054810192;  // std dev = 0.107, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40020200577568515;  // std dev = 0.815, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11428979694094159;  // std dev = 0.246, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18298909589644125;  // std dev = 0.711, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.12098999687000037;  // std dev = 0.831, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08287092933963804;  // std dev = 0.018, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09720087482175847;  // std dev = 0.038, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.01038086648886634;  // std dev = 0.956, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.005327832194007481;  // std dev = 1.715, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18077853632364693;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.061160014217505124;  // std dev = 1.901, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.349', 'seconds']
Parameter learned model CLL:-0.11272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.255, 53, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.96e-08, 57, 0], 'false,false': [0.466, 49, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 165, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.8, 57, 4], 'false,false,false,true': [0.131, 0, 8], 'false,false,false,false': [4.985, 104, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.179, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.587, 213, 34], 'false,false,false,false': [4.13, 89, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.217, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 185, 0], 'false,true,false,false': [0.009, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.242, 92, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.524, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.339, 0, 39], 'false,false,true,false': [1.812, 244, 5], 'false,false,false': [0.319, 51, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.074, 179, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.748, 2, 52], 'false,false,false,true': [0.193, 84, 0], 'false,false,false,false': [0.158, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.537, 1, 121], 'true,false': [1.703, 228, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.267, 59, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 149, 19], 'false,false,false,true': [2.03, 84, 28], 'false,false,false,false': [2.539, 55, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.169, 2, 78], 'false,true,true,true': [0.886, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.107, 230, 0], 'false,false,true': [0.815, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 100, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.711, 0, 85], 'true,true,false': [0.831, 1, 19], 'true,false,true': [0.018, 180, 0], 'true,false,false,true': [0.038, 42, 0], 'true,false,false,false': [0.956, 21, 4], 'false,true': [1.715, 50, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.901, 35, 21]}]
{'': [0.22837370242214783, 0.21377731529656693], 'true': [0.01851192595229848, 0.0195999999999999], 'false': [0.21048047612135395, 0.2173996913580257], 'false,true': [0.03698224852071082, 6.232831015439475e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-9.006004955001269e-17, 0.06525084641428117]}
{'': [0.01203725845873971, 0.11873760641029385], 'false': [0.06669924543145075, 0.1565999014104977], 'false,false': [0.05314000504317512, 0.18401673087733797], 'false,false,false': [0.0021295228995766857, 0.17260321079365593], 'false,true': [nan, 0.06669924543145075], 'false,false,true': [nan, 0.05314000504317512]}
{'': [0.012716037523512896, 0.11752517056900594], 'false': [nan, 0.1175251705690082], 'false,false': [0.0018068795215323721, 0.10676288209639383], 'false,false,false': [0.0851668729707725, 0.1522570064947855], 'true': [0.012255612797760976, 0.011275303638162175], 'true,true': [0.012255612797760976, nan], 'true,false': [0.016805402461402608, 0.004018502156090675], 'false,false,true': [0.005533568534692668, 0.0]}
{'': [0.06387139971606964, 0.0004842328241999472], 'false': [1.728673913669033e-05, 0.0006343493742927178], 'false,false': [nan, 0.0006343493742927178], 'false,false,false': [nan, 0.0006343493742927178], 'false,true': [nan, 1.728673913669033e-05], 'false,true,false': [1.5788413958811737e-05, 2.6349512149633734e-06]}
{'': [0.029451556882735087, 0.08174802712901016], 'false': [0.002007219590318793, 0.08121050697059358], 'false,false': [0.07642087905183378, 0.10173944433892572], 'false,false,true': [0.002947620562628627, 0.013189524648898105], 'true': [0.029414676041614043, 0.0], 'false,true': [9.137149225635355e-06, 0.0]}
{'': [0.036196229908426775, 0.08531385839006518], 'false': [0.0015068951336833553, 0.09005417323300964], 'false,false': [0.056554935205417226, 0.00042749684330968215], 'true': [nan, 0.03619622990842637], 'true,false': [nan, 0.036196229908426775], 'false,false,false': [0.0004427748496267766, 0.0004048420625725549]}
{'': [0.046098447909425404, 0.05906751156227492], 'false': [nan, 0.0590675115622749], 'false,false': [nan, 0.05906751156227492], 'false,false,false': [nan, 0.05906751156227492], 'true': [0.019358167337959628, 0.012342196307800563]}
{'': [0.00019632952060340907, 0.0408029615562782], 'false': [nan, 0.04080296155627804], 'false,false': [0.02191042622593561, 0.055668687710890064], 'false,false,false': [0.03680378075594413, 0.08161517763307037], 'true': [9.175510859439043e-05, 9.770334429373695e-05], 'true,false': [9.770334429373695e-05, nan]}
{'': [0.028410042705298632, 0.03465784423471987], 'false': [0.02003446559695628, 0.05919440316789555], 'false,false': [0.01659554798823244, 0.0006048552218737191], 'false,true': [0.0206592961777824, 4.995005301621949e-05], 'false,true,true': [0.0206592961777824, nan], 'false,false,false': [nan, 0.0006048552218737191]}
{'': [0.019554093961829094, 0.050711731961228], 'false': [0.03920179630042432, 0.06278353494311766], 'false,false': [0.0, 0.0645324043644063], 'false,false,false': [nan, 0.06453240436440633], 'true': [0.011987862849880886, 0.004253558580752899], 'true,true': [0.005945178773893739, 0.0345575510889433], 'true,false': [1.8729454511386596e-06, 0.015438160626749589], 'true,false,false': [3.40430950136036e-05, 0.03659194402677071]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 24.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 0.165, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.12315947611544162;  // std dev = 0.135, 214.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7094722625672129;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7384966334468926;  // std dev = 0.199, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7250972625672136;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12750965775631876;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.09908942707886756;  // std dev = 0.153, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.009862598932789212;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.08961601685305054;  // std dev = 1.179, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7262849042285142;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12131048111531753;  // std dev = 4.718, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5458706721381638;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.47382950575737476;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.39422735499111394;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6085136977905802;  // std dev = 0.102, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5678455678582955;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.1100563232552092;  // std dev = 0.674, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   | | | else return 0.013665284764549493;  // std dev = 2.683, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08032280052028457;  // std dev = 3.162, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.16012712956885386;  // std dev = 3.345, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.43317129064707716;  // std dev = 0.314, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.46561878387472694;  // std dev = 0.348, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1510946740434876;  // std dev = 0.617, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.538405029522592;  // std dev = 0.906, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.6788860102524829;  // std dev = 1.062, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11103149931835145;  // std dev = 0.136, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.11218977407180573;  // std dev = 0.041, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.1612218779869128;  // std dev = 0.212, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3299301389322843;  // std dev = 0.006, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.06519267314340334;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3644767648503238;  // std dev = 0.366, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0485342709721861;  // std dev = 0.826, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3277761870688187;  // std dev = 0.049, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.479215839494258;  // std dev = 0.432, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10001221014177786;  // std dev = 0.105, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03218432284200576;  // std dev = 3.078, 113.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=29 */
%   | | | else return 0.14127042386836905;  // std dev = 2.003, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2376809657748814;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.26732548963661895;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.1802298257221359;  // std dev = 1.580, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return -0.08904120155158113;  // std dev = 0.057, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.07085199752474602;  // std dev = 0.111, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2731071359193225;  // std dev = 0.075, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2898519758210281;  // std dev = 0.357, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5087903417599811;  // std dev = 1.108, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12977828427057422;  // std dev = 0.032, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21346063928813325;  // std dev = 0.007, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.3024618356794198;  // std dev = 0.255, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.01925356358039766;  // std dev = 0.991, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.33032513179621964;  // std dev = 0.432, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08302279840400628;  // std dev = 0.007, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3002124605659487;  // std dev = 1.053, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12020600997917023;  // std dev = 0.023, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04623405031804637;  // std dev = 1.416, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | | | else return 0.05544786116053472;  // std dev = 1.669, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1793068818866191;  // std dev = 0.007, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.3663040195332431;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.07369916907122324;  // std dev = 0.816, 101.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=2 */
%   | | | else return -0.09712265383300916;  // std dev = 0.749, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(E, I), recursion_accounttype(I, B) )
%   | | | then return 0.24124522513772523;  // std dev = 0.788, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.0837682655862962;  // std dev = 0.035, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1652846942351403;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.003580465492287652;  // std dev = 1.595, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.04597622186287751;  // std dev = 2.163, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.14134790627479007;  // std dev = 0.987, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return -0.18980568977009693;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.27998235023331697;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then return 0.12642578075740196;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.05997849663014365;  // std dev = 0.628, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.1802437331232585;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.0712782247574861;  // std dev = 0.005, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3610616256588522;  // std dev = 0.066, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1330646970818522;  // std dev = 0.032, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11086726071085318;  // std dev = 0.179, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.06046463620205296;  // std dev = 0.051, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B), follows(G, F) )
%   | | | then return 0.15408465918660535;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.10784992813285084;  // std dev = 0.860, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.04269194862640839;  // std dev = 0.378, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.004569992883539399;  // std dev = 0.545, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.1022344333522421;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.019483043648698663;  // std dev = 1.157, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.01630467640186882;  // std dev = 1.392, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.313', 'seconds']
Refined model CLL: -0.103974


******************************************
Best model found
******************************************
Results 

CLL : -0.101021 

AUC ROC : 0.993303 

AUC PR : 0.360703 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 24.523 

Total Inference Time : 45.27237391471863 

Total revision time: 100.56529983711243
Best scored revision CLL: -0.103974


Results 

CLL : -0.101021 

AUC ROC : 0.993303 

AUC PR : 0.360703 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 100.62450584602357 

Total Inference Time : 45.27237391471863 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.319
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.095339436993511;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7232143037386545;  // std dev = 0.147, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02715923096375306;  // std dev = 0.273, 188.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08518232258071426;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.42680192978736753;  // std dev = 1.128, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.07141873586575058;  // std dev = 3.326, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5594944920394599;  // std dev = 0.928, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7268354362113183;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8211328498541672;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6634839986144987;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5568165762706633;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5568165762706633;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04175997567552296;  // std dev = 3.675, 211.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=21 */
%   | | | else return 0.002264771485671069;  // std dev = 2.884, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4973940130201627;  // std dev = 2.367, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11838493489186619;  // std dev = 0.032, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | | else return -0.12263603663202202;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13890154979081173;  // std dev = 0.124, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2841286516335082;  // std dev = 1.813, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.44166261918635885;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3045003135823538;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5557159214078381;  // std dev = 1.392, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.07824313153413003;  // std dev = 2.349, 226.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=9 */
%   | | else return -0.10520661388716525;  // std dev = 3.23e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017325638736685866;  // std dev = 3.540, 291.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2527689609120088;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5612781805963055;  // std dev = 0.746, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11427780801214887;  // std dev = 0.082, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11416410116210793;  // std dev = 0.116, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2547450410004319;  // std dev = 2.365, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07159706490589522;  // std dev = 2.070, 215.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009316206490852593;  // std dev = 0.662, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1743450225568408;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22399216476288747;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03898174246813331;  // std dev = 0.164, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.011259280267591364;  // std dev = 1.577, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | | | else return 0.0983543198690604;  // std dev = 1.686, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1304763270753537;  // std dev = 0.251, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29102598318039946;  // std dev = 0.750, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09083945133078404;  // std dev = 0.039, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4619030224195331;  // std dev = 0.588, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1069590478604461;  // std dev = 0.115, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18881645814511355;  // std dev = 1.191, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.03689176786928081;  // std dev = 0.941, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0844028522995645;  // std dev = 0.016, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07923257900322575;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.03525146165641885;  // std dev = 0.486, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.007886333443892307;  // std dev = 1.028, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25374632703661504;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07778668852251988;  // std dev = 1.326, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.838', 'seconds']
Parameter learned model CLL:-0.110031 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 179, 0], 'true,false,false': [0.211, 41, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.445, 24, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.147, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 166, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [1.128, 2, 4], 'false,false,false,false': [3.326, 57, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.928, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.13, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.675, 190, 21], 'false,false,false,false': [2.884, 64, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.367, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 153, 0], 'false,true,false,false': [0.002, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.813, 3, 73], 'true,false': [0.127, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.392, 2, 23], 'false,false,true,false': [2.349, 217, 9], 'false,false,false': [3.23e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.54, 200, 91], 'false,true': [0.109, 0, 13], 'false,false,true': [0.746, 0, 22], 'false,false,false,true': [0.082, 26, 0], 'false,false,false,false': [0.116, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.365, 5, 107], 'true,false': [2.07, 204, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.662, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 162, 22], 'false,false,false,true': [1.577, 48, 13], 'false,false,false,false': [1.686, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.251, 5, 77], 'false,true,true,true': [0.75, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 223, 0], 'false,false,true': [0.588, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.115, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.191, 1, 94], 'true,true,false': [0.941, 1, 9], 'true,false,true': [0.016, 177, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.486, 15, 2], 'false,true': [1.028, 32, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.326, 15, 8]}]
{'': [0.21834656931010024, 0.20659722222222243], 'true': [0.009522928994084868, 0.00892784676568444], 'false': [0.21301775147928945, 0.19834710743801665], 'false,true': [-1.4802973661668753e-16, 2.05596856412066e-17], 'true,false': [-1.9847562451399445e-16, 0.04434829637641966], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00026369728385164447, 0.10013460731147618], 'false': [0.07438803468347772, 0.14282713424225224], 'false,false': [0.04338842975206617, 0.16292953227406756], 'false,false,false': [0.21197504415778637, 0.1494805780592159], 'false,true': [nan, 0.07438803468347772], 'false,false,true': [nan, 0.04338842975206617]}
{'': [0.01381760625528782, 0.09062600598522137], 'false': [nan, 0.09062600598522137], 'false,false': [-1.5673736818237505e-16, 0.07667853082046651], 'false,false,false': [0.06400222589454771, 0.11091128720607223], 'true': [0.01235294545682539, 0.009440690685177241], 'true,true': [0.01213800016526669, 0.0], 'true,false': [0.003318211730416687, 0.004217543396828616], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.04343439142667012, 0.00013567728695450162], 'false': [8.23205805895079e-06, 0.00030213989190311645], 'false,false': [nan, 0.00030213989190311645], 'false,false,false': [nan, 0.00030213989190311645], 'false,true': [nan, 8.232058058957839e-06], 'false,true,false': [6.699377907267559e-06, 1.1634288992386684e-07]}
{'': [0.04246790829646694, 0.06505959794115679], 'false': [-5.224578939412501e-17, 0.06289672245622945], 'false,false': [0.06575451066579867, 1.0675221390626506e-17], 'false,false,true': [0.07756028703731718, 0.02441827501915931], 'true': [0.043248710682642855, 0.0040565595728297155], 'false,true': [-5.224578939412501e-17, nan]}
{'': [0.043071319379102246, 0.08852889423494412], 'false': [0.0009067171923972875, 0.09817669242520563], 'false,false': [0.025276723931895336, 0.00034834223375445597], 'true': [nan, 0.043071319379102135], 'true,false': [nan, 0.043071319379102246], 'false,false,false': [0.00025578398234237497, 0.0004235400171571004]}
{'': [0.054195216160575425, 0.018273922694559967], 'true': [0.0499490140648841, 0.01993041123700757], 'false': [nan, 0.018273922694559967], 'false,false': [nan, 0.018273922694559967], 'false,false,false': [nan, 0.018273922694559967]}
{'': [0.023311150448591597, 0.03944166288272985], 'false': [nan, 0.03944166288272982], 'false,false': [0.027038906393844087, 0.06247510633693128], 'false,false,false': [0.04079276405931196, 0.10147654085745897], 'true': [0.023803800558798393, 0.0007063438372957101], 'true,false': [0.0007063438372957101, nan]}
{'': [0.06303743407402368, 0.030679969587149813], 'false': [0.01821439442560204, 0.0806424646971708], 'false,false': [0.020322453859911552, 0.0004166758615094749], 'false,true': [0.017575994155696148, 6.871188310234593e-06], 'false,true,true': [0.017575994155696148, nan], 'false,false,false': [nan, 0.0004166758615094749]}
{'': [0.02337909356471014, 0.04320935589014892], 'false': [0.02401782878958311, 0.07453425686355328], 'false,false': [0.0, 0.07648480196110223], 'false,false,false': [nan, 0.07648480196110223], 'true': [0.023922427380819747, 0.001324818844373183], 'true,true': [0.01493093014075231, 0.08845874074275843], 'true,false': [1.4628354351746835e-06, 0.008358280193748924], 'true,false,false': [-1.0675221390626506e-18, 0.013911692794930937]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.88
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8340525495573435;  // std dev = 0.153, 83.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13311744044633997;  // std dev = 0.093, 229.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7266076648241571;  // std dev = 0.148, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.6687554466555466;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.69542150156963;  // std dev = 0.970, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.1264059279403434;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6425503352878773;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0435389716194778;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return 0.06123190749541773;  // std dev = 2.148, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5525514167334175;  // std dev = 0.106, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return 0.6815540889047528;  // std dev = 0.266, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.40708926906368786;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5737559357303545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5737559357303547;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09831579143472337;  // std dev = 1.250, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | | else return -0.022164487988736877;  // std dev = 2.173, 89.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06423480731767049;  // std dev = 1.775, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.20981015472217163;  // std dev = 2.089, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.4223310103410145;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.32954107865229815;  // std dev = 1.839, 37.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=33 */
%   | | else return 0.5300615343557319;  // std dev = 0.310, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.44343076486512994;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5735226304521596;  // std dev = 0.124, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6946616062420605;  // std dev = 0.310, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10551469088177313;  // std dev = 0.043, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.10767393432267;  // std dev = 0.021, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.14197656632246206;  // std dev = 0.232, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3349259564833167;  // std dev = 0.023, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then return 0.3729484201439844;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4581797007450288;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.11509262580142576;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.32739415073225986;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3342484189266536;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05416666348396262;  // std dev = 1.974, 187.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=15 */
%   | | | else return 0.04784617259106618;  // std dev = 2.260, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | else return -0.09420379699231679;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25329179607684704;  // std dev = 0.117, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.43291800950855003;  // std dev = 0.214, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09112654905128356;  // std dev = 0.033, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.047223541803706866;  // std dev = 0.137, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.29067867542921366;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14730002781468665;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.0011335365996289878;  // std dev = 1.307, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.48829231450281296;  // std dev = 0.422, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11138822948182592;  // std dev = 0.034, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.20824779264729615;  // std dev = 0.116, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else return 0.12008970249066674;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.07038837566530276;  // std dev = 0.853, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.347012467564511;  // std dev = 0.236, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08476201600090849;  // std dev = 0.047, 226.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29318170791206083;  // std dev = 0.185, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1078171423388452;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0064458103749321155;  // std dev = 0.688, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.03931864334016466;  // std dev = 1.401, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17543973030132692;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.28062406231132886;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07641163291559296;  // std dev = 0.091, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.26903489523151775;  // std dev = 0.250, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08521923393472391;  // std dev = 0.146, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2370252635145547;  // std dev = 0.161, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09812722430042334;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.044881180511219074;  // std dev = 0.629, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.021366405382485874;  // std dev = 1.409, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.13123003165163422;  // std dev = 0.990, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.011613892099644977;  // std dev = 1.519, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return 0.1727248943244766;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2477835506434968;  // std dev = 0.301, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21427432460492826;  // std dev = 0.053, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07327440800348817;  // std dev = 0.007, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21875710502433776;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.40872186709925057;  // std dev = 0.328, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1278183972227742;  // std dev = 0.048, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.1453146000962817;  // std dev = 0.103, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.15780177357173691;  // std dev = 0.032, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.06456698402286924;  // std dev = 0.034, 186.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.14525914598903628;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07294262503051853;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.015837161469558964;  // std dev = 0.131, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.38949096935446115;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.01194066766894809;  // std dev = 0.462, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.03865768296788811;  // std dev = 1.130, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '37.044', 'seconds']
Refined model CLL: -0.100407


******************************************
Best model found
******************************************
Results 

CLL : -0.096895 

AUC ROC : 0.994847 

AUC PR : 0.373278 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 22.88 

Total Inference Time : 31.919857025146484 

Total revision time: 80.28492820167541
Best scored revision CLL: -0.100407


Results 

CLL : -0.096895 

AUC ROC : 0.994847 

AUC PR : 0.373278 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 105.73196422958374 

Total Inference Time : 31.919857025146484 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.767
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.06021841183926325;  // std dev = 0.274, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.12559079556462804;  // std dev = 0.443, 86.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7217780218244629;  // std dev = 0.882, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0357895692606115;  // std dev = 0.262, 181.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0748451566513105;  // std dev = 1.815, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5585961884329588;  // std dev = 1.225, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14018963678688048;  // std dev = 4.894, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5684518650262111;  // std dev = 0.785, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7324330135878108;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4422239038286957;  // std dev = 1.235, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5979797306486923;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5660970412447773;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026584051177465276;  // std dev = 4.618, 282.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=34 */
%   | | | else return 0.08319629539037006;  // std dev = 4.042, 95.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5127820858431751;  // std dev = 3.364, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12060928303861965;  // std dev = 0.069, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | | else return -0.1313003013734084;  // std dev = 0.009, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16523932340005829;  // std dev = 0.249, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32201331975133707;  // std dev = 1.036, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47333165462463045;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2679273653613163;  // std dev = 0.772, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.506919201651029;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6167808329517019;  // std dev = 0.976, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10237500382751362;  // std dev = 1.803, 270.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=5 */
%   | | else return 0.02310840689087068;  // std dev = 0.310, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03062116329546754;  // std dev = 3.144, 240.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26113050368720797;  // std dev = 0.168, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.534198243114756;  // std dev = 0.988, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12395380585650854;  // std dev = 0.190, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.12765435174852274;  // std dev = 0.199, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2839784803113718;  // std dev = 1.595, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08865813766213336;  // std dev = 1.676, 267.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0329875182813576;  // std dev = 2.257, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1786373377149396;  // std dev = 0.999, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25461309358699424;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04277902577484955;  // std dev = 0.158, 168.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005185195312581562;  // std dev = 2.022, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.0329909494120189;  // std dev = 2.574, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14335085894762314;  // std dev = 0.200, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2681542077358866;  // std dev = 1.261, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09268374116655628;  // std dev = 0.101, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36757918721822325;  // std dev = 1.299, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11971429091672965;  // std dev = 0.209, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1746682154291035;  // std dev = 1.283, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16704584614655618;  // std dev = 0.370, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08256281319574299;  // std dev = 0.032, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09557189984295943;  // std dev = 0.012, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.0027063125965927615;  // std dev = 0.940, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.01446955148345811;  // std dev = 1.309, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2394449743832998;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0073659329468051425;  // std dev = 2.049, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.044', 'seconds']
Parameter learned model CLL:-0.110652 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 149, 0], 'true,false,false': [0.274, 45, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 50, 0], 'false,false': [0.443, 63, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.882, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 162, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.815, 56, 4], 'false,false,false,true': [1.225, 2, 8], 'false,false,false,false': [4.894, 92, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.785, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [1.235, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.175, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.618, 248, 34], 'false,false,false,false': [4.042, 72, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.364, 8, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.069, 193, 0], 'false,true,false,false': [0.009, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 94, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.036, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.772, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.976, 1, 39], 'false,false,true,false': [1.803, 265, 5], 'false,false,false': [0.31, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.144, 158, 82], 'false,true': [0.168, 0, 22], 'false,false,true': [0.988, 0, 52], 'false,false,false,true': [0.19, 84, 0], 'false,false,false,false': [0.199, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.595, 2, 121], 'true,false': [1.676, 260, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.257, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.999, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 149, 19], 'false,false,false,true': [2.022, 96, 28], 'false,false,false,false': [2.574, 60, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.2, 3, 78], 'false,true,true,true': [1.261, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.101, 203, 0], 'false,false,true': [1.299, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.209, 74, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.283, 1, 85], 'true,true,false': [0.37, 0, 19], 'true,false,true': [0.032, 162, 0], 'true,false,false,true': [0.012, 34, 0], 'true,false,false,false': [0.94, 16, 4], 'false,true': [1.309, 51, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.049, 59, 21]}]
{'': [0.2280342497002646, 0.20925118629682585], 'true': [0.04376735964986345, 0.019793898581777266], 'false': [0.22222222222222338, 0.19591671173607453], 'false,true': [7.105427357601002e-16, 5.773159728050814e-17], 'true,false': [-1.1027718633860615e-16, 0.0749687630154101], 'false,true,true': [0.0, 0.0]}
{'': [0.009053860132598823, 0.12267793600038232], 'false': [0.06853479442928777, 0.1628553081848632], 'false,false': [0.05490857632548654, 0.1907100871095951], 'false,false,false': [0.1500864504608463, 0.18145918164616917], 'false,true': [nan, 0.06853479442928777], 'false,false,true': [nan, 0.05490857632548654]}
{'': [0.0299156394834632, 0.11333104687127928], 'false': [nan, 0.11333104687128152], 'false,false': [0.001659601442655206, 0.1021593695961489], 'false,false,false': [0.07560792410391014, 0.1719604215829213], 'true': [0.00906266411748709, 0.1360449430912422], 'true,false': [0.016092594882707607, 0.1525949566183], 'true,true': [0.00906266411748709, nan], 'false,false,true': [0.005082529418132624, -2.3684757858670006e-16]}
{'': [0.06901889626076509, 0.0005998133538901998], 'false': [3.58344524092988e-05, 0.0006592097115645707], 'false,false': [nan, 0.0006592097115645707], 'false,false,false': [nan, 0.0006592097115645707], 'false,true': [nan, 3.5834452409294905e-05], 'false,true,false': [2.434370865996498e-05, 2.4455496015976914e-06]}
{'': [0.013864222775395172, 0.07784569535170742], 'false': [0.02955074704992672, 0.07627317719429509], 'false,false': [0.07168000772886735, 0.0960351212906431], 'false,false,true': [0.023834760337438077, 0.012034628969711665], 'false,true': [0.028361693762097056, 0.0], 'true': [0.013752130759602875, 0.0]}
{'': [0.04118516958717176, 0.08382124579760912], 'false': [0.001280396352656088, 0.08813191037229604], 'false,false': [0.018774747940620513, 0.0005038692057574903], 'true': [nan, 0.041185169587171354], 'true,false': [nan, 0.04118516958717176], 'false,false,false': [0.0004278442720113658, 0.0005915661715660229]}
{'': [0.04371251986125677, 0.056610113585832414], 'false': [nan, 0.056610113585832324], 'false,false': [nan, 0.056610113585832414], 'false,false,false': [nan, 0.056610113585832414], 'true': [0.020690317718294885, 0.010524561038548668]}
{'': [0.011739465813271356, 0.040501139497980926], 'false': [nan, 0.040501139497980905], 'false,false': [0.02489270019055565, 0.05185234405316501], 'false,false,false': [0.03296190996353481, 0.07886937758570683], 'true': [0.01188255736336589, 9.154512386204405e-05], 'true,false': [9.154512386204405e-05, nan]}
{'': [0.040158295988809774, 0.040523622556997534], 'false': [0.024214045969147897, 0.06952955571565435], 'false,false': [0.04115837041235357, 0.0005908799760734749], 'false,true': [0.04077116256359396, 4.982874694759489e-05], 'false,true,true': [0.04077116256359396, nan], 'false,false,false': [nan, 0.0005908799760734749]}
{'': [0.022516675604245077, 0.0380767839188669], 'false': [0.022538144115780298, 0.05247744827574953], 'false,false': [0.0, 0.05247570932473875], 'false,false,false': [nan, 0.052475709324738815], 'true': [0.016983105216279232, 0.004761996780961903], 'true,true': [0.01912915696447376, 0.007221810216167997], 'true,false': [6.484734203118072e-06, 0.01861820502956339], 'true,false,false': [4.459700957675032e-06, 0.04418022691466214]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 57.429
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.09423201728144012;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7231897220702469;  // std dev = 0.084, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6213915923008598;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11342999542255428;  // std dev = 0.103, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6893775666265732;  // std dev = 1.011, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.1317407850234897;  // std dev = 0.200, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6931576227372707;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.35736567617980625;  // std dev = 1.106, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.19929742819855384;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.5297730170879561;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.5587196798845526;  // std dev = 0.034, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.4579540374824129;  // std dev = 0.799, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5868749654332139;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5795182556931535;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.1096974871268966;  // std dev = 0.868, 146.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=1 */
%   | | | else return 0.01373842355232234;  // std dev = 2.522, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07961796392736631;  // std dev = 2.622, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.09451401678870312;  // std dev = 3.064, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.38869877752058224;  // std dev = 0.981, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.4277889622325539;  // std dev = 0.233, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.26275392882203014;  // std dev = 0.762, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4358268408260843;  // std dev = 0.074, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5569252219747578;  // std dev = 0.309, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.6358532007408123;  // std dev = 0.944, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10886710570825212;  // std dev = 0.170, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.10989786907292191;  // std dev = 0.039, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.1397304470413592;  // std dev = 0.350, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3067484956169555;  // std dev = 0.993, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.32383900954105665;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.36193299114585303;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.426135919840923;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3332550957480138;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.08868972350860903;  // std dev = 0.741, 137.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=1 */
%   | | | else return -0.00913349700062933;  // std dev = 1.985, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.008119540848805389;  // std dev = 2.475, 124.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=29 */
%   | | | else return 0.1066732924621233;  // std dev = 2.057, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2502085630310533;  // std dev = 1.008, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.43025502224381784;  // std dev = 0.302, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.09055521484724847;  // std dev = 0.007, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2563357984473182;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07260370453579569;  // std dev = 0.106, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26685816983889854;  // std dev = 0.018, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.33907211965523665;  // std dev = 1.037, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.47945439048011845;  // std dev = 0.817, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.12024383907402254;  // std dev = 0.034, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.20118299090258135;  // std dev = 0.994, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.07629163262330979;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.3122557807538817;  // std dev = 0.069, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.0889675151820691;  // std dev = 0.012, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1541196851760467;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08052800960130259;  // std dev = 7.50e-05, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.039108997559552994;  // std dev = 0.515, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03520676321976074;  // std dev = 0.756, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.013265836175706189;  // std dev = 1.629, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.1664790341756292;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.03125978176401394;  // std dev = 0.367, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | else return -0.129707792224119;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.1930049460483335;  // std dev = 0.266, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.079706940826731;  // std dev = 0.070, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.24726620090933854;  // std dev = 0.233, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.09987428435235644;  // std dev = 0.186, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.33654318681228723;  // std dev = 1.025, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.010180024552364128;  // std dev = 1.914, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.10655439021057514;  // std dev = 1.374, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.15593161537441222;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1586748593825063;  // std dev = 0.018, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.18674569233399024;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.21565901541355392;  // std dev = 0.070, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07481546651982178;  // std dev = 0.014, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.1984506938702529;  // std dev = 0.966, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4243765702092342;  // std dev = 0.389, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10624313334345085;  // std dev = 0.042, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14169431803173999;  // std dev = 0.113, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.054310733431041834;  // std dev = 1.153, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.1796980977492492;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06267741761819154;  // std dev = 0.050, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12160918401720189;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.00925840296625227;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.14612774974151377;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0064045130038830065;  // std dev = 0.936, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return -0.01344795300558676;  // std dev = 1.314, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '42.226', 'seconds']
Refined model CLL: -0.099294


******************************************
Best model found
******************************************
Results 

CLL : -0.095686 

AUC ROC : 0.993069 

AUC PR : 0.349464 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 57.429 

Total Inference Time : 52.92323899269104 

Total revision time: 140.66805090522766
Best scored revision CLL: -0.099294


Results 

CLL : -0.095686 

AUC ROC : 0.993069 

AUC PR : 0.349464 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 166.11508693313598 

Total Inference Time : 52.92323899269104 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7011294748592892;  // std dev = 1.305, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03818506110983065;  // std dev = 0.260, 210.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11204343116009235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7593516840964301;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07994192953298113;  // std dev = 3.332, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5506944054435833;  // std dev = 1.361, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7290190836778074;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.504920543986143;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.59846877852863;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.562259440095283;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.562259440095283;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05056617153112053;  // std dev = 3.721, 242.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=21 */
%   | | | else return 0.008929837040648887;  // std dev = 2.868, 67.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46271260140428766;  // std dev = 3.193, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1165040349973123;  // std dev = 0.032, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12231291813657647;  // std dev = 0.001, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15087493488161247;  // std dev = 0.187, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3240985895161071;  // std dev = 1.164, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4382233741263786;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31547730218592795;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.649383694213278;  // std dev = 0.174, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0824069359064503;  // std dev = 2.386, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.10583508171456207;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029393493730667384;  // std dev = 3.302, 281.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26588263221232505;  // std dev = 0.178, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5566792534371131;  // std dev = 0.800, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10898521477254972;  // std dev = 0.086, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11972603950088244;  // std dev = 0.139, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24432213373953904;  // std dev = 2.617, 113.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=107 */
%   | else return -0.07068542805210226;  // std dev = 2.069, 221.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006875893030098652;  // std dev = 0.679, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1552707494444037;  // std dev = 1.951, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.26088339862045534;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03886544737845124;  // std dev = 0.154, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002712462566306299;  // std dev = 1.472, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | | | else return 0.11912117397759503;  // std dev = 1.614, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1526534623508638;  // std dev = 0.211, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2896757585694392;  // std dev = 0.700, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09055496547605657;  // std dev = 0.043, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45968350175951705;  // std dev = 0.585, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11138110792403315;  // std dev = 0.167, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18776574020247985;  // std dev = 1.291, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.14197464244267327;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08401727850107478;  // std dev = 0.022, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0801334001212739;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 8.959453922578117E-4;  // std dev = 0.543, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02638230760683754;  // std dev = 1.031, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1965485685265782;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05055441842590524;  // std dev = 1.334, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.210', 'seconds']
Parameter learned model CLL:-0.110741 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 175, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.305, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 188, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.988, 42, 1], 'false,false,false,true': [0.085, 0, 4], 'false,false,false,false': [3.332, 53, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.361, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.773, 1, 2], 'true,false,false': [0.118, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.721, 221, 21], 'false,false,false,false': [2.868, 56, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.193, 9, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 169, 0], 'false,true,false,false': [0.001, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.164, 1, 73], 'true,false': [0.169, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.174, 0, 23], 'false,false,true,false': [2.386, 242, 9], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.302, 190, 91], 'false,true': [0.178, 0, 13], 'false,false,true': [0.8, 0, 22], 'false,false,false,true': [0.086, 35, 0], 'false,false,false,false': [0.139, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.617, 6, 107], 'true,false': [2.069, 210, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.679, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.951, 4, 80], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 170, 22], 'false,false,false,true': [1.472, 48, 13], 'false,false,false,false': [1.614, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.211, 4, 77], 'false,true,true,true': [0.7, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 231, 0], 'false,false,true': [0.585, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.291, 1, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.022, 170, 0], 'true,false,false,true': [0.0, 21, 0], 'true,false,false,false': [0.543, 8, 2], 'false,true': [1.031, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.334, 17, 8]}]
{'': [0.2267992631902132, 0.2292444699798909], 'false': [0.2343749999999995, 0.2222222222222223], 'false,true': [0.1224489795918365, -3.0839528461809902e-18], 'true': [0.009522928994084868, 0.009998979695949227], 'false,true,true': [0.07100591715976314, 0.0], 'true,false': [-1.9032394707859825e-16, 0.07939508506616262]}
{'': [0.020275545833331455, 0.09130408914874624], 'false': [0.06774047107746764, 0.13037900407897257], 'false,false': [0.02271498107084907, 0.17371609051875272], 'false,false,false': [0.001818128276117159, 0.1585876088077392], 'false,true': [nan, 0.06774047107746764], 'false,false,true': [nan, 0.02271498107084907]}
{'': [0.03137068466821367, 0.0860703302738445], 'false': [nan, 0.08607033027384456], 'false,false': [0.0, 0.07203726656189824], 'false,false,false': [0.057222195597611075, 0.12277616740400901], 'true': [0.025792825214869395, 0.08951474041598109], 'true,false': [0.19924994366593377, 0.0034627927559380822], 'true,true': [0.02571544669474705, 0.0], 'false,false,true': [-4.9343245538895844e-17, -5.551115123125783e-17]}
{'': [0.07551446997376164, 0.00033147630968643864], 'false': [9.78838713902723e-06, 0.0006349753597919177], 'false,false': [nan, 0.0006349753597919177], 'false,false,false': [nan, 0.0006349753597919177], 'false,true': [nan, 9.788387139020635e-06], 'false,true,false': [6.17578798604569e-06, 5.8640828507853606e-08]}
{'': [0.018356252704761777, 0.061838709942672695], 'false': [0.0, 0.05901950229168704], 'false,false': [0.062068626998197686, -6.938893903907228e-18], 'false,false,true': [0.0013227325934591012, 0.022682782740624678], 'true': [0.01829617852636833, 0.007111079899740663], 'false,true': [0.0, nan]}
{'': [0.03879324735970533, 0.0845879391005456], 'false': [0.0024489105970961, 0.09055903578899316], 'false,false': [0.02911317458242525, 0.0004200376325107012], 'true': [nan, 0.03879324735970467], 'true,false': [nan, 0.03879324735970533], 'false,false,false': [0.00020921112396850335, 0.0005842622985222157]}
{'': [0.05554314433028335, 0.018451941124765045], 'true': [0.06061976913176496, 0.01937565754894376], 'false': [nan, 0.018451941124765045], 'false,false': [nan, 0.018451941124765045], 'false,false,false': [nan, 0.018451941124765045]}
{'': [0.04458241702545689, 0.03576334654268115], 'true': [0.04530643020892254, 0.003279227739170845], 'false': [nan, 0.03576334654268103], 'false,false': [0.023831997529633994, 0.058872602721238246], 'false,false,false': [0.035508663077682814, 0.10853112256658509], 'true,false': [0.003279227739170845, nan]}
{'': [0.044384655681619554, 0.02877479481582455], 'false': [0.017322713662940963, 0.07087276240244757], 'false,false': [0.02013553267205112, 0.000621589278638695], 'false,true': [0.015328791386213542, 8.0043835409591e-06], 'false,true,true': [0.015328791386213542, nan], 'false,false,false': [nan, 0.000621589278638695]}
{'': [0.02227888541047537, 0.04565291445217909], 'false': [0.02871921606728866, 0.06922976802437691], 'false,false': [0.0, 0.071179178289059], 'false,false,false': [nan, 0.071179178289059], 'true': [0.016191641523437952, 0.001808916922511343], 'true,true': [0.01754325872124305, 9.202446059921846e-06], 'true,false': [2.8645954073454573e-06, 0.010950744846157542], 'true,false,false': [0.0, 0.029499539619172965]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 26.897
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else return 0.7748156017661786;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.13323037524531606;  // std dev = 0.092, 232.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7241920267141314;  // std dev = 0.151, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6594281704122605;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7359812264346159;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12639345736246338;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.012923104231268643;  // std dev = 0.292, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.015282346251352226;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.1263934573624634;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7485124095828778;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13445140421167442;  // std dev = 3.069, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5298023783105655;  // std dev = 1.398, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.3426364996845548;  // std dev = 1.268, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.7384846823825237;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5376598372340607;  // std dev = 0.336, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5600203046042553;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.1006681254926627;  // std dev = 1.177, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | | else return -0.014807054899149526;  // std dev = 2.363, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11520355370864946;  // std dev = 1.959, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.1896413984246528;  // std dev = 2.205, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3992543522614571;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.4220122379592188;  // std dev = 0.020, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.44147342810938545;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4909800702143189;  // std dev = 0.197, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.539520776358081;  // std dev = 0.290, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3910228966426166;  // std dev = 0.820, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.614222318440252;  // std dev = 0.182, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7412908269812778;  // std dev = 0.164, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12076476526063713;  // std dev = 0.027, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.3079653627769397;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.17297334542178405;  // std dev = 1.579, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3326129937246082;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.40464029597263235;  // std dev = 0.215, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4515482019312387;  // std dev = 0.351, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3201854245052877;  // std dev = 0.001, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4753241121859444;  // std dev = 0.262, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08209783747886976;  // std dev = 2.056, 255.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=9 */
%   | | else return -0.09270403385702129;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27754033278287704;  // std dev = 0.029, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(A, F) )
%   | | | then return -0.053690197277889325;  // std dev = 1.583, 156.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=15 */
%   | | | else return -0.09302104490355656;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.025856811046559784;  // std dev = 0.178, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.2993715731251721;  // std dev = 0.154, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25486517651294727;  // std dev = 0.000752, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.23013942866589457;  // std dev = 1.627, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.529919178680645;  // std dev = 0.421, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1241728702750096;  // std dev = 0.031, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, C), tweets(A, E) )
%   | | then if ( tweets(C, E), follows(D, C) )
%   | | | then return 0.1677247639219609;  // std dev = 1.352, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.2234419284147164;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.23498371888440134;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.0985069821373976;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.28407483332300143;  // std dev = 0.113, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.012515525788830195;  // std dev = 0.713, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.05759677379694438;  // std dev = 0.108, 239.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01069657981517315;  // std dev = 1.031, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.03602253194317151;  // std dev = 1.646, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19269569439094375;  // std dev = 0.161, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.07181399993872269;  // std dev = 0.944, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3646438652377061;  // std dev = 0.309, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.08093193296065282;  // std dev = 0.087, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.27618072765372675;  // std dev = 0.232, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11830971020462706;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.10452467348821015;  // std dev = 0.905, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.046032319081537314;  // std dev = 1.311, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.14696225614993214;  // std dev = 0.134, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.048816557684549906;  // std dev = 0.947, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1525821801410847;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.058624109473996;  // std dev = 1.260, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.22376052042740868;  // std dev = 1.016, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.27335385871972;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.035203736305836474;  // std dev = 0.106, 238.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=32 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3710486416248656;  // std dev = 0.115, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13698047140375189;  // std dev = 0.030, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15633957347728536;  // std dev = 0.141, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.11318960259611925;  // std dev = 0.164, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.0695672644415466;  // std dev = 0.041, 195.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.08317950233129517;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.09416358626566194;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.061338488192839116;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20350948035632377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.029353357009251207;  // std dev = 0.303, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.022275867161959513;  // std dev = 1.061, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.670', 'seconds']
Refined model CLL: -0.106317


******************************************
Best model found
******************************************
Results 

CLL : -0.104725 

AUC ROC : 0.994852 

AUC PR : 0.381084 

Precision : 0.347222 

Recall : 0.961538 

F1 : 0.510204 

Total Learning Time : 26.897 

Total Inference Time : 31.101230144500732 

Total revision time: 84.0277650718689
Best scored revision CLL: -0.106317


Results 

CLL : -0.104725 

AUC ROC : 0.994852 

AUC PR : 0.381084 

Precision : 0.347222 

Recall : 0.961538 

F1 : 0.510204 

Total Learning Time : 84.06626800346375 

Total Inference Time : 31.101230144500732 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.896
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.08031260336202617;  // std dev = 0.240, 65.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.23519811542738034;  // std dev = 0.485, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7167844664283916;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03732586117834834;  // std dev = 0.262, 180.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06968015207035544;  // std dev = 1.807, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7463653873384161;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12082282895350087;  // std dev = 4.934, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5511539714218819;  // std dev = 1.230, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7334531349666756;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4860012580369441;  // std dev = 0.859, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5961124911927397;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629403485301258;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018880090422179894;  // std dev = 4.590, 267.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=34 */
%   | | | else return 0.054908111551990886;  // std dev = 4.082, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5560655626482792;  // std dev = 1.967, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12056719545798925;  // std dev = 0.039, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | | else return -0.12802397708366187;  // std dev = 0.008, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17018394533827455;  // std dev = 0.312, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2941785804565447;  // std dev = 1.435, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.03972814147088968;  // std dev = 0.606, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29439100833370196;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5028374903117236;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6250791529623002;  // std dev = 0.321, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10576344471074671;  // std dev = 1.820, 275.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=5 */
%   | | else return -8.941665344940152E-4;  // std dev = 0.293, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024943930177631937;  // std dev = 3.085, 249.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2525926999375114;  // std dev = 0.255, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49448680477474194;  // std dev = 1.413, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12876910791535795;  // std dev = 0.187, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.1275038846355885;  // std dev = 0.228, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2827960731367307;  // std dev = 1.452, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08912818495100376;  // std dev = 1.675, 270.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06087604141036226;  // std dev = 2.140, 75.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1747675138573064;  // std dev = 0.995, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2976284509446962;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0448336485512515;  // std dev = 0.147, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005674249046451592;  // std dev = 2.011, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.05061532008051615;  // std dev = 2.481, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1651598563292541;  // std dev = 0.131, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2501076647836848;  // std dev = 1.419, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09199370475267221;  // std dev = 0.092, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3567849125567306;  // std dev = 1.285, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11838823766092901;  // std dev = 0.320, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1604875579423381;  // std dev = 1.531, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1591239027703063;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0819999611645505;  // std dev = 0.024, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09322727189312512;  // std dev = 0.041, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.006429757554559048;  // std dev = 0.967, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.018103363737848377;  // std dev = 1.290, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.28833755953290424;  // std dev = 0.938, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014264806672712913;  // std dev = 1.971, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.761', 'seconds']
Parameter learned model CLL:-0.111328 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 185, 0], 'true,false,false': [0.24, 61, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.485, 38, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 161, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.807, 53, 4], 'false,false,false,true': [0.132, 0, 8], 'false,false,false,false': [4.934, 98, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.23, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.859, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.59, 233, 34], 'false,false,false,false': [4.082, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.967, 0, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 177, 0], 'false,true,false,false': [0.008, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.312, 100, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.435, 2, 77], 'true,false': [0.606, 1, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.321, 0, 39], 'false,false,true,false': [1.82, 270, 5], 'false,false,false': [0.293, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.085, 167, 82], 'false,true': [0.255, 0, 22], 'false,false,true': [1.413, 1, 52], 'false,false,false,true': [0.187, 53, 0], 'false,false,false,false': [0.228, 72, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.452, 1, 121], 'true,false': [1.675, 263, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.14, 47, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 83], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 157, 19], 'false,false,false,true': [2.011, 96, 28], 'false,false,false,false': [2.481, 46, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.131, 1, 78], 'false,true,true,true': [1.419, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.092, 197, 0], 'false,false,true': [1.285, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.32, 108, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.531, 2, 85], 'true,true,false': [0.378, 0, 19], 'true,false,true': [0.024, 178, 0], 'true,false,false,true': [0.041, 33, 0], 'true,false,false,false': [0.967, 20, 4], 'false,true': [1.29, 48, 25], 'false,false,true': [0.938, 2, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.971, 49, 21]}]
{'': [0.21100204787797663, 0.23215430336227555], 'false': [0.22959183673469508, 0.23488309594195214], 'false,true': [7.105427357601002e-16, 4.9343245538895844e-17], 'true': [0.02725128832212642, 0.0157439999999999], 'true,false': [-2.1124243495570547e-16, 0.05775147928994074], 'false,true,true': [0.0, 0.0]}
{'': [0.012031372671413125, 0.12178914903512651], 'false': [0.06884443903124082, 0.16087677324691158], 'false,false': [0.057313560581283764, 0.18712195955274127], 'false,false,false': [0.0021695349787680396, 0.17640255198609334], 'false,true': [nan, 0.06884443903124082], 'false,false,true': [nan, 0.057313560581283764]}
{'': [0.030109483295311195, 0.11419061916805014], 'false': [nan, 0.11419061916805132], 'false,false': [0.0017965568144139457, 0.10307347997521792], 'false,false,false': [0.0789180898504554, 0.16176086727738437], 'true': [0.021934356388974244, 0.07710724391113706], 'true,false': [0.01668331211892767, 0.08194044665952838], 'true,true': [0.021934356388974244, nan], 'false,false,true': [0.005501955244144059, 0.0]}
{'': [0.02480850720809358, 0.0008295208578348276], 'false': [1.515028207330345e-05, 0.0009728594905266386], 'false,false': [nan, 0.0009728594905266386], 'false,false,false': [nan, 0.0009728594905266386], 'false,true': [nan, 1.515028207329928e-05], 'false,true,false': [8.491264198229509e-06, 1.6846513125519842e-06]}
{'': [0.0315057981462789, 0.07363119659453989], 'false': [0.0019789391126532755, 0.07237265612135127], 'false,false': [0.06897915077250558, 0.08605154266628294], 'false,false,true': [0.0026349181702931316, 0.01204686985004971], 'true': [0.026049504717310077, 0.18388300530536708], 'false,true': [8.84150404716344e-06, 0.0]}
{'': [0.03823238908132959, 0.08659746019757199], 'false': [0.0029545763659698018, 0.09274083901396485], 'false,false': [0.03767934489087897, 0.0006957754927594095], 'true': [nan, 0.038232389081330004], 'true,false': [nan, 0.03823238908132959], 'false,false,false': [0.0006612268450180923, 0.0007205284012978171]}
{'': [0.04218394387352289, 0.061052747003696756], 'false': [nan, 0.06105274700369681], 'false,false': [nan, 0.061052747003696756], 'false,false,false': [nan, 0.061052747003696756], 'true': [0.01727269790680662, 0.010389183031231023]}
{'': [0.011888847183885557, 0.039125699605549236], 'false': [nan, 0.03912569960554911], 'false,false': [0.02163982160125801, 0.053306859589926245], 'false,false,false': [0.032617167649070355, 0.08793193425755026], 'true': [0.011793448909742998, 0.0011518069256953173], 'true,false': [0.0011518069256953173, nan]}
{'': [0.01722752921430545, 0.037670949819571684], 'false': [0.024708789855148544, 0.05679962883360869], 'false,false': [0.040259210150975965, 0.0009488589647753984], 'false,true': [0.05160967188643956, 4.297802700676406e-05], 'false,true,true': [0.05160967188643956, nan], 'false,false,false': [nan, 0.0009488589647753984]}
{'': [0.022371262495035637, 0.046201740667826896], 'false': [0.022793977937952643, 0.0690906416113497], 'false,false': [0.22009975682256244, 0.055511917311769396], 'false,false,false': [nan, 0.05551191731176944], 'true': [0.0234673946053069, 0.004548759144802361], 'true,true': [0.026950615744239407, 0.007516382098674074], 'true,false': [3.2333875949843115e-06, 0.01825799584169862], 'true,false,false': [5.1771129298080776e-05, 0.038929876218676246]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 25.813
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 0.165, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.12224322176323338;  // std dev = 0.139, 204.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.729305580016342;  // std dev = 0.205, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.6074502037436842;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.021758109423266225;  // std dev = 0.281, 145.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=18 */
%   | | else return -0.10456544051648613;  // std dev = 0.138, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07238837328674434;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.09208208965990271;  // std dev = 1.181, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.6154260705995349;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11123687826564647;  // std dev = 4.781, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5675238915874975;  // std dev = 0.118, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.22652394960177494;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5919130633101539;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1332291201307073;  // std dev = 0.907, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5910004999912395;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6837482939961727;  // std dev = 0.991, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12445247579756534;  // std dev = 0.079, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0717352294512388;  // std dev = 3.636, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.11585009511541738;  // std dev = 3.083, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.4075481681663314;  // std dev = 0.831, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.47686658630252693;  // std dev = 0.329, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24850104786803115;  // std dev = 1.280, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4456718380600809;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6218029911428519;  // std dev = 0.987, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7212266817056723;  // std dev = 0.333, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11209444752745674;  // std dev = 0.055, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.10454375182180331;  // std dev = 0.003, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.15568585030632667;  // std dev = 0.178, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.314730686868102;  // std dev = 0.130, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.20852841320049784;  // std dev = 0.446, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2924264994499031;  // std dev = 0.342, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.11086263999139763;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.335881482814455;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5389870233524121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then return -0.06036409319921934;  // std dev = 0.142, 227.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=17 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.044396746986353625;  // std dev = 2.557, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
%   | | | else return 0.07608800728965218;  // std dev = 2.811, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.19718815201279907;  // std dev = 1.689, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.2648801684482039;  // std dev = 0.105, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.4384724389585674;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.051265620810368465;  // std dev = 0.147, 163.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=14 */
%   | | else return -0.06603534785264976;  // std dev = 0.109, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28537824907821263;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18174496578457394;  // std dev = 1.173, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5460985293024314;  // std dev = 0.406, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.125525092684716;  // std dev = 0.029, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( tweets(A, D), follows(A, F) )
%   | | then return 0.2246650308995127;  // std dev = 0.019, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.21615913473988974;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.2879598803805347;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.22414230648615116;  // std dev = 0.978, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3799658555739692;  // std dev = 0.981, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08908905104936692;  // std dev = 0.005, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.25727474401433703;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017790351563348863;  // std dev = 2.131, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.0696290503042182;  // std dev = 1.957, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17442210461461902;  // std dev = 0.100, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.3262951581957973;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08118230154044878;  // std dev = 0.073, 141.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.34720689291726425;  // std dev = 0.317, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08249257784733689;  // std dev = 0.042, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3471510636180543;  // std dev = 0.434, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12306008698007398;  // std dev = 0.024, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.015266208640967097;  // std dev = 1.735, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | | else return 0.01876931599763339;  // std dev = 1.500, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.16069299845256832;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.10515836826301157;  // std dev = 1.704, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | else return -0.2730655736104825;  // std dev = 0.954, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.18858350615433297;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21527798310470708;  // std dev = 0.067, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07629691440340561;  // std dev = 0.004, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.31640148977863497;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.41155622382743173;  // std dev = 0.324, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.13235480349336834;  // std dev = 0.030, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11821645205063101;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else return 0.23034424982180637;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.0644823309637693;  // std dev = 0.054, 240.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B), tweets(G, H) )
%   | | | then return 0.058578067841638215;  // std dev = 0.603, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2641831210325348;  // std dev = 0.203, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.10484440957611019;  // std dev = 0.014, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2629453588929168;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10551791482820219;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.05499078837796238;  // std dev = 0.248, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.044', 'seconds']
Refined model CLL: -0.10222


******************************************
Best model found
******************************************
Results 

CLL : -0.102889 

AUC ROC : 0.994316 

AUC PR : 0.427338 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 25.813 

Total Inference Time : 31.291014909744263 

Total revision time: 87.6332570400238
Best scored revision CLL: -0.10222


Results 

CLL : -0.102889 

AUC ROC : 0.994316 

AUC PR : 0.427338 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 87.67175997161866 

Total Inference Time : 31.291014909744263 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.361
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.28672036367094095;  // std dev = 0.495, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.716572726853301;  // std dev = 1.005, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.024875879800978235;  // std dev = 0.276, 185.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09320924930520752;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7444917442272119;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08736079341539178;  // std dev = 3.262, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5652827317405671;  // std dev = 1.080, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7318659098736118;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8168356973197828;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3759959662475675;  // std dev = 0.932, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5652904383744395;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5652904383744395;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04194100429372499;  // std dev = 3.672, 214.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=21 */
%   | | | else return 0.03385691256127235;  // std dev = 2.788, 57.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5134985941463298;  // std dev = 1.928, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11856125315509868;  // std dev = 0.008, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | | else return -0.12667125378798264;  // std dev = 0.004, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16153080983090415;  // std dev = 0.221, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30153671577724195;  // std dev = 1.408, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.22728282939969793;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25103074275548515;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.630006324542448;  // std dev = 0.157, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08911347977039512;  // std dev = 2.311, 258.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=9 */
%   | | else return -0.10791387374883024;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033078396792416226;  // std dev = 3.251, 266.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2668368768327803;  // std dev = 0.136, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4143071770199906;  // std dev = 1.811, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11603653577602202;  // std dev = 0.116, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.12082907584666125;  // std dev = 0.183, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26091983410689285;  // std dev = 2.045, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07565615415683859;  // std dev = 2.112, 226.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02112331531146529;  // std dev = 1.042, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1610820150639275;  // std dev = 1.704, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24213033132837636;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042976642689932905;  // std dev = 0.160, 187.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.006353394235077524;  // std dev = 1.463, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.10715056136348751;  // std dev = 1.643, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18048173158562383;  // std dev = 0.123, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2598994634928451;  // std dev = 1.084, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09149634894592923;  // std dev = 0.049, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3929371003515631;  // std dev = 1.283, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11394923096179511;  // std dev = 0.208, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18128406491511428;  // std dev = 1.157, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.15088315360288249;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08475135827039595;  // std dev = 0.029, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07964073009836826;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.06719779237697517;  // std dev = 0.724, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.009617325084464407;  // std dev = 1.242, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2740296595597327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0010446115862422795;  // std dev = 1.463, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.806', 'seconds']
Parameter learned model CLL:-0.111187 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.495, 12, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 163, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.087, 0, 4], 'false,false,false,false': [3.262, 49, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.08, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.932, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.672, 193, 21], 'false,false,false,false': [2.788, 46, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.928, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.008, 166, 0], 'false,true,false,false': [0.004, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.221, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.408, 2, 73], 'true,false': [0.887, 1, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.157, 0, 23], 'false,false,true,false': [2.311, 249, 9], 'false,false,false': [1.32e-09, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.251, 175, 91], 'false,true': [0.136, 0, 13], 'false,false,true': [1.811, 3, 22], 'false,false,false,true': [0.116, 27, 0], 'false,false,false,false': [0.183, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.045, 4, 107], 'true,false': [2.112, 215, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.042, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.704, 3, 80], 'true,false,true': [0.054, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 165, 22], 'false,false,false,true': [1.463, 47, 13], 'false,false,false,false': [1.643, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.123, 1, 77], 'false,true,true,true': [1.084, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 207, 0], 'false,false,true': [1.283, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.208, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.157, 1, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.029, 184, 0], 'true,false,false,true': [3.73e-09, 13, 0], 'true,false,false,false': [0.724, 15, 2], 'false,true': [1.242, 29, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.463, 26, 8]}]
{'': [0.226448387413001, 0.23923104307582765], 'false': [0.2343749999999995, 0.2448979591836735], 'false,true': [0.07100591715976314, 0.0], 'true': [0.03598567560485849, 0.010099958350687043], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [-1.8073398075293246e-16, 0.07638888888888894]}
{'': [0.012170379514347114, 0.10312928376103357], 'false': [0.07640865680428108, 0.14984669417263055], 'false,false': [0.039930555555555504, 0.17538503557147228], 'false,false,false': [0.0018777508106271323, 0.1612251379292899], 'false,true': [nan, 0.07640865680428108], 'false,false,true': [nan, 0.039930555555555504]}
{'': [0.03004933681770133, 0.09413530667961362], 'false': [nan, 0.09413530667961353], 'false,false': [-3.657205257588751e-16, 0.07940304399411459], 'false,false,false': [0.0630203079360692, 0.1363732602408997], 'true': [0.016581234183418343, 0.16465081514866595], 'true,false': [0.0034573379367971446, 0.1736025864643212], 'true,true': [0.016429356648086958, 0.0], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.0292687858746576, 0.0004435525425807114], 'false': [1.0944891132223479e-05, 0.0011646590850480207], 'false,false': [nan, 0.0011646590850480207], 'false,false,false': [nan, 0.0011646590850480207], 'false,true': [nan, 1.0944891132223479e-05], 'false,true,false': [3.471819732988187e-07, 3.398715660177639e-07]}
{'': [0.03492680526343341, 0.06054146979653624], 'false': [0.0524691358024691, 0.05633899957903609], 'false,false': [0.05795627667382911, 1.5419764230904951e-18], 'false,false,true': [0.0010776808232695043, 0.02069921309397213], 'false,true': [0.0524691358024691, nan], 'true': [0.026428068911513367, 0.1572388133776989]}
{'': [0.039741998369608136, 0.0879903025303075], 'false': [0.0014238885231796078, 0.09320314653879734], 'false,false': [0.13118609337050277, 0.0007177839148578869], 'true': [nan, 0.03974199836960807], 'true,false': [nan, 0.039741998369608136], 'false,false,false': [0.0005024443922624129, 0.0008574689426741048]}
{'': [0.050668634207313074, 0.04345585366132194], 'true': [0.03765980562801246, 0.019744997508275918], 'false': [nan, 0.04345585366132194], 'false,false': [nan, 0.04345585366132194], 'false,false,false': [nan, 0.04345585366132194]}
{'': [0.03435146272198201, 0.03739815556238666], 'false': [nan, 0.03739815556238635], 'false,false': [0.025595260856020853, 0.0590764145094043], 'false,false,false': [0.03569517860282583, 0.10801956734323098], 'true': [0.0349897100832708, 0.0014499283549449377], 'true,false': [0.0014499283549449377, nan]}
{'': [0.015152891170632943, 0.03278155664443607], 'false': [0.019551027137768108, 0.07832702577108984], 'false,false': [0.09142811590869843, 0.0009378942436436169], 'false,true': [0.035617228592312165, 1.1383807582483785e-05], 'false,true,true': [0.035617228592312165, nan], 'false,false,false': [nan, 0.0009378942436436169]}
{'': [0.020975886565143636, 0.049431401956777365], 'false': [0.037605614951573524, 0.06328022918517623], 'false,false': [0.0, 0.06297953083517671], 'false,false,false': [nan, 0.06297953083517671], 'true': [0.012950665468057843, 0.002477821603392612], 'true,true': [0.014097120078916085, 4.964902198895116e-06], 'true,false': [4.578365324219194e-06, 0.01751987601183302], 'true,false,false': [1.0675221390626506e-18, 0.030850336686549247]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 22.026
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8176083945589723;  // std dev = 0.197, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13276015580957934;  // std dev = 0.095, 220.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.40360348055405776;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then return 0.6900949630902674;  // std dev = 0.189, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else return 0.7449603378977472;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7237042433872496;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.04554614538205023;  // std dev = 3.233, 166.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=16 */
%   | | | else return -0.04185350729957928;  // std dev = 0.803, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return -0.022888992526741873;  // std dev = 0.278, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1026358634356703;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7609408120802204;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07353151550882515;  // std dev = 3.256, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5845576591533059;  // std dev = 0.389, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.732095539570987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5179292768607591;  // std dev = 0.397, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553314757537638;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5543214550970764;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10632580811626093;  // std dev = 1.459, 171.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=3 */
%   | | | else return 0.0322801378319939;  // std dev = 2.662, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09576018202907782;  // std dev = 2.230, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.12829307867389972;  // std dev = 2.188, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.4251620744039757;  // std dev = 0.036, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.45931182649789787;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.31897055528898555;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4183283609271;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(K, A) )
%   | | | then return 0.638448870023492;  // std dev = 0.196, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.33665525243686933;  // std dev = 0.849, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, L), follows(M, A) )
%   | | | then return 0.6513226392272636;  // std dev = 0.969, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.7224240679185923;  // std dev = 0.131, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12639569097478803;  // std dev = 0.028, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.33020221257595433;  // std dev = 0.039, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.1977444431104861;  // std dev = 1.551, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3190867842077671;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.45526494294373426;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.46924660733310986;  // std dev = 0.305, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.31984938632230814;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.48302850287863436;  // std dev = 1.338, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.09071227281113056;  // std dev = 2.111, 265.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=9 */
%   | | else return -0.09379810090256901;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2736209642210487;  // std dev = 0.023, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.03970088172519256;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.04882280058467874;  // std dev = 1.889, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | | else return -0.050526555882867495;  // std dev = 0.530, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return -0.05380282000831532;  // std dev = 0.141, 51.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26594400496389137;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.16852385883331336;  // std dev = 1.027, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5155565103826392;  // std dev = 0.418, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12196428616333181;  // std dev = 0.033, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(A, D) )
%   | | then return 0.20400395800174795;  // std dev = 0.146, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.13394572350855077;  // std dev = 1.380, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.08919277681978778;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.32096050507163376;  // std dev = 0.110, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.42025500012002726;  // std dev = 0.088, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09064641980617723;  // std dev = 0.005, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return -0.05367811887568519;  // std dev = 0.530, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.01763619357306658;  // std dev = 1.954, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
%   | | else return -0.025328554347000716;  // std dev = 0.189, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.1643582856776002;  // std dev = 0.961, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.19335430954421087;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.20512946433876883;  // std dev = 0.023, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.24581138784017004;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.26932100724866564;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06917494398708231;  // std dev = 0.819, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   | | | else return -0.006325553657578388;  // std dev = 1.410, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.038531670650732236;  // std dev = 1.193, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return -0.006245424882609533;  // std dev = 1.463, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1579964024870988;  // std dev = 0.050, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.12192003288359224;  // std dev = 0.963, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.18424890806874442;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17605902817705518;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22113342591160665;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2671402250293821;  // std dev = 0.100, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07986215628931495;  // std dev = 0.008, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3864311097151294;  // std dev = 0.097, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12574995759824759;  // std dev = 0.028, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12347864873594122;  // std dev = 1.348, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.251288353448091;  // std dev = 0.412, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.1414212032733432;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07000685813121607;  // std dev = 0.040, 193.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.002645549280892385;  // std dev = 0.139, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else return 0.19118389279867434;  // std dev = 0.507, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.15864906567609727;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.005578393454865155;  // std dev = 0.436, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.017720049843683656;  // std dev = 1.113, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '29.232', 'seconds']
Refined model CLL: -0.106792


******************************************
Best model found
******************************************
Results 

CLL : -0.106353 

AUC ROC : 0.994518 

AUC PR : 0.369345 

Precision : 0.337054 

Recall : 0.967949 

F1 : 0.5 

Total Learning Time : 22.026 

Total Inference Time : 24.149039268493652 

Total revision time: 71.18063346099854
Best scored revision CLL: -0.106792


Results 

CLL : -0.106353 

AUC ROC : 0.994518 

AUC PR : 0.369345 

Precision : 0.337054 

Recall : 0.967949 

F1 : 0.5 

Total Learning Time : 71.27478328895569 

Total Inference Time : 24.149039268493652 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.938
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.041851064900487754;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.20663378358436005;  // std dev = 0.476, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6905228625340215;  // std dev = 1.719, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04693860593437623;  // std dev = 0.247, 203.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03903124850634155;  // std dev = 1.763, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6331658048710579;  // std dev = 0.979, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.09050213454296745;  // std dev = 5.068, 155.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5623369836442356;  // std dev = 1.066, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7307705321619599;  // std dev = 0.217, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5143190756573158;  // std dev = 0.858, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5973303421940962;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5648457236512695;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.027817148082943007;  // std dev = 4.636, 290.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=34 */
%   | | | else return 0.0298993828339228;  // std dev = 4.175, 120.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5361006531965186;  // std dev = 2.743, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1207887849421013;  // std dev = 0.081, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.12621861825254008;  // std dev = 0.030, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16097227934615796;  // std dev = 0.257, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32349264077102247;  // std dev = 0.547, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.47114634723560633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2998156706865749;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5044741823174823;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6128439657039497;  // std dev = 1.063, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09823874823328231;  // std dev = 1.789, 250.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=5 */
%   | | else return 0.006775440097913033;  // std dev = 0.311, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031886388348289774;  // std dev = 3.061, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25127627600376884;  // std dev = 0.178, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5130818135594407;  // std dev = 1.381, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11792902030554862;  // std dev = 0.143, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.129204517508263;  // std dev = 0.175, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2781277941362164;  // std dev = 1.711, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0877916618010898;  // std dev = 1.725, 244.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05527408306922273;  // std dev = 2.205, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1510840447214308;  // std dev = 1.700, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2562738097682052;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051871784139080196;  // std dev = 0.154, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.002025152292145691;  // std dev = 2.028, 120.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=28 */
%   | | | else return 0.039082711008848754;  // std dev = 2.510, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1433837507245698;  // std dev = 0.189, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2565483186552043;  // std dev = 1.411, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09154909510953128;  // std dev = 0.114, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.399451348262409;  // std dev = 0.801, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11778765123384398;  // std dev = 0.277, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1626839268400932;  // std dev = 1.631, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.16274503300913223;  // std dev = 0.360, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08132850037652181;  // std dev = 0.022, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10029240040189702;  // std dev = 0.022, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.035908052284794836;  // std dev = 0.962, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02250812852801202;  // std dev = 1.280, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19982507078938205;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015130479611330789;  // std dev = 2.010, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.608', 'seconds']
Parameter learned model CLL:-0.110354 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 169, 0], 'true,false,false': [0.3, 36, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.476, 43, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.719, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 184, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.763, 34, 4], 'false,false,false,true': [0.979, 1, 8], 'false,false,false,false': [5.068, 115, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.066, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.217, 0, 3], 'true,false,false': [0.858, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.636, 256, 34], 'false,false,false,false': [4.175, 97, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.743, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.081, 180, 0], 'false,true,false,false': [0.03, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.257, 91, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.547, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.063, 1, 39], 'false,false,true,false': [1.789, 245, 5], 'false,false,false': [0.311, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.061, 154, 82], 'false,true': [0.178, 0, 22], 'false,false,true': [1.381, 1, 52], 'false,false,false,true': [0.143, 58, 0], 'false,false,false,false': [0.175, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.711, 2, 121], 'true,false': [1.725, 237, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.205, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.7, 3, 83], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 171, 19], 'false,false,false,true': [2.028, 92, 28], 'false,false,false,false': [2.51, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.189, 3, 78], 'false,true,true,true': [1.411, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.114, 212, 0], 'false,false,true': [0.801, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.277, 99, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.631, 2, 85], 'true,true,false': [0.36, 0, 19], 'true,false,true': [0.022, 187, 0], 'true,false,false,true': [0.022, 34, 0], 'true,false,false,false': [0.962, 30, 4], 'false,true': [1.28, 46, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.01, 54, 21]}]
{'': [0.2256480993143762, 0.22913580246913645], 'false': [0.23104389834068595, 0.2270431588613417], 'false,true': [7.105427357601002e-16, 4.794144879063176e-17], 'true': [0.009433106575965852, 0.01877246400036619], 'true,false': [-1.708035422500241e-16, 0.08999999999999984], 'false,true,true': [0.0, 0.0]}
{'': [0.03359485795573367, 0.11689180650160952], 'false': [0.06107305691158506, 0.16354468961288526], 'false,false': [0.08183220771814197, 0.17770345289065878], 'false,false,false': [0.10643057012335255, 0.1656811787572395], 'false,false,true': [nan, 0.08183220771814197], 'false,true': [nan, 0.06107305691158506]}
{'': [0.025331002868412257, 0.10690475426097627], 'false': [nan, 0.10690475426097697], 'false,false': [0.001722857864282427, 0.09561464499202803], 'false,false,false': [0.07409984105389608, 0.1452525413313467], 'true': [0.01672286440364471, 0.07407887795196903], 'true,false': [0.015708045428433664, 0.08182301387073546], 'true,true': [0.01672286440364471, nan], 'false,false,true': [0.005276252209364711, -2.3684757858670006e-16]}
{'': [0.04703015192079176, 0.0005630772559407749], 'false': [3.8988372645667694e-05, 0.0007270071022815274], 'false,false': [nan, 0.0007270071022815274], 'false,false,false': [nan, 0.0007270071022815274], 'false,true': [nan, 3.898837264566565e-05], 'false,true,false': [3.681594386547212e-05, 2.510092591809607e-05]}
{'': [0.004117779900880805, 0.08005856654568123], 'false': [0.0019078010650533357, 0.07937924428500288], 'false,false': [0.07505899834887172, 0.0967417195152608], 'false,false,true': [0.02825598603441972, 0.012804221552239784], 'true': [0.0038917496512551725, 0.0], 'false,true': [8.662242926082974e-06, 0.0]}
{'': [0.03970976183178105, 0.08822270427590737], 'false': [0.0014481817956723793, 0.09490704162478575], 'false,false': [0.03596342265801931, 0.00043096256187262483], 'true': [nan, 0.03970976183178141], 'true,false': [nan, 0.03970976183178105], 'false,false,false': [0.00035087882414188006, 0.00043970877950759554]}
{'': [0.04591493351311121, 0.06233053046059526], 'false': [nan, 0.06233053046059519], 'false,false': [nan, 0.06233053046059526], 'false,false,false': [nan, 0.06233053046059526], 'true': [0.023790717027662212, 0.01219213730088155]}
{'': [0.03308264418763587, 0.03943841178666162], 'false': [nan, 0.03943841178666182], 'false,false': [0.023835649201451318, 0.05196864888047977], 'false,false,false': [0.03428039398619949, 0.07685002484121727], 'true': [0.03359841801413578, 9.095767460375048e-05], 'true,false': [9.095767460375048e-05, nan]}
{'': [0.035884943504245294, 0.037830176226092374], 'false': [0.023880885599443093, 0.059997504506353924], 'false,false': [0.016021667869235045, 0.0007766897840835825], 'false,true': [0.0510196100018156, 6.089210417360268e-05], 'false,true,true': [0.0510196100018156, nan], 'false,false,false': [nan, 0.0007766897840835825]}
{'': [0.022509685271452286, 0.038823897911519564], 'false': [0.023063305369856013, 0.053353198102501526], 'false,false': [0.0, 0.05388992168799432], 'false,false,false': [nan, 0.05388992168799433], 'true': [0.026314399827454267, 0.0039451414086477945], 'true,true': [0.03057548332108209, 0.006803119713016094], 'true,false': [2.4865269484156795e-06, 0.01465911836179683], 'true,false,false': [1.4309139677986428e-05, 0.0272312554426835]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 52.022
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.12280344585286924;  // std dev = 0.137, 210.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.14981560176617903;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7254129563327635;  // std dev = 0.210, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7484904017209321;  // std dev = 0.183, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12754927171255387;  // std dev = 1.01e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7271022832706211;  // std dev = 0.017, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.12202956263029179;  // std dev = 2.853, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | | else return 0.0722493041473111;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5493350680093012;  // std dev = 0.125, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.2235056311252215;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4218291305898391;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.3608651153473869;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.566897120476811;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10817366281879379;  // std dev = 0.681, 117.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=1 */
%   | | | else return -0.0048740848620225175;  // std dev = 2.562, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.056344576532709696;  // std dev = 2.547, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.12105528902438645;  // std dev = 3.410, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.4090386958391863;  // std dev = 1.003, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | | else return 0.19532763120032626;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.41616070971402336;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5837057662007902;  // std dev = 0.188, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5365618038293571;  // std dev = 0.258, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6610207195101192;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8110549851590614;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then return -0.10750229682140462;  // std dev = 0.005, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.13977619019755758;  // std dev = 0.275, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32834280474585015;  // std dev = 0.014, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.06816413556434078;  // std dev = 1.359, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.26025004254341394;  // std dev = 0.872, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5278445661463386;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.329493415082118;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4402813240453951;  // std dev = 0.212, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09723596091234349;  // std dev = 0.064, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05436020579545605;  // std dev = 2.444, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.0899125356154041;  // std dev = 2.201, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, F) )
%   | | | then return 0.19307036433027755;  // std dev = 1.326, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.26562348818202286;  // std dev = 0.120, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.27102362365597166;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.024374438134086074;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.05736705642671758;  // std dev = 0.117, 180.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2700374001413808;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.34790352804893415;  // std dev = 1.051, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.5195318398963433;  // std dev = 0.421, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.117284386560962;  // std dev = 0.030, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.20785181157606006;  // std dev = 0.190, 112.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=108 */
%   | else return -0.08313229709115587;  // std dev = 0.061, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B), follows(F, E) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.23641964060858878;  // std dev = 0.963, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.3552903270629791;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.11566722240139587;  // std dev = 0.101, 65.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30986827877429834;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10173450319976184;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19589154429694075;  // std dev = 0.404, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14976384788436617;  // std dev = 1.302, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1867320176354479;  // std dev = 0.024, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.0707868485707429;  // std dev = 0.386, 108.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=1 */
%   | | | else return -0.05535575231955778;  // std dev = 0.293, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.20139687373690918;  // std dev = 1.323, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.08186453804910873;  // std dev = 0.018, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.247543198435915;  // std dev = 0.224, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.08974453690847554;  // std dev = 0.012, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0289119167062155;  // std dev = 1.676, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return -0.014531757460452708;  // std dev = 1.602, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14819236041134023;  // std dev = 0.104, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return -0.12118870409063669;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19277290838640712;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.14406907041102632;  // std dev = 1.232, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.16523439173844912;  // std dev = 0.238, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07221205460305503;  // std dev = 0.051, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.22424777869377874;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3183869491834339;  // std dev = 0.943, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.10745443764059513;  // std dev = 0.035, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1467420877572031;  // std dev = 0.115, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1285249713870893;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1619704076557644;  // std dev = 0.761, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06104731514434179;  // std dev = 0.048, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.010515249522939866;  // std dev = 0.119, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
%   | | else return 0.031758956741412686;  // std dev = 0.122, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.15691125865666813;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.003014202294094793;  // std dev = 0.971, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.061624002605004634;  // std dev = 1.220, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.868', 'seconds']
Refined model CLL: -0.100331


******************************************
Best model found
******************************************
Results 

CLL : -0.100782 

AUC ROC : 0.992783 

AUC PR : 0.342468 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 52.022 

Total Inference Time : 34.934004068374634 

Total revision time: 117.74953289985656
Best scored revision CLL: -0.100331


Results 

CLL : -0.100782 

AUC ROC : 0.992783 

AUC PR : 0.342468 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 117.84368272781371 

Total Inference Time : 34.934004068374634 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.554
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.777791792242368;  // std dev = 2.877, 112.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7249172261074484;  // std dev = 1.004, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028037983721679677;  // std dev = 0.274, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1026178514557451;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7474590973303333;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07197725727925043;  // std dev = 3.315, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5761645671099916;  // std dev = 0.928, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7408221719012159;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8165792717134139;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5863835033812148;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5737801415859513;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.46266903047484015;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.045222925978492264;  // std dev = 3.715, 224.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=21 */
%   | | | else return 0.017484036309545647;  // std dev = 2.849, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.500256164550547;  // std dev = 2.475, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11787099601852255;  // std dev = 0.021, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | | else return -0.12433202900403666;  // std dev = 0.001, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15291147630414026;  // std dev = 0.191, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24827282102892317;  // std dev = 2.521, 80.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | else return 0.40952043212051203;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32652921844822724;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6032260226708573;  // std dev = 0.996, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08080524381850063;  // std dev = 2.326, 235.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=9 */
%   | | else return -0.10676405031542324;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02792219969470246;  // std dev = 3.497, 286.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2704915424826836;  // std dev = 0.096, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5421540327976868;  // std dev = 0.785, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1140199113022978;  // std dev = 0.108, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.11512490151639194;  // std dev = 0.144, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2536443312769772;  // std dev = 2.575, 113.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=107 */
%   | else return -0.07782704349058697;  // std dev = 2.043, 262.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005270263779075048;  // std dev = 0.746, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16368256901881123;  // std dev = 1.947, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return -0.2341600210979192;  // std dev = 0.926, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041749692718325924;  // std dev = 0.154, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021182470461576963;  // std dev = 1.659, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
%   | | | else return 0.04615648447997629;  // std dev = 1.722, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1563524538781524;  // std dev = 0.222, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30137821172227225;  // std dev = 0.719, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0918098096340631;  // std dev = 0.252, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4594559640226683;  // std dev = 0.597, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10189639628335599;  // std dev = 0.152, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18366405533633287;  // std dev = 1.663, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.15101296217928384;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08415492874780026;  // std dev = 0.023, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07839323458927329;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.009005939058937222;  // std dev = 0.513, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.00602815690876186;  // std dev = 1.326, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21169176337165385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06611511484361428;  // std dev = 1.334, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.514', 'seconds']
Parameter learned model CLL:-0.109494 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.877, 9, 103], 'true,false,true': [0.0, 187, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 171, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.097, 0, 4], 'false,false,false,false': [3.315, 55, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.928, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.715, 203, 21], 'false,false,false,false': [2.849, 55, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.475, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 161, 0], 'false,true,false,false': [0.001, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.191, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.521, 7, 73], 'true,false': [0.138, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.996, 1, 23], 'false,false,true,false': [2.326, 226, 9], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.497, 195, 91], 'false,true': [0.096, 0, 13], 'false,false,true': [0.785, 0, 22], 'false,false,false,true': [0.108, 32, 0], 'false,false,false,false': [0.144, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.575, 6, 107], 'true,false': [2.043, 251, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.746, 22, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.947, 4, 80], 'true,false,true': [0.926, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 184, 22], 'false,false,false,true': [1.659, 55, 13], 'false,false,false,false': [1.722, 26, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.222, 4, 77], 'false,true,true,true': [0.719, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.252, 214, 0], 'false,false,true': [0.597, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 49, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.663, 2, 94], 'true,true,false': [0.005, 0, 9], 'true,false,true': [0.023, 188, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.513, 9, 2], 'false,true': [1.326, 24, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.334, 16, 8]}]
{'': [0.2194020837926196, 0.23268698060941828], 'false': [0.23725286160249692, 0.22633136094674564], 'false,true': [-1.4802973661668753e-16, 0.0], 'true': [0.07389987244898195, 0.009388827744210437], 'true,false': [-2.1610758340297165e-16, 0.07638888888888894], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.01214099484714296, 0.09847371115243271], 'false': [0.07508518371362782, 0.13707224429878453], 'false,false': [0.031217481789802246, 0.16745534196913833], 'false,false,false': [0.0023495957148029767, 0.15261337204672323], 'false,true': [nan, 0.07508518371362782], 'false,false,true': [nan, 0.031217481789802246]}
{'': [0.013107846565201106, 0.0914681365401046], 'false': [nan, 0.09146813654010454], 'false,false': [0.05246913580246929, 0.07626310701188957], 'false,false,false': [0.06160454777218667, 0.12297611164375954], 'false,false,true': [1.4802973661668753e-16, 0.09876543209876555], 'true': [0.012327348870422354, 0.01585721822337634], 'true,false': [0.003609188773249117, 0.004317869029089483], 'true,true': [0.012124416185516872, 0.0]}
{'': [0.04712798407842971, 0.0003279857226191396], 'false': [9.348270795179917e-06, 0.0007004136473594375], 'false,false': [nan, 0.0007004136473594375], 'false,false,false': [nan, 0.0007004136473594375], 'false,true': [nan, 9.348270795184188e-06], 'false,true,false': [2.6336489501337833e-06, 3.722748320013849e-08]}
{'': [0.07706291168762003, 0.06392615180886715], 'true': [0.07944104059017994, 0.004737674510001594], 'false': [0.0001489741264917038, 0.060771590884371986], 'false,false': [0.06406139337209255, 1.734723475976807e-18], 'false,false,true': [0.04131818690657293, 0.02302668851136871], 'false,true': [0.0001489741264917038, nan]}
{'': [0.04275083605655097, 0.08023332812298987], 'false': [0.0007029225282396262, 0.08487679152794128], 'false,false': [0.028014466561453354, 0.000453677485670699], 'true': [nan, 0.042750836056551444], 'true,false': [nan, 0.04275083605655097], 'false,false,false': [0.00036218468180219086, 0.000528198192850002]}
{'': [0.05194547063422122, 0.018538172758179736], 'true': [0.058689648419134044, 0.01592824281679377], 'false': [nan, 0.018538172758179736], 'false,false': [nan, 0.018538172758179736], 'false,false,false': [nan, 0.018538172758179736]}
{'': [0.05966496379904653, 0.035093246965645294], 'true': [0.04511118716415274, 0.21421003418970005], 'true,false': [0.21421003418970008, nan], 'false': [nan, 0.03509324696564576], 'false,false': [0.023741826187950166, 0.05653752211167394], 'false,false,false': [0.040481756781480194, 0.08473790697254517]}
{'': [0.04913353034511435, 0.03077390311135745], 'false': [0.019850915042569157, 0.06600822043956875], 'false,false': [0.020961253295594534, 0.00047039595247105317], 'false,true': [0.01613338962337406, 0.00029665122891774955], 'false,true,true': [0.01613338962337406, nan], 'false,false,false': [nan, 0.00047039595247105317]}
{'': [0.024774165904864774, 0.059376895008257574], 'false': [0.048863180438625774, 0.07195289439993814], 'false,false': [0.0, 0.07410322924273599], 'false,false,false': [nan, 0.07410322924273599], 'true': [0.026414104338338185, 0.0015141920556857793], 'true,true': [0.0287988256205625, 2.3629193964135197e-06], 'true,false': [2.802845829339523e-06, 0.011717313263971858], 'true,false,false': [-9.912705577010326e-19, 0.023934083220749903]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 21.929
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.13164698326783528;  // std dev = 0.100, 196.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return 0.6712354154611323;  // std dev = 0.221, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7345524636471275;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return -0.024410298776091372;  // std dev = 3.179, 131.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=16 */
%   | | | else return -0.03256375066860098;  // std dev = 0.798, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return -0.03872628967347054;  // std dev = 0.264, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.09879061825076757;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.562617743013816;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10727233340821081;  // std dev = 3.126, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5731606993781462;  // std dev = 0.129, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( follows(E, A) )
%   | | then return 0.48675872995933145;  // std dev = 0.848, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.42132855808704833;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5770837528820585;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4405287461281272;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10511494401984152;  // std dev = 1.452, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   | | | else return 0.006772508659494545;  // std dev = 2.733, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.022202947775001855;  // std dev = 2.252, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | | else return 0.08604031021411969;  // std dev = 2.277, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3795840497530772;  // std dev = 1.383, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.42947090644675073;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4461577527198605;  // std dev = 0.247, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6360691335347424;  // std dev = 0.207, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7344452817539721;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5688145089407457;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.6466023376993604;  // std dev = 0.915, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.11561403713897385;  // std dev = 0.006, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.15910487280425684;  // std dev = 0.191, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.26865852922911443;  // std dev = 1.674, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.33107456463790974;  // std dev = 0.045, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4956058128663668;  // std dev = 0.265, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.35185170069477856;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.22666210735582223;  // std dev = 0.875, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33262735382743813;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.060080718526340386;  // std dev = 2.529, 227.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=15 */
%   | | | else return 0.061600797185717884;  // std dev = 2.604, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | else return -0.09524888536614357;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2581643863839659;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.11015796689483315;  // std dev = 0.421, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3847732689348431;  // std dev = 1.550, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.0994775432707199;  // std dev = 0.053, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.029407988859866407;  // std dev = 0.200, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28085712072644975;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.07483539046343682;  // std dev = 1.375, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5729895221739103;  // std dev = 0.239, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1256005909059335;  // std dev = 0.034, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.2080976783909402;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return -0.10344680103870603;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2192955337558921;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3428049871553699;  // std dev = 0.097, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A), follows(A, G) )
%   | then return -0.04267039978327754;  // std dev = 0.167, 222.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=24 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4327218120948192;  // std dev = 0.246, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.13480786744677314;  // std dev = 0.167, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.10425591774255338;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.07784339153486944;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19807143435371058;  // std dev = 0.023, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.23298411505085745;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3441111854482952;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return -0.46572219377043383;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03704592396983031;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.07196433149649122;  // std dev = 1.026, 151.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | | else return -0.004852682824680609;  // std dev = 1.987, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -5.958793135031992E-4;  // std dev = 1.059, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.022352721094033266;  // std dev = 1.187, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then return 0.1539032521041396;  // std dev = 0.138, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 9.88114121212602E-4;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.009447398165324306;  // std dev = 0.817, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.07831728539821708;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.27926654951782615;  // std dev = 0.182, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.3423478762531192;  // std dev = 0.177, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.0830336674303583;  // std dev = 0.119, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.33008398924726845;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1182121505574854;  // std dev = 0.022, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10655524538213977;  // std dev = 1.678, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.3543835886974866;  // std dev = 0.634, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.02927383999986257;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07349470365579082;  // std dev = 0.040, 209.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.001795347111546761;  // std dev = 0.147, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else return 0.04074116892697279;  // std dev = 0.163, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.36100880700054894;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.021861799767192363;  // std dev = 0.466, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.020567332674338225;  // std dev = 0.914, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.268', 'seconds']
Refined model CLL: -0.10746


******************************************
Best model found
******************************************
Results 

CLL : -0.103532 

AUC ROC : 0.99443 

AUC PR : 0.360792 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 21.929 

Total Inference Time : 30.654086112976074 

Total revision time: 77.76477523612976
Best scored revision CLL: -0.10746


Results 

CLL : -0.103532 

AUC ROC : 0.99443 

AUC PR : 0.360792 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 77.84091015625 

Total Inference Time : 30.654086112976074 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 7.005
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return -0.06492798797741081;  // std dev = 0.266, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.24148226843284482;  // std dev = 0.486, 60.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149542142057291;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04303360801485644;  // std dev = 0.254, 192.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05831763004218764;  // std dev = 1.786, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5621402690109418;  // std dev = 1.171, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1433048451656735;  // std dev = 4.848, 127.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5738697610691375;  // std dev = 0.367, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7310466155315378;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6279389485614456;  // std dev = 0.167, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5941958500159629;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611337947013959;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018084266784363128;  // std dev = 4.573, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.013706919605454428;  // std dev = 4.187, 124.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5344771739539301;  // std dev = 2.606, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12098997573934028;  // std dev = 0.062, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | | else return -0.1251639743742115;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16368721770992598;  // std dev = 0.273, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2944946408468134;  // std dev = 1.421, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4711445949104933;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29774271247289236;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.505324986113383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6057468077850373;  // std dev = 0.974, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.1034538360117382;  // std dev = 1.793, 252.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=5 */
%   | | else return 0.014803659697929062;  // std dev = 0.308, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02958118979104202;  // std dev = 3.232, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2501890394410282;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5190239133198407;  // std dev = 1.030, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12906362174508176;  // std dev = 0.218, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.1275421896759417;  // std dev = 0.189, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2821631630658398;  // std dev = 1.520, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08988000299176266;  // std dev = 1.671, 251.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037087797531754806;  // std dev = 2.334, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17451562703151086;  // std dev = 0.997, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2559609798797641;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04190405700011121;  // std dev = 0.168, 155.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01666578459363468;  // std dev = 2.153, 131.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=28 */
%   | | | else return 0.026992927682262143;  // std dev = 2.484, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15356010170581075;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26398059534454915;  // std dev = 1.191, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09145089969668985;  // std dev = 0.098, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38765627867302177;  // std dev = 0.793, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11309978428212102;  // std dev = 0.248, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1710635737776113;  // std dev = 1.275, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.12464153546991408;  // std dev = 0.814, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08205098742506294;  // std dev = 0.011, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09391831986034736;  // std dev = 0.033, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.012621759215052892;  // std dev = 0.952, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.021848304004141762;  // std dev = 1.255, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19119354538148992;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020693726902765306;  // std dev = 1.965, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.254', 'seconds']
Parameter learned model CLL:-0.111675 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 157, 0], 'true,false,false': [0.266, 48, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.08e-08, 39, 0], 'false,false': [0.486, 37, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 173, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.786, 45, 4], 'false,false,false,true': [1.171, 2, 8], 'false,false,false,false': [4.848, 87, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.367, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.167, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.573, 228, 34], 'false,false,false,false': [4.187, 101, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.606, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 179, 0], 'false,true,false,false': [0.018, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.273, 92, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.421, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.974, 1, 39], 'false,false,true,false': [1.793, 247, 5], 'false,false,false': [0.308, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.232, 151, 82], 'false,true': [0.18, 0, 22], 'false,false,true': [1.03, 0, 52], 'false,false,false,true': [0.218, 79, 0], 'false,false,false,false': [0.189, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.52, 1, 121], 'true,false': [1.671, 244, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.334, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 136, 19], 'false,false,false,true': [2.153, 103, 28], 'false,false,false,false': [2.484, 60, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.156, 2, 78], 'false,true,true,true': [1.191, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.098, 228, 0], 'false,false,true': [0.793, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.248, 85, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.275, 1, 85], 'true,true,false': [0.814, 1, 19], 'true,false,true': [0.011, 169, 0], 'true,false,false,true': [0.033, 29, 0], 'true,false,false,false': [0.952, 21, 4], 'false,true': [1.255, 45, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.965, 47, 21]}]
{'': [0.225306122448982, 0.2372528616024979], 'false': [0.23803710937500128, 0.23638888888888995], 'false,true': [7.105427357601002e-16, 4.2700885562506023e-17], 'true': [0.01851192595229848, 0.01877246400036619], 'true,false': [-1.3860109097231253e-16, 0.07100591715976316], 'false,true,true': [0.0, 0.0]}
{'': [0.012031757334774879, 0.12261810891132108], 'false': [0.06472745219849635, 0.17005609222106338], 'false,false': [0.06507403849059387, 0.19340120392083834], 'false,false,false': [0.13713057692379368, 0.18502735521723704], 'false,false,true': [nan, 0.06507403849059387], 'false,true': [nan, 0.06472745219849635]}
{'': [0.0038389397505633692, 0.11112175400675088], 'false': [nan, 0.1111217540067502], 'false,false': [0.0017846522475481596, 0.09980544642327244], 'false,false,false': [0.07981791196667934, 0.1413511671742824], 'true': [0.0020113400075715154, 0.009168219604044126], 'true,false': [0.01656311643259249, 0.0034957175693343667], 'true,true': [0.0020113400075715154, nan], 'false,false,true': [0.005465497508117423, -3.552713678800501e-16]}
{'': [0.042719793537368496, 0.0006422440806592874], 'false': [2.2270650031252683e-05, 0.0008082276420663103], 'false,false': [nan, 0.0008082276420663103], 'false,false,false': [nan, 0.0008082276420663103], 'false,true': [nan, 2.227065003125054e-05], 'false,true,false': [2.164179567017834e-05, 1.1225196347219857e-05]}
{'': [0.025630772576633532, 0.07865638715801374], 'false': [0.0019626894465466665, 0.07783833970656194], 'false,false': [0.07372369738903958, 0.09489068496868527], 'false,false,true': [0.02370243274247441, 0.012764189822196044], 'true': [0.0255651476574477, 0.0], 'false,true': [8.900093647512541e-06, 0.0]}
{'': [0.04484289685792671, 0.08399991008743865], 'false': [0.0014716280697622491, 0.08934618476994474], 'false,false': [0.02040217265520365, 0.0006035755332705673], 'true': [nan, 0.044842896857926334], 'true,false': [nan, 0.04484289685792671], 'false,false,false': [0.0006035813307608871, 0.000602242656849944]}
{'': [0.04414781156273995, 0.06727464557466263], 'false': [nan, 0.06727464557466278], 'false,false': [nan, 0.06727464557466263], 'false,false,false': [nan, 0.06727464557466263], 'true': [0.018934637491383154, 0.011129988505981564]}
{'': [0.011706461645112286, 0.04171874476237989], 'false': [nan, 0.041718744762380106], 'false,false': [0.028197307225718747, 0.05071734531341235], 'false,false,false': [0.03538314000728948, 0.07347002268776646], 'true': [0.011828649060635193, 9.550854142457987e-05], 'true,false': [9.550854142457987e-05, nan]}
{'': [0.02435359509396299, 0.035170514710349564], 'false': [0.021107631930546045, 0.06009173268025796], 'false,false': [0.01573197488533782, 0.0007247897514166833], 'false,true': [0.0363814098176292, 4.208933583875206e-05], 'false,true,true': [0.0363814098176292, nan], 'false,false,false': [nan, 0.0007247897514166833]}
{'': [0.022549716412988446, 0.039239652292228366], 'false': [0.02249243635573383, 0.05597996075557414], 'false,false': [0.0, 0.05679585338666802], 'false,false,false': [nan, 0.056795853386667955], 'true': [0.021902925758637507, 0.004589410781217503], 'true,true': [0.018892736014920402, 0.03309834085383659], 'true,false': [7.637181423430371e-07, 0.018446896823262386], 'true,false,false': [3.646640195197873e-05, 0.03625364810439233]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.925
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.04429008929073166;  // std dev = 0.297, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.6778067455442879;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.7770661669802902;  // std dev = 0.158, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.7434703933648444;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6799158440913254;  // std dev = 0.852, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12833581755578538;  // std dev = 0.071, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.04582253391877322;  // std dev = 2.922, 74.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=15 */
%   | | | else return 0.2278489777187;  // std dev = 3.436, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5356328918991512;  // std dev = 0.991, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.5648970869658648;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3827664877547474;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6109978663366948;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5651393100191677;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5767010509361418;  // std dev = 0.191, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11465960413846046;  // std dev = 0.067, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09042478841968998;  // std dev = 3.539, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.16635068044704726;  // std dev = 2.851, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.38196180861165424;  // std dev = 1.701, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | | else return 0.09812243745834588;  // std dev = 1.150, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(F, D) )
%   | | | then return 0.43076630326474485;  // std dev = 0.294, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.29263289963185946;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3199534471400463;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6341841196802811;  // std dev = 0.967, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.7083758828013186;  // std dev = 0.210, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(J, A) )
%   | then return -0.10330555317725763;  // std dev = 0.004, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.1742251779938842;  // std dev = 0.423, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33601649485958207;  // std dev = 0.134, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.3688967982191881;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5408073200778601;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3175330275340248;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5521723340328356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3422360599106911;  // std dev = 0.216, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09424163050642698;  // std dev = 0.053, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0385056981391086;  // std dev = 2.493, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.11963913958046486;  // std dev = 2.529, 51.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.21613610200656272;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.12767463668645512;  // std dev = 1.320, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.2765592032775316;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, F) )
%   | | then return -0.055574294038673366;  // std dev = 0.096, 167.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=14 */
%   | | else return -0.07050166045737738;  // std dev = 0.067, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2667565546889222;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2920008366266762;  // std dev = 0.139, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4766786270882197;  // std dev = 1.014, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.14517289887919071;  // std dev = 0.051, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.22143486632737716;  // std dev = 0.015, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.2667587867264286;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.19247488418885225;  // std dev = 1.233, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.2527640037232322;  // std dev = 0.946, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.08037393003003218;  // std dev = 0.007, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.3561492979806558;  // std dev = 0.394, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11169648890193912;  // std dev = 0.017, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, L) )
%   | | | then return -0.01691525004722417;  // std dev = 1.841, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | | else return 0.014274599075316578;  // std dev = 1.646, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1694900287370833;  // std dev = 0.996, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.17550853019490667;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.18286951873983398;  // std dev = 0.045, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.02428219311935435;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20458796798020215;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2373547604465046;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07463369716658314;  // std dev = 0.006, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.018012280063389053;  // std dev = 1.610, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.006315843180250333;  // std dev = 2.172, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1656194723841639;  // std dev = 0.019, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.18739017885994363;  // std dev = 0.485, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.15805857365520043;  // std dev = 0.120, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0761566312493398;  // std dev = 0.653, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.14969853689151397;  // std dev = 0.163, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.06960990343317397;  // std dev = 0.006, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.30890357595772255;  // std dev = 0.978, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4117499437910674;  // std dev = 0.205, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1306497152796384;  // std dev = 0.041, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09473519492044853;  // std dev = 0.220, 72.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=68 */
%   | | else return 0.1498471970044607;  // std dev = 0.028, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.059442010889854235;  // std dev = 0.042, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17107611505022985;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09022998431218945;  // std dev = 2.47e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return 0.07729594615337826;  // std dev = 0.181, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20263983741480696;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.014641915332616074;  // std dev = 1.382, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.004112664118061306;  // std dev = 1.166, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.193', 'seconds']
Refined model CLL: -0.105855


******************************************
Best model found
******************************************
Results 

CLL : -0.10486 

AUC ROC : 0.992759 

AUC PR : 0.339151 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 25.925 

Total Inference Time : 31.784077644348145 

Total revision time: 88.41709440231324
Best scored revision CLL: -0.105855


Results 

CLL : -0.10486 

AUC ROC : 0.992759 

AUC PR : 0.339151 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 88.49322932243348 

Total Inference Time : 31.784077644348145 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7110979798879095;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03544076419792628;  // std dev = 0.261, 207.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10156830888180603;  // std dev = 0.996, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7483184063034612;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13589480220209027;  // std dev = 3.163, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5325720252561456;  // std dev = 1.765, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7284766065067608;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8182754875136071;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.41101295801023374;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5598044508157923;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5598044508157923;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03864663591802323;  // std dev = 3.641, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return -0.002864890753976459;  // std dev = 2.864, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5143591419178687;  // std dev = 1.919, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11804702344435561;  // std dev = 0.041, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | | else return -0.12145077458232308;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16041061696390238;  // std dev = 0.169, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2798881225031884;  // std dev = 1.897, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.20545758624492852;  // std dev = 0.992, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3028432098536231;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6277084763694444;  // std dev = 0.199, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08684719604174834;  // std dev = 2.315, 258.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=9 */
%   | | else return -0.10715725560787637;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04111212391269946;  // std dev = 3.219, 256.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2553550180183184;  // std dev = 0.155, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5385939096813673;  // std dev = 0.722, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1161881851151575;  // std dev = 0.091, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11851541285796297;  // std dev = 0.148, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24885974048348844;  // std dev = 2.342, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07604760091549648;  // std dev = 2.019, 244.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 7.497618988411922E-4;  // std dev = 0.674, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17520428751346195;  // std dev = 1.398, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24220833383102913;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04665378237726219;  // std dev = 0.154, 203.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02328190001602746;  // std dev = 1.477, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return 0.06032099158045662;  // std dev = 1.695, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19571251116885316;  // std dev = 0.059, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27975448118559837;  // std dev = 0.690, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09079350532346435;  // std dev = 0.046, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44407611861663837;  // std dev = 0.611, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10711539277821802;  // std dev = 0.131, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1785176639773675;  // std dev = 1.295, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.13717482951282514;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08436704815839804;  // std dev = 0.015, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07877480213214076;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.04789750271823673;  // std dev = 0.498, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.023925575371514993;  // std dev = 1.252, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.22657322381758016;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0485551146850257;  // std dev = 1.345, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.700', 'seconds']
Parameter learned model CLL:-0.110343 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 174, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 185, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.996, 25, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [3.163, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.765, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.801, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.641, 182, 21], 'false,false,false,false': [2.864, 64, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.919, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 190, 0], 'false,true,false,false': [0.003, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.169, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.897, 4, 73], 'true,false': [0.992, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.199, 0, 23], 'false,false,true,false': [2.315, 249, 9], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.219, 165, 91], 'false,true': [0.155, 0, 13], 'false,false,true': [0.722, 0, 22], 'false,false,false,true': [0.091, 28, 0], 'false,false,false,false': [0.148, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.342, 5, 107], 'true,false': [2.019, 233, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 80], 'true,false,true': [0.069, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 181, 22], 'false,false,false,true': [1.477, 59, 13], 'false,false,false,false': [1.695, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.059, 0, 77], 'false,true,true,true': [0.69, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.046, 217, 0], 'false,false,true': [0.611, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.131, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.295, 1, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.015, 190, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.498, 21, 2], 'false,true': [1.252, 17, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.345, 18, 8]}]
{'': [0.226448387413001, 0.2239854318418315], 'true': [0.009522928994084868, 0.009949243705966851], 'false': [0.22837370242214483, 0.21811224489795927], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.8376105235175005e-16, 0.07360000000000004], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012192042398310945, 0.0986601719362947], 'false': [0.06811950081733617, 0.16059052880173852], 'false,false': [0.03817654412753794, 0.19022265880109318], 'false,false,false': [0.0024961010525902383, 0.1786275205829045], 'false,true': [nan, 0.06811950081733617], 'false,false,true': [nan, 0.03817654412753794]}
{'': [0.049874799565684184, 0.0918027395881739], 'false': [nan, 0.09180273958817381], 'false,false': [-1.5673736818237505e-16, 0.07743824668668829], 'false,false,false': [0.06528972709301395, 0.10938532008980917], 'true': [0.04262735927912211, 0.1264343613873453], 'true,false': [0.0034371302172760965, 0.1282438915875198], 'true,true': [0.04269266591091436, 0.0], 'false,false,true': [-1.9737298215558337e-16, -1.6653345369377348e-16]}
{'': [0.029007088838940227, 0.00036526555343311556], 'false': [8.882140804469445e-06, 0.0005713434750363655], 'false,false': [nan, 0.0005713434750363655], 'false,false,false': [nan, 0.0005713434750363655], 'false,true': [nan, 8.882140804463652e-06], 'false,true,false': [8.695328597909786e-06, 1.988503343430814e-07]}
{'': [0.056207375726837504, 0.0579118678011354], 'false': [-2.6122894697062506e-17, 0.055136413267076294], 'true': [0.046736022208860674, 0.19686411424475067], 'false,false': [0.0575887616555125, 0.0], 'false,false,true': [0.001730380640312081, 0.020776336347828488], 'false,true': [-2.6122894697062506e-17, nan]}
{'': [0.04046965545017093, 0.0791874473583136], 'false': [0.0018501577490823108, 0.08433762490382093], 'false,false': [0.023702566954712057, 0.0004319340806009264], 'true': [nan, 0.040469655450170984], 'true,false': [nan, 0.04046965545017093], 'false,false,false': [0.0002953562936866153, 0.0005208195429571003]}
{'': [0.049628515910690424, 0.017483884059457094], 'true': [0.04898416559392121, 0.016712891652816454], 'false': [nan, 0.017483884059457094], 'false,false': [nan, 0.017483884059457094], 'false,false,false': [nan, 0.017483884059457094]}
{'': [0.023412868786251293, 0.03325234628191267], 'false': [nan, 0.033252346281912475], 'false,false': [0.023797294659776945, 0.05011403059952831], 'false,false,false': [0.030313426856411543, 0.08982654353310737], 'true': [0.02381945692552933, 0.0023601067153765365], 'true,false': [0.0023601067153765365, nan]}
{'': [0.0034886139431729917, 0.028800930265650334], 'false': [0.017300655986553067, 0.07121034738673845], 'false,false': [0.021975290505096307, 0.0004431146167520107], 'false,true': [0.014893437094421355, 9.910948672413099e-06], 'false,true,true': [0.014893437094421355, nan], 'false,false,false': [nan, 0.0004431146167520107]}
{'': [0.01986046248331716, 0.07047409331406172], 'false': [0.05403686799345169, 0.08748575723733988], 'false,false': [0.25, 0.06957783287969758], 'false,false,false': [nan, 0.06957783287969758], 'true': [0.01626920631417137, 0.0011978383379492466], 'true,true': [0.017661778422360018, 8.518230795145909e-06], 'true,false': [1.2437542440028214e-06, 0.006431388976871554], 'true,false,false': [-8.163404592832033e-19, 0.010779826069486968]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 27.354
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.13169878063652893;  // std dev = 0.100, 197.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7053728108407646;  // std dev = 0.130, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.727586310364558;  // std dev = 0.028, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.03097257430333076;  // std dev = 3.193, 140.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=16 */
%   | | | else return -0.027695217940032428;  // std dev = 0.819, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.019438848351325918;  // std dev = 0.287, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.055134098571855764;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.12656267000042717;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.5675715392205318;  // std dev = 0.820, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1006904939713979;  // std dev = 3.157, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5588631434187642;  // std dev = 0.913, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.5831150913282233;  // std dev = 0.179, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7554615960395421;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5386663759176394;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5580135129618758;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10514836314485768;  // std dev = 1.454, 151.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | | else return -0.009549156133470061;  // std dev = 2.764, 90.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08793463689335879;  // std dev = 2.036, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.2540397759180326;  // std dev = 2.093, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4193573571663748;  // std dev = 0.012, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.37972040201939916;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.4240058293130368;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4889722621123399;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), recursion_accounttype(H, B) )
%   | | | then return 0.40037689182822617;  // std dev = 1.272, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6980652785059168;  // std dev = 0.325, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6427042500276581;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7607450219693951;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12423883366201324;  // std dev = 0.026, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32885535919851727;  // std dev = 0.224, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.48860622351985344;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5652408378168244;  // std dev = 0.230, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3673005088656419;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3229920584822431;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5587320270102629;  // std dev = 0.169, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09375005413126436;  // std dev = 2.083, 276.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=9 */
%   | | else return -0.10605936162712068;  // std dev = 0.061, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.19090709812873546;  // std dev = 1.664, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return -0.07043542892648143;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2581197008715176;  // std dev = 0.017, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.05252430978048337;  // std dev = 0.167, 226.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=22 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3022240098465736;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.05461917744693471;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2850543547841299;  // std dev = 1.089, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5664966582425913;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1201737378553775;  // std dev = 0.031, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.22033236865440492;  // std dev = 0.092, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(D, A) )
%   | | then return 0.3960729367686166;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.21964604763663342;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2135982126563606;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.406826424356826;  // std dev = 0.336, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.09263831231881604;  // std dev = 0.102, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2402167427458125;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07609497746999151;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.07088048465155657;  // std dev = 1.463, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.16798435233282624;  // std dev = 0.987, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.001744586637637835;  // std dev = 0.859, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1911827095347262;  // std dev = 0.053, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2384549805387255;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04750761346185661;  // std dev = 0.137, 246.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2594696766646995;  // std dev = 0.247, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11564752573393398;  // std dev = 0.086, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.023860665668040546;  // std dev = 0.457, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11484716496549495;  // std dev = 1.151, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.15976574002179278;  // std dev = 0.030, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return -0.33985397329348915;  // std dev = 0.987, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.19438521685318833;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.26334775993631165;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.25970404693921234;  // std dev = 0.105, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07875770669304842;  // std dev = 0.061, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09538398405775587;  // std dev = 0.921, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2840979937462199;  // std dev = 1.071, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.12795239462037986;  // std dev = 0.040, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17275536383104367;  // std dev = 0.065, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else return -0.06964408630204869;  // std dev = 0.038, 219.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.15211990682998244;  // std dev = 0.087, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08109012993166753;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.2418106427566109;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10929108457677704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21170196081273351;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09211176534909099;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.056352270563439756;  // std dev = 0.269, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.273', 'seconds']
Refined model CLL: -0.10569


******************************************
Best model found
******************************************
Results 

CLL : -0.102354 

AUC ROC : 0.994662 

AUC PR : 0.358662 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 27.354 

Total Inference Time : 24.632781982421875 

Total revision time: 77.37192693138122
Best scored revision CLL: -0.10569


Results 

CLL : -0.102354 

AUC ROC : 0.994662 

AUC PR : 0.358662 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 102.86618605041504 

Total Inference Time : 24.632781982421875 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.863
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.08302753548872299;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.19148226843284494;  // std dev = 0.471, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7088521306875794;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038199651767809865;  // std dev = 0.259, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06047692010213645;  // std dev = 1.793, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5422198280150732;  // std dev = 1.308, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.08788366594850301;  // std dev = 5.077, 158.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5668321778454682;  // std dev = 1.067, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7359682796318442;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5197753208259281;  // std dev = 0.993, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6017075590014946;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5692692887328307;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012352730937583307;  // std dev = 4.603, 253.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=34 */
%   | | | else return 0.04855069348669162;  // std dev = 4.144, 108.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5274484802128443;  // std dev = 3.046, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12146771215517581;  // std dev = 0.054, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | | else return -0.1271307808566371;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1611846189657381;  // std dev = 0.248, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28858274878250717;  // std dev = 1.765, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.47770445612087187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3045088512857467;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5112529408923718;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6401783637471095;  // std dev = 0.349, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09985261400849492;  // std dev = 1.799, 233.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=5 */
%   | | else return 0.04092139449199018;  // std dev = 0.322, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030620166036275827;  // std dev = 3.239, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2549203402697176;  // std dev = 0.179, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4736330096933195;  // std dev = 2.040, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1177374796077051;  // std dev = 0.166, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.12883204941338738;  // std dev = 0.193, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2949774420592723;  // std dev = 1.352, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.0928916708602854;  // std dev = 1.873, 271.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05302588279375824;  // std dev = 2.365, 74.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19119512327835642;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2561894418360677;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044465607094587974;  // std dev = 0.149, 173.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01126461430650918;  // std dev = 2.240, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | | else return 0.05398667479638793;  // std dev = 2.516, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18235994892201385;  // std dev = 0.059, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.281886328963157;  // std dev = 0.894, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09272932019550909;  // std dev = 0.118, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4000527443171541;  // std dev = 0.811, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11271845780934672;  // std dev = 0.257, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17079687123287238;  // std dev = 1.130, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.10693015572927048;  // std dev = 1.071, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08278608514557378;  // std dev = 0.017, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09658545808943501;  // std dev = 0.040, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.012179026977149073;  // std dev = 0.963, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02661318516794389;  // std dev = 1.286, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21849375265055548;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05126946668037616;  // std dev = 1.919, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.341', 'seconds']
Parameter learned model CLL:-0.112193 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.235, 64, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.471, 46, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 167, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.793, 48, 4], 'false,false,false,true': [1.308, 2, 8], 'false,false,false,false': [5.077, 118, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.067, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.993, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.603, 219, 34], 'false,false,false,false': [4.144, 85, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.046, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 222, 0], 'false,true,false,false': [0.008, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.248, 89, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.765, 4, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.349, 0, 39], 'false,false,true,false': [1.799, 228, 5], 'false,false,false': [0.322, 49, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.239, 154, 82], 'false,true': [0.179, 0, 22], 'false,false,true': [2.04, 3, 52], 'false,false,false,true': [0.166, 74, 0], 'false,false,false,false': [0.193, 75, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.352, 1, 121], 'true,false': [1.873, 264, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.365, 46, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 154, 19], 'false,false,false,true': [2.24, 98, 28], 'false,false,false,false': [2.516, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.059, 0, 78], 'false,true,true,true': [0.894, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 212, 0], 'false,false,true': [0.811, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.257, 87, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.13, 1, 85], 'true,true,false': [1.071, 1, 19], 'true,false,true': [0.017, 132, 0], 'true,false,false,true': [0.04, 33, 0], 'true,false,false,false': [0.963, 21, 4], 'false,true': [1.286, 45, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.919, 38, 21]}]
{'': [0.21674740484429272, 0.2268431001890366], 'false': [0.23104389834068595, 0.22222222222222324], 'false,true': [7.105427357601002e-16, 4.794144879063176e-17], 'true': [0.04376735964986345, 0.017016172860328596], 'true,false': [-1.5801947344358056e-16, 0.055363321799307884], 'false,true,true': [0.0, 0.0]}
{'': [0.023043242861644594, 0.11715381906320033], 'false': [0.06690272886213718, 0.15392610145543553], 'false,false': [0.0618311625874954, 0.17515954741127882], 'false,false,false': [0.1711681640493831, 0.16312518160179243], 'false,true': [nan, 0.06690272886213718], 'false,false,true': [nan, 0.0618311625874954]}
{'': [0.028482358533504514, 0.11830765841340964], 'false': [nan, 0.11830765841340848], 'false,false': [0.0017179451069763627, 0.10706118954996842], 'false,false,false': [0.08376362116922757, 0.15903835922929238], 'true': [0.01674705228799813, 0.09494087974100995], 'true,false': [0.015941777162499154, 0.10958906507453274], 'true,true': [0.01674705228799813, nan], 'false,false,true': [0.005261206890114334, -1.1842378929335003e-16]}
{'': [0.05725435512913544, 0.0004859956427578143], 'false': [1.5241177244490742e-05, 0.0006924304234878676], 'false,false': [nan, 0.0006924304234878676], 'false,false,false': [nan, 0.0006924304234878676], 'false,true': [nan, 1.5241177244490742e-05], 'false,true,false': [1.322090660796185e-05, 1.938731303754067e-06]}
{'': [0.03841263991443505, 0.08449461766694012], 'false': [0.001946837194963675, 0.08430158280254198], 'false,false': [0.07960567785485188, 0.10392428128569577], 'false,false,true': [0.0031165049333020754, 0.013885836356986803], 'true': [0.03845068686382843, 0.0], 'false,true': [8.792455317918612e-06, 0.0]}
{'': [0.044461106097382345, 0.08634755460469608], 'false': [0.0014574695232056395, 0.09090585956584767], 'false,false': [0.07564028118639769, 0.0004646269386251061], 'true': [nan, 0.04446110609738222], 'true,false': [nan, 0.044461106097382345], 'false,false,false': [0.0003712707867907783, 0.0004956066541252587]}
{'': [0.04577523257528671, 0.07560485812222537], 'false': [nan, 0.07560485812222523], 'false,false': [nan, 0.07560485812222537], 'false,false,false': [nan, 0.07560485812222537], 'true': [0.014973218309722239, 0.012939586022351127]}
{'': [0.00018900719618902763, 0.042008409620098275], 'false': [nan, 0.042008409620098705], 'false,false': [0.022284002549452134, 0.05745319600861364], 'false,false,false': [0.0398348407134111, 0.08438300767107948], 'true': [9.19500801307467e-05, 9.201045476310565e-05], 'true,false': [9.201045476310565e-05, nan]}
{'': [0.0035219853193462214, 0.036780911136394985], 'false': [0.0213393466590328, 0.06243470265469572], 'false,false': [0.016452551726858156, 0.0007619669113816217], 'false,true': [0.021016611475123008, 6.59889600386545e-05], 'false,true,true': [0.021016611475123008, nan], 'false,false,false': [nan, 0.0007619669113816217]}
{'': [0.024617621466041167, 0.041363801666123155], 'false': [0.023618920540938993, 0.061241395714205185], 'false,false': [0.0, 0.06240052402278558], 'false,false,false': [nan, 0.062400524022785675], 'true': [0.023482822918916495, 0.005534918999610786], 'true,true': [0.014835986959270603, 0.0573548747903677], 'true,false': [2.239896703865041e-06, 0.01777223247273261], 'true,false,false': [4.74871853276767e-05, 0.037115332368784164]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 27.146
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.12415194985624062;  // std dev = 0.132, 226.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), follows(C, E) )
%   | | then return 0.7218698774904809;  // std dev = 1.69e-07, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.6848328404534436;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.7821622125233774;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7400734186975187;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4371825131648768;  // std dev = 0.691, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.12208832019026244;  // std dev = 0.863, 163.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=1 */
%   | | | else return -0.0012723642204654148;  // std dev = 3.273, 112.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09009568053776831;  // std dev = 3.646, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.154413809439904;  // std dev = 2.909, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5478964201096606;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.6057074140207549;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.40741681226049475;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.29758220229295124;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5687125797901805;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.7560435082787433;  // std dev = 0.152, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11907381211686659;  // std dev = 0.099, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.050905653089551015;  // std dev = 2.861, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.10555210176936641;  // std dev = 3.715, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.40283538662930474;  // std dev = 0.990, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.1781571950128253;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.42893756875465705;  // std dev = 0.028, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.5698105759917524;  // std dev = 0.177, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.42343411883161997;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5722091369341722;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.49294343361990006;  // std dev = 0.201, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6985096580512251;  // std dev = 0.269, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.12276468651302559;  // std dev = 0.026, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.33151536859967845;  // std dev = 0.202, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.24254697283476412;  // std dev = 0.324, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.2790248812598149;  // std dev = 0.962, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32696660962842017;  // std dev = 0.089, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5008666445198469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4489472663416844;  // std dev = 0.195, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0959057983211622;  // std dev = 0.074, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.036920027220329034;  // std dev = 2.798, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.06393294478205223;  // std dev = 2.452, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, D), follows(A, E) )
%   | | | then return 0.21270505391430378;  // std dev = 1.383, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.09006946424845678;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2612606911603542;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then return -0.039182574509926946;  // std dev = 0.141, 136.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=18 */
%   | | else return -0.08755423833585231;  // std dev = 0.088, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27952211569982893;  // std dev = 0.071, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3182887174235499;  // std dev = 0.169, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4949446566744511;  // std dev = 1.090, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12645823475812717;  // std dev = 0.031, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.1601347559747631;  // std dev = 1.373, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.21404940821059523;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.018415923340149055;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.22563074981765902;  // std dev = 0.050, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.059704825571692835;  // std dev = 0.150, 248.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=23 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3427079406832476;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11851467484911121;  // std dev = 0.016, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05811513058789655;  // std dev = 1.471, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | | | else return 0.02737243970066402;  // std dev = 1.915, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.17452445353775914;  // std dev = 0.993, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.18396745186172156;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.05803931494573878;  // std dev = 0.324, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0.35907454896255925;  // std dev = 0.128, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(F, H) )
%   | | then return 0.23018237532090025;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.2206021141179128;  // std dev = 1.018, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.04905215331288118;  // std dev = 0.118, 225.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.013517804009688857;  // std dev = 1.787, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0.04516629310285038;  // std dev = 2.108, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, G) )
%   | | | then return 0.1524843735257703;  // std dev = 1.027, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return -0.16171635741618548;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.17796619552278328;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2131745895518225;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2070777909542528;  // std dev = 0.211, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.07505641018879801;  // std dev = 0.064, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.27643943322050546;  // std dev = 0.947, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.35300442149578254;  // std dev = 1.061, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.13189627435245083;  // std dev = 0.029, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.10839075048609713;  // std dev = 1.675, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   | | | else return -0.13373058070452126;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.3018951984970446;  // std dev = 0.164, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.10801246736918663;  // std dev = 0.887, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.06305607054329389;  // std dev = 0.052, 195.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=4 */
%   else if ( tweets(A, H) )
%   | then return 0.007297004098399958;  // std dev = 0.160, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.28958912733902875;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.023556466427967517;  // std dev = 1.304, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | | | else return 0.06219714508955759;  // std dev = 1.178, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.470', 'seconds']
Refined model CLL: -0.105665


******************************************
Best model found
******************************************
Results 

CLL : -0.101278 

AUC ROC : 0.993055 

AUC PR : 0.386462 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 27.146 

Total Inference Time : 33.38285303115845 

Total revision time: 91.16720598602295
Best scored revision CLL: -0.105665


Results 

CLL : -0.101278 

AUC ROC : 0.993055 

AUC PR : 0.386462 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 116.66146510505676 

Total Inference Time : 33.38285303115845 

