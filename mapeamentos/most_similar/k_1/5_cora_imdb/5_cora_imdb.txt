Starting experiment 5_cora_imdb 

Run: 1
Loading pre-trained trees.
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 1 folds 

Start transfer learning experiment

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos examples: 326
Target test neg examples: 10928

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,true;author(E, D), title(E, A).;false;false
0;true,false;haswordvenue(F, C).;true;false
0;true,false,true;author(G, D), title(G, B).;false;false
0;false;haswordtitle(B, H), haswordauthor(I, H).;true;false
0;false,true;haswordvenue(J, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;false;true
1;true,false;haswordvenue(E, C).;false;false
1;false;haswordtitle(B, F), haswordauthor(G, F).;true;false
1;false,true;haswordvenue(H, F).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;false
2;true;haswordtitle(B, C).;false;true
2;true,false;haswordvenue(E, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;false
3;true;haswordtitle(B, C).;false;true
3;true,false;haswordvenue(E, C).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;true,true;author(E, D), title(E, A).;false;false
4;true,false;author(F, D), title(F, B).;false;true
4;true,false,false;haswordvenue(G, C).;false;false
4;false;haswordtitle(B, H), haswordauthor(I, H).;true;false
4;false,true;haswordvenue(J, H).;false;false
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(A, C).;false;true
5;true,false;author(E, D), title(E, A).;false;true
5;true,false,false;haswordvenue(F, C).;false;false
5;false;haswordtitle(A, G), haswordauthor(H, G).;true;false
5;false,true;author(I, H), title(I, B).;false;true
5;false,true,false;haswordvenue(J, G).;false;false
6;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;false
6;true;haswordvenue(E, C).;true;false
6;true,true;haswordtitle(A, C).;false;true
6;true,true,false;author(F, D), title(F, A).;false;false
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;false;true
7;true,false;haswordvenue(E, C).;false;false
7;false;haswordtitle(A, F), haswordauthor(G, F).;true;false
7;false,true;author(H, G), title(H, B).;false;true
7;false,true,false;haswordvenue(I, F).;false;false
8;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(A, C).;false;true
8;true,false;author(E, D), title(E, A).;false;true
8;true,false,false;haswordvenue(F, C).;false;false
8;false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;false,true;author(I, H), title(I, B).;false;true
8;false,true,false;haswordvenue(J, G).;false;false
9;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;false
9;true;haswordtitle(A, C).;false;true
9;true,false;haswordvenue(E, C).;true;false
9;true,false,true;author(F, D), venue(F, E).;false;false


Model training time 1.7896742820739746
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.2038279474451926;  // std dev = 0,476, 162,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.17504097871349034;  // std dev = 6,063, 163,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.12012241344015548;  // std dev = 6,195, 178,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.10970411195900696;  // std dev = 6,154, 173,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.10230364180337273;  // std dev = 6,101, 167,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.0835228804469956;  // std dev = 6,101, 167,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.05213425972202629;  // std dev = 0,466, 175,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.05913653661589166;  // std dev = 6,092, 166,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 0.055436645815538046;  // std dev = 6,053, 162,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then return 9.089263335179919E-4;  // std dev = 0,459, 185,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Inference time using transfer learning 3.4744224548339844
Parameter learned model CLL:-0.373463 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [0.476, 106, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.063, 107, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.195, 122, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.154, 117, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.101, 111, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.101, 111, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [0.466, 119, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.092, 110, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [6.053, 106, 56], 'false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'genre(C, D)'}, {'true': [0.459, 129, 56], 'false': [0.0, 0, 0]}]
{'': [0.22618503276939517, nan]}
{'': [0.22552598893447245, nan]}
{'': [0.21562933972983256, nan]}
{'': [0.2189181061846359, nan]}
{'': [0.2228835741690256, nan]}
{'': [0.2228835741690268, nan]}
{'': [0.21760000000000015, nan]}
{'': [0.2235447815357825, nan]}
{'': [0.2261850327693954, nan]}
{'': [0.21107377647918216, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- genre(C, D).;true;true
1;;workedunder(A, B) :- genre(C, D).;true;true
2;;workedunder(A, B) :- genre(C, D).;true;true
3;;workedunder(A, B) :- genre(C, D).;true;true
4;;workedunder(A, B) :- genre(C, D).;true;true
5;;workedunder(A, B) :- genre(C, D).;true;true
6;;workedunder(A, B) :- genre(C, D).;true;true
7;;workedunder(A, B) :- genre(C, D).;true;true
8;;workedunder(A, B) :- genre(C, D).;true;true
9;;workedunder(A, B) :- genre(C, D).;true;true


Refining candidate
***************************
Model training time 4.5562567710876465
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,16e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1,58e-07, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8248156017661784;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.12544463852839133;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( female(A) )
%   | | then return 0.6505078949695753;  // std dev = 0,253, 29,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return 0.7261516513800753;  // std dev = 1,26e-07, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.11231637819360618;  // std dev = 8,69e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.5669461984235722;  // std dev = 0,039, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.43546495770421545;  // std dev = 0,009, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.42617342886594717;  // std dev = 0,039, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.3296406121479493;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.10593468704078833;  // std dev = 0,475, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.09232706618802909;  // std dev = 2,58e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.326598589238203;  // std dev = 0,035, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.26071604551630845;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.25919088638130244;  // std dev = 0,030, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.2166431449448994;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08651828995495876;  // std dev = 0,173, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.07839243090346781;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.21259592982677936;  // std dev = 0,026, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1816104518294935;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.0729127233268152;  // std dev = 3,65e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.1791776095274855;  // std dev = 0,023, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15616091356863077;  // std dev = 0,006, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.06813497740743107;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.15432221494580095;  // std dev = 0,021, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.13501452516790294;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(C, D) )
%   then if ( actor(B) )
%   | then return -0.06393414537390907;  // std dev = 1,49e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( movie(E, A), movie(E, B) )
%   | | then return 0.1352390246150681;  // std dev = 0,019, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.12150693842750765;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
Inference time using transfer learning 5.465871095657349
Refined model CLL: -0.066296


******************************************
Best model found
******************************************
Results 

CLL : -0.08477 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 4.5562567710876465 

Total Inference Time : 1.9778285026550293 

Total revision time: 9.882311344146729
Best scored revision CLL: -0.066296


Results 

CLL : -0.08477 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.735892 

Recall : 1.0 

F1 : 0.847854 

Total Learning Time : 11.569103002548218 

Total Inference Time : 1.9778285026550293 

